{"1.17.5": "==========================\n\nThis release contains fixes for bugs reported against NumPy 1.17.4 along with\nsome build improvements. The Python versions supported in this release\nare 3.5-3.8.\n\nDownstream developers should use Cython >= 0.29.14 for Python 3.8 support and\nOpenBLAS >= 3.7 to avoid errors on the Skylake architecture.\n\nIt is recommended that developers interested in the new random bit generators\nupgrade to the NumPy 1.18.x series, as it has updated documentation and\nmany small improvements.\n\n\nContributors\n\nA total of 6 people contributed to this release.  People with a \"+\" by their\nnames contributed a patch for the first time.\n\nCharles Harris\nEric Wieser\nIlhan Polat\nMatti Picus\nMichael Hudson-Doyle\nRalf Gommers\n\n\nPull requests merged\n\nA total of 8 pull requests were merged for this release.\n\n`14593 <https://github.com/numpy/numpy/pull/14593>`__: MAINT: backport Cython API cleanup to 1.17.x, remove docs\n`14937 <https://github.com/numpy/numpy/pull/14937>`__: BUG: fix integer size confusion in handling array's ndmin argument\n`14939 <https://github.com/numpy/numpy/pull/14939>`__: BUILD: remove SSE2 flag from numpy.random builds\n`14993 <https://github.com/numpy/numpy/pull/14993>`__: MAINT: Added Python3.8 branch to dll lib discovery\n`15038 <https://github.com/numpy/numpy/pull/15038>`__: BUG: Fix refcounting in ufunc object loops\n`15067 <https://github.com/numpy/numpy/pull/15067>`__: BUG: Exceptions tracebacks are dropped\n`15175 <https://github.com/numpy/numpy/pull/15175>`__: ENH: Backport improvements to testing functions.\n`15213 <https://github.com/numpy/numpy/pull/15213>`__: REL: Prepare for the NumPy 1.17.5 release.\n\nChecksums\n=========\n\nMD5\n---\n::\n\n    e1d378317e20e340ea46937cbaf45094  numpy-1.17.5-cp35-cp35m-macosx_10_9_intel.whl\n    49b263605ab32a0880fa68b29c2586b0  numpy-1.17.5-cp35-cp35m-manylinux1_i686.whl\n    41b4800ea0b8410919500e264994fb6f  numpy-1.17.5-cp35-cp35m-manylinux1_x86_64.whl\n    7ac18d112a745aabf5059da85de91c57  numpy-1.17.5-cp35-cp35m-win32.whl\n    98dfbe821c010b34771f789dff36ca76  numpy-1.17.5-cp35-cp35m-win_amd64.whl\n    3a14d2a58b72db3020b2d1760aefed5c  numpy-1.17.5-cp36-cp36m-macosx_10_9_x86_64.whl\n    47810aa1c34d9d46581f0b8dee0d1acc  numpy-1.17.5-cp36-cp36m-manylinux1_i686.whl\n    e0f2d037ecd1ecbfa5f3d282bf69fad2  numpy-1.17.5-cp36-cp36m-manylinux1_x86_64.whl\n    addda5c691eaca7b8aa2f8413c936f54  numpy-1.17.5-cp36-cp36m-win32.whl\n    ee5c057451e77ad2aeb1a7ed2df3754d  numpy-1.17.5-cp36-cp36m-win_amd64.whl\n    8be28f068e0b2e9c5202debd6e2bcf6c  numpy-1.17.5-cp37-cp37m-macosx_10_9_x86_64.whl\n    8400685497628c48b292ff8bb8b7286e  numpy-1.17.5-cp37-cp37m-manylinux1_i686.whl\n    a399036176dd2e23e07b866b460b6f20  numpy-1.17.5-cp37-cp37m-manylinux1_x86_64.whl\n    f9497454c4d3a8fdcc62788420f365c7  numpy-1.17.5-cp37-cp37m-win32.whl\n    930a172f90ea6658adf2d25700a98757  numpy-1.17.5-cp37-cp37m-win_amd64.whl\n    1fddb7a3de3aba553614919411e70698  numpy-1.17.5-cp38-cp38-macosx_10_9_x86_64.whl\n    003e1514a5ed31cebb10a8055f7b63e6  numpy-1.17.5-cp38-cp38-manylinux1_i686.whl\n    de8f5f3f602f889fb0ed42cfd5da40bc  numpy-1.17.5-cp38-cp38-manylinux1_x86_64.whl\n    91a89b84875f30f6b8166d4791212aa3  numpy-1.17.5-cp38-cp38-win32.whl\n    ba5eb1d2705e4a169df105ce7a95abc0  numpy-1.17.5-cp38-cp38-win_amd64.whl\n    59d27965e42caedf8913ebe03cf36f87  numpy-1.17.5.tar.gz\n    763a5646fa6eef7a22f4895bca0524f2  numpy-1.17.5.zip\n\nSHA256\n------\n::\n\n    d977a91f7b02b14843562d2e8740acfdfb46996e64985b69b2d404bfa43bc07d  numpy-1.17.5-cp35-cp35m-macosx_10_9_intel.whl\n    6c6cab8089ad39554d7fed04d338e7bd7ea6ac48235a542ea0b37214c8d0a9bc  numpy-1.17.5-cp35-cp35m-manylinux1_i686.whl\n    4760bcc6adaf0d853379d01ce60f320e5ab6d0d719662aef3c460dad3cf79989  numpy-1.17.5-cp35-cp35m-manylinux1_x86_64.whl\n    c3fb7eb84cd455ea2294980e557cc40b0042f7fc7ebab28c74ccae85c8b0c2c4  numpy-1.17.5-cp35-cp35m-win32.whl\n    6167d214a842610d4168311d803f2a6f2c1a9a866b6b370f7408ba508d265add  numpy-1.17.5-cp35-cp35m-win_amd64.whl\n    ca43581440ce2585f83c8d524c3435569b212bf281b7c67395e78260fcffb341  numpy-1.17.5-cp36-cp36m-macosx_10_9_x86_64.whl\n    5347fc1258ebe501d352363da06229fc97785d67423b56a9fd032a8389355781  numpy-1.17.5-cp36-cp36m-manylinux1_i686.whl\n    1739f079e2fcc985cc187aa3ce489d127a02ff12bcc5178269bb7ce5dc860e8f  numpy-1.17.5-cp36-cp36m-manylinux1_x86_64.whl\n    af51bc1d78ddc1588115b73a1d3824440f5cf55c498681e8ac4ab2f28f0efa99  numpy-1.17.5-cp36-cp36m-win32.whl\n    259b5aa0a1d2e63bbe9d985bc8249b515541b9993e1b1540563428f5db7bc389  numpy-1.17.5-cp36-cp36m-win_amd64.whl\n    8ba8ef37b16288dd2390cd9dea3c8470436f6cfe4c665f4640c349e98bae2908  numpy-1.17.5-cp37-cp37m-macosx_10_9_x86_64.whl\n    348efb76a26f9f3235e492813503639731a885aa5780579ee28d688607d188b2  numpy-1.17.5-cp37-cp37m-manylinux1_i686.whl\n    31db2f9604afbf897b23478942074bbbb2513467d2b4b4ac573a7b65c63c073c  numpy-1.17.5-cp37-cp37m-manylinux1_x86_64.whl\n    68bdc37f3ccdc3e945914b3201acd8823ac9dec870ede5371cd5cfedcf5a901a  numpy-1.17.5-cp37-cp37m-win32.whl\n    15db548aade41e32bfb6f6d3d9e91797261197622afe4102f79220d17da2a29f  numpy-1.17.5-cp37-cp37m-win_amd64.whl\n    fc56ec046a2cc3aba91fe29e482c145c17925db1b00eafa924d9e16020a3eb88  numpy-1.17.5-cp38-cp38-macosx_10_9_x86_64.whl\n    73d20aebe518997dce89da356d4b8e4cf60143151c22a0ec76cb00840bb09320  numpy-1.17.5-cp38-cp38-manylinux1_i686.whl\n    aa3dd92c1427e032fe345f054503f45c9fc7883aa7156a60900641259dd78a78  numpy-1.17.5-cp38-cp38-manylinux1_x86_64.whl\n    6338f8fa99ea0b00944a256941eea406089a9c0242f594b69289edd91e2d6192  numpy-1.17.5-cp38-cp38-win32.whl\n    14804866e57322bf601c966e428c271b7e301b631bdfbe0522800483b802bc58  numpy-1.17.5-cp38-cp38-win_amd64.whl\n    ef0801b6feca0f50e56c29b02e0f3e2c8c40963d44c38484e6f47bfcfbf17d32  numpy-1.17.5.tar.gz\n    16507ba6617f62ae3c6ab1725ae6f550331025d4d9a369b83f6d5a470446c342  numpy-1.17.5.zip\n\n\n-----BEGIN PGP SIGNED MESSAGE-----\nHash: SHA256\n\n.. currentmodule:: numpy\n\n==========================\n", "1.17.1": "==========================\n\nThis release contains a number of fixes for bugs reported against NumPy 1.17.0\nalong with a few documentation and build improvements.  The Python versions\nsupported are 3.5-3.7, note that Python 2.7 has been dropped.  Python 3.8b3\nshould work with the released source packages, but there are no future\nguarantees.\n\nDownstream developers should use Cython >= 0.29.13 for Python 3.8 support and\nOpenBLAS >= 3.7 to avoid problems on the Skylake architecture. The NumPy wheels\non PyPI are built from the OpenBLAS development branch in order to avoid those\nproblems.\n\n\nContributors\n============\n\nA total of 17 people contributed to this release.  People with a \"+\" by their\nnames contributed a patch for the first time.\n\n* Alexander Jung +\n* Allan Haldane\n* Charles Harris\n* Eric Wieser\n* Giuseppe Cuccu +\n* Hiroyuki V. Yamazaki\n* J\u00e9r\u00e9mie du Boisberranger\n* Kmol Yuan +\n* Matti Picus\n* Max Bolingbroke +\n* Maxwell Aladago +\n* Oleksandr Pavlyk\n* Peter Andreas Entschev\n* Sergei Lebedev\n* Seth Troisi +\n* Vladimir Pershin +\n* Warren Weckesser\n\n\nPull requests merged\n====================\n\nA total of 24 pull requests were merged for this release.\n\n* `14156 <https://github.com/numpy/numpy/pull/14156>`__: TST: Allow fuss in testing strided/non-strided exp/log loops\n* `14157 <https://github.com/numpy/numpy/pull/14157>`__: BUG: avx2_scalef_ps must be static\n* `14158 <https://github.com/numpy/numpy/pull/14158>`__: BUG: Remove stray print that causes a SystemError on python 3.7.\n* `14159 <https://github.com/numpy/numpy/pull/14159>`__: BUG: Fix DeprecationWarning in python 3.8.\n* `14160 <https://github.com/numpy/numpy/pull/14160>`__: BLD: Add missing gcd/lcm definitions to npy_math.h\n* `14161 <https://github.com/numpy/numpy/pull/14161>`__: DOC, BUILD: cleanups and fix (again) 'build dist'\n* `14166 <https://github.com/numpy/numpy/pull/14166>`__: TST: Add 3.8-dev to travisCI testing.\n* `14194 <https://github.com/numpy/numpy/pull/14194>`__: BUG: Remove the broken clip wrapper (Backport)\n* `14198 <https://github.com/numpy/numpy/pull/14198>`__: DOC: Fix hermitian argument docs in svd.\n* `14199 <https://github.com/numpy/numpy/pull/14199>`__: MAINT: Workaround for Intel compiler bug leading to failing test\n* `14200 <https://github.com/numpy/numpy/pull/14200>`__: TST: Clean up of test_pocketfft.py\n* `14201 <https://github.com/numpy/numpy/pull/14201>`__: BUG: Make advanced indexing result on read-only subclass writeable...\n* `14236 <https://github.com/numpy/numpy/pull/14236>`__: BUG: Fixed default BitGenerator name\n* `14237 <https://github.com/numpy/numpy/pull/14237>`__: ENH: add c-imported modules for freeze analysis in np.random\n* `14296 <https://github.com/numpy/numpy/pull/14296>`__: TST: Pin pytest version to 5.0.1\n* `14301 <https://github.com/numpy/numpy/pull/14301>`__: BUG: Fix leak in the f2py-generated module init and `PyMem_Del`...\n* `14302 <https://github.com/numpy/numpy/pull/14302>`__: BUG: Fix formatting error in exception message\n* `14307 <https://github.com/numpy/numpy/pull/14307>`__: MAINT: random: Match type of SeedSequence.pool_size to DEFAULT_POOL_SIZE.\n* `14308 <https://github.com/numpy/numpy/pull/14308>`__: BUG: Fix numpy.random bug in platform detection\n* `14309 <https://github.com/numpy/numpy/pull/14309>`__: ENH: Enable huge pages in all Linux builds\n* `14330 <https://github.com/numpy/numpy/pull/14330>`__: BUG: Fix segfault in `random.permutation(x)` when x is a string.\n* `14338 <https://github.com/numpy/numpy/pull/14338>`__: BUG: don't fail when lexsorting some empty arrays (#14228)\n* `14339 <https://github.com/numpy/numpy/pull/14339>`__: BUG: Fix misuse of .names and .fields in various places (backport...\n* `14345 <https://github.com/numpy/numpy/pull/14345>`__: BUG: fix behavior of structured_to_unstructured on non-trivial...\n* `14350 <https://github.com/numpy/numpy/pull/14350>`__: REL: Prepare 1.17.1 release\n\nChecksums\n=========\n\nMD5\n- ---\n\n    99708c771ef1efe283ecfd6e30698e1a  numpy-1.17.1-cp35-cp35m-macosx_10_9_x86_64.whl\n    5547039914b3f9541137e8cd9fab57c7  numpy-1.17.1-cp35-cp35m-manylinux1_i686.whl\n    b24c5726f07d5f71d244baaa513af920  numpy-1.17.1-cp35-cp35m-manylinux1_x86_64.whl\n    55070ccaeabbe5036c5a577f4e4cc2b0  numpy-1.17.1-cp35-cp35m-win32.whl\n    086a59eab8e5b8ebbf10755b8a2db677  numpy-1.17.1-cp35-cp35m-win_amd64.whl\n    a7d523ddbe70107016026da5474b7245  numpy-1.17.1-cp36-cp36m-macosx_10_9_x86_64.whl\n    794d982a831762918eba7fa5cf8f16e8  numpy-1.17.1-cp36-cp36m-manylinux1_i686.whl\n    c50ee655b018c315e75a8cb40c771225  numpy-1.17.1-cp36-cp36m-manylinux1_x86_64.whl\n    e1b9c4c90df2b84674dbd6c3875d44b1  numpy-1.17.1-cp36-cp36m-win32.whl\n    0799ddcbb5d28d789d613558bce33b30  numpy-1.17.1-cp36-cp36m-win_amd64.whl\n    7e723a8f451eaa091f09a4df09bdf776  numpy-1.17.1-cp37-cp37m-macosx_10_9_x86_64.whl\n    c4c09c737c19d86829e4f2268d2c8991  numpy-1.17.1-cp37-cp37m-manylinux1_i686.whl\n    c711188365a7677334ddc754778d4822  numpy-1.17.1-cp37-cp37m-manylinux1_x86_64.whl\n    dddef61754e2ddb46cce6a1656d35eb4  numpy-1.17.1-cp37-cp37m-win32.whl\n    5e022462aedaac5e9d7f5b09a8f7e3bb  numpy-1.17.1-cp37-cp37m-win_amd64.whl\n    b2260d650bc28c846e18b7c29a089953  numpy-1.17.1.tar.gz\n    cad292965675fbe8d5fbae3009ab8b58  numpy-1.17.1.zip\n\nSHA256\n- ------\n\n    078c8025da5ab9e8657edc9c2a1e9642e06e953bc7baa2e65c1aa9d9dfb7e98b  numpy-1.17.1-cp35-cp35m-macosx_10_9_x86_64.whl\n    a3f6b3024f8826d8b1490e6e2a9b99e841cd2c375791b1df62991bd8f4c00b89  numpy-1.17.1-cp35-cp35m-manylinux1_i686.whl\n    bede70fd8699695363f39e86c1e869b2c8b74fb5ef135a67b9e1eeebff50322a  numpy-1.17.1-cp35-cp35m-manylinux1_x86_64.whl\n    1c841033f4fe6801648180c3033c45b3235a8bbd09bc7249010f99ea27bb6790  numpy-1.17.1-cp35-cp35m-win32.whl\n    03f2ebcbffcce2dec8860633b89a93e80c6a239d21a77ae8b241450dc21e8c35  numpy-1.17.1-cp35-cp35m-win_amd64.whl\n    c304b2221f33489cd15a915237a84cdfe9420d7e4d4828c78a0820f9d990395c  numpy-1.17.1-cp36-cp36m-macosx_10_9_x86_64.whl\n    0fbfa98c5d5c3c6489cc1e852ec94395d51f35d9ebe70c6850e47f465038cdf4  numpy-1.17.1-cp36-cp36m-manylinux1_i686.whl\n    fb6178b0488b0ce6a54bc4accbdf5225e937383586555604155d64773f6beb2b  numpy-1.17.1-cp36-cp36m-manylinux1_x86_64.whl\n    2c0984a01ddd0aeec89f0ce46ef21d64761048cd76c0074d0658c91f9131f154  numpy-1.17.1-cp36-cp36m-win32.whl\n    8c2d98d0623bd63fb883b65256c00454d5f53127a5a7bcdaa8bdc582814e8cb4  numpy-1.17.1-cp36-cp36m-win_amd64.whl\n    8cb4b6ae45aad6d26712a1ce0a3f2556c5e1484867f9649e03496e45d6a5eba4  numpy-1.17.1-cp37-cp37m-macosx_10_9_x86_64.whl\n    4c166dcb0fff7cb3c0bbc682dfb5061852a2547efb6222e043a7932828c08fb5  numpy-1.17.1-cp37-cp37m-manylinux1_i686.whl\n    93050e73c446c82065b7410221b07682e475ac51887cd9368227a5d944afae80  numpy-1.17.1-cp37-cp37m-manylinux1_x86_64.whl\n    fa5f2a8ef1e07ba258dc07d4dd246de23ef4ab920ae0f3fa2a1cc5e90f0f1888  numpy-1.17.1-cp37-cp37m-win32.whl\n    fd5e830d4dc31658d61a6452cd3e842213594d8c15578cdae6829e36ad9c0930  numpy-1.17.1-cp37-cp37m-win_amd64.whl\n    24d479ebc92f2d1c739622568f0e4d1382c6bf9778505146a370c8e2f5749839  numpy-1.17.1.tar.gz\n    f11331530f0eff69a758d62c2461cd98cdc2eae0147279d8fc86e0464eb7e8ca  numpy-1.17.1.zip\n-----BEGIN PGP SIGNATURE-----\n\niQEzBAEBCAAdFiEEU6DlKD8F4p1xKRSeZ58ig3fFJHsFAl1kdIkACgkQZ58ig3fF\nJHvVEAf/WdyQP9SHOheq3uYLwH9COh+PZd5Gdbrexlwvs20GO4rxWhZ06Aymei2n\n+fW1luoemjmPO71Wp2o3Z1AdDDkgHkISPh2U1codwzgek+pRyPHBa3149c9mZN2U\nI9DrkOdS2SYx+9V9BBBLVzCTtdfK6vVxbM7e8n21BWnhhAeSHaSae35IFNGZPRWa\n3h05YOHQ4JDepxpzxvPziM0ruHuCFI7V1Lq7kt8ZMh/gh5ciedVgKu45bckG8MAf\n+n/d4KatMXszKkBBT2T4zEwMOrGwZoQdU2KnH2DN0sXjrbxGJ/6FUV4rB8A+iEUO\nuAH92c/io7yqGs7KM+5TyJAv3oXG3A==\n=1urn\n-----END PGP SIGNATURE-----\n\n\n-----BEGIN PGP SIGNED MESSAGE-----\nHash: SHA1\n\n==========================\n", "1.15.4": "==========================\n\nThis is a bugfix release for bugs and regressions reported following the 1.15.3\nrelease.  The Python versions supported by this release are 2.7, 3.4-3.7. The\nwheels are linked with OpenBLAS v0.3.0, which should fix some of the linalg\nproblems reported for NumPy 1.14.\n\nCompatibility Note\n==================\n\nThe NumPy 1.15.x OS X wheels released on PyPI no longer contain 32-bit\nbinaries.  That will also be the case in future releases. See\n`11625 <https://github.com/numpy/numpy/issues/11625>`__ for the related\ndiscussion.  Those needing 32-bit support should look elsewhere or build\nfrom source.\n\nContributors\n============\n\nA total of 4 people contributed to this release.  People with a \"+\" by their\nnames contributed a patch for the first time.\n\n* Charles Harris\n* Matti Picus\n* Sebastian Berg\n* bbbbbbbbba +\n\nPull requests merged\n====================\n\nA total of 4 pull requests were merged for this release.\n\n* `12296 <https://github.com/numpy/numpy/pull/12296>`__: BUG: Dealloc cached buffer info\n* `12297 <https://github.com/numpy/numpy/pull/12297>`__: BUG: Fix fill value in masked array '==' and '!=' ops.\n* `12307 <https://github.com/numpy/numpy/pull/12307>`__: DOC: Correct the default value of `optimize` in `numpy.einsum`\n* `12320 <https://github.com/numpy/numpy/pull/12320>`__: REL: Prepare for the NumPy 1.15.4 release\n\nChecksums\n=========\n\nMD5\n- ---\n\n    277c501cfcc67767d73d83a53ba69ecb  numpy-1.15.4-cp27-cp27m-macosx_10_6_intel.macosx_10_9_intel.macosx_10_9_x86_64.macosx_10_10_intel.macosx_10_10_x86_64.whl\n    4c687d8cd7833e0b549d4a20905f29a2  numpy-1.15.4-cp27-cp27m-manylinux1_i686.whl\n    988d0b321d0b7576b105528fc948ddc3  numpy-1.15.4-cp27-cp27m-manylinux1_x86_64.whl\n    ea6bd39d05539847a0ebb12ff955251a  numpy-1.15.4-cp27-cp27mu-manylinux1_i686.whl\n    8ef2d1ea4571cdd0e7e8dfd5128436b4  numpy-1.15.4-cp27-cp27mu-manylinux1_x86_64.whl\n    b550d4cc012623a0c38f1392e08f4805  numpy-1.15.4-cp27-none-win32.whl\n    cb38e4778d9db33199dc7bb6a69ce089  numpy-1.15.4-cp27-none-win_amd64.whl\n    fa0acf5b2f852454346df5486a4ff4d9  numpy-1.15.4-cp34-cp34m-macosx_10_6_intel.macosx_10_9_intel.macosx_10_9_x86_64.macosx_10_10_intel.macosx_10_10_x86_64.whl\n    a7614f6318899aa1bfbc337232c4647f  numpy-1.15.4-cp34-cp34m-manylinux1_i686.whl\n    ae16e02274996ff926a30f23f6d6d7e8  numpy-1.15.4-cp34-cp34m-manylinux1_x86_64.whl\n    c1e1f381de7abc96509d4c5463903755  numpy-1.15.4-cp34-none-win32.whl\n    c269c8f2fce6cefdffe5e3821fc04fb5  numpy-1.15.4-cp34-none-win_amd64.whl\n    8906282c374b9b008c5c6401e5dc750b  numpy-1.15.4-cp35-cp35m-macosx_10_6_intel.macosx_10_9_intel.macosx_10_9_x86_64.macosx_10_10_intel.macosx_10_10_x86_64.whl\n    537949e404ecc5814cb0db534bdfef36  numpy-1.15.4-cp35-cp35m-manylinux1_i686.whl\n    3b10a2fcf8610bbbfe08161e1d9d176e  numpy-1.15.4-cp35-cp35m-manylinux1_x86_64.whl\n    b67621a1c9b8dcac707ca22055629e9f  numpy-1.15.4-cp35-none-win32.whl\n    25b45b69d624cb07a8c05a5f82779b0a  numpy-1.15.4-cp35-none-win_amd64.whl\n    76ed46a4d4e9cdb7076bf1359d9df1d4  numpy-1.15.4-cp36-cp36m-macosx_10_6_intel.macosx_10_9_intel.macosx_10_9_x86_64.macosx_10_10_intel.macosx_10_10_x86_64.whl\n    b98cbad7770856dc12c827dca7c201b4  numpy-1.15.4-cp36-cp36m-manylinux1_i686.whl\n    6293fa6db83849aab3a8b1a606cf3d03  numpy-1.15.4-cp36-cp36m-manylinux1_x86_64.whl\n    21df485f92248c13cab3838762d717f6  numpy-1.15.4-cp36-none-win32.whl\n    c9cf7a267f8d2f57dc6384cc8b9f5acf  numpy-1.15.4-cp36-none-win_amd64.whl\n    1f6990e094c6b2bb47c6a528ac7b1263  numpy-1.15.4-cp37-cp37m-macosx_10_6_intel.macosx_10_9_intel.macosx_10_9_x86_64.macosx_10_10_intel.macosx_10_10_x86_64.whl\n    e79239cd9a3ce3cbfa5e7345bfb2ca56  numpy-1.15.4-cp37-cp37m-manylinux1_i686.whl\n    fc046ba978ef4dd0556af09643c57d30  numpy-1.15.4-cp37-cp37m-manylinux1_x86_64.whl\n    6291159933eb5a7f9c0bf28ae9707739  numpy-1.15.4-cp37-none-win32.whl\n    6097910d675f9e81d5d131b91a6c5c61  numpy-1.15.4-cp37-none-win_amd64.whl\n    b3626fec2f39ab01cad8bbb63a103742  numpy-1.15.4.tar.gz\n    219ac537d12cf06ed14f478662096ebc  numpy-1.15.4.zip\n\nSHA256\n- ------\n\n    18e84323cdb8de3325e741a7a8dd4a82db74fde363dce32b625324c7b32aa6d7  numpy-1.15.4-cp27-cp27m-macosx_10_6_intel.macosx_10_9_intel.macosx_10_9_x86_64.macosx_10_10_intel.macosx_10_10_x86_64.whl\n    154c35f195fd3e1fad2569930ca51907057ae35e03938f89a8aedae91dd1b7c7  numpy-1.15.4-cp27-cp27m-manylinux1_i686.whl\n    4d8d3e5aa6087490912c14a3c10fbdd380b40b421c13920ff468163bc50e016f  numpy-1.15.4-cp27-cp27m-manylinux1_x86_64.whl\n    c857ae5dba375ea26a6228f98c195fec0898a0fd91bcf0e8a0cae6d9faf3eca7  numpy-1.15.4-cp27-cp27mu-manylinux1_i686.whl\n    0df89ca13c25eaa1621a3f09af4c8ba20da849692dcae184cb55e80952c453fb  numpy-1.15.4-cp27-cp27mu-manylinux1_x86_64.whl\n    36e36b6868e4440760d4b9b44587ea1dc1f06532858d10abba98e851e154ca70  numpy-1.15.4-cp27-none-win32.whl\n    99d59e0bcadac4aa3280616591fb7bcd560e2218f5e31d5223a2e12a1425d495  numpy-1.15.4-cp27-none-win_amd64.whl\n    edfa6fba9157e0e3be0f40168eb142511012683ac3dc82420bee4a3f3981b30e  numpy-1.15.4-cp34-cp34m-macosx_10_6_intel.macosx_10_9_intel.macosx_10_9_x86_64.macosx_10_10_intel.macosx_10_10_x86_64.whl\n    b261e0cb0d6faa8fd6863af26d30351fd2ffdb15b82e51e81e96b9e9e2e7ba16  numpy-1.15.4-cp34-cp34m-manylinux1_i686.whl\n    db9814ff0457b46f2e1d494c1efa4111ca089e08c8b983635ebffb9c1573361f  numpy-1.15.4-cp34-cp34m-manylinux1_x86_64.whl\n    df04f4bad8a359daa2ff74f8108ea051670cafbca533bb2636c58b16e962989e  numpy-1.15.4-cp34-none-win32.whl\n    7da99445fd890206bfcc7419f79871ba8e73d9d9e6b82fe09980bc5bb4efc35f  numpy-1.15.4-cp34-none-win_amd64.whl\n    56994e14b386b5c0a9b875a76d22d707b315fa037affc7819cda08b6d0489756  numpy-1.15.4-cp35-cp35m-macosx_10_6_intel.macosx_10_9_intel.macosx_10_9_x86_64.macosx_10_10_intel.macosx_10_10_x86_64.whl\n    ecf81720934a0e18526177e645cbd6a8a21bb0ddc887ff9738de07a1df5c6b61  numpy-1.15.4-cp35-cp35m-manylinux1_i686.whl\n    cf5bb4a7d53a71bb6a0144d31df784a973b36d8687d615ef6a7e9b1809917a9b  numpy-1.15.4-cp35-cp35m-manylinux1_x86_64.whl\n    561ef098c50f91fbac2cc9305b68c915e9eb915a74d9038ecf8af274d748f76f  numpy-1.15.4-cp35-none-win32.whl\n    4f41fd159fba1245e1958a99d349df49c616b133636e0cf668f169bce2aeac2d  numpy-1.15.4-cp35-none-win_amd64.whl\n    416a2070acf3a2b5d586f9a6507bb97e33574df5bd7508ea970bbf4fc563fa52  numpy-1.15.4-cp36-cp36m-macosx_10_6_intel.macosx_10_9_intel.macosx_10_9_x86_64.macosx_10_10_intel.macosx_10_10_x86_64.whl\n    24fd645a5e5d224aa6e39d93e4a722fafa9160154f296fd5ef9580191c755053  numpy-1.15.4-cp36-cp36m-manylinux1_i686.whl\n    23557bdbca3ccbde3abaa12a6e82299bc92d2b9139011f8c16ca1bb8c75d1e95  numpy-1.15.4-cp36-cp36m-manylinux1_x86_64.whl\n    b1853df739b32fa913cc59ad9137caa9cc3d97ff871e2bbd89c2a2a1d4a69451  numpy-1.15.4-cp36-none-win32.whl\n    73a1f2a529604c50c262179fcca59c87a05ff4614fe8a15c186934d84d09d9a5  numpy-1.15.4-cp36-none-win_amd64.whl\n    1e8956c37fc138d65ded2d96ab3949bd49038cc6e8a4494b1515b0ba88c91565  numpy-1.15.4-cp37-cp37m-macosx_10_6_intel.macosx_10_9_intel.macosx_10_9_x86_64.macosx_10_10_intel.macosx_10_10_x86_64.whl\n    a4cc09489843c70b22e8373ca3dfa52b3fab778b57cf81462f1203b0852e95e3  numpy-1.15.4-cp37-cp37m-manylinux1_i686.whl\n    4a22dc3f5221a644dfe4a63bf990052cc674ef12a157b1056969079985c92816  numpy-1.15.4-cp37-cp37m-manylinux1_x86_64.whl\n    b1f44c335532c0581b77491b7715a871d0dd72e97487ac0f57337ccf3ab3469b  numpy-1.15.4-cp37-none-win32.whl\n    a61dc29cfca9831a03442a21d4b5fd77e3067beca4b5f81f1a89a04a71cf93fa  numpy-1.15.4-cp37-none-win_amd64.whl\n    766e09248298e3ad4ae4a805159f358610bbe7dcc7b4a14e5df2128c05655b80  numpy-1.15.4.tar.gz\n    3d734559db35aa3697dadcea492a423118c5c55d176da2f3be9c98d4803fc2a7  numpy-1.15.4.zip\n-----BEGIN PGP SIGNATURE-----\n\niQEcBAEBAgAGBQJb3xldAAoJEGefIoN3xSR7cN8H/0p2O4q0wPKh5PEEC/dxPVFN\n+xZxqWS4PLgj9cdZp+F1UdQQpdnoE0CYPdKXRCpZS0u2BKi/HYCrSOaZn6tt2vXX\nSHPFMn3T78U5FuFth7Q6BBpFs3JGW4baxpcLltiT3OLLGim4FkD7iRJtzs0On3nN\nnxGwewhp2MaXvKRKYje7f2aeciGum5/mM5wtBojAjwDptIVlyqYXY0HEcq8/Vg8x\n3+rjku/V6wvXuVocWzGEjBIuirUcag3ygMqbO7PqaYThB+/hpLTstl0G8MorUKtG\nkZdCiwt5hM9EQJwYHWEAK/oAlOVIUyBxxcd+3Q44B90V5c80/xaiDjqWxTDqkfw=\n=+jjY\n-----END PGP SIGNATURE-----\n\n\n.. currentmodule:: numpy\n\n==========================\n", "1.24.1": "==========================\nNumPy 1.24.1 is a maintenance release that fixes bugs and regressions discovered after the\n1.24.0 release. The Python versions supported by this release are 3.8-3.11.\n\nContributors\n============\n\nA total of 12 people contributed to this release.  People with a \"+\" by their\nnames contributed a patch for the first time.\n\n* Andrew Nelson\n* Ben Greiner +\n* Charles Harris\n* Cl\u00e9ment Robert\n* Matteo Raso\n* Matti Picus\n* Melissa Weber Mendon\u00e7a\n* Miles Cranmer\n* Ralf Gommers\n* Rohit Goswami\n* Sayed Adel\n* Sebastian Berg\n\nPull requests merged\n====================\n\nA total of 18 pull requests were merged for this release.\n\n* `22820 <https://github.com/numpy/numpy/pull/22820>`__: BLD: add workaround in setup.py for newer setuptools\n* `22830 <https://github.com/numpy/numpy/pull/22830>`__: BLD: CIRRUS_TAG redux\n* `22831 <https://github.com/numpy/numpy/pull/22831>`__: DOC: fix a couple typos in 1.23 notes\n* `22832 <https://github.com/numpy/numpy/pull/22832>`__: BUG: Fix refcounting errors found using pytest-leaks\n* `22834 <https://github.com/numpy/numpy/pull/22834>`__: BUG, SIMD: Fix invalid value encountered in several ufuncs\n* `22837 <https://github.com/numpy/numpy/pull/22837>`__: TST: ignore more np.distutils.log imports\n* `22839 <https://github.com/numpy/numpy/pull/22839>`__: BUG: Do not use getdata() in np.ma.masked_invalid\n* `22847 <https://github.com/numpy/numpy/pull/22847>`__: BUG: Ensure correct behavior for rows ending in delimiter in...\n* `22848 <https://github.com/numpy/numpy/pull/22848>`__: BUG, SIMD: Fix the bitmask of the boolean comparison\n* `22857 <https://github.com/numpy/numpy/pull/22857>`__: BLD: Help raspian arm + clang 13 about __builtin_mul_overflow\n* `22858 <https://github.com/numpy/numpy/pull/22858>`__: API: Ensure a full mask is returned for masked_invalid\n* `22866 <https://github.com/numpy/numpy/pull/22866>`__: BUG: Polynomials now copy properly (#22669)\n* `22867 <https://github.com/numpy/numpy/pull/22867>`__: BUG, SIMD: Fix memory overlap in ufunc comparison loops\n* `22868 <https://github.com/numpy/numpy/pull/22868>`__: BUG: Fortify string casts against floating point warnings\n* `22875 <https://github.com/numpy/numpy/pull/22875>`__: TST: Ignore nan-warnings in randomized out tests\n* `22883 <https://github.com/numpy/numpy/pull/22883>`__: MAINT: restore npymath implementations needed for freebsd\n* `22884 <https://github.com/numpy/numpy/pull/22884>`__: BUG: Fix integer overflow in in1d for mixed integer dtypes #22877\n* `22887 <https://github.com/numpy/numpy/pull/22887>`__: BUG: Use whole file for encoding checks with ``charset_normalizer``.\n\nChecksums\n=========\n\nMD5\n---\n::\n\n    9e543db90493d6a00939bd54c2012085  numpy-1.24.1-cp310-cp310-macosx_10_9_x86_64.whl\n    4ebd7af622bf617b4876087e500d7586  numpy-1.24.1-cp310-cp310-macosx_11_0_arm64.whl\n    0c0a3012b438bb455a6c2fadfb1be76a  numpy-1.24.1-cp310-cp310-manylinux_2_17_aarch64.manylinux2014_aarch64.whl\n    0bddb527345449df624d3cb9aa0e1b75  numpy-1.24.1-cp310-cp310-manylinux_2_17_x86_64.manylinux2014_x86_64.whl\n    b246beb773689d97307f7b4c2970f061  numpy-1.24.1-cp310-cp310-win32.whl\n    1f3823999fce821a28dee10ac6fdd721  numpy-1.24.1-cp310-cp310-win_amd64.whl\n    8eedcacd6b096a568e4cb393d43b3ae5  numpy-1.24.1-cp311-cp311-macosx_10_9_x86_64.whl\n    50bddb05acd54b4396100a70522496dd  numpy-1.24.1-cp311-cp311-macosx_11_0_arm64.whl\n    2a76bd9da8a78b44eb816bd70fa3aee3  numpy-1.24.1-cp311-cp311-manylinux_2_17_aarch64.manylinux2014_aarch64.whl\n    9e86658a414272f9749bde39344f9b76  numpy-1.24.1-cp311-cp311-manylinux_2_17_x86_64.manylinux2014_x86_64.whl\n    915dfb89054e1631574a22a9b53a2b25  numpy-1.24.1-cp311-cp311-win32.whl\n    ab7caa2c6c20e1fab977e1a94dede976  numpy-1.24.1-cp311-cp311-win_amd64.whl\n    8246de961f813f5aad89bca3d12f81e7  numpy-1.24.1-cp38-cp38-macosx_10_9_x86_64.whl\n    58366b1a559baa0547ce976e416ed76d  numpy-1.24.1-cp38-cp38-macosx_11_0_arm64.whl\n    a96f29bf106a64f82b9ba412635727d1  numpy-1.24.1-cp38-cp38-manylinux_2_17_aarch64.manylinux2014_aarch64.whl\n    4c32a43bdb85121614ab3e99929e33c7  numpy-1.24.1-cp38-cp38-manylinux_2_17_x86_64.manylinux2014_x86_64.whl\n    09b20949ed21683ad7c9cbdf9ebb2439  numpy-1.24.1-cp38-cp38-win32.whl\n    9e9f1577f874286a8bdff8dc5551eb9f  numpy-1.24.1-cp38-cp38-win_amd64.whl\n    4383c1137f0287df67c364fbdba2bc72  numpy-1.24.1-cp39-cp39-macosx_10_9_x86_64.whl\n    987f22c49b2be084b5d72f88f347d31e  numpy-1.24.1-cp39-cp39-macosx_11_0_arm64.whl\n    848ad020bba075ed8f19072c64dcd153  numpy-1.24.1-cp39-cp39-manylinux_2_17_aarch64.manylinux2014_aarch64.whl\n    864b159e644848bc25f881907dbcf062  numpy-1.24.1-cp39-cp39-manylinux_2_17_x86_64.manylinux2014_x86_64.whl\n    db339ec0b2693cac2d7cf9ca75c334b1  numpy-1.24.1-cp39-cp39-win32.whl\n    fec91d4c85066ad8a93816d71b627701  numpy-1.24.1-cp39-cp39-win_amd64.whl\n    619af9cd4f33b668822ae2350f446a15  numpy-1.24.1-pp38-pypy38_pp73-macosx_10_9_x86_64.whl\n    46f19b4b147f8836c2bd34262fabfffa  numpy-1.24.1-pp38-pypy38_pp73-manylinux_2_17_x86_64.manylinux2014_x86_64.whl\n    e85b245c57a10891b3025579bf0cf298  numpy-1.24.1-pp38-pypy38_pp73-win_amd64.whl\n    dd3aaeeada8e95cc2edf9a3a4aa8b5af  numpy-1.24.1.tar.gz\n\nSHA256\n------\n::\n\n    179a7ef0889ab769cc03573b6217f54c8bd8e16cef80aad369e1e8185f994cd7  numpy-1.24.1-cp310-cp310-macosx_10_9_x86_64.whl\n    b09804ff570b907da323b3d762e74432fb07955701b17b08ff1b5ebaa8cfe6a9  numpy-1.24.1-cp310-cp310-macosx_11_0_arm64.whl\n    f1b739841821968798947d3afcefd386fa56da0caf97722a5de53e07c4ccedc7  numpy-1.24.1-cp310-cp310-manylinux_2_17_aarch64.manylinux2014_aarch64.whl\n    0e3463e6ac25313462e04aea3fb8a0a30fb906d5d300f58b3bc2c23da6a15398  numpy-1.24.1-cp310-cp310-manylinux_2_17_x86_64.manylinux2014_x86_64.whl\n    b31da69ed0c18be8b77bfce48d234e55d040793cebb25398e2a7d84199fbc7e2  numpy-1.24.1-cp310-cp310-win32.whl\n    b07b40f5fb4fa034120a5796288f24c1fe0e0580bbfff99897ba6267af42def2  numpy-1.24.1-cp310-cp310-win_amd64.whl\n    7094891dcf79ccc6bc2a1f30428fa5edb1e6fb955411ffff3401fb4ea93780a8  numpy-1.24.1-cp311-cp311-macosx_10_9_x86_64.whl\n    28e418681372520c992805bb723e29d69d6b7aa411065f48216d8329d02ba032  numpy-1.24.1-cp311-cp311-macosx_11_0_arm64.whl\n    e274f0f6c7efd0d577744f52032fdd24344f11c5ae668fe8d01aac0422611df1  numpy-1.24.1-cp311-cp311-manylinux_2_17_aarch64.manylinux2014_aarch64.whl\n    0044f7d944ee882400890f9ae955220d29b33d809a038923d88e4e01d652acd9  numpy-1.24.1-cp311-cp311-manylinux_2_17_x86_64.manylinux2014_x86_64.whl\n    442feb5e5bada8408e8fcd43f3360b78683ff12a4444670a7d9e9824c1817d36  numpy-1.24.1-cp311-cp311-win32.whl\n    de92efa737875329b052982e37bd4371d52cabf469f83e7b8be9bb7752d67e51  numpy-1.24.1-cp311-cp311-win_amd64.whl\n    b162ac10ca38850510caf8ea33f89edcb7b0bb0dfa5592d59909419986b72407  numpy-1.24.1-cp38-cp38-macosx_10_9_x86_64.whl\n    26089487086f2648944f17adaa1a97ca6aee57f513ba5f1c0b7ebdabbe2b9954  numpy-1.24.1-cp38-cp38-macosx_11_0_arm64.whl\n    caf65a396c0d1f9809596be2e444e3bd4190d86d5c1ce21f5fc4be60a3bc5b36  numpy-1.24.1-cp38-cp38-manylinux_2_17_aarch64.manylinux2014_aarch64.whl\n    b0677a52f5d896e84414761531947c7a330d1adc07c3a4372262f25d84af7bf7  numpy-1.24.1-cp38-cp38-manylinux_2_17_x86_64.manylinux2014_x86_64.whl\n    dae46bed2cb79a58d6496ff6d8da1e3b95ba09afeca2e277628171ca99b99db1  numpy-1.24.1-cp38-cp38-win32.whl\n    6ec0c021cd9fe732e5bab6401adea5a409214ca5592cd92a114f7067febcba0c  numpy-1.24.1-cp38-cp38-win_amd64.whl\n    28bc9750ae1f75264ee0f10561709b1462d450a4808cd97c013046073ae64ab6  numpy-1.24.1-cp39-cp39-macosx_10_9_x86_64.whl\n    84e789a085aabef2f36c0515f45e459f02f570c4b4c4c108ac1179c34d475ed7  numpy-1.24.1-cp39-cp39-macosx_11_0_arm64.whl\n    8e669fbdcdd1e945691079c2cae335f3e3a56554e06bbd45d7609a6cf568c700  numpy-1.24.1-cp39-cp39-manylinux_2_17_aarch64.manylinux2014_aarch64.whl\n    ef85cf1f693c88c1fd229ccd1055570cb41cdf4875873b7728b6301f12cd05bf  numpy-1.24.1-cp39-cp39-manylinux_2_17_x86_64.manylinux2014_x86_64.whl\n    87a118968fba001b248aac90e502c0b13606721b1343cdaddbc6e552e8dfb56f  numpy-1.24.1-cp39-cp39-win32.whl\n    ddc7ab52b322eb1e40521eb422c4e0a20716c271a306860979d450decbb51b8e  numpy-1.24.1-cp39-cp39-win_amd64.whl\n    ed5fb71d79e771ec930566fae9c02626b939e37271ec285e9efaf1b5d4370e7d  numpy-1.24.1-pp38-pypy38_pp73-macosx_10_9_x86_64.whl\n    ad2925567f43643f51255220424c23d204024ed428afc5aad0f86f3ffc080086  numpy-1.24.1-pp38-pypy38_pp73-manylinux_2_17_x86_64.manylinux2014_x86_64.whl\n    cfa1161c6ac8f92dea03d625c2d0c05e084668f4a06568b77a25a89111621566  numpy-1.24.1-pp38-pypy38_pp73-win_amd64.whl\n    2386da9a471cc00a1f47845e27d916d5ec5346ae9696e01a8a34760858fe9dd2  numpy-1.24.1.tar.gz\n\n\n.. currentmodule:: numpy\n\n==========================\n", "1.23.5": "==========================\nNumPy 1.23.5 is a maintenance release that fixes bugs discovered after the\n1.23.4 release and keeps the build infrastructure current.\nThe Python versions supported for this release are 3.8-3.11.\n\nContributors\n============\n\nA total of 7 people contributed to this release.  People with a \"+\" by their\nnames contributed a patch for the first time.\n\n* DWesl\n* Aayush Agrawal +\n* Adam Knapp +\n* Charles Harris\n* Navpreet Singh +\n* Sebastian Berg\n* Tania Allard\n\nPull requests merged\n====================\n\nA total of 10 pull requests were merged for this release.\n\n* `22489 <https://github.com/numpy/numpy/pull/22489>`__: TST, MAINT: Replace most setup with setup_method (also teardown)\n* `22490 <https://github.com/numpy/numpy/pull/22490>`__: MAINT, CI: Switch to cygwin/cygwin-install-actionv2\n* `22494 <https://github.com/numpy/numpy/pull/22494>`__: TST: Make test_partial_iteration_cleanup robust but require leak...\n* `22592 <https://github.com/numpy/numpy/pull/22592>`__: MAINT: Ensure graceful handling of large header sizes\n* `22593 <https://github.com/numpy/numpy/pull/22593>`__: TYP: Spelling alignment for array flag literal\n* `22594 <https://github.com/numpy/numpy/pull/22594>`__: BUG: Fix bounds checking for ``random.logseries``\n* `22595 <https://github.com/numpy/numpy/pull/22595>`__: DEV: Update GH actions and Dockerfile for Gitpod\n* `22596 <https://github.com/numpy/numpy/pull/22596>`__: CI: Only fetch in actions/checkout\n* `22597 <https://github.com/numpy/numpy/pull/22597>`__: BUG: Decrement ref count in gentype_reduce if allocated memory...\n* `22625 <https://github.com/numpy/numpy/pull/22625>`__: BUG: Histogramdd breaks on big arrays in Windows\n\n\nChecksums\n=========\n\nMD5\n---\n::\n\n    8a412b79d975199cefadb465279fd569  numpy-1.23.5-cp310-cp310-macosx_10_9_x86_64.whl\n    1b56e8e6a0516c78473657abf0710538  numpy-1.23.5-cp310-cp310-macosx_11_0_arm64.whl\n    c787f4763c9a5876e86a17f1651ba458  numpy-1.23.5-cp310-cp310-manylinux_2_17_aarch64.manylinux2014_aarch64.whl\n    db07645022e56747ba3f00c2d742232e  numpy-1.23.5-cp310-cp310-manylinux_2_17_x86_64.manylinux2014_x86_64.whl\n    c63a6fb7cc16a13aabc82ec57ac6bb4d  numpy-1.23.5-cp310-cp310-win32.whl\n    3fea9247e1d812600015641941fa273f  numpy-1.23.5-cp310-cp310-win_amd64.whl\n    4222cfb36e5ac9aec348c81b075e2c05  numpy-1.23.5-cp311-cp311-macosx_10_9_x86_64.whl\n    6c7102f185b310ac70a62c13d46f04e6  numpy-1.23.5-cp311-cp311-macosx_11_0_arm64.whl\n    6b7319f66bf7ac01b49e2a32470baf28  numpy-1.23.5-cp311-cp311-manylinux_2_17_aarch64.manylinux2014_aarch64.whl\n    3c60928ddb1f55163801f06ac2229eb0  numpy-1.23.5-cp311-cp311-manylinux_2_17_x86_64.manylinux2014_x86_64.whl\n    6936b6bcfd6474acc7a8c162a9393b3c  numpy-1.23.5-cp311-cp311-win32.whl\n    6c9af68b7b56c12c913678cafbdc44d6  numpy-1.23.5-cp311-cp311-win_amd64.whl\n    699daeac883260d3f182ae4bbbd9bbd2  numpy-1.23.5-cp38-cp38-macosx_10_9_x86_64.whl\n    6c233a36339de0652139e78ef91504d4  numpy-1.23.5-cp38-cp38-macosx_11_0_arm64.whl\n    57d5439556ab5078c91bdeffd9c0036e  numpy-1.23.5-cp38-cp38-manylinux_2_17_aarch64.manylinux2014_aarch64.whl\n    a8045b59187f2e0ccd4294851adbbb8a  numpy-1.23.5-cp38-cp38-manylinux_2_17_x86_64.manylinux2014_x86_64.whl\n    7f38f7e560e4bf41490372ab84aa7a38  numpy-1.23.5-cp38-cp38-win32.whl\n    76095726ba459d7f761b44acf2e56bd1  numpy-1.23.5-cp38-cp38-win_amd64.whl\n    174befd584bc1b03ed87c8f0d149a58e  numpy-1.23.5-cp39-cp39-macosx_10_9_x86_64.whl\n    9cbac793d77278f5d27a7979b64f6b5b  numpy-1.23.5-cp39-cp39-macosx_11_0_arm64.whl\n    6e417b087044e90562183b33f3049b09  numpy-1.23.5-cp39-cp39-manylinux_2_17_aarch64.manylinux2014_aarch64.whl\n    54fa63341eaa6da346d824399e8237f6  numpy-1.23.5-cp39-cp39-manylinux_2_17_x86_64.manylinux2014_x86_64.whl\n    cc14d62a158e99c57f925c86551e45f0  numpy-1.23.5-cp39-cp39-win32.whl\n    bad36b81e7e84bd7a028affa0659d235  numpy-1.23.5-cp39-cp39-win_amd64.whl\n    b4d17d6b79a8354a2834047669651963  numpy-1.23.5-pp38-pypy38_pp73-macosx_10_9_x86_64.whl\n    89f6dc4a4ff63fca6af1223111cd888d  numpy-1.23.5-pp38-pypy38_pp73-manylinux_2_17_x86_64.manylinux2014_x86_64.whl\n    633d574a35b8592bab502ef569b0731e  numpy-1.23.5-pp38-pypy38_pp73-win_amd64.whl\n    8b2692a511a3795f3af8af2cd7566a15  numpy-1.23.5.tar.gz\n\nSHA256\n------\n::\n\n    9c88793f78fca17da0145455f0d7826bcb9f37da4764af27ac945488116efe63  numpy-1.23.5-cp310-cp310-macosx_10_9_x86_64.whl\n    e9f4c4e51567b616be64e05d517c79a8a22f3606499941d97bb76f2ca59f982d  numpy-1.23.5-cp310-cp310-macosx_11_0_arm64.whl\n    7903ba8ab592b82014713c491f6c5d3a1cde5b4a3bf116404e08f5b52f6daf43  numpy-1.23.5-cp310-cp310-manylinux_2_17_aarch64.manylinux2014_aarch64.whl\n    5e05b1c973a9f858c74367553e236f287e749465f773328c8ef31abe18f691e1  numpy-1.23.5-cp310-cp310-manylinux_2_17_x86_64.manylinux2014_x86_64.whl\n    522e26bbf6377e4d76403826ed689c295b0b238f46c28a7251ab94716da0b280  numpy-1.23.5-cp310-cp310-win32.whl\n    dbee87b469018961d1ad79b1a5d50c0ae850000b639bcb1b694e9981083243b6  numpy-1.23.5-cp310-cp310-win_amd64.whl\n    ce571367b6dfe60af04e04a1834ca2dc5f46004ac1cc756fb95319f64c095a96  numpy-1.23.5-cp311-cp311-macosx_10_9_x86_64.whl\n    56e454c7833e94ec9769fa0f86e6ff8e42ee38ce0ce1fa4cbb747ea7e06d56aa  numpy-1.23.5-cp311-cp311-macosx_11_0_arm64.whl\n    5039f55555e1eab31124a5768898c9e22c25a65c1e0037f4d7c495a45778c9f2  numpy-1.23.5-cp311-cp311-manylinux_2_17_aarch64.manylinux2014_aarch64.whl\n    58f545efd1108e647604a1b5aa809591ccd2540f468a880bedb97247e72db387  numpy-1.23.5-cp311-cp311-manylinux_2_17_x86_64.manylinux2014_x86_64.whl\n    b2a9ab7c279c91974f756c84c365a669a887efa287365a8e2c418f8b3ba73fb0  numpy-1.23.5-cp311-cp311-win32.whl\n    0cbe9848fad08baf71de1a39e12d1b6310f1d5b2d0ea4de051058e6e1076852d  numpy-1.23.5-cp311-cp311-win_amd64.whl\n    f063b69b090c9d918f9df0a12116029e274daf0181df392839661c4c7ec9018a  numpy-1.23.5-cp38-cp38-macosx_10_9_x86_64.whl\n    0aaee12d8883552fadfc41e96b4c82ee7d794949e2a7c3b3a7201e968c7ecab9  numpy-1.23.5-cp38-cp38-macosx_11_0_arm64.whl\n    92c8c1e89a1f5028a4c6d9e3ccbe311b6ba53694811269b992c0b224269e2398  numpy-1.23.5-cp38-cp38-manylinux_2_17_aarch64.manylinux2014_aarch64.whl\n    d208a0f8729f3fb790ed18a003f3a57895b989b40ea4dce4717e9cf4af62c6bb  numpy-1.23.5-cp38-cp38-manylinux_2_17_x86_64.manylinux2014_x86_64.whl\n    06005a2ef6014e9956c09ba07654f9837d9e26696a0470e42beedadb78c11b07  numpy-1.23.5-cp38-cp38-win32.whl\n    ca51fcfcc5f9354c45f400059e88bc09215fb71a48d3768fb80e357f3b457e1e  numpy-1.23.5-cp38-cp38-win_amd64.whl\n    8969bfd28e85c81f3f94eb4a66bc2cf1dbdc5c18efc320af34bffc54d6b1e38f  numpy-1.23.5-cp39-cp39-macosx_10_9_x86_64.whl\n    a7ac231a08bb37f852849bbb387a20a57574a97cfc7b6cabb488a4fc8be176de  numpy-1.23.5-cp39-cp39-macosx_11_0_arm64.whl\n    bf837dc63ba5c06dc8797c398db1e223a466c7ece27a1f7b5232ba3466aafe3d  numpy-1.23.5-cp39-cp39-manylinux_2_17_aarch64.manylinux2014_aarch64.whl\n    33161613d2269025873025b33e879825ec7b1d831317e68f4f2f0f84ed14c719  numpy-1.23.5-cp39-cp39-manylinux_2_17_x86_64.manylinux2014_x86_64.whl\n    af1da88f6bc3d2338ebbf0e22fe487821ea4d8e89053e25fa59d1d79786e7481  numpy-1.23.5-cp39-cp39-win32.whl\n    09b7847f7e83ca37c6e627682f145856de331049013853f344f37b0c9690e3df  numpy-1.23.5-cp39-cp39-win_amd64.whl\n    abdde9f795cf292fb9651ed48185503a2ff29be87770c3b8e2a14b0cd7aa16f8  numpy-1.23.5-pp38-pypy38_pp73-macosx_10_9_x86_64.whl\n    f9a909a8bae284d46bbfdefbdd4a262ba19d3bc9921b1e76126b1d21c3c34135  numpy-1.23.5-pp38-pypy38_pp73-manylinux_2_17_x86_64.manylinux2014_x86_64.whl\n    01dd17cbb340bf0fc23981e52e1d18a9d4050792e8fb8363cecbf066a84b827d  numpy-1.23.5-pp38-pypy38_pp73-win_amd64.whl\n    1b1766d6f397c18153d40015ddfc79ddb715cabadc04d2d228d4e5a8bc4ded1a  numpy-1.23.5.tar.gz\n\n\n.. currentmodule:: numpy\n\n==========================\n", "1.23.0": "==========================\n\nThe NumPy 1.23.0 release continues the ongoing work to improve the handling and\npromotion of dtypes, increase the execution speed, clarify the documentation,\nand expire old deprecations. The highlights are:\n\n* Implementation of ``loadtxt`` in C, greatly improving its performance.\n* Exposing DLPack at the Python level for easy data exchange.\n* Changes to the promotion and comparisons of structured dtypes.\n* Improvements to f2py.\n\nSee below for the details,\n\n\nNew functions\n=============\n\n* A masked array specialization of ``ndenumerate`` is now available as\n  ``numpy.ma.ndenumerate``. It provides an alternative to ``numpy.ndenumerate``\n  and skips masked values by default.\n\n  (`gh-20020 <https://github.com/numpy/numpy/pull/20020>`__)\n\n* ``numpy.from_dlpack`` has been added to allow easy exchange of data using the\n  DLPack protocol.  It accepts Python objects that implement the ``__dlpack__``\n  and ``__dlpack_device__`` methods and returns a ndarray object which is\n  generally the view of the data of the input object.\n\n  (`gh-21145 <https://github.com/numpy/numpy/pull/21145>`__)\n\n\nDeprecations\n============\n\n* Setting ``__array_finalize__`` to ``None`` is deprecated.  It must now be\n  a method and may wish to call ``super().__array_finalize__(obj)`` after\n  checking for ``None`` or if the NumPy version is sufficiently new.\n\n  (`gh-20766 <https://github.com/numpy/numpy/pull/20766>`__)\n\n* Using ``axis=32`` (``axis=np.MAXDIMS``) in many cases had the\n  same meaning as ``axis=None``.  This is deprecated and ``axis=None``\n  must be used instead.\n\n  (`gh-20920 <https://github.com/numpy/numpy/pull/20920>`__)\n\n* The hook function ``PyDataMem_SetEventHook`` has been deprecated and the\n  demonstration of its use in tool/allocation_tracking has been removed.  The\n  ability to track allocations is now built-in to python via ``tracemalloc``.\n\n  (`gh-20394 <https://github.com/numpy/numpy/pull/20394>`__)\n\n* ``numpy.distutils`` has been deprecated, as a result of ``distutils`` itself\n  being deprecated. It will not be present in NumPy for Python >= 3.12, and\n  will be removed completely 2 years after the release of Python 3.12 For more\n  details, see :ref:`distutils-status-migration`.\n\n  (`gh-20875 <https://github.com/numpy/numpy/pull/20875>`__)\n\n* ``numpy.loadtxt`` will now give a ``DeprecationWarning`` when an integer\n  ``dtype`` is requested but the value is formatted as a floating point number.\n\n  (`gh-21663 <https://github.com/numpy/numpy/pull/21663>`__)\n\n\nExpired deprecations\n====================\n\n* The ``NpzFile.iteritems()`` and ``NpzFile.iterkeys()`` methods have been\n  removed as part of the continued removal of Python 2 compatibility. This\n  concludes the deprecation from 1.15.\n\n  (`gh-16830 <https://github.com/numpy/numpy/pull/16830>`__)\n\n* The ``alen`` and ``asscalar`` functions have been removed.\n\n  (`gh-20414 <https://github.com/numpy/numpy/pull/20414>`__)\n\n* The ``UPDATEIFCOPY`` array flag has been removed together with the enum\n  ``NPY_ARRAY_UPDATEIFCOPY``. The associated (and deprecated)\n  ``PyArray_XDECREF_ERR`` was also removed. These were all deprecated in 1.14. They\n  are replaced by ``WRITEBACKIFCOPY``, that requires calling\n  ``PyArray_ResoveWritebackIfCopy`` before the array is deallocated.\n\n  (`gh-20589 <https://github.com/numpy/numpy/pull/20589>`__)\n\n* Exceptions will be raised during array-like creation.  When an object raised\n  an exception during access of the special attributes ``__array__`` or\n  ``__array_interface__``, this exception was usually ignored.  This behaviour\n  was deprecated in 1.21, and the exception will now be raised.\n\n  (`gh-20835 <https://github.com/numpy/numpy/pull/20835>`__)\n\n* Multidimensional indexing with non-tuple values is not allowed.  Previously,\n  code such as ``arr[ind]`` where ``ind = [[0, 1], [0, 1]]`` produced a\n  ``FutureWarning`` and was interpreted as a multidimensional index (i.e.,\n  ``arr[tuple(ind)]``). Now this example is treated like an array index over a\n  single dimension (``arr[array(ind)]``).  Multidimensional indexing with\n  anything but a tuple was deprecated in NumPy 1.15.\n\n  (`gh-21029 <https://github.com/numpy/numpy/pull/21029>`__)\n\n* Changing to a dtype of different size in F-contiguous arrays is no longer\n  permitted. Deprecated since Numpy 1.11.0. See below for an extended\n  explanation of the effects of this change.\n\n  (`gh-20722 <https://github.com/numpy/numpy/pull/20722>`__)\n\n\nNew Features\n============\n\ncrackfortran has support for operator and assignment overloading\n----------------------------------------------------------------\n``crackfortran`` parser now understands operator and assignment\ndefinitions in a module. They are added in the ``body`` list of the\nmodule which contains a new key ``implementedby`` listing the names\nof the subroutines or functions implementing the operator or\nassignment.\n\n(`gh-15006 <https://github.com/numpy/numpy/pull/15006>`__)\n\nf2py supports reading access type attributes from derived type statements\n-------------------------------------------------------------------------\nAs a result, one does not need to use ``public`` or ``private`` statements to\nspecify derived type access properties.\n\n(`gh-15844 <https://github.com/numpy/numpy/pull/15844>`__)\n\nNew parameter ``ndmin`` added to ``genfromtxt``\n-------------------------------------------------------------------------\nThis parameter behaves the same as ``ndmin`` from ``numpy.loadtxt``.\n\n(`gh-20500 <https://github.com/numpy/numpy/pull/20500>`__)\n\n``np.loadtxt`` now supports quote character and single converter function\n-------------------------------------------------------------------------\n``numpy.loadtxt`` now supports an additional ``quotechar`` keyword argument\nwhich is not set by default.  Using ``quotechar='\"'`` will read quoted fields\nas used by the Excel CSV dialect.\n\nFurther, it is now possible to pass a single callable rather than a dictionary\nfor the ``converters`` argument.\n\n(`gh-20580 <https://github.com/numpy/numpy/pull/20580>`__)\n\nChanging to dtype of a different size now requires contiguity of only the last axis\n-----------------------------------------------------------------------------------\nPreviously, viewing an array with a dtype of a different item size required that\nthe entire array be C-contiguous. This limitation would unnecessarily force the\nuser to make contiguous copies of non-contiguous arrays before being able to\nchange the dtype.\n\nThis change affects not only ``ndarray.view``, but other construction\nmechanisms, including the discouraged direct assignment to ``ndarray.dtype``.\n\nThis change expires the deprecation regarding the viewing of F-contiguous\narrays, described elsewhere in the release notes.\n\n(`gh-20722 <https://github.com/numpy/numpy/pull/20722>`__)\n\nDeterministic output files for F2PY\n-----------------------------------\nFor F77 inputs, ``f2py`` will generate ``modname-f2pywrappers.f``\nunconditionally, though these may be empty.  For free-form inputs,\n``modname-f2pywrappers.f``, ``modname-f2pywrappers2.f90`` will both be generated\nunconditionally, and may be empty. This allows writing generic output rules in\n``cmake`` or ``meson`` and other build systems. Older behavior can be restored\nby passing ``--skip-empty-wrappers`` to ``f2py``. :ref:`f2py-meson` details usage.\n\n(`gh-21187 <https://github.com/numpy/numpy/pull/21187>`__)\n\n``keepdims`` parameter for ``average``\n--------------------------------------\nThe parameter ``keepdims`` was added to the functions ``numpy.average``\nand ``numpy.ma.average``.  The parameter has the same meaning as it\ndoes in reduction functions such as ``numpy.sum`` or ``numpy.mean``.\n\n(`gh-21485 <https://github.com/numpy/numpy/pull/21485>`__)\n\nNew parameter ``equal_nan`` added to ``np.unique``\n--------------------------------------------------\n``np.unique`` was changed in 1.21 to treat all ``NaN`` values as equal and return\na single ``NaN``. Setting ``equal_nan=False`` will restore pre-1.21 behavior\nto treat ``NaNs`` as unique. Defaults to ``True``.\n\n(`gh-21623 <https://github.com/numpy/numpy/pull/21623>`__)\n\n\nCompatibility notes\n===================\n\n1D ``np.linalg.norm`` preserves float input types, even for scalar results\n--------------------------------------------------------------------------\nPreviously, this would promote to ``float64`` when the ``ord`` argument was\nnot one of the explicitly listed values, e.g. ``ord=3``::\n\n    >>> f32 = np.float32([1, 2])\n    >>> np.linalg.norm(f32, 2).dtype\n    dtype('float32')\n    >>> np.linalg.norm(f32, 3)\n    dtype('float64')   numpy 1.22\n    dtype('float32')   numpy 1.23\n\nThis change affects only ``float32`` and ``float16`` vectors with ``ord``\nother than ``-Inf``, ``0``, ``1``, ``2``, and ``Inf``.\n\n(`gh-17709 <https://github.com/numpy/numpy/pull/17709>`__)\n\nChanges to structured (void) dtype promotion and comparisons\n------------------------------------------------------------\nIn general, NumPy now defines correct, but slightly limited, promotion for\nstructured dtypes by promoting the subtypes of each field instead of raising\nan exception::\n\n    >>> np.result_type(np.dtype(\"i,i\"), np.dtype(\"i,d\"))\n    dtype([('f0', '<i4'), ('f1', '<f8')])\n\nFor promotion matching field names, order, and titles are enforced, however\npadding is ignored.\nPromotion involving structured dtypes now always ensures native byte-order for\nall fields (which may change the result of ``np.concatenate``)\nand ensures that the result will be \"packed\", i.e. all fields are ordered\ncontiguously and padding is removed.\nSee :ref:`structured_dtype_comparison_and_promotion` for further details.\n\nThe ``repr`` of aligned structures will now never print the long form including\n``offsets`` and ``itemsize`` unless the structure includes padding not\nguaranteed by ``align=True``.\n\nIn alignment with the above changes to the promotion logic, the\ncasting safety has been updated:\n\n* ``\"equiv\"`` enforces matching names and titles. The itemsize\n  is allowed to differ due to padding.\n* ``\"safe\"`` allows mismatching field names and titles\n* The cast safety is limited by the cast safety of each included\n  field.\n* The order of fields is used to decide cast safety of each\n  individual field.  Previously, the field names were used and\n  only unsafe casts were possible when names mismatched.\n\nThe main important change here is that name mismatches are now\nconsidered \"safe\" casts.\n\n(`gh-19226 <https://github.com/numpy/numpy/pull/19226>`__)\n\n``NPY_RELAXED_STRIDES_CHECKING`` has been removed\n-------------------------------------------------\nNumPy cannot be compiled with ``NPY_RELAXED_STRIDES_CHECKING=0``\nanymore.  Relaxed strides have been the default for many years and\nthe option was initially introduced to allow a smoother transition.\n\n(`gh-20220 <https://github.com/numpy/numpy/pull/20220>`__)\n\n``np.loadtxt`` has recieved several changes\n-------------------------------------------\n\nThe row counting of ``numpy.loadtxt`` was fixed.  ``loadtxt`` ignores fully\nempty lines in the file, but counted them towards ``max_rows``.\nWhen ``max_rows`` is used and the file contains empty lines, these will now\nnot be counted.  Previously, it was possible that the result contained fewer\nthan ``max_rows`` rows even though more data was available to be read.\nIf the old behaviour is required, ``itertools.islice`` may be used::\n\n    import itertools\n    lines = itertools.islice(open(\"file\"), 0, max_rows)\n    result = np.loadtxt(lines, ...)\n\nWhile generally much faster and improved, ``numpy.loadtxt`` may now fail to\nconverter certain strings to numbers that were previously successfully read.\nThe most important cases for this are:\n\n* Parsing floating point values such as ``1.0`` into integers is now deprecated.\n* Parsing hexadecimal floats such as ``0x3p3`` will fail\n* An ``_`` was previously accepted as a thousands delimiter ``100_000``.\n  This will now result in an error.\n\nIf you experience these limitations, they can all be worked around by passing\nappropriate ``converters=``.  NumPy now supports passing a single converter\nto be used for all columns to make this more convenient.\nFor example, ``converters=float.fromhex`` can read hexadecimal float numbers\nand ``converters=int`` will be able to read ``100_000``.\n\nFurther, the error messages have been generally improved.  However, this means\nthat error types may differ.  In particularly, a ``ValueError`` is now always\nraised when parsing of a single entry fails.\n\n(`gh-20580 <https://github.com/numpy/numpy/pull/20580>`__)\n\n\nImprovements\n============\n\n``ndarray.__array_finalize__`` is now callable\n----------------------------------------------\nThis means subclasses can now use ``super().__array_finalize__(obj)``\nwithout worrying whether ``ndarray`` is their superclass or not.\nThe actual call remains a no-op.\n\n(`gh-20766 <https://github.com/numpy/numpy/pull/20766>`__)\n\nAdd support for VSX4/Power10\n----------------------------------------------\nWith VSX4/Power10 enablement, the new instructions available in\nPower ISA 3.1 can be used to accelerate some NumPy operations,\ne.g., floor_divide, modulo, etc.\n\n(`gh-20821 <https://github.com/numpy/numpy/pull/20821>`__)\n\n``np.fromiter`` now accepts objects and subarrays\n-------------------------------------------------\nThe ``numpy.fromiter`` function now supports object and\nsubarray dtypes. Please see he function documentation for\nexamples.\n\n(`gh-20993 <https://github.com/numpy/numpy/pull/20993>`__)\n\nMath C library feature detection now uses correct signatures\n------------------------------------------------------------\nCompiling is preceded by a detection phase to determine whether the\nunderlying libc supports certain math operations. Previously this code\ndid not respect the proper signatures. Fixing this enables compilation\nfor the ``wasm-ld`` backend (compilation for web assembly) and reduces\nthe number of warnings.\n\n(`gh-21154 <https://github.com/numpy/numpy/pull/21154>`__)\n\n``np.kron`` now maintains subclass information\n----------------------------------------------\n``np.kron`` maintains subclass information now such as masked arrays\nwhile computing the Kronecker product of the inputs\n\n.. code-block:: python\n\n    >>> x = ma.array([[1, 2], [3, 4]], mask=[[0, 1], [1, 0]])\n    >>> np.kron(x,x)\n    masked_array(\n      data=[[1, --, --, --],\n            [--, 4, --, --],\n            [--, --, 4, --],\n            [--, --, --, 16]],\n      mask=[[False,  True,  True,  True],\n            [ True, False,  True,  True],\n            [ True,  True, False,  True],\n            [ True,  True,  True, False]],\n      fill_value=999999)\n\n.. warning::\n    ``np.kron`` output now follows ``ufunc`` ordering (``multiply``)\n    to determine the output class type\n\n    .. code-block:: python\n\n        >>> class myarr(np.ndarray):\n        >>>    __array_priority__ = -1\n        >>> a = np.ones([2, 2])\n        >>> ma = myarray(a.shape, a.dtype, a.data)\n        >>> type(np.kron(a, ma)) == np.ndarray\n        False  Before it was True\n        >>> type(np.kron(a, ma)) == myarr\n        True\n\n(`gh-21262 <https://github.com/numpy/numpy/pull/21262>`__)\n\n\nPerformance improvements and changes\n====================================\n\nFaster ``np.loadtxt``\n---------------------\n``numpy.loadtxt`` is now generally much faster than previously as most of it\nis now implemented in C.\n\n(`gh-20580 <https://github.com/numpy/numpy/pull/20580>`__)\n\nFaster reduction operators\n--------------------------\nReduction operations like ``numpy.sum``, ``numpy.prod``, ``numpy.add.reduce``,\n``numpy.logical_and.reduce`` on contiguous integer-based arrays are now\nmuch faster.\n\n(`gh-21001 <https://github.com/numpy/numpy/pull/21001>`__)\n\nFaster ``np.where``\n-------------------\n``numpy.where`` is now much faster than previously on unpredictable/random\ninput data.\n\n(`gh-21130 <https://github.com/numpy/numpy/pull/21130>`__)\n\nFaster operations on NumPy scalars\n----------------------------------\nMany operations on NumPy scalars are now significantly faster, although\nrare operations (e.g. with 0-D arrays rather than scalars) may be slower\nin some cases.\nHowever, even with these improvements users who want the best performance\nfor their scalars, may want to convert a known NumPy scalar into a Python\none using ``scalar.item()``.\n\n(`gh-21188 <https://github.com/numpy/numpy/pull/21188>`__)\n\nFaster ``np.kron``\n------------------\n``numpy.kron`` is about 80% faster as the product is now computed\nusing broadcasting.\n\n(`gh-21354 <https://github.com/numpy/numpy/pull/21354>`__)\n\nChecksums\n=========\n\nMD5\n---\n::\n\n    21839aaeab3088e685d7c8d0e1856a23  numpy-1.23.0-cp310-cp310-macosx_10_9_x86_64.whl\n    e657684ea521c50de0197aabfb44e78d  numpy-1.23.0-cp310-cp310-macosx_11_0_arm64.whl\n    219017660861fdec59b852630e3fef2a  numpy-1.23.0-cp310-cp310-manylinux_2_17_aarch64.manylinux2014_aarch64.whl\n    03c3df83b8327910482a7d24ebe9213b  numpy-1.23.0-cp310-cp310-manylinux_2_17_x86_64.manylinux2014_x86_64.whl\n    b8f06ce4054acc147845a9643bd36082  numpy-1.23.0-cp310-cp310-win32.whl\n    877322db5a62634eef4e351db99a070d  numpy-1.23.0-cp310-cp310-win_amd64.whl\n    7bb54f95e74306eff733466b6343695f  numpy-1.23.0-cp38-cp38-macosx_10_9_x86_64.whl\n    5514a0030e5cf065e916950737d6d129  numpy-1.23.0-cp38-cp38-macosx_11_0_arm64.whl\n    22d43465791814fe50e03ded430bd80c  numpy-1.23.0-cp38-cp38-manylinux_2_17_aarch64.manylinux2014_aarch64.whl\n    771a1f7e488327645bac5b54dd2f6286  numpy-1.23.0-cp38-cp38-manylinux_2_17_x86_64.manylinux2014_x86_64.whl\n    449bfa2d55aff3e722d2fc85a7549620  numpy-1.23.0-cp38-cp38-win32.whl\n    60c7d27cf92dadb6d206df6e65b1032f  numpy-1.23.0-cp38-cp38-win_amd64.whl\n    dc2a5c5d2223f7b45a45f7f760d0f2db  numpy-1.23.0-cp39-cp39-macosx_10_9_x86_64.whl\n    ba5729353c3521ed7ee72c796e77a546  numpy-1.23.0-cp39-cp39-macosx_11_0_arm64.whl\n    06d5cd49de096482944dead2eb92d783  numpy-1.23.0-cp39-cp39-manylinux_2_17_aarch64.manylinux2014_aarch64.whl\n    6ff50a994f6006349b5f1415e4da6f45  numpy-1.23.0-cp39-cp39-manylinux_2_17_x86_64.manylinux2014_x86_64.whl\n    49185f219512403ef23d43d6f2adbefd  numpy-1.23.0-cp39-cp39-win32.whl\n    ff126a84dcf91700f9ca13ff606d109f  numpy-1.23.0-cp39-cp39-win_amd64.whl\n    e1462428487dc599cdffb723dec642c4  numpy-1.23.0-pp38-pypy38_pp73-macosx_10_9_x86_64.whl\n    fef1d20265135737fbc0f91ca4441990  numpy-1.23.0-pp38-pypy38_pp73-manylinux_2_17_x86_64.manylinux2014_x86_64.whl\n    4f8142288202a32c682d01921d6c2c78  numpy-1.23.0-pp38-pypy38_pp73-win_amd64.whl\n    513e4241d06b8fae5732cd049cdf3b57  numpy-1.23.0.tar.gz\n\nSHA256\n------\n::\n\n    58bfd40eb478f54ff7a5710dd61c8097e169bc36cc68333d00a9bcd8def53b38  numpy-1.23.0-cp310-cp310-macosx_10_9_x86_64.whl\n    196cd074c3f97c4121601790955f915187736f9cf458d3ee1f1b46aff2b1ade0  numpy-1.23.0-cp310-cp310-macosx_11_0_arm64.whl\n    f1d88ef79e0a7fa631bb2c3dda1ea46b32b1fe614e10fedd611d3d5398447f2f  numpy-1.23.0-cp310-cp310-manylinux_2_17_aarch64.manylinux2014_aarch64.whl\n    d54b3b828d618a19779a84c3ad952e96e2c2311b16384e973e671aa5be1f6187  numpy-1.23.0-cp310-cp310-manylinux_2_17_x86_64.manylinux2014_x86_64.whl\n    2b2da66582f3a69c8ce25ed7921dcd8010d05e59ac8d89d126a299be60421171  numpy-1.23.0-cp310-cp310-win32.whl\n    97a76604d9b0e79f59baeca16593c711fddb44936e40310f78bfef79ee9a835f  numpy-1.23.0-cp310-cp310-win_amd64.whl\n    d8cc87bed09de55477dba9da370c1679bd534df9baa171dd01accbb09687dac3  numpy-1.23.0-cp38-cp38-macosx_10_9_x86_64.whl\n    f0f18804df7370571fb65db9b98bf1378172bd4e962482b857e612d1fec0f53e  numpy-1.23.0-cp38-cp38-macosx_11_0_arm64.whl\n    ac86f407873b952679f5f9e6c0612687e51547af0e14ddea1eedfcb22466babd  numpy-1.23.0-cp38-cp38-manylinux_2_17_aarch64.manylinux2014_aarch64.whl\n    ae8adff4172692ce56233db04b7ce5792186f179c415c37d539c25de7298d25d  numpy-1.23.0-cp38-cp38-manylinux_2_17_x86_64.manylinux2014_x86_64.whl\n    fe8b9683eb26d2c4d5db32cd29b38fdcf8381324ab48313b5b69088e0e355379  numpy-1.23.0-cp38-cp38-win32.whl\n    5043bcd71fcc458dfb8a0fc5509bbc979da0131b9d08e3d5f50fb0bbb36f169a  numpy-1.23.0-cp38-cp38-win_amd64.whl\n    1c29b44905af288b3919803aceb6ec7fec77406d8b08aaa2e8b9e63d0fe2f160  numpy-1.23.0-cp39-cp39-macosx_10_9_x86_64.whl\n    98e8e0d8d69ff4d3fa63e6c61e8cfe2d03c29b16b58dbef1f9baa175bbed7860  numpy-1.23.0-cp39-cp39-macosx_11_0_arm64.whl\n    79a506cacf2be3a74ead5467aee97b81fca00c9c4c8b3ba16dbab488cd99ba10  numpy-1.23.0-cp39-cp39-manylinux_2_17_aarch64.manylinux2014_aarch64.whl\n    092f5e6025813e64ad6d1b52b519165d08c730d099c114a9247c9bb635a2a450  numpy-1.23.0-cp39-cp39-manylinux_2_17_x86_64.manylinux2014_x86_64.whl\n    d6ca8dabe696c2785d0c8c9b0d8a9b6e5fdbe4f922bde70d57fa1a2848134f95  numpy-1.23.0-cp39-cp39-win32.whl\n    fc431493df245f3c627c0c05c2bd134535e7929dbe2e602b80e42bf52ff760bc  numpy-1.23.0-cp39-cp39-win_amd64.whl\n    f9c3fc2adf67762c9fe1849c859942d23f8d3e0bee7b5ed3d4a9c3eeb50a2f07  numpy-1.23.0-pp38-pypy38_pp73-macosx_10_9_x86_64.whl\n    d0d2094e8f4d760500394d77b383a1b06d3663e8892cdf5df3c592f55f3bff66  numpy-1.23.0-pp38-pypy38_pp73-manylinux_2_17_x86_64.manylinux2014_x86_64.whl\n    94b170b4fa0168cd6be4becf37cb5b127bd12a795123984385b8cd4aca9857e5  numpy-1.23.0-pp38-pypy38_pp73-win_amd64.whl\n    bd3fa4fe2e38533d5336e1272fc4e765cabbbde144309ccee8675509d5cd7b05  numpy-1.23.0.tar.gz\n", "1.16.1": "==========================\n\nThe NumPy 1.16.1 release fixes bugs reported against the 1.16.0 release, and\nalso backports several enhancements from master that seem appropriate for a\nrelease series that is the last to support Python 2.7. The wheels on PyPI are\nlinked with OpenBLAS v0.3.4+,  which should fix the known threading issues\nfound in previous OpenBLAS versions.\n\nDownstream developers building this release should use Cython >= 0.29.2 and, if\nusing OpenBLAS, OpenBLAS > v0.3.4.\n\nIf you are installing using pip, you may encounter a problem with older\ninstalled versions of NumPy that pip did not delete becoming mixed with the\ncurrent version, resulting in an ``ImportError``. That problem is particularly\ncommon on Debian derived distributions due to a modified pip.  The fix is to\nmake sure all previous NumPy versions installed by pip have been removed. See\n`12736 <https://github.com/numpy/numpy/issues/12736>`__ for discussion of the\nissue. Note that previously this problem resulted in an ``AttributeError``.\n\n\nContributors\n============\n\nA total of 16 people contributed to this release.  People with a \"+\" by their\nnames contributed a patch for the first time.\n\n* Antoine Pitrou\n* Arcesio Castaneda Medina +\n* Charles Harris\n* Chris Markiewicz +\n* Christoph Gohlke\n* Christopher J. Markiewicz +\n* Daniel Hrisca +\n* EelcoPeacs +\n* Eric Wieser\n* Kevin Sheppard\n* Matti Picus\n* OBATA Akio +\n* Ralf Gommers\n* Sebastian Berg\n* Stephan Hoyer\n* Tyler Reddy\n\n\nEnhancements\n============\n\n* `12767 <https://github.com/numpy/numpy/pull/12767>`__: ENH: add mm->q floordiv\n* `12768 <https://github.com/numpy/numpy/pull/12768>`__: ENH: port np.core.overrides to C for speed\n* `12769 <https://github.com/numpy/numpy/pull/12769>`__: ENH: Add np.ctypeslib.as_ctypes_type(dtype), improve `np.ctypeslib.as_ctypes`\n* `12773 <https://github.com/numpy/numpy/pull/12773>`__: ENH: add \"max difference\" messages to np.testing.assert_array_equal...\n* `12820 <https://github.com/numpy/numpy/pull/12820>`__: ENH: Add mm->qm divmod\n* `12890 <https://github.com/numpy/numpy/pull/12890>`__: ENH: add _dtype_ctype to namespace for freeze analysis\n\n\nCompatibility notes\n===================\n\n* The changed error message emited by array comparison testing functions may\n  affect doctests. See below for detail.\n\n* Casting from double and single denormals to float16 has been corrected.  In\n  some rare cases, this may result in results being rounded up instead of down,\n  changing the last bit (ULP) of the result.\n\n\nNew Features\n============\n\ndivmod operation is now supported for two ``timedelta64`` operands\n- ------------------------------------------------------------------\nThe divmod operator now handles two ``np.timedelta64`` operands, with\ntype signature ``mm->qm``.\n\n\nImprovements\n============\n\nFurther improvements to ``ctypes`` support in ``np.ctypeslib``\n- --------------------------------------------------------------\nA new ``np.ctypeslib.as_ctypes_type`` function has been added, which can be\nused to converts a `dtype` into a best-guess `ctypes` type. Thanks to this\nnew function, ``np.ctypeslib.as_ctypes`` now supports a much wider range of\narray types, including structures, booleans, and integers of non-native\nendianness.\n\nArray comparison assertions include maximum differences\n- -------------------------------------------------------\nError messages from array comparison tests such as\n`np.testing.assert_allclose` now include \"max absolute difference\" and\n\"max relative difference,\" in addition to the previous \"mismatch\" percentage.\nThis information makes it easier to update absolute and relative error\ntolerances.\n\n\nChanges\n=======\n\n``timedelta64 % 0`` behavior adjusted to return ``NaT``\n- -------------------------------------------------------\nThe modulus operation with two ``np.timedelta64`` operands now returns\n``NaT`` in the case of division by zero, rather than returning zero\n\n\n\n\nChecksums\n=========\n\nMD5\n- ---\n\n    456aae0a43311da1570a53baef7f5620  numpy-1.16.1-cp27-cp27m-macosx_10_6_intel.macosx_10_9_intel.macosx_10_9_x86_64.macosx_10_10_intel.macosx_10_10_x86_64.whl\n    8f39da654cd27a96877955a2fbf3883f  numpy-1.16.1-cp27-cp27m-manylinux1_i686.whl\n    add6fcaf9b5007dca2fc966b918d585e  numpy-1.16.1-cp27-cp27m-manylinux1_x86_64.whl\n    b2193c7af769169229eef8d2371929c2  numpy-1.16.1-cp27-cp27m-win32.whl\n    3a7eba56bcebc52b223d63ab4b9bf029  numpy-1.16.1-cp27-cp27m-win_amd64.whl\n    3bc676163ce4d526c8305bc889f0594d  numpy-1.16.1-cp27-cp27mu-manylinux1_i686.whl\n    55ccd6d343be1e16e70159714ac74848  numpy-1.16.1-cp27-cp27mu-manylinux1_x86_64.whl\n    15bebbeddc5924243a010680e184b6e8  numpy-1.16.1-cp35-cp35m-macosx_10_6_intel.macosx_10_9_intel.macosx_10_9_x86_64.macosx_10_10_intel.macosx_10_10_x86_64.whl\n    86aacbea051b7542a8bd3486d2fa79cd  numpy-1.16.1-cp35-cp35m-manylinux1_i686.whl\n    486ce91fd66ec19044d8faa7d00e619b  numpy-1.16.1-cp35-cp35m-manylinux1_x86_64.whl\n    f2665475de0378467d88e6d80ac47f09  numpy-1.16.1-cp35-cp35m-win32.whl\n    42b9d99bf4b03e3e9ae7aee8cbdff97c  numpy-1.16.1-cp35-cp35m-win_amd64.whl\n    269c80fde767b2b65abec775171aebed  numpy-1.16.1-cp36-cp36m-macosx_10_6_intel.macosx_10_9_intel.macosx_10_9_x86_64.macosx_10_10_intel.macosx_10_10_x86_64.whl\n    a9561d8a38ee7d52126dfe779429036d  numpy-1.16.1-cp36-cp36m-manylinux1_i686.whl\n    2d146e75063ce8aaa255ea06d6647fa2  numpy-1.16.1-cp36-cp36m-manylinux1_x86_64.whl\n    3a422881207202055c7530d3c4a63cc0  numpy-1.16.1-cp36-cp36m-win32.whl\n    641af9183978922d4eb610c0df1abb4a  numpy-1.16.1-cp36-cp36m-win_amd64.whl\n    8eca0834ffce217b61633a2ba16f9e98  numpy-1.16.1-cp37-cp37m-macosx_10_6_intel.macosx_10_9_intel.macosx_10_9_x86_64.macosx_10_10_intel.macosx_10_10_x86_64.whl\n    df387b8e8ee398f2a6a46b18981ce7e3  numpy-1.16.1-cp37-cp37m-manylinux1_i686.whl\n    daaac731bf53b6f90bf381e30c0b0e35  numpy-1.16.1-cp37-cp37m-manylinux1_x86_64.whl\n    7443f622e549bf116ca561c1db6a4491  numpy-1.16.1-cp37-cp37m-win32.whl\n    18b7d994de469d38e26c75c27898fa4f  numpy-1.16.1-cp37-cp37m-win_amd64.whl\n    ae2e65a2f2d7c80a3264fb038157895c  numpy-1.16.1.tar.gz\n    dafda51934f645d888866f98424521ae  numpy-1.16.1.zip\n\nSHA256\n- ------\n\n    e9c88f173d31909d881a60f08a8494e63f1aff2a4052476b24d4f50e82c47e24  numpy-1.16.1-cp27-cp27m-macosx_10_6_intel.macosx_10_9_intel.macosx_10_9_x86_64.macosx_10_10_intel.macosx_10_10_x86_64.whl\n    69c152f7c11bf3b4fc11bc4cc62eb0334371c0db6844ebace43b7c815b602805  numpy-1.16.1-cp27-cp27m-manylinux1_i686.whl\n    ae602ba425fb2b074e16d125cdce4f0194903da935b2e7fe284ebecca6d92e76  numpy-1.16.1-cp27-cp27m-manylinux1_x86_64.whl\n    4341a39fc085f31a583be505eabf00e17c619b469fef78dc7e8241385bfddaa4  numpy-1.16.1-cp27-cp27m-win32.whl\n    a863957192855c4c57f60a75a1ac06ce5362ad18506d362dd807e194b4baf3ce  numpy-1.16.1-cp27-cp27m-win_amd64.whl\n    62784b35df7de7ca4d0d81c5b6af5983f48c5cdef32fc3635b445674e56e3266  numpy-1.16.1-cp27-cp27mu-manylinux1_i686.whl\n    6ccfdcefd287f252cf1ea7a3f1656070da330c4a5658e43ad223269165cdf977  numpy-1.16.1-cp27-cp27mu-manylinux1_x86_64.whl\n    8bbee788d82c0ac656536de70e817af09b7694f5326b0ef08e5c1014fcb96bb3  numpy-1.16.1-cp35-cp35m-macosx_10_6_intel.macosx_10_9_intel.macosx_10_9_x86_64.macosx_10_10_intel.macosx_10_10_x86_64.whl\n    f69dde0c5a137d887676a8129373e44366055cf19d1b434e853310c7a1e68f93  numpy-1.16.1-cp35-cp35m-manylinux1_i686.whl\n    575cefd28d3e0da85b0864506ae26b06483ee4a906e308be5a7ad11083f9d757  numpy-1.16.1-cp35-cp35m-manylinux1_x86_64.whl\n    45080f065dcaa573ebecbfe13cdd86e8c0a68c4e999aa06bd365374ea7137706  numpy-1.16.1-cp35-cp35m-win32.whl\n    34dd4922aab246c39bf5df03ca653d6265e65971deca6784c956bf356bca6197  numpy-1.16.1-cp35-cp35m-win_amd64.whl\n    c2c39d69266621dd7464e2bb740d6eb5abc64ddc339cc97aa669f3bb4d75c103  numpy-1.16.1-cp36-cp36m-macosx_10_6_intel.macosx_10_9_intel.macosx_10_9_x86_64.macosx_10_10_intel.macosx_10_10_x86_64.whl\n    392e2ea22b41a22c0289a88053204b616181288162ba78e6823e1760309d5277  numpy-1.16.1-cp36-cp36m-manylinux1_i686.whl\n    7298fbd73c0b3eff1d53dc9b9bdb7add8797bb55eeee38c8ccd7906755ba28af  numpy-1.16.1-cp36-cp36m-manylinux1_x86_64.whl\n    384e2dfa03da7c8d54f8f934f61b6a5e4e1ebb56a65b287567629d6c14578003  numpy-1.16.1-cp36-cp36m-win32.whl\n    2b0cca1049bd39d1879fa4d598624cafe82d35529c72de1b3d528d68031cdd95  numpy-1.16.1-cp36-cp36m-win_amd64.whl\n    b13faa258b20fa66d29011f99fdf498641ca74a0a6d9266bc27d83c70fea4a6a  numpy-1.16.1-cp37-cp37m-macosx_10_6_intel.macosx_10_9_intel.macosx_10_9_x86_64.macosx_10_10_intel.macosx_10_10_x86_64.whl\n    485cb1eb4c9962f4cd042fed9424482ec1d83fee5dc2ef3f2552ac47852cb259  numpy-1.16.1-cp37-cp37m-manylinux1_i686.whl\n    0cdbbaa30ae69281b18dd995d3079c4e552ad6d5426977f66b9a2a95f11f552a  numpy-1.16.1-cp37-cp37m-manylinux1_x86_64.whl\n    79463d918d1bf3aeb9186e3df17ddb0baca443f41371df422f99ee94f4f2bbfe  numpy-1.16.1-cp37-cp37m-win32.whl\n    f1a29267ac29fff0913de0f11f3a9edfcd3f39595f467026c29376fad243ebe3  numpy-1.16.1-cp37-cp37m-win_amd64.whl\n    748369f4d5f60caf93e1d86cb22ad7fc5f82693f18804638f22bc55df27792ec  numpy-1.16.1.tar.gz\n    31d3fe5b673e99d33d70cfee2ea8fe8dccd60f265c3ed990873a88647e3dd288  numpy-1.16.1.zip\n-----BEGIN PGP SIGNATURE-----\n\niQEcBAEBAgAGBQJcU382AAoJEGefIoN3xSR7EzcH/1HfUS3xop0OM/Mon+H33ydc\nMUA1tb1tKmkRP5dlzFsv+1g3daGV6q9rI2ihpy9siSZO/MaaXuepnbxovOhenaSc\n9QxXgUtu17Lie9gpRZWn36Je7E/tS3oEQ+7Yk5OpURXEyyW/8EO1fsiO/bbQPnkG\np//G0ZJCQ1vXIaU+bUqKbFTh1sQG1DH/fS7/+6IitVevlXo4jXeWO6WdXKS2IfUj\nc9ZNfaPuIQhT0OnlDt6LfOHYyLoGSb0tSNfIfBp8Rc0+AEGDf2Cp8aj7K0seuHwZ\nJxgaDbHfpX0gSddUwW5Qz+mI1cfuMZjJJpGtMzFLFj+q4cG3n3Nqor/tXS3qgRM=\n=BYMN\n-----END PGP SIGNATURE-----\n\n\n==========================\n", "1.18.4": "==========================\n\nThis is that last planned release in the 1.18.x series. It reverts the\n``bool(\"0\")`` behavior introduced in 1.18.3 and fixes a bug in\n``Generator.integers``. There is also improved help in the error message\nemitted when numpy import fails due to a link to a new troubleshooting section\nin the documentation that is now included. \n\nThe Python versions supported in this release are 3.5-3.8. Downstream\ndevelopers should use Cython >= 0.29.15 for Python 3.8 support and OpenBLAS >=\n3.7 to avoid errors on the Skylake architecture.\n\nContributors\n============\n\nA total of 4 people contributed to this release.  People with a \"+\" by their\nnames contributed a patch for the first time.\n\n* Charles Harris\n* Matti Picus\n* Sebastian Berg\n* Warren Weckesser\n\nPull requests merged\n====================\n\nA total of 6 pull requests were merged for this release.\n\n* `16055 <https://github.com/numpy/numpy/pull/16055>`__: BLD: add i686 for 1.18 builds\n* `16090 <https://github.com/numpy/numpy/pull/16090>`__: BUG: random: ``Generator.integers(2**32)`` always returned 0.\n* `16091 <https://github.com/numpy/numpy/pull/16091>`__: BLD: fix path to libgfortran on macOS\n* `16109 <https://github.com/numpy/numpy/pull/16109>`__: REV: Reverts side-effect changes to casting\n* `16114 <https://github.com/numpy/numpy/pull/16114>`__: BLD: put openblas library in local directory on windows\n* `16132 <https://github.com/numpy/numpy/pull/16132>`__: DOC: Change import error \"howto\" to link to new troubleshooting...\n\nChecksums\n=========\n\nMD5\n---\n::\n\n    1fe09153c9e6da5c9e73f3ed466da50c  numpy-1.18.4-cp35-cp35m-macosx_10_9_intel.whl\n    707b0270ece3e9a16905e756884daa48  numpy-1.18.4-cp35-cp35m-manylinux1_i686.whl\n    47f90c71c3df80ace2b32d011ed1c240  numpy-1.18.4-cp35-cp35m-manylinux1_x86_64.whl\n    e0e7d9fd9f4c8cf077ba5cda69833d38  numpy-1.18.4-cp35-cp35m-win32.whl\n    06e844091463932a0d4da103951ffc2c  numpy-1.18.4-cp35-cp35m-win_amd64.whl\n    32ce3d6d266f1fbfef4a2ff917053718  numpy-1.18.4-cp36-cp36m-macosx_10_9_x86_64.whl\n    f5d27cca8bf9dc8f603cad5255674bb8  numpy-1.18.4-cp36-cp36m-manylinux1_i686.whl\n    460bd10297e582f0e061194356990afb  numpy-1.18.4-cp36-cp36m-manylinux1_x86_64.whl\n    160c62c881a5109f3e47813dd0079ab1  numpy-1.18.4-cp36-cp36m-win32.whl\n    03e2d39bfaaf27993b353b98c75f27cc  numpy-1.18.4-cp36-cp36m-win_amd64.whl\n    672cb3889e7c9285ca260f8d15c2bc9f  numpy-1.18.4-cp37-cp37m-macosx_10_9_x86_64.whl\n    eaebca109ce5346ec1626af476e88edb  numpy-1.18.4-cp37-cp37m-manylinux1_i686.whl\n    bdf6d9bd169e5552284dd366c12e3759  numpy-1.18.4-cp37-cp37m-manylinux1_x86_64.whl\n    408f8eedcfb8bee6c0d8cb13f4665edd  numpy-1.18.4-cp37-cp37m-win32.whl\n    2d2cc2ccd5c276bde6696856609dee9f  numpy-1.18.4-cp37-cp37m-win_amd64.whl\n    5bdfaa2daf5afd8e6db8c202f58d5ef0  numpy-1.18.4-cp38-cp38-macosx_10_9_x86_64.whl\n    1aad5b0c4545e206aae7848853633885  numpy-1.18.4-cp38-cp38-manylinux1_i686.whl\n    f7e78dcee83fb851c97804d7fb987fdb  numpy-1.18.4-cp38-cp38-manylinux1_x86_64.whl\n    91678301ec0d6e6c20bf7c71bc8665a5  numpy-1.18.4-cp38-cp38-win32.whl\n    916b27fca6fb780907033067cad175fe  numpy-1.18.4-cp38-cp38-win_amd64.whl\n    70e6c294f8dffa8d630eda1b0d42ae4d  numpy-1.18.4.tar.gz\n    37277c5cbe5a850513fbff5ffdad1caf  numpy-1.18.4.zip\n\nSHA256\n------\n::\n\n    efdba339fffb0e80fcc19524e4fdbda2e2b5772ea46720c44eaac28096d60720  numpy-1.18.4-cp35-cp35m-macosx_10_9_intel.whl\n    2b573fcf6f9863ce746e4ad00ac18a948978bb3781cffa4305134d31801f3e26  numpy-1.18.4-cp35-cp35m-manylinux1_i686.whl\n    3f0dae97e1126f529ebb66f3c63514a0f72a177b90d56e4bce8a0b5def34627a  numpy-1.18.4-cp35-cp35m-manylinux1_x86_64.whl\n    dccd380d8e025c867ddcb2f84b439722cf1f23f3a319381eac45fd077dee7170  numpy-1.18.4-cp35-cp35m-win32.whl\n    02ec9582808c4e48be4e93cd629c855e644882faf704bc2bd6bbf58c08a2a897  numpy-1.18.4-cp35-cp35m-win_amd64.whl\n    904b513ab8fbcbdb062bed1ce2f794ab20208a1b01ce9bd90776c6c7e7257032  numpy-1.18.4-cp36-cp36m-macosx_10_9_x86_64.whl\n    e22cd0f72fc931d6abc69dc7764484ee20c6a60b0d0fee9ce0426029b1c1bdae  numpy-1.18.4-cp36-cp36m-manylinux1_i686.whl\n    2466fbcf23711ebc5daa61d28ced319a6159b260a18839993d871096d66b93f7  numpy-1.18.4-cp36-cp36m-manylinux1_x86_64.whl\n    00d7b54c025601e28f468953d065b9b121ddca7fff30bed7be082d3656dd798d  numpy-1.18.4-cp36-cp36m-win32.whl\n    7d59f21e43bbfd9a10953a7e26b35b6849d888fc5a331fa84a2d9c37bd9fe2a2  numpy-1.18.4-cp36-cp36m-win_amd64.whl\n    efb7ac5572c9a57159cf92c508aad9f856f1cb8e8302d7fdb99061dbe52d712c  numpy-1.18.4-cp37-cp37m-macosx_10_9_x86_64.whl\n    0e6f72f7bb08f2f350ed4408bb7acdc0daba637e73bce9f5ea2b207039f3af88  numpy-1.18.4-cp37-cp37m-manylinux1_i686.whl\n    9933b81fecbe935e6a7dc89cbd2b99fea1bf362f2790daf9422a7bb1dc3c3085  numpy-1.18.4-cp37-cp37m-manylinux1_x86_64.whl\n    96dd36f5cdde152fd6977d1bbc0f0561bccffecfde63cd397c8e6033eb66baba  numpy-1.18.4-cp37-cp37m-win32.whl\n    57aea170fb23b1fd54fa537359d90d383d9bf5937ee54ae8045a723caa5e0961  numpy-1.18.4-cp37-cp37m-win_amd64.whl\n    ed722aefb0ebffd10b32e67f48e8ac4c5c4cf5d3a785024fdf0e9eb17529cd9d  numpy-1.18.4-cp38-cp38-macosx_10_9_x86_64.whl\n    50fb72bcbc2cf11e066579cb53c4ca8ac0227abb512b6cbc1faa02d1595a2a5d  numpy-1.18.4-cp38-cp38-manylinux1_i686.whl\n    709c2999b6bd36cdaf85cf888d8512da7433529f14a3689d6e37ab5242e7add5  numpy-1.18.4-cp38-cp38-manylinux1_x86_64.whl\n    f22273dd6a403ed870207b853a856ff6327d5cbce7a835dfa0645b3fc00273ec  numpy-1.18.4-cp38-cp38-win32.whl\n    1be2e96314a66f5f1ce7764274327fd4fb9da58584eaff00b5a5221edefee7d6  numpy-1.18.4-cp38-cp38-win_amd64.whl\n    e0781ec6627e85f2a618478ee278893343fb8b40577b4c74b2ec15c7a5b8f698  numpy-1.18.4.tar.gz\n    bbcc85aaf4cd84ba057decaead058f43191cc0e30d6bc5d44fe336dc3d3f4509  numpy-1.18.4.zip\n\n\n.. currentmodule:: numpy\n\n==========================\n", "1.19.1": "==========================\n\nNumPy 1.19.1 fixes several bugs found in the 1.19.0 release, replaces several\nfunctions deprecated in the upcoming Python-3.9 release, has improved support\nfor AIX, and has a number of development related updates to keep CI working\nwith recent upstream changes.\n\nThis release supports Python 3.6-3.8. Cython >= 0.29.21 needs to be used when\nbuilding with Python 3.9 for testing purposes.\n\n\nContributors\n============\n\nA total of 15 people contributed to this release.  People with a \"+\" by their\nnames contributed a patch for the first time.\n\n* Abhinav Reddy +\n* Anirudh Subramanian\n* Antonio Larrosa +\n* Charles Harris\n* Chunlin Fang\n* Eric Wieser\n* Etienne Guesnet +\n* Kevin Sheppard\n* Matti Picus\n* Raghuveer Devulapalli\n* Roman Yurchak\n* Ross Barnowski\n* Sayed Adel\n* Sebastian Berg\n* Tyler Reddy\n\n\nPull requests merged\n====================\n\nA total of 25 pull requests were merged for this release.\n\n* `16649 <https://github.com/numpy/numpy/pull/16649>`__: MAINT, CI: disable Shippable cache\n* `16652 <https://github.com/numpy/numpy/pull/16652>`__: MAINT: Replace PyUString_GET_SIZE with PyUnicode_GetLength.\n* `16654 <https://github.com/numpy/numpy/pull/16654>`__: REL: Fix outdated docs link\n* `16656 <https://github.com/numpy/numpy/pull/16656>`__: BUG: raise IEEE exception on AIX\n* `16672 <https://github.com/numpy/numpy/pull/16672>`__: BUG: Fix bug in AVX complex absolute while processing array of...\n* `16693 <https://github.com/numpy/numpy/pull/16693>`__: TST: Add extra debugging information to CPU features detection\n* `16703 <https://github.com/numpy/numpy/pull/16703>`__: BLD: Add CPU entry for Emscripten / WebAssembly\n* `16705 <https://github.com/numpy/numpy/pull/16705>`__: TST: Disable Python 3.9-dev testing.\n* `16714 <https://github.com/numpy/numpy/pull/16714>`__: MAINT: Disable use_hugepages in case of ValueError\n* `16724 <https://github.com/numpy/numpy/pull/16724>`__: BUG: Fix PyArray_SearchSorted signature.\n* `16768 <https://github.com/numpy/numpy/pull/16768>`__: MAINT: Fixes for deprecated functions in scalartypes.c.src\n* `16772 <https://github.com/numpy/numpy/pull/16772>`__: MAINT: Remove unneeded call to PyUnicode_READY\n* `16776 <https://github.com/numpy/numpy/pull/16776>`__: MAINT: Fix deprecated functions in scalarapi.c\n* `16779 <https://github.com/numpy/numpy/pull/16779>`__: BLD, ENH: Add RPATH support for AIX\n* `16780 <https://github.com/numpy/numpy/pull/16780>`__: BUG: Fix default fallback in genfromtxt\n* `16784 <https://github.com/numpy/numpy/pull/16784>`__: BUG: Added missing return after raising error in methods.c\n* `16795 <https://github.com/numpy/numpy/pull/16795>`__: BLD: update cython to 0.29.21\n* `16832 <https://github.com/numpy/numpy/pull/16832>`__: MAINT: setuptools 49.2.0 emits a warning, avoid it\n* `16872 <https://github.com/numpy/numpy/pull/16872>`__: BUG: Validate output size in bin- and multinomial\n* `16875 <https://github.com/numpy/numpy/pull/16875>`__: BLD, MAINT: Pin setuptools\n* `16904 <https://github.com/numpy/numpy/pull/16904>`__: DOC: Reconstruct Testing Guideline.\n* `16905 <https://github.com/numpy/numpy/pull/16905>`__: TST, BUG: Re-raise MemoryError exception in test_large_zip's...\n* `16906 <https://github.com/numpy/numpy/pull/16906>`__: BUG, DOC: Fix bad MPL kwarg.\n* `16916 <https://github.com/numpy/numpy/pull/16916>`__: BUG: Fix string/bytes to complex assignment\n* `16922 <https://github.com/numpy/numpy/pull/16922>`__: REL: Prepare for NumPy 1.19.1 release\n\nChecksums\n=========\n\nMD5\n---\n::\n\n    a57df319841a487b22b932aa99562fd8  numpy-1.19.1-cp36-cp36m-macosx_10_9_x86_64.whl\n    c86be0ba1efc221cdd3aba05c21ab7a6  numpy-1.19.1-cp36-cp36m-manylinux1_i686.whl\n    09bb5d4ff277bc2caddc107af963f006  numpy-1.19.1-cp36-cp36m-manylinux1_x86_64.whl\n    c150ffb56704ff319e8ea525773de49e  numpy-1.19.1-cp36-cp36m-manylinux2010_i686.whl\n    e7c22cfc5956330df8fc107968472e28  numpy-1.19.1-cp36-cp36m-manylinux2010_x86_64.whl\n    9255520a51c6aa591489f68ac7a4cb0e  numpy-1.19.1-cp36-cp36m-manylinux2014_aarch64.whl\n    7de3e77a0cda438724e1d8f312805742  numpy-1.19.1-cp36-cp36m-win32.whl\n    d6d00a2e7b5bbfa7f5f097e8f99d17a7  numpy-1.19.1-cp36-cp36m-win_amd64.whl\n    c8bc9f328f3a89ab35c374e9cf36dd80  numpy-1.19.1-cp37-cp37m-macosx_10_9_x86_64.whl\n    8e2eb1614b6a7ce286a5ddf39805564c  numpy-1.19.1-cp37-cp37m-manylinux1_i686.whl\n    884540e9a94a9da88cd35311a40e1f98  numpy-1.19.1-cp37-cp37m-manylinux1_x86_64.whl\n    c8dea76ce437f9795a2c38fc3a94cc64  numpy-1.19.1-cp37-cp37m-manylinux2010_i686.whl\n    fceff6d052e0729e0bc4725d415a0424  numpy-1.19.1-cp37-cp37m-manylinux2010_x86_64.whl\n    8a40347a7aa0a78ad652761b18646b94  numpy-1.19.1-cp37-cp37m-manylinux2014_aarch64.whl\n    6f83733af7f25219b1309ed6e2125b40  numpy-1.19.1-cp37-cp37m-win32.whl\n    5ffe9aaa1be9790546bf0805349d11de  numpy-1.19.1-cp37-cp37m-win_amd64.whl\n    9fc17dd30d41000be08a5e76bda7cd13  numpy-1.19.1-cp38-cp38-macosx_10_9_x86_64.whl\n    e164a68bb255e40835243843fd748786  numpy-1.19.1-cp38-cp38-manylinux1_i686.whl\n    831327c74d9d0c69adba8c626e09a842  numpy-1.19.1-cp38-cp38-manylinux1_x86_64.whl\n    8d5cfc3f45d07874d427e9d62dfe6b0d  numpy-1.19.1-cp38-cp38-manylinux2010_i686.whl\n    08a1030ceea2f30f51e6c39264aec2e3  numpy-1.19.1-cp38-cp38-manylinux2010_x86_64.whl\n    a4dab4ffba3b1b2600400f89ab065112  numpy-1.19.1-cp38-cp38-manylinux2014_aarch64.whl\n    3b7770f38ed195e24692d6581e4634a1  numpy-1.19.1-cp38-cp38-win32.whl\n    8ec6183c736b4eacec8de80c98261af1  numpy-1.19.1-cp38-cp38-win_amd64.whl\n    a15c1aec844788f6e55c1da12f6bfa86  numpy-1.19.1-pp36-pypy36_pp73-manylinux2010_x86_64.whl\n    bb6f87f7b2d15a2e2a983b972afbcde5  numpy-1.19.1.tar.gz\n    2ccca1881b2766040149629614d22a3f  numpy-1.19.1.zip\n\nSHA256\n------\n::\n\n    b1cca51512299841bf69add3b75361779962f9cee7d9ee3bb446d5982e925b69  numpy-1.19.1-cp36-cp36m-macosx_10_9_x86_64.whl\n    c9591886fc9cbe5532d5df85cb8e0cc3b44ba8ce4367bd4cf1b93dc19713da72  numpy-1.19.1-cp36-cp36m-manylinux1_i686.whl\n    cf1347450c0b7644ea142712619533553f02ef23f92f781312f6a3553d031fc7  numpy-1.19.1-cp36-cp36m-manylinux1_x86_64.whl\n    ed8a311493cf5480a2ebc597d1e177231984c818a86875126cfd004241a73c3e  numpy-1.19.1-cp36-cp36m-manylinux2010_i686.whl\n    3673c8b2b29077f1b7b3a848794f8e11f401ba0b71c49fbd26fb40b71788b132  numpy-1.19.1-cp36-cp36m-manylinux2010_x86_64.whl\n    56ef7f56470c24bb67fb43dae442e946a6ce172f97c69f8d067ff8550cf782ff  numpy-1.19.1-cp36-cp36m-manylinux2014_aarch64.whl\n    aaf42a04b472d12515debc621c31cf16c215e332242e7a9f56403d814c744624  numpy-1.19.1-cp36-cp36m-win32.whl\n    082f8d4dd69b6b688f64f509b91d482362124986d98dc7dc5f5e9f9b9c3bb983  numpy-1.19.1-cp36-cp36m-win_amd64.whl\n    e4f6d3c53911a9d103d8ec9518190e52a8b945bab021745af4939cfc7c0d4a9e  numpy-1.19.1-cp37-cp37m-macosx_10_9_x86_64.whl\n    5b6885c12784a27e957294b60f97e8b5b4174c7504665333c5e94fbf41ae5d6a  numpy-1.19.1-cp37-cp37m-manylinux1_i686.whl\n    1bc0145999e8cb8aed9d4e65dd8b139adf1919e521177f198529687dbf613065  numpy-1.19.1-cp37-cp37m-manylinux1_x86_64.whl\n    5a936fd51049541d86ccdeef2833cc89a18e4d3808fe58a8abeb802665c5af93  numpy-1.19.1-cp37-cp37m-manylinux2010_i686.whl\n    ef71a1d4fd4858596ae80ad1ec76404ad29701f8ca7cdcebc50300178db14dfc  numpy-1.19.1-cp37-cp37m-manylinux2010_x86_64.whl\n    b9792b0ac0130b277536ab8944e7b754c69560dac0415dd4b2dbd16b902c8954  numpy-1.19.1-cp37-cp37m-manylinux2014_aarch64.whl\n    b12e639378c741add21fbffd16ba5ad25c0a1a17cf2b6fe4288feeb65144f35b  numpy-1.19.1-cp37-cp37m-win32.whl\n    8343bf67c72e09cfabfab55ad4a43ce3f6bf6e6ced7acf70f45ded9ebb425055  numpy-1.19.1-cp37-cp37m-win_amd64.whl\n    e45f8e981a0ab47103181773cc0a54e650b2aef8c7b6cd07405d0fa8d869444a  numpy-1.19.1-cp38-cp38-macosx_10_9_x86_64.whl\n    667c07063940e934287993366ad5f56766bc009017b4a0fe91dbd07960d0aba7  numpy-1.19.1-cp38-cp38-manylinux1_i686.whl\n    480fdd4dbda4dd6b638d3863da3be82873bba6d32d1fc12ea1b8486ac7b8d129  numpy-1.19.1-cp38-cp38-manylinux1_x86_64.whl\n    935c27ae2760c21cd7354402546f6be21d3d0c806fffe967f745d5f2de5005a7  numpy-1.19.1-cp38-cp38-manylinux2010_i686.whl\n    309cbcfaa103fc9a33ec16d2d62569d541b79f828c382556ff072442226d1968  numpy-1.19.1-cp38-cp38-manylinux2010_x86_64.whl\n    7ed448ff4eaffeb01094959b19cbaf998ecdee9ef9932381420d514e446601cd  numpy-1.19.1-cp38-cp38-manylinux2014_aarch64.whl\n    de8b4a9b56255797cbddb93281ed92acbc510fb7b15df3f01bd28f46ebc4edae  numpy-1.19.1-cp38-cp38-win32.whl\n    92feb989b47f83ebef246adabc7ff3b9a59ac30601c3f6819f8913458610bdcc  numpy-1.19.1-cp38-cp38-win_amd64.whl\n    e1b1dc0372f530f26a03578ac75d5e51b3868b9b76cd2facba4c9ee0eb252ab1  numpy-1.19.1-pp36-pypy36_pp73-manylinux2010_x86_64.whl\n    1396e6c3d20cbfc119195303b0272e749610b7042cc498be4134f013e9a3215c  numpy-1.19.1.tar.gz\n    b8456987b637232602ceb4d663cb34106f7eb780e247d51a260b84760fd8f491  numpy-1.19.1.zip\n\n\n.. currentmodule:: numpy\n\n==========================\n", "1.18.1": "==========================\n\nThis release contains fixes for bugs reported against NumPy 1.18.0.  Two bugs\nin particular that caused widespread problems downstream were:\n\n- The cython random extension test was not using a temporary directory for\n  building, resulting in a permission violation. Fixed.\n\n- Numpy distutils was appending `-std=c99` to all C compiler runs, leading to\n  changed behavior and compile problems downstream. That flag is now only\n  applied when building numpy C code.\n\nThe Python versions supported in this release are 3.5-3.8. Downstream\ndevelopers should use Cython >= 0.29.14 for Python 3.8 support and OpenBLAS >=\n3.7 to avoid errors on the Skylake architecture.\n\nContributors\n============\n\nA total of 7 people contributed to this release.  People with a \"+\" by their\nnames contributed a patch for the first time.\n\n* Charles Harris\n* Matti Picus\n* Maxwell Aladago\n* Pauli Virtanen\n* Ralf Gommers\n* Tyler Reddy\n* Warren Weckesser\n\nPull requests merged\n====================\n\nA total of 13 pull requests were merged for this release.\n\n* `15158 <https://github.com/numpy/numpy/pull/15158>`__: MAINT: Update pavement.py for towncrier.\n* `15159 <https://github.com/numpy/numpy/pull/15159>`__: DOC: add moved modules to 1.18 release note\n* `15161 <https://github.com/numpy/numpy/pull/15161>`__: MAINT, DOC: Minor backports and updates for 1.18.x\n* `15176 <https://github.com/numpy/numpy/pull/15176>`__: TST: Add assert_array_equal test for big integer arrays\n* `15184 <https://github.com/numpy/numpy/pull/15184>`__: BUG: use tmp dir and check version for cython test (#15170)\n* `15220 <https://github.com/numpy/numpy/pull/15220>`__: BUG: distutils: fix msvc+gfortran openblas handling corner case\n* `15221 <https://github.com/numpy/numpy/pull/15221>`__: BUG: remove -std=c99 for c++ compilation (#15194)\n* `15222 <https://github.com/numpy/numpy/pull/15222>`__: MAINT: unskip test on win32\n* `15223 <https://github.com/numpy/numpy/pull/15223>`__: TST: add BLAS ILP64 run in Travis & Azure\n* `15245 <https://github.com/numpy/numpy/pull/15245>`__: MAINT: only add --std=c99 where needed\n* `15246 <https://github.com/numpy/numpy/pull/15246>`__: BUG: lib: Fix handling of integer arrays by gradient.\n* `15247 <https://github.com/numpy/numpy/pull/15247>`__: MAINT: Do not use private Python function in testing\n* `15250 <https://github.com/numpy/numpy/pull/15250>`__: REL: Prepare for the NumPy 1.18.1 release.\n\nChecksums\n=========\n\nMD5\n---\n::\n\n    f41ef9a855aa0baeb900827e2f99ab7b  numpy-1.18.1-cp35-cp35m-macosx_10_6_intel.whl\n    5239118baa2f0db334e70aac6cf26927  numpy-1.18.1-cp35-cp35m-manylinux1_i686.whl\n    78d95d2f1814b517e7cc887e559c7cd4  numpy-1.18.1-cp35-cp35m-manylinux1_x86_64.whl\n    c58a268ad42c31883b5756ad20cebe87  numpy-1.18.1-cp35-cp35m-win32.whl\n    2ffc13917b6813a85b8e1032402ca5f5  numpy-1.18.1-cp35-cp35m-win_amd64.whl\n    c3ac9936c6b21fef95a2304505fdb594  numpy-1.18.1-cp36-cp36m-macosx_10_9_x86_64.whl\n    e0a26cc2d04a7f115489b9ccc9678d3f  numpy-1.18.1-cp36-cp36m-manylinux1_i686.whl\n    d79f59200a821f90acf73f97c5252902  numpy-1.18.1-cp36-cp36m-manylinux1_x86_64.whl\n    8ba2338c677f238a84264633e3b96d9d  numpy-1.18.1-cp36-cp36m-win32.whl\n    2a2ab91e19bd2703eaa1506b06036958  numpy-1.18.1-cp36-cp36m-win_amd64.whl\n    6cc9c5767ffc0de03685f928e4e97f0f  numpy-1.18.1-cp37-cp37m-macosx_10_9_x86_64.whl\n    486a5ab59cbdfc2861be08701702e251  numpy-1.18.1-cp37-cp37m-manylinux1_i686.whl\n    08123450dfbb9f53c812caa65895afcb  numpy-1.18.1-cp37-cp37m-manylinux1_x86_64.whl\n    3e4e223ba7b784cd90f891e8867d0cf8  numpy-1.18.1-cp37-cp37m-win32.whl\n    4a51b085685511e95be3077a7360785f  numpy-1.18.1-cp37-cp37m-win_amd64.whl\n    d1f034f563252a57b9235bc9ea2c1aef  numpy-1.18.1-cp38-cp38-macosx_10_9_x86_64.whl\n    2252dcd00034da6f99c98584875dcb9d  numpy-1.18.1-cp38-cp38-manylinux1_i686.whl\n    6e93a3c8618e87aee2b0cd648b1730f0  numpy-1.18.1-cp38-cp38-manylinux1_x86_64.whl\n    10f1d9a6faf6a2fdb0693347cb2348b0  numpy-1.18.1-cp38-cp38-win32.whl\n    b9d0e0840e3e6e37f384a794d48c4ae8  numpy-1.18.1-cp38-cp38-win_amd64.whl\n    9ab88e85f5b1fc70506287317b58f71d  numpy-1.18.1.tar.gz\n    18787d6482681c85a66629a781fb84c3  numpy-1.18.1.zip\n\nSHA256\n------\n::\n\n    20b26aaa5b3da029942cdcce719b363dbe58696ad182aff0e5dcb1687ec946dc  numpy-1.18.1-cp35-cp35m-macosx_10_6_intel.whl\n    70a840a26f4e61defa7bdf811d7498a284ced303dfbc35acb7be12a39b2aa121  numpy-1.18.1-cp35-cp35m-manylinux1_i686.whl\n    17aa7a81fe7599a10f2b7d95856dc5cf84a4eefa45bc96123cbbc3ebc568994e  numpy-1.18.1-cp35-cp35m-manylinux1_x86_64.whl\n    f3d0a94ad151870978fb93538e95411c83899c9dc63e6fb65542f769568ecfa5  numpy-1.18.1-cp35-cp35m-win32.whl\n    1786a08236f2c92ae0e70423c45e1e62788ed33028f94ca99c4df03f5be6b3c6  numpy-1.18.1-cp35-cp35m-win_amd64.whl\n    ae0975f42ab1f28364dcda3dde3cf6c1ddab3e1d4b2909da0cb0191fa9ca0480  numpy-1.18.1-cp36-cp36m-macosx_10_9_x86_64.whl\n    cf7eb6b1025d3e169989416b1adcd676624c2dbed9e3bcb7137f51bfc8cc2572  numpy-1.18.1-cp36-cp36m-manylinux1_i686.whl\n    b765ed3930b92812aa698a455847141869ef755a87e099fddd4ccf9d81fffb57  numpy-1.18.1-cp36-cp36m-manylinux1_x86_64.whl\n    2d75908ab3ced4223ccba595b48e538afa5ecc37405923d1fea6906d7c3a50bc  numpy-1.18.1-cp36-cp36m-win32.whl\n    9acdf933c1fd263c513a2df3dceecea6f3ff4419d80bf238510976bf9bcb26cd  numpy-1.18.1-cp36-cp36m-win_amd64.whl\n    56bc8ded6fcd9adea90f65377438f9fea8c05fcf7c5ba766bef258d0da1554aa  numpy-1.18.1-cp37-cp37m-macosx_10_9_x86_64.whl\n    e422c3152921cece8b6a2fb6b0b4d73b6579bd20ae075e7d15143e711f3ca2ca  numpy-1.18.1-cp37-cp37m-manylinux1_i686.whl\n    b3af02ecc999c8003e538e60c89a2b37646b39b688d4e44d7373e11c2debabec  numpy-1.18.1-cp37-cp37m-manylinux1_x86_64.whl\n    d92350c22b150c1cae7ebb0ee8b5670cc84848f6359cf6b5d8f86617098a9b73  numpy-1.18.1-cp37-cp37m-win32.whl\n    77c3bfe65d8560487052ad55c6998a04b654c2fbc36d546aef2b2e511e760971  numpy-1.18.1-cp37-cp37m-win_amd64.whl\n    c98c5ffd7d41611407a1103ae11c8b634ad6a43606eca3e2a5a269e5d6e8eb07  numpy-1.18.1-cp38-cp38-macosx_10_9_x86_64.whl\n    9537eecf179f566fd1c160a2e912ca0b8e02d773af0a7a1120ad4f7507cd0d26  numpy-1.18.1-cp38-cp38-manylinux1_i686.whl\n    e840f552a509e3380b0f0ec977e8124d0dc34dc0e68289ca28f4d7c1d0d79474  numpy-1.18.1-cp38-cp38-manylinux1_x86_64.whl\n    590355aeade1a2eaba17617c19edccb7db8d78760175256e3cf94590a1a964f3  numpy-1.18.1-cp38-cp38-win32.whl\n    39d2c685af15d3ce682c99ce5925cc66efc824652e10990d2462dfe9b8918c6a  numpy-1.18.1-cp38-cp38-win_amd64.whl\n    e37802868ba5f389bf4e3f4c40c16e1b031814f0585ac122637de219de6279cb  numpy-1.18.1.tar.gz\n    b6ff59cee96b454516e47e7721098e6ceebef435e3e21ac2d6c3b8b02628eb77  numpy-1.18.1.zip\n\n\n-----BEGIN PGP SIGNED MESSAGE-----\nHash: SHA512\n\n==========================\n", "1.14.5": "==========================\n\nThis is a bugfix release for bugs reported following the 1.14.4 release. The\nmost significant fixes are:\n\n* fixes for compilation errors on alpine and NetBSD\n\nThe Python versions supported in this release are 2.7 and 3.4 - 3.6. The Python\n3.6 wheels available from PIP are built with Python 3.6.2 and should be\ncompatible with all previous versions of Python 3.6. The source releases were\ncythonized with Cython 0.28.2 and should work for the upcoming Python 3.7.\n\nContributors\n============\n\nA total of 1 person contributed to this release.  People with a \"+\" by their\nnames contributed a patch for the first time.\n\n* Charles Harris\n\nPull requests merged\n====================\n\nA total of 2 pull requests were merged for this release.\n\n* `11274 <https://github.com/numpy/numpy/pull/11274>`__: BUG: Correct use of NPY_UNUSED.\n* `11294 <https://github.com/numpy/numpy/pull/11294>`__: BUG: Remove extra trailing parentheses.\n\n\nChecksums\n=========\n\nMD5\n- ---\n\n    429afa5c8720016214a79779f774d3a4  numpy-1.14.5-cp27-cp27m-macosx_10_6_intel.macosx_10_9_intel.macosx_10_9_x86_64.macosx_10_10_intel.macosx_10_10_x86_64.whl\n    de8f5c6c0e46eedf8d92c1a7ba3fccf7  numpy-1.14.5-cp27-cp27m-manylinux1_i686.whl\n    6315999b5142d22ce7bd9e74b1b4e3ab  numpy-1.14.5-cp27-cp27m-manylinux1_x86_64.whl\n    397a64608b5809983ff07842ebe0d353  numpy-1.14.5-cp27-cp27mu-manylinux1_i686.whl\n    6759e2f4bd57727f1ab9d6c9611b3f9d  numpy-1.14.5-cp27-cp27mu-manylinux1_x86_64.whl\n    2d5609f384fccf9fe4e6172dd4fed3d0  numpy-1.14.5-cp27-none-win32.whl\n    c0d5fc38ab45f19cbd12200ff4ea45dd  numpy-1.14.5-cp27-none-win_amd64.whl\n    0a77f36af749e5c3546c3d310f571256  numpy-1.14.5-cp34-cp34m-macosx_10_6_intel.macosx_10_9_intel.macosx_10_9_x86_64.macosx_10_10_intel.macosx_10_10_x86_64.whl\n    ae15c8254a4a3ebfc45894617ce030a2  numpy-1.14.5-cp34-cp34m-manylinux1_i686.whl\n    78c67b4b4f8f3f8bd9c2f897f9d40f60  numpy-1.14.5-cp34-cp34m-manylinux1_x86_64.whl\n    5263ec59028d508992c15263993698d0  numpy-1.14.5-cp34-none-win32.whl\n    193365c9f1bb2086b47afe9c797ff415  numpy-1.14.5-cp34-none-win_amd64.whl\n    90caeba061eec5dbebadad5c8bad3a0c  numpy-1.14.5-cp35-cp35m-macosx_10_6_intel.macosx_10_9_intel.macosx_10_9_x86_64.macosx_10_10_intel.macosx_10_10_x86_64.whl\n    129848206c41b68071fe9cb469a66846  numpy-1.14.5-cp35-cp35m-manylinux1_i686.whl\n    395c0058b7ec0ae0cad1e052362e9aeb  numpy-1.14.5-cp35-cp35m-manylinux1_x86_64.whl\n    a542ea0d9047df0da8ab69e90d60dbdc  numpy-1.14.5-cp35-none-win32.whl\n    c5c86e11b5071c0ca0bb11f6a84f20e6  numpy-1.14.5-cp35-none-win_amd64.whl\n    350120bd20a0a45857b4c39e901af41b  numpy-1.14.5-cp36-cp36m-macosx_10_6_intel.macosx_10_9_intel.macosx_10_9_x86_64.macosx_10_10_intel.macosx_10_10_x86_64.whl\n    5a0682a984fcf6f87a9f10760d896b70  numpy-1.14.5-cp36-cp36m-manylinux1_i686.whl\n    c5596c3d232345d0f0176cd02e6efe92  numpy-1.14.5-cp36-cp36m-manylinux1_x86_64.whl\n    c0306cbad68f8084e977121ba104b634  numpy-1.14.5-cp36-none-win32.whl\n    01b5bd7897e1306660c7ea6a30391cc4  numpy-1.14.5-cp36-none-win_amd64.whl\n    e3189ee851c3a0e2e6e4c6e80a711ec8  numpy-1.14.5.tar.gz\n    02d940a6931703de2c41fa5590ac7e98  numpy-1.14.5.zip\n\nSHA256\n- ------\n\n    e1864a4e9f93ddb2dc6b62ccc2ec1f8250ff4ac0d3d7a15c8985dd4e1fbd6418  numpy-1.14.5-cp27-cp27m-macosx_10_6_intel.macosx_10_9_intel.macosx_10_9_x86_64.macosx_10_10_intel.macosx_10_10_x86_64.whl\n    085afac75bbc97a096744fcfc97a4b321c5a87220286811e85089ae04885acdd  numpy-1.14.5-cp27-cp27m-manylinux1_i686.whl\n    6c57f973218b776195d0356e556ec932698f3a563e2f640cfca7020086383f50  numpy-1.14.5-cp27-cp27m-manylinux1_x86_64.whl\n    589336ba5199c8061239cf446ee2f2f1fcc0c68e8531ee1382b6fc0c66b2d388  numpy-1.14.5-cp27-cp27mu-manylinux1_i686.whl\n    5edf1acc827ed139086af95ce4449b7b664f57a8c29eb755411a634be280d9f2  numpy-1.14.5-cp27-cp27mu-manylinux1_x86_64.whl\n    6b82b81c6b3b70ed40bc6d0b71222ebfcd6b6c04a6e7945a936e514b9113d5a3  numpy-1.14.5-cp27-none-win32.whl\n    385f1ce46e08676505b692bfde918c1e0b350963a15ef52d77691c2cf0f5dbf6  numpy-1.14.5-cp27-none-win_amd64.whl\n    758d1091a501fd2d75034e55e7e98bfd1370dc089160845c242db1c760d944d9  numpy-1.14.5-cp34-cp34m-macosx_10_6_intel.macosx_10_9_intel.macosx_10_9_x86_64.macosx_10_10_intel.macosx_10_10_x86_64.whl\n    c725d11990a9243e6ceffe0ab25a07c46c1cc2c5dc55e305717b5afe856c9608  numpy-1.14.5-cp34-cp34m-manylinux1_i686.whl\n    07379fe0b450f6fd6e5934a9bc015025bb4ce1c8fbed3ca8bef29328b1bc9570  numpy-1.14.5-cp34-cp34m-manylinux1_x86_64.whl\n    9e1f53afae865cc32459ad211493cf9e2a3651a7295b7a38654ef3d123808996  numpy-1.14.5-cp34-none-win32.whl\n    4d278c2261be6423c5e63d8f0ceb1b0c6db3ff83f2906f4b860db6ae99ca1bb5  numpy-1.14.5-cp34-none-win_amd64.whl\n    d696a8c87315a83983fc59dd27efe034292b9e8ad667aeae51a68b4be14690d9  numpy-1.14.5-cp35-cp35m-macosx_10_6_intel.macosx_10_9_intel.macosx_10_9_x86_64.macosx_10_10_intel.macosx_10_10_x86_64.whl\n    2df854df882d322d5c23087a4959e145b953dfff2abe1774fec4f639ac2f3160  numpy-1.14.5-cp35-cp35m-manylinux1_i686.whl\n    baadc5f770917ada556afb7651a68176559f4dca5f4b2d0947cd15b9fb84fb51  numpy-1.14.5-cp35-cp35m-manylinux1_x86_64.whl\n    2d6481c6bdab1c75affc0fc71eb1bd4b3ecef620d06f2f60c3f00521d54be04f  numpy-1.14.5-cp35-none-win32.whl\n    51c5dcb51cf88b34b7d04c15f600b07c6ccbb73a089a38af2ab83c02862318da  numpy-1.14.5-cp35-none-win_amd64.whl\n    8b8dcfcd630f1981f0f1e3846fae883376762a0c1b472baa35b145b911683b7b  numpy-1.14.5-cp36-cp36m-macosx_10_6_intel.macosx_10_9_intel.macosx_10_9_x86_64.macosx_10_10_intel.macosx_10_10_x86_64.whl\n    9d69967673ab7b028c2df09cae05ba56bf4e39e3cb04ebe452b6035c3b49848e  numpy-1.14.5-cp36-cp36m-manylinux1_i686.whl\n    8622db292b766719810e0cb0f62ef6141e15fe32b04e4eb2959888319e59336b  numpy-1.14.5-cp36-cp36m-manylinux1_x86_64.whl\n    97fa8f1dceffab782069b291e38c4c2227f255cdac5f1e3346666931df87373e  numpy-1.14.5-cp36-none-win32.whl\n    381ad13c30cd1d0b2f3da8a0c1a4aa697487e8bb0e9e0cbeb7439776bcb645f8  numpy-1.14.5-cp36-none-win_amd64.whl\n    1b4a02758fb68a65ea986d808867f1d6383219c234aef553a8741818e795b529  numpy-1.14.5.tar.gz\n    a4a433b3a264dbc9aa9c7c241e87c0358a503ea6394f8737df1683c7c9a102ac  numpy-1.14.5.zip\n-----BEGIN PGP SIGNATURE-----\n\niQEzBAEBCgAdFiEEqyfdqFB7QrgUmC/5czA7K8SQ/3AFAlsgT2IACgkQczA7K8SQ\n/3CT7AgAmIfuQRSB5qGA15BLbXdYYPtWAZRyzF8Ikkz+1P2y0BQVrAzJ05F4u01b\nXuU17O59W7Fs67tRxXNQ3SK17MN5UN/XfSY3tQdml9++RyJ87Tr0VTPEbvXwT5dZ\nXO1Pu+v9XMVOf7Eov+1qxnYAMYBxbZibPSZhfdDVyDIu7mLayTnfyAW1+hRbbOjv\nMb8Fb8xZVGhT6fq9i9ZfW/U4eTL/cWGStoSz2QIOqz0iT7iHvN6o1A21LuxrcdgK\nP3ApaYRj6UdZp1uRNmL+KdxLi6/0Jen4FB2hgV+kn2abjdipCadnsQ78Yb0InQD1\nZ09GqO6arVu0I0jPFBM28wIlv4P3kw==\n=k/XR\n-----END PGP SIGNATURE-----\n\n\n.. currentmodule:: numpy\n\n==========================\n", "1.21.1": "==========================\nThe NumPy 1.21.1 is maintenance release that fixes bugs discovered after the\n1.21.0 release and updates OpenBLAS to v0.3.17 to deal with problems on arm64.\n\nThe Python versions supported for this release are 3.7-3.9. The 1.21.x series\nis compatible with development Python 3.10. Python 3.10 will be officially\nsupported after it is released.\n\n.. warning::\n   There are unresolved problems compiling NumPy 1.20.0 with gcc-11.1.\n\n   * Optimization level `-O3` results in many incorrect warnings when\n     running the tests.\n   * On some hardware NumPY will hang in an infinite loop.\n\nContributors\n============\n\nA total of 11 people contributed to this release.  People with a \"+\" by their\nnames contributed a patch for the first time.\n\n* Bas van Beek\n* Charles Harris\n* Ganesh Kathiresan\n* Gregory R. Lee\n* Hugo Defois +\n* Kevin Sheppard\n* Matti Picus\n* Ralf Gommers\n* Sayed Adel\n* Sebastian Berg\n* Thomas J. Fan\n\nPull requests merged\n====================\n\nA total of 26 pull requests were merged for this release.\n\n* `19311 <https://github.com/numpy/numpy/pull/19311>`__: REV,BUG: Replace ``NotImplemented`` with ``typing.Any``\n* `19324 <https://github.com/numpy/numpy/pull/19324>`__: MAINT: Fixed the return-dtype of ``ndarray.real`` and ``imag``\n* `19330 <https://github.com/numpy/numpy/pull/19330>`__: MAINT: Replace ``\"dtype[Any]\"`` with ``dtype`` in the definiton of...\n* `19342 <https://github.com/numpy/numpy/pull/19342>`__: DOC: Fix some docstrings that crash pdf generation.\n* `19343 <https://github.com/numpy/numpy/pull/19343>`__: MAINT: bump scipy-mathjax\n* `19347 <https://github.com/numpy/numpy/pull/19347>`__: BUG: Fix arr.flat.index for large arrays and big-endian machines\n* `19348 <https://github.com/numpy/numpy/pull/19348>`__: ENH: add ``numpy.f2py.get_include`` function\n* `19349 <https://github.com/numpy/numpy/pull/19349>`__: BUG: Fix reference count leak in ufunc dtype handling\n* `19350 <https://github.com/numpy/numpy/pull/19350>`__: MAINT: Annotate missing attributes of ``np.number`` subclasses\n* `19351 <https://github.com/numpy/numpy/pull/19351>`__: BUG: Fix cast safety and comparisons for zero sized voids\n* `19352 <https://github.com/numpy/numpy/pull/19352>`__: BUG: Correct Cython declaration in random\n* `19353 <https://github.com/numpy/numpy/pull/19353>`__: BUG: protect against accessing base attribute of a NULL subarray\n* `19365 <https://github.com/numpy/numpy/pull/19365>`__: BUG, SIMD: Fix detecting AVX512 features on Darwin\n* `19366 <https://github.com/numpy/numpy/pull/19366>`__: MAINT: remove ``print()``'s in distutils template handling\n* `19390 <https://github.com/numpy/numpy/pull/19390>`__: ENH: SIMD architectures to show_config\n* `19391 <https://github.com/numpy/numpy/pull/19391>`__: BUG: Do not raise deprecation warning for all nans in unique...\n* `19392 <https://github.com/numpy/numpy/pull/19392>`__: BUG: Fix NULL special case in object-to-any cast code\n* `19430 <https://github.com/numpy/numpy/pull/19430>`__: MAINT: Use arm64-graviton2 for testing on travis\n* `19495 <https://github.com/numpy/numpy/pull/19495>`__: BUILD: update OpenBLAS to v0.3.17\n* `19496 <https://github.com/numpy/numpy/pull/19496>`__: MAINT: Avoid unicode characters in division SIMD code comments\n* `19499 <https://github.com/numpy/numpy/pull/19499>`__: BUG, SIMD: Fix infinite loop during count non-zero on GCC-11\n* `19500 <https://github.com/numpy/numpy/pull/19500>`__: BUG: fix a numpy.npiter leak in npyiter_multi_index_set\n* `19501 <https://github.com/numpy/numpy/pull/19501>`__: TST: Fix a ``GenericAlias`` test failure for python 3.9.0\n* `19502 <https://github.com/numpy/numpy/pull/19502>`__: MAINT: Start testing with Python 3.10.0b3.\n* `19503 <https://github.com/numpy/numpy/pull/19503>`__: MAINT: Add missing dtype overloads for object- and ctypes-based...\n* `19510 <https://github.com/numpy/numpy/pull/19510>`__: REL: Prepare for NumPy 1.21.1 release.\n\n\nChecksums\n=========\n\nMD5\n---\n::\n\n    d88af78c155cb92ce5535724ed13ed73  numpy-1.21.1-cp37-cp37m-macosx_10_9_x86_64.whl\n    946e54ec9d174ec90db8ae07a4c4ae2f  numpy-1.21.1-cp37-cp37m-manylinux_2_12_i686.manylinux2010_i686.whl\n    84d7f8534fa3ce1a8c2e2eab18e514de  numpy-1.21.1-cp37-cp37m-manylinux_2_12_x86_64.manylinux2010_x86_64.whl\n    2e256d7862047967f2a7dbff8b8e9d6c  numpy-1.21.1-cp37-cp37m-manylinux_2_17_aarch64.manylinux2014_aarch64.whl\n    4887ff09cc0652f3f1d9e0f40d1add63  numpy-1.21.1-cp37-cp37m-manylinux_2_5_i686.manylinux1_i686.whl\n    bbe00679ce0ae484bb46776f64e00e32  numpy-1.21.1-cp37-cp37m-manylinux_2_5_x86_64.manylinux1_x86_64.whl\n    b8eff5ba6bb920f3e65409abcfe7a55e  numpy-1.21.1-cp37-cp37m-win32.whl\n    d6ab781ad4537a818663a37392bdf647  numpy-1.21.1-cp37-cp37m-win_amd64.whl\n    f974f7a90567e082b16817e1218eb059  numpy-1.21.1-cp38-cp38-macosx_10_9_universal2.whl\n    37fb814042195516db4c5eedc23f65ef  numpy-1.21.1-cp38-cp38-macosx_10_9_x86_64.whl\n    2840e0ed51c8ebfb6fded7f1acfed810  numpy-1.21.1-cp38-cp38-macosx_11_0_arm64.whl\n    d87ed548450f324a3a6a3a230991e90a  numpy-1.21.1-cp38-cp38-manylinux_2_12_i686.manylinux2010_i686.whl\n    e5e0e271fb18986887920f24b9ad8ec3  numpy-1.21.1-cp38-cp38-manylinux_2_12_x86_64.manylinux2010_x86_64.whl\n    f060727f195388df3f3c1e2c43a8d247  numpy-1.21.1-cp38-cp38-manylinux_2_17_aarch64.manylinux2014_aarch64.whl\n    26b0cc05d6f59241f401c16a6fe9300e  numpy-1.21.1-cp38-cp38-manylinux_2_5_i686.manylinux1_i686.whl\n    dac4489fdaeffd24d402a555e61b4087  numpy-1.21.1-cp38-cp38-manylinux_2_5_x86_64.manylinux1_x86_64.whl\n    c248a8f07bb458660274eab769dcc1e2  numpy-1.21.1-cp38-cp38-win32.whl\n    52386872b66b108de80b5447d0e3f6b1  numpy-1.21.1-cp38-cp38-win_amd64.whl\n    1a730aa7303421f31c2bca5a343010bb  numpy-1.21.1-cp39-cp39-macosx_10_9_universal2.whl\n    141701393752d472456d4a15f9a554e4  numpy-1.21.1-cp39-cp39-macosx_10_9_x86_64.whl\n    33a9c001675f708aebc06f0a653378c1  numpy-1.21.1-cp39-cp39-macosx_11_0_arm64.whl\n    6b9482c5090f532285313ad2cf48d319  numpy-1.21.1-cp39-cp39-manylinux_2_12_i686.manylinux2010_i686.whl\n    94fa7591ad4e51a85cb17bcec170b986  numpy-1.21.1-cp39-cp39-manylinux_2_12_x86_64.manylinux2010_x86_64.whl\n    f580b2ce2fb9cead163bab3f1d88fba7  numpy-1.21.1-cp39-cp39-manylinux_2_17_aarch64.manylinux2014_aarch64.whl\n    238930d877b5d8a012b5b1bbc994ebb1  numpy-1.21.1-cp39-cp39-win32.whl\n    4014c63ac2a1c3e1df95f76feb14816e  numpy-1.21.1-cp39-cp39-win_amd64.whl\n    7cff22c1a04fdee710d38bd9468edbf1  numpy-1.21.1-pp37-pypy37_pp73-manylinux_2_12_x86_64.manylinux2010_x86_64.whl\n    033726e7ec59eea6b23307dcec35a37b  numpy-1.21.1.tar.gz\n    1d016e05851a4ba85307f3246eb569aa  numpy-1.21.1.zip\n\nSHA256\n------\n::\n\n    38e8648f9449a549a7dfe8d8755a5979b45b3538520d1e735637ef28e8c2dc50  numpy-1.21.1-cp37-cp37m-macosx_10_9_x86_64.whl\n    fd7d7409fa643a91d0a05c7554dd68aa9c9bb16e186f6ccfe40d6e003156e33a  numpy-1.21.1-cp37-cp37m-manylinux_2_12_i686.manylinux2010_i686.whl\n    a75b4498b1e93d8b700282dc8e655b8bd559c0904b3910b144646dbbbc03e062  numpy-1.21.1-cp37-cp37m-manylinux_2_12_x86_64.manylinux2010_x86_64.whl\n    1412aa0aec3e00bc23fbb8664d76552b4efde98fb71f60737c83efbac24112f1  numpy-1.21.1-cp37-cp37m-manylinux_2_17_aarch64.manylinux2014_aarch64.whl\n    e46ceaff65609b5399163de5893d8f2a82d3c77d5e56d976c8b5fb01faa6b671  numpy-1.21.1-cp37-cp37m-manylinux_2_5_i686.manylinux1_i686.whl\n    c6a2324085dd52f96498419ba95b5777e40b6bcbc20088fddb9e8cbb58885e8e  numpy-1.21.1-cp37-cp37m-manylinux_2_5_x86_64.manylinux1_x86_64.whl\n    73101b2a1fef16602696d133db402a7e7586654682244344b8329cdcbbb82172  numpy-1.21.1-cp37-cp37m-win32.whl\n    7a708a79c9a9d26904d1cca8d383bf869edf6f8e7650d85dbc77b041e8c5a0f8  numpy-1.21.1-cp37-cp37m-win_amd64.whl\n    95b995d0c413f5d0428b3f880e8fe1660ff9396dcd1f9eedbc311f37b5652e16  numpy-1.21.1-cp38-cp38-macosx_10_9_universal2.whl\n    635e6bd31c9fb3d475c8f44a089569070d10a9ef18ed13738b03049280281267  numpy-1.21.1-cp38-cp38-macosx_10_9_x86_64.whl\n    4a3d5fb89bfe21be2ef47c0614b9c9c707b7362386c9a3ff1feae63e0267ccb6  numpy-1.21.1-cp38-cp38-macosx_11_0_arm64.whl\n    8a326af80e86d0e9ce92bcc1e65c8ff88297de4fa14ee936cb2293d414c9ec63  numpy-1.21.1-cp38-cp38-manylinux_2_12_i686.manylinux2010_i686.whl\n    791492091744b0fe390a6ce85cc1bf5149968ac7d5f0477288f78c89b385d9af  numpy-1.21.1-cp38-cp38-manylinux_2_12_x86_64.manylinux2010_x86_64.whl\n    0318c465786c1f63ac05d7c4dbcecd4d2d7e13f0959b01b534ea1e92202235c5  numpy-1.21.1-cp38-cp38-manylinux_2_17_aarch64.manylinux2014_aarch64.whl\n    9a513bd9c1551894ee3d31369f9b07460ef223694098cf27d399513415855b68  numpy-1.21.1-cp38-cp38-manylinux_2_5_i686.manylinux1_i686.whl\n    91c6f5fc58df1e0a3cc0c3a717bb3308ff850abdaa6d2d802573ee2b11f674a8  numpy-1.21.1-cp38-cp38-manylinux_2_5_x86_64.manylinux1_x86_64.whl\n    978010b68e17150db8765355d1ccdd450f9fc916824e8c4e35ee620590e234cd  numpy-1.21.1-cp38-cp38-win32.whl\n    9749a40a5b22333467f02fe11edc98f022133ee1bfa8ab99bda5e5437b831214  numpy-1.21.1-cp38-cp38-win_amd64.whl\n    d7a4aeac3b94af92a9373d6e77b37691b86411f9745190d2c351f410ab3a791f  numpy-1.21.1-cp39-cp39-macosx_10_9_universal2.whl\n    d9e7912a56108aba9b31df688a4c4f5cb0d9d3787386b87d504762b6754fbb1b  numpy-1.21.1-cp39-cp39-macosx_10_9_x86_64.whl\n    25b40b98ebdd272bc3020935427a4530b7d60dfbe1ab9381a39147834e985eac  numpy-1.21.1-cp39-cp39-macosx_11_0_arm64.whl\n    8a92c5aea763d14ba9d6475803fc7904bda7decc2a0a68153f587ad82941fec1  numpy-1.21.1-cp39-cp39-manylinux_2_12_i686.manylinux2010_i686.whl\n    05a0f648eb28bae4bcb204e6fd14603de2908de982e761a2fc78efe0f19e96e1  numpy-1.21.1-cp39-cp39-manylinux_2_12_x86_64.manylinux2010_x86_64.whl\n    f01f28075a92eede918b965e86e8f0ba7b7797a95aa8d35e1cc8821f5fc3ad6a  numpy-1.21.1-cp39-cp39-manylinux_2_17_aarch64.manylinux2014_aarch64.whl\n    88c0b89ad1cc24a5efbb99ff9ab5db0f9a86e9cc50240177a571fbe9c2860ac2  numpy-1.21.1-cp39-cp39-win32.whl\n    01721eefe70544d548425a07c80be8377096a54118070b8a62476866d5208e33  numpy-1.21.1-cp39-cp39-win_amd64.whl\n    2d4d1de6e6fb3d28781c73fbde702ac97f03d79e4ffd6598b880b2d95d62ead4  numpy-1.21.1-pp37-pypy37_pp73-manylinux_2_12_x86_64.manylinux2010_x86_64.whl\n    504ced5d900fd5724c74ebf5dbb03572c04074bec9baa24b5646c66a2450e654  numpy-1.21.1.tar.gz\n    dff4af63638afcc57a3dfb9e4b26d434a7a602d225b42d746ea7fe2edf1342fd  numpy-1.21.1.zip\n\n\n.. currentmodule:: numpy\n\n==========================\n", "1.21.5": "==========================\n\nNumPy 1.21.5 is a maintenance release that fixes a few bugs discovered after\nthe 1.21.4 release and does some maintenance to extend the 1.21.x lifetime.\nThe Python versions supported in this release are 3.7-3.10. If you want to\ncompile your own version using gcc-11, you will need to use gcc-11.2+ to avoid\nproblems.\n\nContributors\n============\n\nA total of 7 people contributed to this release.  People with a \"+\" by their\nnames contributed a patch for the first time.\n\n* Bas van Beek\n* Charles Harris\n* Matti Picus\n* Rohit Goswami\n* Ross Barnowski\n* Sayed Adel\n* Sebastian Berg\n\nPull requests merged\n====================\n\nA total of 11 pull requests were merged for this release.\n\n* `20357 <https://github.com/numpy/numpy/pull/20357>`__: MAINT: Do not forward ``__(deep)copy__`` calls of ``_GenericAlias``...\n* `20462 <https://github.com/numpy/numpy/pull/20462>`__: BUG: Fix float16 einsum fastpaths using wrong tempvar\n* `20463 <https://github.com/numpy/numpy/pull/20463>`__: BUG, DIST: Print os error message when the executable not exist\n* `20464 <https://github.com/numpy/numpy/pull/20464>`__: BLD: Verify the ability to compile C++ sources before initiating...\n* `20465 <https://github.com/numpy/numpy/pull/20465>`__: BUG: Force ``npymath` ` to respect ``npy_longdouble``\n* `20466 <https://github.com/numpy/numpy/pull/20466>`__: BUG: Fix failure to create aligned, empty structured dtype\n* `20467 <https://github.com/numpy/numpy/pull/20467>`__: ENH: provide a convenience function to replace npy_load_module\n* `20495 <https://github.com/numpy/numpy/pull/20495>`__: MAINT: update wheel to version that supports python3.10\n* `20497 <https://github.com/numpy/numpy/pull/20497>`__: BUG: Clear errors correctly in F2PY conversions\n* `20613 <https://github.com/numpy/numpy/pull/20613>`__: DEV: add a warningfilter to fix pytest workflow.\n* `20618 <https://github.com/numpy/numpy/pull/20618>`__: MAINT: Help boost::python libraries at least not crash\n\nChecksums\n=========\n\nMD5\n---\n::\n\n    e00a3c2e1461dd2920ab4af6b753d3da  numpy-1.21.5-cp310-cp310-macosx_10_9_universal2.whl\n    50e0526fa29110fb6033fa8285fba4e1  numpy-1.21.5-cp310-cp310-macosx_10_9_x86_64.whl\n    bdbb19e7656d66250aa67bd1c7924764  numpy-1.21.5-cp310-cp310-macosx_11_0_arm64.whl\n    c5c982a07797c8963b8fec44aae6db09  numpy-1.21.5-cp310-cp310-manylinux_2_17_aarch64.manylinux2014_aarch64.whl\n    8b27b622f58caeeb7f14472651d655e3  numpy-1.21.5-cp310-cp310-manylinux_2_17_x86_64.manylinux2014_x86_64.whl\n    e545f6f85f950f57606efcaeeac2e50a  numpy-1.21.5-cp310-cp310-win_amd64.whl\n    5c36eefdcb039c0d4db8882fddbeb695  numpy-1.21.5-cp37-cp37m-macosx_10_9_x86_64.whl\n    b5d080e0fd8b658419b3636f1cf5dc3a  numpy-1.21.5-cp37-cp37m-manylinux_2_12_i686.manylinux2010_i686.whl\n    ec1a9a1333a2bf61897f105ecd9f212a  numpy-1.21.5-cp37-cp37m-manylinux_2_12_x86_64.manylinux2010_x86_64.whl\n    d5ab050300748f20cdc9c6e17ba8ffd4  numpy-1.21.5-cp37-cp37m-manylinux_2_17_aarch64.manylinux2014_aarch64.whl\n    b7498a1d0ea7273ef1af56d58e02a550  numpy-1.21.5-cp37-cp37m-win32.whl\n    f55c7ecfd35769fb3f6a408c0c123372  numpy-1.21.5-cp37-cp37m-win_amd64.whl\n    843e3431ba4b56d3fc36b7c4cb6fc10c  numpy-1.21.5-cp38-cp38-macosx_10_9_universal2.whl\n    4721e71bdc5697d310cd3a6b6cd60741  numpy-1.21.5-cp38-cp38-macosx_10_9_x86_64.whl\n    2169fb8ed40046e1e33d187fc85b91bb  numpy-1.21.5-cp38-cp38-macosx_11_0_arm64.whl\n    52de43977749109509ee708a142a7d97  numpy-1.21.5-cp38-cp38-manylinux_2_12_i686.manylinux2010_i686.whl\n    703c0f54c5ede8cc0c648ef66cafac47  numpy-1.21.5-cp38-cp38-manylinux_2_12_x86_64.manylinux2010_x86_64.whl\n    50432f9cf1d5b2278ceb7a96890353ed  numpy-1.21.5-cp38-cp38-manylinux_2_17_aarch64.manylinux2014_aarch64.whl\n    0c4c5336136e045d02c60ba8115eb6a2  numpy-1.21.5-cp38-cp38-win32.whl\n    c2e0744164f8255be70725ef42bc3f5b  numpy-1.21.5-cp38-cp38-win_amd64.whl\n    b16dd7103117d051cb6c3b6c4434f7d2  numpy-1.21.5-cp39-cp39-macosx_10_9_universal2.whl\n    220dd07273aeb0b2ca8f0e4f543e43c3  numpy-1.21.5-cp39-cp39-macosx_10_9_x86_64.whl\n    1dd09ad75eff93b274f650871e0b9287  numpy-1.21.5-cp39-cp39-macosx_11_0_arm64.whl\n    6801263f51d3b13420b59ff84c716869  numpy-1.21.5-cp39-cp39-manylinux_2_12_i686.manylinux2010_i686.whl\n    035bde3955ae2f62ada65084d71a7421  numpy-1.21.5-cp39-cp39-manylinux_2_12_x86_64.manylinux2010_x86_64.whl\n    09f202576cbd0ed6121cff10cdea831a  numpy-1.21.5-cp39-cp39-manylinux_2_17_aarch64.manylinux2014_aarch64.whl\n    c6a44c90c2d5124fea6cedbbf575e252  numpy-1.21.5-cp39-cp39-win32.whl\n    bbc11e31406a9fc48c18a41259bc8866  numpy-1.21.5-cp39-cp39-win_amd64.whl\n    5be2b6f6cf6fb3a3d98231e891260624  numpy-1.21.5-pp37-pypy37_pp73-manylinux_2_12_x86_64.manylinux2010_x86_64.whl\n    8bc9ff24bac9bf4268372cefea8f0b6b  numpy-1.21.5.tar.gz\n    88b5438ded7992fa2e6a810d43cd32a1  numpy-1.21.5.zip\n\nSHA256\n------\n::\n\n    301e408a052fdcda5cdcf03021ebafc3c6ea093021bf9d1aa47c54d48bdad166  numpy-1.21.5-cp310-cp310-macosx_10_9_universal2.whl\n    a7e8f6216f180f3fd4efb73de5d1eaefb5f5a1ee5b645c67333033e39440e63a  numpy-1.21.5-cp310-cp310-macosx_10_9_x86_64.whl\n    fc7a7d7b0ed72589fd8b8486b9b42a564f10b8762be8bd4d9df94b807af4a089  numpy-1.21.5-cp310-cp310-macosx_11_0_arm64.whl\n    58ca1d7c8aef6e996112d0ce873ac9dfa1eaf4a1196b4ff7ff73880a09923ba7  numpy-1.21.5-cp310-cp310-manylinux_2_17_aarch64.manylinux2014_aarch64.whl\n    dc4b2fb01f1b4ddbe2453468ea0719f4dbb1f5caa712c8b21bb3dd1480cd30d9  numpy-1.21.5-cp310-cp310-manylinux_2_17_x86_64.manylinux2014_x86_64.whl\n    cc1b30205d138d1005adb52087ff45708febbef0e420386f58664f984ef56954  numpy-1.21.5-cp310-cp310-win_amd64.whl\n    08de8472d9f7571f9d51b27b75e827f5296295fa78817032e84464be8bb905bc  numpy-1.21.5-cp37-cp37m-macosx_10_9_x86_64.whl\n    4fe6a006557b87b352c04596a6e3f12a57d6e5f401d804947bd3188e6b0e0e76  numpy-1.21.5-cp37-cp37m-manylinux_2_12_i686.manylinux2010_i686.whl\n    3d893b0871322eaa2f8c7072cdb552d8e2b27645b7875a70833c31e9274d4611  numpy-1.21.5-cp37-cp37m-manylinux_2_12_x86_64.manylinux2010_x86_64.whl\n    341dddcfe3b7b6427a28a27baa59af5ad51baa59bfec3264f1ab287aa3b30b13  numpy-1.21.5-cp37-cp37m-manylinux_2_17_aarch64.manylinux2014_aarch64.whl\n    ca9c23848292c6fe0a19d212790e62f398fd9609aaa838859be8459bfbe558aa  numpy-1.21.5-cp37-cp37m-win32.whl\n    025b497014bc33fc23897859350f284323f32a2fff7654697f5a5fc2a19e9939  numpy-1.21.5-cp37-cp37m-win_amd64.whl\n    3a5098df115340fb17fc93867317a947e1dcd978c3888c5ddb118366095851f8  numpy-1.21.5-cp38-cp38-macosx_10_9_universal2.whl\n    311283acf880cfcc20369201bd75da907909afc4666966c7895cbed6f9d2c640  numpy-1.21.5-cp38-cp38-macosx_10_9_x86_64.whl\n    b545ebadaa2b878c8630e5bcdb97fc4096e779f335fc0f943547c1c91540c815  numpy-1.21.5-cp38-cp38-macosx_11_0_arm64.whl\n    c5562bcc1a9b61960fc8950ade44d00e3de28f891af0acc96307c73613d18f6e  numpy-1.21.5-cp38-cp38-manylinux_2_12_i686.manylinux2010_i686.whl\n    eed2afaa97ec33b4411995be12f8bdb95c87984eaa28d76cf628970c8a2d689a  numpy-1.21.5-cp38-cp38-manylinux_2_12_x86_64.manylinux2010_x86_64.whl\n    61bada43d494515d5b122f4532af226fdb5ee08fe5b5918b111279843dc6836a  numpy-1.21.5-cp38-cp38-manylinux_2_17_aarch64.manylinux2014_aarch64.whl\n    7b9d6b14fc9a4864b08d1ba57d732b248f0e482c7b2ff55c313137e3ed4d8449  numpy-1.21.5-cp38-cp38-win32.whl\n    dbce7adeb66b895c6aaa1fad796aaefc299ced597f6fbd9ceddb0dd735245354  numpy-1.21.5-cp38-cp38-win_amd64.whl\n    507c05c7a37b3683eb08a3ff993bd1ee1e6c752f77c2f275260533b265ecdb6c  numpy-1.21.5-cp39-cp39-macosx_10_9_universal2.whl\n    00c9fa73a6989895b8815d98300a20ac993c49ac36c8277e8ffeaa3631c0dbbb  numpy-1.21.5-cp39-cp39-macosx_10_9_x86_64.whl\n    69a5a8d71c308d7ef33ef72371c2388a90e3495dbb7993430e674006f94797d5  numpy-1.21.5-cp39-cp39-macosx_11_0_arm64.whl\n    2d8adfca843bc46ac199a4645233f13abf2011a0b2f4affc5c37cd552626f27b  numpy-1.21.5-cp39-cp39-manylinux_2_12_i686.manylinux2010_i686.whl\n    c293d3c0321996cd8ffe84215ffe5d269fd9d1d12c6f4ffe2b597a7c30d3e593  numpy-1.21.5-cp39-cp39-manylinux_2_12_x86_64.manylinux2010_x86_64.whl\n    3c978544be9e04ed12016dd295a74283773149b48f507d69b36f91aa90a643e5  numpy-1.21.5-cp39-cp39-manylinux_2_17_aarch64.manylinux2014_aarch64.whl\n    2a9add27d7fc0fdb572abc3b2486eb3b1395da71e0254c5552b2aad2a18b5441  numpy-1.21.5-cp39-cp39-win32.whl\n    1964db2d4a00348b7a60ee9d013c8cb0c566644a589eaa80995126eac3b99ced  numpy-1.21.5-cp39-cp39-win_amd64.whl\n    a7c4b701ca418cd39e28ec3b496e6388fe06de83f5f0cb74794fa31cfa384c02  numpy-1.21.5-pp37-pypy37_pp73-manylinux_2_12_x86_64.manylinux2010_x86_64.whl\n    1a7ee0ffb35dc7489aebe5185a483f4c43b0d2cf784c3c9940f975a7dde56506  numpy-1.21.5.tar.gz\n    6a5928bc6241264dce5ed509e66f33676fc97f464e7a919edc672fb5532221ee  numpy-1.21.5.zip\n\n\n.. currentmodule:: numpy\n\n==========================\n", "1.18.2": "==========================\n\nThis small elease contains a fix for a performance regression in numpy/random\nand several bug/maintenance updates.\n\nThe Python versions supported in this release are 3.5-3.8. Downstream\ndevelopers should use Cython >= 0.29.15 for Python 3.8 support and OpenBLAS >=\n3.7 to avoid errors on the Skylake architecture.\n\n\nContributors\n============\n\nA total of 5 people contributed to this release.  People with a \"+\" by their\nnames contributed a patch for the first time.\n\n* Charles Harris\n* Ganesh Kathiresan +\n* Matti Picus\n* Sebastian Berg\n* przemb +\n\n\nPull requests merged\n====================\n\nA total of 7 pull requests were merged for this release.\n\n* `15675 <https://github.com/numpy/numpy/pull/15675>`__: TST: move _no_tracing to testing._private\n* `15676 <https://github.com/numpy/numpy/pull/15676>`__: MAINT: Large overhead in some random functions\n* `15677 <https://github.com/numpy/numpy/pull/15677>`__: TST: Do not create gfortran link in azure Mac testing.\n* `15679 <https://github.com/numpy/numpy/pull/15679>`__: BUG: Added missing error check in `ndarray.__contains__`\n* `15722 <https://github.com/numpy/numpy/pull/15722>`__: MAINT: use list-based APIs to call subprocesses\n* `15729 <https://github.com/numpy/numpy/pull/15729>`__: REL: Prepare for 1.18.2 release.\n* `15734 <https://github.com/numpy/numpy/pull/15734>`__: BUG: fix logic error when nm fails on 32-bit\n\nChecksums\n=========\n\nMD5\n---\n::\n\n    b9efe544f2bfbbd4e226c5639f22b1d2  numpy-1.18.2-cp35-cp35m-macosx_10_9_x86_64.whl\n    59c0bc09053c0029e829685dcb3dafa5  numpy-1.18.2-cp35-cp35m-manylinux1_i686.whl\n    1783f9194ceeabb236bd46ed6cb6ed60  numpy-1.18.2-cp35-cp35m-manylinux1_x86_64.whl\n    8a6fa57b509e6d9e194fb43b0ac5bbc7  numpy-1.18.2-cp35-cp35m-win32.whl\n    3167feeb5e30445ca7beed1d55b6d73a  numpy-1.18.2-cp35-cp35m-win_amd64.whl\n    c193d593d3b8a46c610511a69c86f879  numpy-1.18.2-cp36-cp36m-macosx_10_9_x86_64.whl\n    f31c65b4699b12e73b36eb268931dbdc  numpy-1.18.2-cp36-cp36m-manylinux1_i686.whl\n    f5b0613cacaaf2179528a36b75712d65  numpy-1.18.2-cp36-cp36m-manylinux1_x86_64.whl\n    77e40c0481f2c1608d344032038fa969  numpy-1.18.2-cp36-cp36m-win32.whl\n    2c402211d77a10025b047042d191839b  numpy-1.18.2-cp36-cp36m-win_amd64.whl\n    3adec0f3cd5946ae7a0ab67790b2d8f1  numpy-1.18.2-cp37-cp37m-macosx_10_9_x86_64.whl\n    baea3b06dac41d5f6f1fbb7a62114656  numpy-1.18.2-cp37-cp37m-manylinux1_i686.whl\n    99b3c14bfc303c662b899d1a5ca4df6a  numpy-1.18.2-cp37-cp37m-manylinux1_x86_64.whl\n    293066cca2b3772fa3ae204f6ff98ce7  numpy-1.18.2-cp37-cp37m-win32.whl\n    21f3cda116631da8823a621e90c30bbb  numpy-1.18.2-cp37-cp37m-win_amd64.whl\n    47978cedd45ded509073025c1aa60506  numpy-1.18.2-cp38-cp38-macosx_10_9_x86_64.whl\n    4864078352c7faa69a8f9e98e48f7d8a  numpy-1.18.2-cp38-cp38-manylinux1_i686.whl\n    c0111a5fce4aa57004366e9d5edc5644  numpy-1.18.2-cp38-cp38-manylinux1_x86_64.whl\n    7f8ca4e685e607f80ad002495b603436  numpy-1.18.2-cp38-cp38-win32.whl\n    e8e192005a0b8045928f0ac712762a6f  numpy-1.18.2-cp38-cp38-win_amd64.whl\n    52601ac4cfbd513218bc088b74715098  numpy-1.18.2.tar.gz\n    511010c9fbd2516fe5a24aabcb76a56d  numpy-1.18.2.zip\n\nSHA256\n------\n::\n\n    a1baa1dc8ecd88fb2d2a651671a84b9938461e8a8eed13e2f0a812a94084d1fa  numpy-1.18.2-cp35-cp35m-macosx_10_9_x86_64.whl\n    a244f7af80dacf21054386539699ce29bcc64796ed9850c99a34b41305630286  numpy-1.18.2-cp35-cp35m-manylinux1_i686.whl\n    6fcc5a3990e269f86d388f165a089259893851437b904f422d301cdce4ff25c8  numpy-1.18.2-cp35-cp35m-manylinux1_x86_64.whl\n    b5ad0adb51b2dee7d0ee75a69e9871e2ddfb061c73ea8bc439376298141f77f5  numpy-1.18.2-cp35-cp35m-win32.whl\n    87902e5c03355335fc5992a74ba0247a70d937f326d852fc613b7f53516c0963  numpy-1.18.2-cp35-cp35m-win_amd64.whl\n    9ab21d1cb156a620d3999dd92f7d1c86824c622873841d6b080ca5495fa10fef  numpy-1.18.2-cp36-cp36m-macosx_10_9_x86_64.whl\n    cdb3a70285e8220875e4d2bc394e49b4988bdb1298ffa4e0bd81b2f613be397c  numpy-1.18.2-cp36-cp36m-manylinux1_i686.whl\n    6d205249a0293e62bbb3898c4c2e1ff8a22f98375a34775a259a0523111a8f6c  numpy-1.18.2-cp36-cp36m-manylinux1_x86_64.whl\n    a35af656a7ba1d3decdd4fae5322b87277de8ac98b7d9da657d9e212ece76a61  numpy-1.18.2-cp36-cp36m-win32.whl\n    1598a6de323508cfeed6b7cd6c4efb43324f4692e20d1f76e1feec7f59013448  numpy-1.18.2-cp36-cp36m-win_amd64.whl\n    deb529c40c3f1e38d53d5ae6cd077c21f1d49e13afc7936f7f868455e16b64a0  numpy-1.18.2-cp37-cp37m-macosx_10_9_x86_64.whl\n    cd77d58fb2acf57c1d1ee2835567cd70e6f1835e32090538f17f8a3a99e5e34b  numpy-1.18.2-cp37-cp37m-manylinux1_i686.whl\n    b1fe1a6f3a6f355f6c29789b5927f8bd4f134a4bd9a781099a7c4f66af8850f5  numpy-1.18.2-cp37-cp37m-manylinux1_x86_64.whl\n    2e40be731ad618cb4974d5ba60d373cdf4f1b8dcbf1dcf4d9dff5e212baf69c5  numpy-1.18.2-cp37-cp37m-win32.whl\n    4ba59db1fcc27ea31368af524dcf874d9277f21fd2e1f7f1e2e0c75ee61419ed  numpy-1.18.2-cp37-cp37m-win_amd64.whl\n    59ca9c6592da581a03d42cc4e270732552243dc45e87248aa8d636d53812f6a5  numpy-1.18.2-cp38-cp38-macosx_10_9_x86_64.whl\n    1b0ece94018ae21163d1f651b527156e1f03943b986188dd81bc7e066eae9d1c  numpy-1.18.2-cp38-cp38-manylinux1_i686.whl\n    82847f2765835c8e5308f136bc34018d09b49037ec23ecc42b246424c767056b  numpy-1.18.2-cp38-cp38-manylinux1_x86_64.whl\n    5e0feb76849ca3e83dd396254e47c7dba65b3fa9ed3df67c2556293ae3e16de3  numpy-1.18.2-cp38-cp38-win32.whl\n    ba3c7a2814ec8a176bb71f91478293d633c08582119e713a0c5351c0f77698da  numpy-1.18.2-cp38-cp38-win_amd64.whl\n    da204ce460aa4247e595b7c7189d2fb2ed5f796bc03197055de01dac61d0125e  numpy-1.18.2.tar.gz\n    e7894793e6e8540dbeac77c87b489e331947813511108ae097f1715c018b8f3d  numpy-1.18.2.zip\n\n\n.. currentmodule:: numpy\n\n==========================\n", "1.23.3": "==========================\nNumPy 1.23.3 is a maintenance release that fixes bugs discovered after the\n1.23.2 release. There is no major theme for this release, the main improvements\nare for some downstream builds and some annotation corner cases. The Python\nversions supported for this release are 3.8-3.11.\n\nNote that we will move to MacOS 11 for the NumPy 1.23.4 release, the 10.15\nversion currently used will no longer be supported by our build infrastructure\nat that point.\n\nContributors\n============\n\nA total of 16 people contributed to this release.  People with a \"+\" by their\nnames contributed a patch for the first time.\n\n* Aaron Meurer\n* Bas van Beek\n* Charles Harris\n* Ganesh Kathiresan\n* Gavin Zhang +\n* Iantra Solari+\n* Jyn Spring \u7434\u6625 +\n* Matti Picus\n* Rafael Cardoso Fernandes Sousa\n* Rafael Sousa +\n* Ralf Gommers\n* Rin Cat (\u9234\u732b) +\n* Saransh Chopra +\n* Sayed Adel\n* Sebastian Berg\n* Serge Guelton\n\nPull requests merged\n====================\n\nA total of 14 pull requests were merged for this release.\n\n* `22136 <https://github.com/numpy/numpy/pull/22136>`__: BLD: Add Python 3.11 wheels to aarch64 build\n* `22148 <https://github.com/numpy/numpy/pull/22148>`__: MAINT: Update setup.py for Python 3.11.\n* `22155 <https://github.com/numpy/numpy/pull/22155>`__: CI: Test NumPy build against old versions of GCC(6, 7, 8)\n* `22156 <https://github.com/numpy/numpy/pull/22156>`__: MAINT: support IBM i system\n* `22195 <https://github.com/numpy/numpy/pull/22195>`__: BUG: Fix circleci build\n* `22214 <https://github.com/numpy/numpy/pull/22214>`__: BUG: Expose heapsort algorithms in a shared header\n* `22215 <https://github.com/numpy/numpy/pull/22215>`__: BUG: Support using libunwind for backtrack\n* `22216 <https://github.com/numpy/numpy/pull/22216>`__: MAINT: fix an incorrect pointer type usage in f2py\n* `22220 <https://github.com/numpy/numpy/pull/22220>`__: BUG: change overloads to play nice with pyright.\n* `22221 <https://github.com/numpy/numpy/pull/22221>`__: TST,BUG: Use fork context to fix MacOS savez test\n* `22222 <https://github.com/numpy/numpy/pull/22222>`__: TYP,BUG: Reduce argument validation in C-based ``__class_getitem__``\n* `22223 <https://github.com/numpy/numpy/pull/22223>`__: TST: ensure ``np.equal.reduce`` raises a ``TypeError``\n* `22224 <https://github.com/numpy/numpy/pull/22224>`__: BUG: Fix the implementation of numpy.array_api.vecdot\n* `22230 <https://github.com/numpy/numpy/pull/22230>`__: BUG: Better report integer division overflow (backport)\n\nChecksums\n=========\n\nMD5\n---\n::\n\n    a60bf0b1d440bf18d87c49409036d05a  numpy-1.23.3-cp310-cp310-macosx_10_9_x86_64.whl\n    59b43423a692f5351c6a43b852b210d7  numpy-1.23.3-cp310-cp310-macosx_11_0_arm64.whl\n    f482a4be6954b1b606320f0ffc1995dd  numpy-1.23.3-cp310-cp310-manylinux_2_17_aarch64.manylinux2014_aarch64.whl\n    a82e2ecc4060a37dae5424e624eabfe3  numpy-1.23.3-cp310-cp310-manylinux_2_17_x86_64.manylinux2014_x86_64.whl\n    84916178e5f4d073d0008754cba7f300  numpy-1.23.3-cp310-cp310-win32.whl\n    605da65b9b66dfce8b62d847cb3841f7  numpy-1.23.3-cp310-cp310-win_amd64.whl\n    57cf29f781be955a9cd0de8d07fbce56  numpy-1.23.3-cp311-cp311-macosx_10_9_x86_64.whl\n    f395dcf622dff0ba44777cbae0442189  numpy-1.23.3-cp311-cp311-macosx_11_0_arm64.whl\n    55d6a6439913ba84ad89268e0ad59fa0  numpy-1.23.3-cp311-cp311-manylinux_2_17_aarch64.manylinux2014_aarch64.whl\n    202bc3a8617f479ebe60ca0dec29964b  numpy-1.23.3-cp311-cp311-manylinux_2_17_x86_64.manylinux2014_x86_64.whl\n    a42c3d058bcef47b26841bf9472a89bf  numpy-1.23.3-cp311-cp311-win32.whl\n    237dbd94e5529065c0c5cc4e47ceeb7e  numpy-1.23.3-cp311-cp311-win_amd64.whl\n    d0587d5b28d3fa7e0ec8fd3df76e4bd4  numpy-1.23.3-cp38-cp38-macosx_10_9_x86_64.whl\n    054234695ed3d955fb01f661db2c14fc  numpy-1.23.3-cp38-cp38-macosx_11_0_arm64.whl\n    4e75ac61e34f1bf23e7cbd6e2bfc7a32  numpy-1.23.3-cp38-cp38-manylinux_2_17_aarch64.manylinux2014_aarch64.whl\n    29ccb3a732027ee1abe23a9562c32d0c  numpy-1.23.3-cp38-cp38-manylinux_2_17_x86_64.manylinux2014_x86_64.whl\n    12817838edc1e1bea27df79f3a83da5d  numpy-1.23.3-cp38-cp38-win32.whl\n    ef430e830a9fea7d8db0218b901671f6  numpy-1.23.3-cp38-cp38-win_amd64.whl\n    b001f7e17df798f9b949bbe259924c77  numpy-1.23.3-cp39-cp39-macosx_10_9_x86_64.whl\n    bc1782f5d79187d63d14ed69a6a411e9  numpy-1.23.3-cp39-cp39-macosx_11_0_arm64.whl\n    f8fb0178bc34a198d5ce4e166076e1fc  numpy-1.23.3-cp39-cp39-manylinux_2_17_aarch64.manylinux2014_aarch64.whl\n    fb80d38c37aae1e4d416cd4de068ff0a  numpy-1.23.3-cp39-cp39-manylinux_2_17_x86_64.manylinux2014_x86_64.whl\n    318d0a2a27b7e361295c0382a0ff4a94  numpy-1.23.3-cp39-cp39-win32.whl\n    880dc73de09fccda0650e9404fa83608  numpy-1.23.3-cp39-cp39-win_amd64.whl\n    3b5a51f78718a1a82d2750ec159f9acf  numpy-1.23.3-pp38-pypy38_pp73-macosx_10_9_x86_64.whl\n    56a0c90a303979d5bf8fc57e86e57ccb  numpy-1.23.3-pp38-pypy38_pp73-manylinux_2_17_x86_64.manylinux2014_x86_64.whl\n    5338d997a3178750834e742a257dfa4a  numpy-1.23.3-pp38-pypy38_pp73-win_amd64.whl\n    6efc60a3f6c1b74c849d53fbcc07807b  numpy-1.23.3.tar.gz\n\nSHA256\n------\n::\n\n    c9f707b5bb73bf277d812ded9896f9512a43edff72712f31667d0a8c2f8e71ee  numpy-1.23.3-cp310-cp310-macosx_10_9_x86_64.whl\n    ffcf105ecdd9396e05a8e58e81faaaf34d3f9875f137c7372450baa5d77c9a54  numpy-1.23.3-cp310-cp310-macosx_11_0_arm64.whl\n    0ea3f98a0ffce3f8f57675eb9119f3f4edb81888b6874bc1953f91e0b1d4f440  numpy-1.23.3-cp310-cp310-manylinux_2_17_aarch64.manylinux2014_aarch64.whl\n    004f0efcb2fe1c0bd6ae1fcfc69cc8b6bf2407e0f18be308612007a0762b4089  numpy-1.23.3-cp310-cp310-manylinux_2_17_x86_64.manylinux2014_x86_64.whl\n    98dcbc02e39b1658dc4b4508442a560fe3ca5ca0d989f0df062534e5ca3a5c1a  numpy-1.23.3-cp310-cp310-win32.whl\n    39a664e3d26ea854211867d20ebcc8023257c1800ae89773cbba9f9e97bae036  numpy-1.23.3-cp310-cp310-win_amd64.whl\n    1f27b5322ac4067e67c8f9378b41c746d8feac8bdd0e0ffede5324667b8a075c  numpy-1.23.3-cp311-cp311-macosx_10_9_x86_64.whl\n    2ad3ec9a748a8943e6eb4358201f7e1c12ede35f510b1a2221b70af4bb64295c  numpy-1.23.3-cp311-cp311-macosx_11_0_arm64.whl\n    bdc9febce3e68b697d931941b263c59e0c74e8f18861f4064c1f712562903411  numpy-1.23.3-cp311-cp311-manylinux_2_17_aarch64.manylinux2014_aarch64.whl\n    301c00cf5e60e08e04d842fc47df641d4a181e651c7135c50dc2762ffe293dbd  numpy-1.23.3-cp311-cp311-manylinux_2_17_x86_64.manylinux2014_x86_64.whl\n    7cd1328e5bdf0dee621912f5833648e2daca72e3839ec1d6695e91089625f0b4  numpy-1.23.3-cp311-cp311-win32.whl\n    8355fc10fd33a5a70981a5b8a0de51d10af3688d7a9e4a34fcc8fa0d7467bb7f  numpy-1.23.3-cp311-cp311-win_amd64.whl\n    bc6e8da415f359b578b00bcfb1d08411c96e9a97f9e6c7adada554a0812a6cc6  numpy-1.23.3-cp38-cp38-macosx_10_9_x86_64.whl\n    22d43376ee0acd547f3149b9ec12eec2f0ca4a6ab2f61753c5b29bb3e795ac4d  numpy-1.23.3-cp38-cp38-macosx_11_0_arm64.whl\n    a64403f634e5ffdcd85e0b12c08f04b3080d3e840aef118721021f9b48fc1460  numpy-1.23.3-cp38-cp38-manylinux_2_17_aarch64.manylinux2014_aarch64.whl\n    efd9d3abe5774404becdb0748178b48a218f1d8c44e0375475732211ea47c67e  numpy-1.23.3-cp38-cp38-manylinux_2_17_x86_64.manylinux2014_x86_64.whl\n    f8c02ec3c4c4fcb718fdf89a6c6f709b14949408e8cf2a2be5bfa9c49548fd85  numpy-1.23.3-cp38-cp38-win32.whl\n    e868b0389c5ccfc092031a861d4e158ea164d8b7fdbb10e3b5689b4fc6498df6  numpy-1.23.3-cp38-cp38-win_amd64.whl\n    09f6b7bdffe57fc61d869a22f506049825d707b288039d30f26a0d0d8ea05164  numpy-1.23.3-cp39-cp39-macosx_10_9_x86_64.whl\n    8c79d7cf86d049d0c5089231a5bcd31edb03555bd93d81a16870aa98c6cfb79d  numpy-1.23.3-cp39-cp39-macosx_11_0_arm64.whl\n    e5d5420053bbb3dd64c30e58f9363d7a9c27444c3648e61460c1237f9ec3fa14  numpy-1.23.3-cp39-cp39-manylinux_2_17_aarch64.manylinux2014_aarch64.whl\n    d5422d6a1ea9b15577a9432e26608c73a78faf0b9039437b075cf322c92e98e7  numpy-1.23.3-cp39-cp39-manylinux_2_17_x86_64.manylinux2014_x86_64.whl\n    c1ba66c48b19cc9c2975c0d354f24058888cdc674bebadceb3cdc9ec403fb5d1  numpy-1.23.3-cp39-cp39-win32.whl\n    78a63d2df1d947bd9d1b11d35564c2f9e4b57898aae4626638056ec1a231c40c  numpy-1.23.3-cp39-cp39-win_amd64.whl\n    17c0e467ade9bda685d5ac7f5fa729d8d3e76b23195471adae2d6a6941bd2c18  numpy-1.23.3-pp38-pypy38_pp73-macosx_10_9_x86_64.whl\n    91b8d6768a75247026e951dce3b2aac79dc7e78622fc148329135ba189813584  numpy-1.23.3-pp38-pypy38_pp73-manylinux_2_17_x86_64.manylinux2014_x86_64.whl\n    94c15ca4e52671a59219146ff584488907b1f9b3fc232622b47e2cf832e94fb8  numpy-1.23.3-pp38-pypy38_pp73-win_amd64.whl\n    51bf49c0cd1d52be0a240aa66f3458afc4b95d8993d2d04f0d91fa60c10af6cd  numpy-1.23.3.tar.gz\n\n\n-----BEGIN PGP SIGNED MESSAGE-----\nHash: SHA256\n\n==========================\n", "1.16.5": "==========================\n\nThe NumPy 1.16.5 release fixes bugs reported against the 1.16.4 release, and\nalso backports several enhancements from master that seem appropriate for a\nrelease series that is the last to support Python 2.7. The wheels on PyPI are\nlinked with OpenBLAS v0.3.7-dev, which should fix errors on Skylake series\ncpus.\n\nDownstream developers building this release should use Cython >= 0.29.2 and, if\nusing OpenBLAS, OpenBLAS >= v0.3.7. The supported Python versions are 2.7 and\n3.5-3.7.\n\n\nContributors\n============\n\nA total of 18 people contributed to this release.  People with a \"+\" by their\nnames contributed a patch for the first time.\n\n* Alexander Shadchin\n* Allan Haldane\n* Bruce Merry +\n* Charles Harris\n* Colin Snyder +\n* Dan Allan +\n* Emile +\n* Eric Wieser\n* Grey Baker +\n* Maksim Shabunin +\n* Marten van Kerkwijk\n* Matti Picus\n* Peter Andreas Entschev +\n* Ralf Gommers\n* Richard Harris +\n* Sebastian Berg\n* Sergei Lebedev +\n* Stephan Hoyer\n\nPull requests merged\n====================\n\nA total of 23 pull requests were merged for this release.\n\n* `13742 <https://github.com/numpy/numpy/pull/13742>`__: ENH: Add project URLs to setup.py\n* `13823 <https://github.com/numpy/numpy/pull/13823>`__: TEST, ENH: fix tests and ctypes code for PyPy\n* `13845 <https://github.com/numpy/numpy/pull/13845>`__: BUG: use npy_intp instead of int for indexing array\n* `13867 <https://github.com/numpy/numpy/pull/13867>`__: TST: Ignore DeprecationWarning during nose imports\n* `13905 <https://github.com/numpy/numpy/pull/13905>`__: BUG: Fix use-after-free in boolean indexing\n* `13933 <https://github.com/numpy/numpy/pull/13933>`__: MAINT/BUG/DOC: Fix errors in _add_newdocs\n* `13984 <https://github.com/numpy/numpy/pull/13984>`__: BUG: fix byte order reversal for datetime64[ns]\n* `13994 <https://github.com/numpy/numpy/pull/13994>`__: MAINT,BUG: Use nbytes to also catch empty descr during allocation\n* `14042 <https://github.com/numpy/numpy/pull/14042>`__: BUG: np.array cleared errors occured in PyMemoryView_FromObject\n* `14043 <https://github.com/numpy/numpy/pull/14043>`__: BUG: Fixes for Undefined Behavior Sanitizer (UBSan) errors.\n* `14044 <https://github.com/numpy/numpy/pull/14044>`__: BUG: ensure that casting to/from structured is properly checked.\n* `14045 <https://github.com/numpy/numpy/pull/14045>`__: MAINT: fix histogram*d dispatchers\n* `14046 <https://github.com/numpy/numpy/pull/14046>`__: BUG: further fixup to histogram2d dispatcher.\n* `14052 <https://github.com/numpy/numpy/pull/14052>`__: BUG: Replace contextlib.suppress for Python 2.7\n* `14056 <https://github.com/numpy/numpy/pull/14056>`__: BUG: fix compilation of 3rd party modules with Py_LIMITED_API...\n* `14057 <https://github.com/numpy/numpy/pull/14057>`__: BUG: Fix memory leak in dtype from dict contructor\n* `14058 <https://github.com/numpy/numpy/pull/14058>`__: DOC: Document array_function at a higher level.\n* `14084 <https://github.com/numpy/numpy/pull/14084>`__: BUG, DOC: add new recfunctions to `__all__`\n* `14162 <https://github.com/numpy/numpy/pull/14162>`__: BUG: Remove stray print that causes a SystemError on python 3.7\n* `14297 <https://github.com/numpy/numpy/pull/14297>`__: TST: Pin pytest version to 5.0.1.\n* `14322 <https://github.com/numpy/numpy/pull/14322>`__: ENH: Enable huge pages in all Linux builds\n* `14346 <https://github.com/numpy/numpy/pull/14346>`__: BUG: fix behavior of structured_to_unstructured on non-trivial...\n* `14382 <https://github.com/numpy/numpy/pull/14382>`__: REL: Prepare for the NumPy 1.16.5 release.\n\nChecksums\n=========\n\nMD5\n- ---\n\n    cf7ff97464eb044cb49618be5fe29aee  numpy-1.16.5-cp27-cp27m-macosx_10_9_x86_64.whl\n    6fbf51644f8722fa90276c04fe3d031f  numpy-1.16.5-cp27-cp27m-manylinux1_i686.whl\n    df4ab8600495131e44ad1b173f6cc9fc  numpy-1.16.5-cp27-cp27m-manylinux1_x86_64.whl\n    2f6fd50a02da9d56e3d950a6b738337e  numpy-1.16.5-cp27-cp27m-win32.whl\n    d36b67522ee102b7865a83b26a1d97aa  numpy-1.16.5-cp27-cp27m-win_amd64.whl\n    5b4f83c092257f6c98bedd44505e7b6d  numpy-1.16.5-cp27-cp27mu-manylinux1_i686.whl\n    d6fd33607099abdea62752cf303a1763  numpy-1.16.5-cp27-cp27mu-manylinux1_x86_64.whl\n    fa48e45bd3e5dbac923296b039e70706  numpy-1.16.5-cp35-cp35m-macosx_10_9_x86_64.whl\n    85a7db0c597037cced7ab82c0f0cdcc8  numpy-1.16.5-cp35-cp35m-manylinux1_i686.whl\n    401e053e98faada4bc8cdcc9b04d619f  numpy-1.16.5-cp35-cp35m-manylinux1_x86_64.whl\n    2912ba9109dca60115dba59606cac27b  numpy-1.16.5-cp35-cp35m-win32.whl\n    756b7ff320ef821f2cd279c5df7c9f46  numpy-1.16.5-cp35-cp35m-win_amd64.whl\n    2ae22b506a07575a4bc6a91d2db25df5  numpy-1.16.5-cp36-cp36m-macosx_10_9_x86_64.whl\n    12cbf61ed2abec3f77cfa3a46b7e4bdc  numpy-1.16.5-cp36-cp36m-manylinux1_i686.whl\n    ab726a4244e9e070cde814d8415cff4c  numpy-1.16.5-cp36-cp36m-manylinux1_x86_64.whl\n    752e461d193b7049e25c7e20f7d4808a  numpy-1.16.5-cp36-cp36m-win32.whl\n    2712434cdfb27a301c49cf97eee656d5  numpy-1.16.5-cp36-cp36m-win_amd64.whl\n    394fee86faa235dea6d2bb6270961266  numpy-1.16.5-cp37-cp37m-macosx_10_9_x86_64.whl\n    0713da36acc884897f76bc8117ca7a42  numpy-1.16.5-cp37-cp37m-manylinux1_i686.whl\n    7856a32b3b2d93d018d2ba5dce941ffa  numpy-1.16.5-cp37-cp37m-manylinux1_x86_64.whl\n    33b7fd0d727c9f09d61879afde8096f6  numpy-1.16.5-cp37-cp37m-win32.whl\n    5287ce297cd8093463bb29bef42db103  numpy-1.16.5-cp37-cp37m-win_amd64.whl\n    f9c22f53f17e81b25af8e53b026a9831  numpy-1.16.5.tar.gz\n    adaad8c166cf0344af3ca1a664dd4a38  numpy-1.16.5.zip\n\nSHA256\n- ------\n\n    37fdd3bb05caaaacac58015cfa38e38b006ee9cef1eaacdb70bb68c16ac7db1d  numpy-1.16.5-cp27-cp27m-macosx_10_9_x86_64.whl\n    f42e21d8db16315bc30b437bff63d6b143befb067b8cd396fa3ef17f1c21e1a0  numpy-1.16.5-cp27-cp27m-manylinux1_i686.whl\n    4208b225ae049641a7a99ab92e84ce9d642ded8250d2b6c9fd61a7fa8c072561  numpy-1.16.5-cp27-cp27m-manylinux1_x86_64.whl\n    4d790e2a37aa3350667d8bb8acc919010c7e46234c3d615738564ddc6d22026f  numpy-1.16.5-cp27-cp27m-win32.whl\n    1594aec94e4896e0688f4f405481fda50fb70547000ae71f2e894299a088a661  numpy-1.16.5-cp27-cp27m-win_amd64.whl\n    2c5a556272c67566e8f4607d1c78ad98e954fa6c32802002a4a0b029ad8dd759  numpy-1.16.5-cp27-cp27mu-manylinux1_i686.whl\n    3a96e59f61c7a8f8838d0f4d19daeba551c5f07c5cdd5c81e8e9d4089ade0042  numpy-1.16.5-cp27-cp27mu-manylinux1_x86_64.whl\n    612297115bade249a118616c065597ff2e5e1f47ed220d7ba71f3e6c6ebcd814  numpy-1.16.5-cp35-cp35m-macosx_10_9_x86_64.whl\n    dbc9e9a6a5e0c4f57498855d4e30ef8b599c0ce13fdf9d64299197508d67d9e8  numpy-1.16.5-cp35-cp35m-manylinux1_i686.whl\n    fada0492dd35412cd96e0578677e9a4bdae8f102ef2b631301fcf19066b57119  numpy-1.16.5-cp35-cp35m-manylinux1_x86_64.whl\n    ada1a1cd68b9874fa480bd287438f92bd7ce88ca0dd6e8d56c70f2b3dab97314  numpy-1.16.5-cp35-cp35m-win32.whl\n    27aa457590268cb059c47daa8c55f48c610ce81da8a062ec117f74efa9124ec9  numpy-1.16.5-cp35-cp35m-win_amd64.whl\n    03b28330253904d410c3c82d66329f29645eb54a7345cb7dd7a1529d61fa603f  numpy-1.16.5-cp36-cp36m-macosx_10_9_x86_64.whl\n    911d91ffc6688db0454d69318584415f7dfb0fc1b8ac9b549234e39495684230  numpy-1.16.5-cp36-cp36m-manylinux1_i686.whl\n    ceb353e3ae840ce76256935b18c17236ca808509f231f41d5173d7b2680d5e77  numpy-1.16.5-cp36-cp36m-manylinux1_x86_64.whl\n    e6ce7c0051ed5443f8343da2a14580aa438822ae6526900332c4564f371d2aaf  numpy-1.16.5-cp36-cp36m-win32.whl\n    9a2b950bca9faca0145491ae9fd214c432f2b1e36783399bc2c3732e7bcc94f4  numpy-1.16.5-cp36-cp36m-win_amd64.whl\n    00836128feaf9a7c7fedeea05ad593e7965f523d23fe3ffbf20cfffd88e9f2b1  numpy-1.16.5-cp37-cp37m-macosx_10_9_x86_64.whl\n    3d6a354bb1a1ce2cabd47e0bdcf25364322fb55a29efb59f76944d7ee546d8b6  numpy-1.16.5-cp37-cp37m-manylinux1_i686.whl\n    f7fb27c0562206787011cf299c03f663c604b58a35a9c2b5218ba6485a17b145  numpy-1.16.5-cp37-cp37m-manylinux1_x86_64.whl\n    46469e7fcb689036e72ce61c3d432ed35eb4c71b5119e894845b434b0fae5813  numpy-1.16.5-cp37-cp37m-win32.whl\n    fb207362394567343d84c0462ec3ba203a21c78be9a0fdbb94982e76859ec37e  numpy-1.16.5-cp37-cp37m-win_amd64.whl\n    2b63c414fb43a4f0cb69b29b7e9d48275af0dbb5b1ffd2f2de99c4df9967e151  numpy-1.16.5.tar.gz\n    8bb452d94e964b312205b0de1238dd7209da452343653ab214b5d681780e7a0c  numpy-1.16.5.zip\n-----BEGIN PGP SIGNATURE-----\n\niQEzBAEBCAAdFiEEU6DlKD8F4p1xKRSeZ58ig3fFJHsFAl1l0dAACgkQZ58ig3fF\nJHvM6Af/TfF32rF/fZNy4gFbpFinXB4IgiVdiAQ3qchS9sN47wRlHxz9bd+3hftI\nZoVRlLhp3ZYrDpwBCkF3m8wWasyn9D4PhWvSyTEw2lKViP1iN3LyrG2dW4x06SIO\nbUHKd77YCTG4kjaa8ngpDaZTy7t/sfvNoXYuQNph4QA3SeAycGesb/xAda/yqsGE\nIxYmrvzcrBIv8k8JcJYv6XevZnQgIfSi0o/+4WFNd291LdESM1rPTm4eP4n8ig04\nQKYVWt2gFVmYmSLlNCemS0dd7Xo9wkXk1U3uRKfBzIZqF6nXgAXzewgfjBIHYH+0\n+qgZsIQjvqKGNJp32NgvliptGqiwEA==\n=bjhU\n-----END PGP SIGNATURE-----\n\n\n.. currentmodule:: numpy\n\n==========================\n", "1.20.3": "==========================\n\nNumPy 1.20.3 is a bugfix release containing several fixes merged to the main\nbranch after the NumPy 1.20.2 release.\n\nContributors\n============\n\nA total of 7 people contributed to this release.  People with a \"+\" by their\nnames contributed a patch for the first time.\n\n* Anne Archibald\n* Bas van Beek\n* Charles Harris\n* Dong Keun Oh +\n* Kamil Choudhury +\n* Sayed Adel\n* Sebastian Berg\n\nPull requests merged\n====================\n\nA total of 15 pull requests were merged for this release.\n\n* `18763 <https://github.com/numpy/numpy/pull/18763>`__: BUG: Correct ``datetime64`` missing type overload for ``datetime.date``...\n* `18764 <https://github.com/numpy/numpy/pull/18764>`__: MAINT: Remove ``__all__`` in favor of explicit re-exports\n* `18768 <https://github.com/numpy/numpy/pull/18768>`__: BLD: Strip extra newline when dumping gfortran version on MacOS\n* `18769 <https://github.com/numpy/numpy/pull/18769>`__: BUG: fix segfault in object/longdouble operations\n* `18794 <https://github.com/numpy/numpy/pull/18794>`__: MAINT: Use towncrier build explicitly\n* `18887 <https://github.com/numpy/numpy/pull/18887>`__: MAINT: Relax certain integer-type constraints\n* `18915 <https://github.com/numpy/numpy/pull/18915>`__: MAINT: Remove unsafe unions and ABCs from return-annotations\n* `18921 <https://github.com/numpy/numpy/pull/18921>`__: MAINT: Allow more recursion depth for scalar tests.\n* `18922 <https://github.com/numpy/numpy/pull/18922>`__: BUG: Initialize the full nditer buffer in case of error\n* `18923 <https://github.com/numpy/numpy/pull/18923>`__: BLD: remove unnecessary flag ``-faltivec`` on macOS\n* `18924 <https://github.com/numpy/numpy/pull/18924>`__: MAINT, CI: treats _SIMD module build warnings as errors through...\n* `18925 <https://github.com/numpy/numpy/pull/18925>`__: BUG: for MINGW, threads.h existence test requires GLIBC > 2.12\n* `18941 <https://github.com/numpy/numpy/pull/18941>`__: BUG: Make changelog recognize gh- as a PR number prefix.\n* `18948 <https://github.com/numpy/numpy/pull/18948>`__: REL, DOC: Prepare for the NumPy 1.20.3 release.\n* `18953 <https://github.com/numpy/numpy/pull/18953>`__: BUG: Fix failing mypy test in 1.20.x.\n\nChecksums\n=========\n\nMD5\n---\n::\n\n    702d0185042f1ff9a5d7e72a29f4e1c0  numpy-1.20.3-cp37-cp37m-macosx_10_9_x86_64.whl\n    3d0284b39b20c243b74f6690ad5ae27f  numpy-1.20.3-cp37-cp37m-manylinux_2_12_i686.manylinux2010_i686.whl\n    d1b42dd67dc228088cf822eaab86d424  numpy-1.20.3-cp37-cp37m-manylinux_2_12_x86_64.manylinux2010_x86_64.whl\n    126b1a5d46cc7d9b9b426f56d075a1e0  numpy-1.20.3-cp37-cp37m-manylinux_2_17_aarch64.manylinux2014_aarch64.whl\n    5b0445346f08b610025dbd2064d4b482  numpy-1.20.3-cp37-cp37m-manylinux_2_5_i686.manylinux1_i686.whl\n    02bd4a2c764882e8af353c16344cb633  numpy-1.20.3-cp37-cp37m-manylinux_2_5_x86_64.manylinux1_x86_64.whl\n    0f6a36724d5477c8fca6c34e73683db6  numpy-1.20.3-cp37-cp37m-win32.whl\n    c7d3ae93743d6c0ea2c9dfcad1d42cb4  numpy-1.20.3-cp37-cp37m-win_amd64.whl\n    445da50ae14b3318170ccf996baca72c  numpy-1.20.3-cp38-cp38-macosx_10_9_x86_64.whl\n    c651fdb4829703e164bc78613c1a90a8  numpy-1.20.3-cp38-cp38-manylinux_2_12_i686.manylinux2010_i686.whl\n    c9411ef729b8ebe9ed3b8e9dee3da4ac  numpy-1.20.3-cp38-cp38-manylinux_2_12_x86_64.manylinux2010_x86_64.whl\n    ff69ad241598607fdfea24155625a6e3  numpy-1.20.3-cp38-cp38-manylinux_2_17_aarch64.manylinux2014_aarch64.whl\n    9fd8d44d8a5f19e434e9dfb7738d954f  numpy-1.20.3-cp38-cp38-manylinux_2_5_i686.manylinux1_i686.whl\n    d144fdfe141442a7f362d498bc9a40c2  numpy-1.20.3-cp38-cp38-manylinux_2_5_x86_64.manylinux1_x86_64.whl\n    e7ffa27f1c75cf11529d90967fa15bbc  numpy-1.20.3-cp38-cp38-win32.whl\n    58c12a54d1b5bc14d36ed2b0d8617fef  numpy-1.20.3-cp38-cp38-win_amd64.whl\n    18efbadcb513054c765f826fc3bb1645  numpy-1.20.3-cp39-cp39-macosx_10_9_x86_64.whl\n    319300952bd42455cb2ad98188c74b5f  numpy-1.20.3-cp39-cp39-manylinux_2_12_i686.manylinux2010_i686.whl\n    1d1451f9a5a2eeef666fc512a101a6ca  numpy-1.20.3-cp39-cp39-manylinux_2_12_x86_64.manylinux2010_x86_64.whl\n    cdef3fb002bb5e3036f056ea0528c804  numpy-1.20.3-cp39-cp39-manylinux_2_17_aarch64.manylinux2014_aarch64.whl\n    85e575735877094f3a76106e9d2a9cac  numpy-1.20.3-cp39-cp39-win32.whl\n    59f1dba95dedc7a1bebc58ee7e7a945a  numpy-1.20.3-cp39-cp39-win_amd64.whl\n    6abc979843929b41b099e4e6c0253063  numpy-1.20.3-pp37-pypy37_pp73-manylinux_2_12_x86_64.manylinux2010_x86_64.whl\n    802ddf90c7e226ba56ed0ea244f8b53d  numpy-1.20.3.tar.gz\n    949d9114af9accc25ede1daa359c4227  numpy-1.20.3.zip\n\nSHA256\n------\n::\n\n    70eb5808127284c4e5c9e836208e09d685a7978b6a216db85960b1a112eeace8  numpy-1.20.3-cp37-cp37m-macosx_10_9_x86_64.whl\n    6ca2b85a5997dabc38301a22ee43c82adcb53ff660b89ee88dded6b33687e1d8  numpy-1.20.3-cp37-cp37m-manylinux_2_12_i686.manylinux2010_i686.whl\n    c5bf0e132acf7557fc9bb8ded8b53bbbbea8892f3c9a1738205878ca9434206a  numpy-1.20.3-cp37-cp37m-manylinux_2_12_x86_64.manylinux2010_x86_64.whl\n    db250fd3e90117e0312b611574cd1b3f78bec046783195075cbd7ba9c3d73f16  numpy-1.20.3-cp37-cp37m-manylinux_2_17_aarch64.manylinux2014_aarch64.whl\n    637d827248f447e63585ca3f4a7d2dfaa882e094df6cfa177cc9cf9cd6cdf6d2  numpy-1.20.3-cp37-cp37m-manylinux_2_5_i686.manylinux1_i686.whl\n    8b7bb4b9280da3b2856cb1fc425932f46fba609819ee1c62256f61799e6a51d2  numpy-1.20.3-cp37-cp37m-manylinux_2_5_x86_64.manylinux1_x86_64.whl\n    67d44acb72c31a97a3d5d33d103ab06d8ac20770e1c5ad81bdb3f0c086a56cf6  numpy-1.20.3-cp37-cp37m-win32.whl\n    43909c8bb289c382170e0282158a38cf306a8ad2ff6dfadc447e90f9961bef43  numpy-1.20.3-cp37-cp37m-win_amd64.whl\n    f1452578d0516283c87608a5a5548b0cdde15b99650efdfd85182102ef7a7c17  numpy-1.20.3-cp38-cp38-macosx_10_9_x86_64.whl\n    6e51534e78d14b4a009a062641f465cfaba4fdcb046c3ac0b1f61dd97c861b1b  numpy-1.20.3-cp38-cp38-manylinux_2_12_i686.manylinux2010_i686.whl\n    e515c9a93aebe27166ec9593411c58494fa98e5fcc219e47260d9ab8a1cc7f9f  numpy-1.20.3-cp38-cp38-manylinux_2_12_x86_64.manylinux2010_x86_64.whl\n    c1c09247ccea742525bdb5f4b5ceeacb34f95731647fe55774aa36557dbb5fa4  numpy-1.20.3-cp38-cp38-manylinux_2_17_aarch64.manylinux2014_aarch64.whl\n    66fbc6fed94a13b9801fb70b96ff30605ab0a123e775a5e7a26938b717c5d71a  numpy-1.20.3-cp38-cp38-manylinux_2_5_i686.manylinux1_i686.whl\n    ea9cff01e75a956dbee133fa8e5b68f2f92175233de2f88de3a682dd94deda65  numpy-1.20.3-cp38-cp38-manylinux_2_5_x86_64.manylinux1_x86_64.whl\n    f39a995e47cb8649673cfa0579fbdd1cdd33ea497d1728a6cb194d6252268e48  numpy-1.20.3-cp38-cp38-win32.whl\n    1676b0a292dd3c99e49305a16d7a9f42a4ab60ec522eac0d3dd20cdf362ac010  numpy-1.20.3-cp38-cp38-win_amd64.whl\n    830b044f4e64a76ba71448fce6e604c0fc47a0e54d8f6467be23749ac2cbd2fb  numpy-1.20.3-cp39-cp39-macosx_10_9_x86_64.whl\n    55b745fca0a5ab738647d0e4db099bd0a23279c32b31a783ad2ccea729e632df  numpy-1.20.3-cp39-cp39-manylinux_2_12_i686.manylinux2010_i686.whl\n    5d050e1e4bc9ddb8656d7b4f414557720ddcca23a5b88dd7cff65e847864c400  numpy-1.20.3-cp39-cp39-manylinux_2_12_x86_64.manylinux2010_x86_64.whl\n    a9c65473ebc342715cb2d7926ff1e202c26376c0dcaaee85a1fd4b8d8c1d3b2f  numpy-1.20.3-cp39-cp39-manylinux_2_17_aarch64.manylinux2014_aarch64.whl\n    16f221035e8bd19b9dc9a57159e38d2dd060b48e93e1d843c49cb370b0f415fd  numpy-1.20.3-cp39-cp39-win32.whl\n    6690080810f77485667bfbff4f69d717c3be25e5b11bb2073e76bb3f578d99b4  numpy-1.20.3-cp39-cp39-win_amd64.whl\n    4e465afc3b96dbc80cf4a5273e5e2b1e3451286361b4af70ce1adb2984d392f9  numpy-1.20.3-pp37-pypy37_pp73-manylinux_2_12_x86_64.manylinux2010_x86_64.whl\n    b7340f0628ce1823c151e3d2a2a8cba2a3ff1357fba4475a24b1816e75c21f90  numpy-1.20.3.tar.gz\n    e55185e51b18d788e49fe8305fd73ef4470596b33fc2c1ceb304566b99c71a69  numpy-1.20.3.zip\n\n\n-----BEGIN PGP SIGNED MESSAGE-----\nHash: SHA1\n\n==========================\n", "1.15.2": "==========================\n\nThis is a bugfix release for bugs and regressions reported following the 1.15.1\nrelease.\n\n* The matrix PendingDeprecationWarning is now suppressed in pytest 3.8.\n* The new cached allocations machinery has been fixed to be thread safe.\n* The boolean indexing of subclasses now works correctly.\n* A small memory leak in PyArray_AdaptFlexibleDType has been fixed.\n\nThe Python versions supported by this release are 2.7, 3.4-3.7. The wheels are\nlinked with OpenBLAS v0.3.0, which should fix some of the linalg problems\nreported for NumPy 1.14.\n\nCompatibility Note\n==================\n\nThe NumPy 1.15.x OS X wheels released on PyPI no longer contain 32-bit\nbinaries.  That will also be the case in future releases. See\n`11625 <https://github.com/numpy/numpy/issues/11625>`__ for the related\ndiscussion.  Those needing 32-bit support should look elsewhere or build\nfrom source.\n\nContributors\n============\n\nA total of 4 people contributed to this release.  People with a \"+\" by their\nnames contributed a patch for the first time.\n\n* Charles Harris\n* Julian Taylor\n* Marten van Kerkwijk\n* Matti Picus\n\nPull requests merged\n====================\n\nA total of 4 pull requests were merged for this release.\n\n* `11902 <https://github.com/numpy/numpy/pull/11902>`__: BUG: Fix matrix PendingDeprecationWarning suppression for pytest...\n* `11981 <https://github.com/numpy/numpy/pull/11981>`__: BUG: fix cached allocations without the GIL for 1.15.x\n* `11982 <https://github.com/numpy/numpy/pull/11982>`__: BUG: fix refcount leak in PyArray_AdaptFlexibleDType\n* `11992 <https://github.com/numpy/numpy/pull/11992>`__: BUG: Ensure boolean indexing of subclasses sets base correctly.\n\nChecksums\n=========\n\nMD5\n- ---\n\n    6935d733421b32533eebc7d9a5b1bde9  numpy-1.15.2-cp27-cp27m-macosx_10_6_intel.macosx_10_9_intel.macosx_10_9_x86_64.macosx_10_10_intel.macosx_10_10_x86_64.whl\n    d80b588176313013d50a513d1b3d8cb8  numpy-1.15.2-cp27-cp27m-manylinux1_i686.whl\n    34b93ec0335f8dd028137bd3c1434800  numpy-1.15.2-cp27-cp27m-manylinux1_x86_64.whl\n    008df3819bf77abdb0546d96f660bec0  numpy-1.15.2-cp27-cp27mu-manylinux1_i686.whl\n    48530fca78a9abdfa34c2b19c2d45600  numpy-1.15.2-cp27-cp27mu-manylinux1_x86_64.whl\n    3b6032a8100df348ab0c17545dd7b72d  numpy-1.15.2-cp27-none-win32.whl\n    2e1c8985c10e813a7b8de54f18f99921  numpy-1.15.2-cp27-none-win_amd64.whl\n    2e9bab1f2bb399945cd660062c1d63ac  numpy-1.15.2-cp34-cp34m-macosx_10_6_intel.macosx_10_9_intel.macosx_10_9_x86_64.macosx_10_10_intel.macosx_10_10_x86_64.whl\n    d774936507ac59e0ed8cd6b9592449fe  numpy-1.15.2-cp34-cp34m-manylinux1_i686.whl\n    5f0b7cb501e3e459f043725330dd19f8  numpy-1.15.2-cp34-cp34m-manylinux1_x86_64.whl\n    5c54aa9f3825af973ed7c4c38bf499bc  numpy-1.15.2-cp34-none-win32.whl\n    1f479fa8f54da6726aa9729d296d31e7  numpy-1.15.2-cp34-none-win_amd64.whl\n    e7100118df61980e784ac71a9eafe410  numpy-1.15.2-cp35-cp35m-macosx_10_6_intel.macosx_10_9_intel.macosx_10_9_x86_64.macosx_10_10_intel.macosx_10_10_x86_64.whl\n    f55e7f845d9f18a6c3cf8a0dc4515226  numpy-1.15.2-cp35-cp35m-manylinux1_i686.whl\n    de9a79dd7abcaa099b34234d7ee43903  numpy-1.15.2-cp35-cp35m-manylinux1_x86_64.whl\n    48e7213f7029a38e6a63e1e92c50c15d  numpy-1.15.2-cp35-none-win32.whl\n    3086e690e4eef8b10523349e93c34dcb  numpy-1.15.2-cp35-none-win_amd64.whl\n    9e56f996c325345a5a3076a9f5d0abfe  numpy-1.15.2-cp36-cp36m-macosx_10_6_intel.macosx_10_9_intel.macosx_10_9_x86_64.macosx_10_10_intel.macosx_10_10_x86_64.whl\n    e7835fb3d56d4bbcd8d47120df709cbf  numpy-1.15.2-cp36-cp36m-manylinux1_i686.whl\n    5151de4cfdec3623d4061d0e7a8677bb  numpy-1.15.2-cp36-cp36m-manylinux1_x86_64.whl\n    7f911b24989f8d6aa0e6617fea6e8c10  numpy-1.15.2-cp36-none-win32.whl\n    948dbd9c23ac7948485d5a07a48a27eb  numpy-1.15.2-cp36-none-win_amd64.whl\n    921214854ed05d5e0c294b2fcc345d37  numpy-1.15.2-cp37-cp37m-macosx_10_6_intel.macosx_10_9_intel.macosx_10_9_x86_64.macosx_10_10_intel.macosx_10_10_x86_64.whl\n    38a69cfe0d954d05054a73e5f56b1533  numpy-1.15.2-cp37-cp37m-manylinux1_i686.whl\n    4ce844e4452baf8c25025e53e59d91ff  numpy-1.15.2-cp37-cp37m-manylinux1_x86_64.whl\n    2de0167b4297d1732e25c9288bbe3add  numpy-1.15.2-cp37-none-win32.whl\n    de26b3d5573b0c9a6cd38eeb4e8d865e  numpy-1.15.2-cp37-none-win_amd64.whl\n    d40b15478148a48ec324327578de4583  numpy-1.15.2.tar.gz\n    5a55a994eca6095b1e82d44600217ece  numpy-1.15.2.zip\n\nSHA256\n- ------\n\n    b5ff7dae352fd9e1edddad1348698e9fea14064460a7e39121ef9526745802e6  numpy-1.15.2-cp27-cp27m-macosx_10_6_intel.macosx_10_9_intel.macosx_10_9_x86_64.macosx_10_10_intel.macosx_10_10_x86_64.whl\n    1b1cf8f7300cf7b11ddb4250b3898c711a6187df05341b5b7153db23ffe5d498  numpy-1.15.2-cp27-cp27m-manylinux1_i686.whl\n    ec8bf53ef7c92c99340972519adbe122e82c81d5b87cbd955c74ba8a8cd2a4ad  numpy-1.15.2-cp27-cp27m-manylinux1_x86_64.whl\n    733dc5d47e71236263837825b69c975bc08728ae638452b34aeb1d6fa347b780  numpy-1.15.2-cp27-cp27mu-manylinux1_i686.whl\n    82f00a1e2695a0e5b89879aa25ea614530b8ebdca6d49d4834843d498e8a5e92  numpy-1.15.2-cp27-cp27mu-manylinux1_x86_64.whl\n    63f833a7c622e9082df3cbaf03b4fd92d7e0c11e2f9d87cb57dbf0e84441964b  numpy-1.15.2-cp27-none-win32.whl\n    c898f9cca806102fcacb6309899743aa39efb2ad2a302f4c319f54db9f05cd84  numpy-1.15.2-cp27-none-win_amd64.whl\n    f2e55726a9ee2e8129d6ce6abb466304868051bcc7a09d652b3b07cd86e801a2  numpy-1.15.2-cp34-cp34m-macosx_10_6_intel.macosx_10_9_intel.macosx_10_9_x86_64.macosx_10_10_intel.macosx_10_10_x86_64.whl\n    981224224bbf44d95278eb37996162e8beb6f144d2719b144e86dfe2fce6c510  numpy-1.15.2-cp34-cp34m-manylinux1_i686.whl\n    f592fd7fe1f20b5041928cce1330937eca62f9058cb41e69c2c2d83cffc0d1e3  numpy-1.15.2-cp34-cp34m-manylinux1_x86_64.whl\n    9ad36dbfdbb0cba90a08e7343fadf86f43cf6d87450e8d2b5d71d7c7202907e4  numpy-1.15.2-cp34-none-win32.whl\n    d1569013e8cc8f37e9769d19effdd85e404c976cd0ca28a94e3ddc026c216ae8  numpy-1.15.2-cp34-none-win_amd64.whl\n    8d2cfb0aef7ec8759736cce26946efa084cdf49797712333539ef7d135e0295e  numpy-1.15.2-cp35-cp35m-macosx_10_6_intel.macosx_10_9_intel.macosx_10_9_x86_64.macosx_10_10_intel.macosx_10_10_x86_64.whl\n    f4dee74f2626c783a3804df9191e9008946a104d5a284e52427a53ff576423cb  numpy-1.15.2-cp35-cp35m-manylinux1_i686.whl\n    497d7c86df4f85eb03b7f58a7dd0f8b948b1f582e77629341f624ba301b4d204  numpy-1.15.2-cp35-cp35m-manylinux1_x86_64.whl\n    866bf72b9c3bfabe4476d866c70ee1714ad3e2f7b7048bb934892335e7b6b1f7  numpy-1.15.2-cp35-none-win32.whl\n    71bf3b7ca15b1967bba3a1ef6a8e87286382a8b5e46ac76b42a02fe787c5237d  numpy-1.15.2-cp35-none-win_amd64.whl\n    4e28e66cf80c09a628ae680efeb0aa9a066eb4bb7db2a5669024c5b034891576  numpy-1.15.2-cp36-cp36m-macosx_10_6_intel.macosx_10_9_intel.macosx_10_9_x86_64.macosx_10_10_intel.macosx_10_10_x86_64.whl\n    8aeac8b08f4b8c52129518efcd93706bb6d506ccd17830b67d18d0227cf32d9e  numpy-1.15.2-cp36-cp36m-manylinux1_i686.whl\n    a251570bb3cb04f1627f23c234ad09af0e54fc8194e026cf46178f2e5748d647  numpy-1.15.2-cp36-cp36m-manylinux1_x86_64.whl\n    5b4dfb6551eaeaf532054e2c6ef4b19c449c2e3a709ebdde6392acb1372ecabc  numpy-1.15.2-cp36-none-win32.whl\n    981daff58fa3985a26daa4faa2b726c4e7a1d45178100125c0e1fdaf2ac64978  numpy-1.15.2-cp36-none-win_amd64.whl\n    dca261e85fe0d34b2c242ecb31c9ab693509af2cf955d9caf01ee3ef3669abd0  numpy-1.15.2-cp37-cp37m-macosx_10_6_intel.macosx_10_9_intel.macosx_10_9_x86_64.macosx_10_10_intel.macosx_10_10_x86_64.whl\n    ffab5b80bba8c86251291b8ce2e6c99a61446459d4c6637f5d5cc8c9ce37c972  numpy-1.15.2-cp37-cp37m-manylinux1_i686.whl\n    58be95faf0ca2d886b5b337e7cba2923e3ad1224b806a91223ea39f1e0c77d03  numpy-1.15.2-cp37-cp37m-manylinux1_x86_64.whl\n    3fde172e28c899580d32dc21cb6d4a1225d62362f61050b654545c662eac215a  numpy-1.15.2-cp37-none-win32.whl\n    cf4b970042ce148ad8dce4369c02a4078b382dadf20067ce2629c239d76460d1  numpy-1.15.2-cp37-none-win_amd64.whl\n    6a1e96568332fd8974b355a422b397288e214746715a7fa6abc10b34d06bad76  numpy-1.15.2.tar.gz\n    27a0d018f608a3fe34ac5e2b876f4c23c47e38295c47dd0775cc294cd2614bc1  numpy-1.15.2.zip\n-----BEGIN PGP SIGNATURE-----\n\niQEcBAEBAgAGBQJbp4ERAAoJEGefIoN3xSR7Jb0IAL7st+3f+hecAU676Dz8E0VZ\nNsO+8wHnt+U4ArJbDPVbXX6/yzpGd1lp2QrL99EOrYuSFJ7f+xr77BJGj9AA8XfY\nl+C7WyiXRbdtNXjNOfEG6QIPzVIWJY7YUiVBHIcQjb2I2rf5HCzdNak+Yhx4TnoJ\n7HRk7Sr56rnJnRNJN5EQ1NSjYLPMVYpdYn7TNJ8bcUM0KLxtRpcpmb3P++oigy+7\nMv3/HuxuZc9XRwqguwi1sH+fjmm8JuAMvhDXfuWx4HsIh/cOpP62OCvakUZfA5ns\npxewyUoQ1xGr0kJGYGEt3dyjIv2apTQ8g3g4GI8DOPQ5G4DgBdxWJ45yiFLXK1w=\n=a7jm\n-----END PGP SIGNATURE-----\n\n\n-----BEGIN PGP SIGNED MESSAGE-----\nHash: SHA1\n\n==========================\n", "1.16.3": "==========================\n\nThe NumPy 1.16.3 release fixes bugs reported against the 1.16.2 release, and\nalso backports several enhancements from master that seem appropriate for a\nrelease series that is the last to support Python 2.7. The wheels on PyPI are\nlinked with OpenBLAS v0.3.4+,  which should fix the known threading issues\nfound in previous OpenBLAS versions.\n\nDownstream developers building this release should use Cython >= 0.29.2 and,\nif using OpenBLAS, OpenBLAS > v0.3.4.\n\nThe most noticeable change in this release is that unpickling object arrays\nwhen loading ``*.npy`` or ``*.npz`` files now requires an explicit opt-in.\nThis backwards incompatible change was made in response to\n`CVE-2019-6446 <https://nvd.nist.gov/vuln/detail/CVE-2019-6446>`_.\n\n\nCompatibility notes\n===================\n\nUnpickling while loading requires explicit opt-in\n- -------------------------------------------------\nThe functions ``np.load``, and ``np.lib.format.read_array`` take an\n`allow_pickle` keyword which now defaults to ``False`` in response to\n`CVE-2019-6446 <https://nvd.nist.gov/vuln/detail/CVE-2019-6446>`_.\n\n\nImprovements\n============\n\nCovariance in `random.mvnormal` cast to double\n- ----------------------------------------------\nThis should make the tolerance used when checking the singular values of the\ncovariance matrix more meaningful.\n\n\nChanges\n=======\n\n``__array_interface__`` offset now works as documented\n- ------------------------------------------------------\nThe interface may use an ``offset`` value that was previously mistakenly\nignored.\n\n\nChecksums\n=========\n\nMD5\n- ---\n\n    7039dd60e2066e8882149a8b8bd6cf2f  numpy-1.16.3-cp27-cp27m-macosx_10_6_intel.macosx_10_9_intel.macosx_10_9_x86_64.macosx_10_10_intel.macosx_10_10_x86_64.whl\n    c03c7365b58deefd03e3c080660d7157  numpy-1.16.3-cp27-cp27m-manylinux1_i686.whl\n    91900b9172e39c039326c56cf0149e15  numpy-1.16.3-cp27-cp27m-manylinux1_x86_64.whl\n    b06d87509a2228c5952096cb11c8b007  numpy-1.16.3-cp27-cp27m-win32.whl\n    88c1e91c6bd3626278b7938f12cafbe2  numpy-1.16.3-cp27-cp27m-win_amd64.whl\n    98fb024d8d63f056ef7c82e772c4bfa0  numpy-1.16.3-cp27-cp27mu-manylinux1_i686.whl\n    d2b8da12f0855765e9cd3cc49d9885b9  numpy-1.16.3-cp27-cp27mu-manylinux1_x86_64.whl\n    ec4f2fd2180fd68647f38a0d4c331dcf  numpy-1.16.3-cp35-cp35m-macosx_10_6_intel.macosx_10_9_intel.macosx_10_9_x86_64.macosx_10_10_intel.macosx_10_10_x86_64.whl\n    7add5c07a1679bfc086d5575be26ccc6  numpy-1.16.3-cp35-cp35m-manylinux1_i686.whl\n    bd3c27deac470bce5edf6936d08966b8  numpy-1.16.3-cp35-cp35m-manylinux1_x86_64.whl\n    c6ab529b105181fc846a8245e5e4d048  numpy-1.16.3-cp35-cp35m-win32.whl\n    1854757b3e127614ae01b0b814762f5c  numpy-1.16.3-cp35-cp35m-win_amd64.whl\n    b23b0727562be62ffd943c7828822da9  numpy-1.16.3-cp36-cp36m-macosx_10_6_intel.macosx_10_9_intel.macosx_10_9_x86_64.macosx_10_10_intel.macosx_10_10_x86_64.whl\n    93a2a4b48f160ffd1bdd30023b842be2  numpy-1.16.3-cp36-cp36m-manylinux1_i686.whl\n    453f5996ac600c4085656e82005fb0e5  numpy-1.16.3-cp36-cp36m-manylinux1_x86_64.whl\n    773f9e76235ab5edd9ef1c083e62ea9f  numpy-1.16.3-cp36-cp36m-win32.whl\n    9ba2467b05eb4471817509cabff1b9a6  numpy-1.16.3-cp36-cp36m-win_amd64.whl\n    00594b150e69d1776164ffa60d7fdc01  numpy-1.16.3-cp37-cp37m-macosx_10_6_intel.macosx_10_9_intel.macosx_10_9_x86_64.macosx_10_10_intel.macosx_10_10_x86_64.whl\n    fe3421cbae83004e7feca4d90043e9df  numpy-1.16.3-cp37-cp37m-manylinux1_i686.whl\n    4e907ac7d841018c0a9130ca45d099ee  numpy-1.16.3-cp37-cp37m-manylinux1_x86_64.whl\n    c7e8e9f9ded13b1356e72cd8506df224  numpy-1.16.3-cp37-cp37m-win32.whl\n    370ec58a5fdfe9e7ffe90857577806c6  numpy-1.16.3-cp37-cp37m-win_amd64.whl\n    0886e5b5017f08f2b7a624c0b5931e61  numpy-1.16.3.tar.gz\n    cab84884fba39fbd352550896bf22bfd  numpy-1.16.3.zip\n\nSHA256\n- ------\n\n    b78a1defedb0e8f6ae1eb55fa6ac74ab42acc4569c3a2eacc2a407ee5d42ebcb  numpy-1.16.3-cp27-cp27m-macosx_10_6_intel.macosx_10_9_intel.macosx_10_9_x86_64.macosx_10_10_intel.macosx_10_10_x86_64.whl\n    0e2eed77804b2a6a88741f8fcac02c5499bba3953ec9c71e8b217fad4912c56c  numpy-1.16.3-cp27-cp27m-manylinux1_i686.whl\n    754a6be26d938e6ca91942804eb209307b73f806a1721176278a6038869a1686  numpy-1.16.3-cp27-cp27m-manylinux1_x86_64.whl\n    315fa1b1dfc16ae0f03f8fd1c55f23fd15368710f641d570236f3d78af55e340  numpy-1.16.3-cp27-cp27m-win32.whl\n    80d99399c97f646e873dd8ce87c38cfdbb668956bbc39bc1e6cac4b515bba2a0  numpy-1.16.3-cp27-cp27m-win_amd64.whl\n    a61255a765b3ac73ee4b110b28fccfbf758c985677f526c2b4b39c48cc4b509d  numpy-1.16.3-cp27-cp27mu-manylinux1_i686.whl\n    88a72c1e45a0ae24d1f249a529d9f71fe82e6fa6a3fd61414b829396ec585900  numpy-1.16.3-cp27-cp27mu-manylinux1_x86_64.whl\n    54fe3b7ed9e7eb928bbc4318f954d133851865f062fa4bbb02ef8940bc67b5d2  numpy-1.16.3-cp35-cp35m-macosx_10_6_intel.macosx_10_9_intel.macosx_10_9_x86_64.macosx_10_10_intel.macosx_10_10_x86_64.whl\n    abbd6b1c2ef6199f4b7ca9f818eb6b31f17b73a6110aadc4e4298c3f00fab24e  numpy-1.16.3-cp35-cp35m-manylinux1_i686.whl\n    771147e654e8b95eea1293174a94f34e2e77d5729ad44aefb62fbf8a79747a15  numpy-1.16.3-cp35-cp35m-manylinux1_x86_64.whl\n    48241759b99d60aba63b0e590332c600fc4b46ad597c9b0a53f350b871ef0634  numpy-1.16.3-cp35-cp35m-win32.whl\n    b16d88da290334e33ea992c56492326ea3b06233a00a1855414360b77ca72f26  numpy-1.16.3-cp35-cp35m-win_amd64.whl\n    ab4896a8c910b9a04c0142871d8800c76c8a2e5ff44763513e1dd9d9631ce897  numpy-1.16.3-cp36-cp36m-macosx_10_6_intel.macosx_10_9_intel.macosx_10_9_x86_64.macosx_10_10_intel.macosx_10_10_x86_64.whl\n    7fde5c2a3a682a9e101e61d97696687ebdba47637611378b4127fe7e47fdf2bf  numpy-1.16.3-cp36-cp36m-manylinux1_i686.whl\n    4b4f2924b36d857cf302aec369caac61e43500c17eeef0d7baacad1084c0ee84  numpy-1.16.3-cp36-cp36m-manylinux1_x86_64.whl\n    d160e57731fcdec2beda807ebcabf39823c47e9409485b5a3a1db3a8c6ce763e  numpy-1.16.3-cp36-cp36m-win32.whl\n    1f46532afa7b2903bfb1b79becca2954c0a04389d19e03dc73f06b039048ac40  numpy-1.16.3-cp36-cp36m-win_amd64.whl\n    1c666f04553ef70fda54adf097dbae7080645435fc273e2397f26bbf1d127bbb  numpy-1.16.3-cp37-cp37m-macosx_10_6_intel.macosx_10_9_intel.macosx_10_9_x86_64.macosx_10_10_intel.macosx_10_10_x86_64.whl\n    3d5fcea4f5ed40c3280791d54da3ad2ecf896f4c87c877b113576b8280c59441  numpy-1.16.3-cp37-cp37m-manylinux1_i686.whl\n    5a8f021c70e6206c317974c93eaaf9bc2b56295b6b1cacccf88846e44a1f33fc  numpy-1.16.3-cp37-cp37m-manylinux1_x86_64.whl\n    cfef82c43b8b29ca436560d51b2251d5117818a8d1fb74a8384a83c096745dad  numpy-1.16.3-cp37-cp37m-win32.whl\n    a4f4460877a16ac73302a9c077ca545498d9fe64e6a81398d8e1a67e4695e3df  numpy-1.16.3-cp37-cp37m-win_amd64.whl\n    adf063a3f87ab89393f5eea0eb903293b112fa0a308e8c594a75ffa585d81d4f  numpy-1.16.3.tar.gz\n    78a6f89da87eeb48014ec652a65c4ffde370c036d780a995edaeb121d3625621  numpy-1.16.3.zip\n-----BEGIN PGP SIGNATURE-----\n\niQEcBAEBAgAGBQJcvRClAAoJEGefIoN3xSR7w5IIALs073ZWOfrVxEuDbO9GMdOk\nGK4zOqNRP+9mEE6Hx13Zbm94G0dNDNaiyNSjU78gRyrJkGZtJ01t/Fj0qLFC4FXp\nAEUh0dHtBH14ODA4RbGkptsoXVWiZdlOTkr+DV83vF9rNvtrLY9GewiN614OTmHV\nkHxLDHzOhLhi80IpBHG7romxlTiESUuEoqEg/HOgUU0bamCtdwQIpCGlggod0TxH\nk1w1oAymtrjBLKJFoLvMKNMBvptIYixNYnHAeWUMrmsO6jOrDW6GnQeZ1FI5iUdx\nGBxEujFydyW0W/X/wNaYkLO0l2pvs6nBUHfXIxxOhjIoxbtYJin5f2EVcfCa77o=\n=ikDD\n-----END PGP SIGNATURE-----\n\n\n-----BEGIN PGP SIGNED MESSAGE-----\nHash: SHA256\n\n.. currentmodule:: numpy\n\n================================\nNumPy NumPy 1.18.0 Release Notes\n================================\n\nIn addition to the usual bug fixes, this NumPy release cleans up and documents\nthe new random C-API, expires a large number of old deprecations, and improves\nthe appearance of the documentation. The Python versions supported are 3.5-3.8.\nThis is the last NumPy release series that will support Python 3.5.\n\nDownstream developers should use Cython >= 0.29.13 for Python 3.8 support and\nOpenBLAS >= 3.7 to avoid problems on the Skylake\narchitecture.\n\n\nHighlights\n==========\n\n* The C-API for ``numpy.random`` has been defined and documented.\n* Basic infrastructure for linking with 64 bit BLAS and LAPACK libraries.\n* Many documentation improvements.\n\n\nNew functions\n=============\n\nMultivariate hypergeometric distribution added to ``numpy.random``\n- ------------------------------------------------------------------\nThe method ``multivariate_hypergeometric`` has been added to the class\n`numpy.random.Generator`.  This method generates random variates from\nthe multivariate hypergeometric probability distribution.\n(`gh-13794 <https://github.com/numpy/numpy/pull/13794>`__)\n\n\nDeprecations\n============\n\n``np.fromfile`` and ``np.fromstring`` will error on bad data\n- ------------------------------------------------------------\n\nIn future numpy releases, the functions ``np.fromfile`` and ``np.fromstring``\nwill throw an error when parsing bad data.\nThis will now give a ``DeprecationWarning`` where previously partial or\neven invalid data was silently returned. This deprecation also affects\nthe C defined functions ``PyArray_FromString`` and ``PyArray_FromFile``\n(`gh-13605 <https://github.com/numpy/numpy/pull/13605>`__)\n\nDeprecate non-scalar arrays as fill values in ``ma.fill_value``\n- ---------------------------------------------------------------\nSetting a ``MaskedArray.fill_value`` to a non-scalar array is deprecated\nsince the logic to broadcast the fill value to the array is fragile,\nespecially when slicing.\n(`gh-13698 <https://github.com/numpy/numpy/pull/13698>`__)\n\nDeprecate ``PyArray_As1D``, ``PyArray_As2D``\n- --------------------------------------------\n``PyArray_As1D``, ``PyArray_As2D`` are deprecated, use\n``PyArray_AsCArray`` instead\n(`gh-14036 <https://github.com/numpy/numpy/pull/14036>`__)\n\nDeprecate ``np.alen``\n- ---------------------\n``np.alen`` was deprecated. Use ``len`` instead.\n(`gh-14181 <https://github.com/numpy/numpy/pull/14181>`__)\n\nDeprecate the financial functions\n- ---------------------------------\nIn accordance with\n`NEP-32 <https://numpy.org/neps/nep-0032-remove-financial-functions.html>`_,\nthe financial functions ``fv`` ``ipmt``, ``irr``, ``mirr``, ``nper``,\n``npv``, ``pmt``, ``ppmt``, ``pv`` and ``rate`` are deprecated, and will be\nremoved from NumPy 1.20.The replacement for these functions is the Python package\n`numpy-financial <https://pypi.org/project/numpy-financial>`_.\n(`gh-14720 <https://github.com/numpy/numpy/pull/14720>`__)\n\nThe ``axis`` argument to ``numpy.ma.mask_cols`` and ``numpy.ma.mask_row`` is deprecated\n- ---------------------------------------------------------------------------------------\nThis argument was always ignored.\n(`gh-14996 <https://github.com/numpy/numpy/pull/14996>`__)\n\n\nExpired deprecations\n====================\n\n* ``PyArray_As1D`` and ``PyArray_As2D`` have been removed in favor of\n  ``PyArray_AsCArray``\n  (`gh-14036 <https://github.com/numpy/numpy/pull/14036>`__)\n\n* ``np.rank`` has been removed. This was deprecated in NumPy 1.10\n  and has been replaced by ``np.ndim``.\n  (`gh-14039 <https://github.com/numpy/numpy/pull/14039>`__)\n\n* The deprecation of ``expand_dims`` out-of-range axes in 1.13.0 has\n  expired.\n  (`gh-14051 <https://github.com/numpy/numpy/pull/14051>`__)\n\n* ``PyArray_FromDimsAndDataAndDescr`` and ``PyArray_FromDims`` have been\n  removed (they will always raise an error). Use ``PyArray_NewFromDescr``\n  and ``PyArray_SimpleNew`` instead.\n  (`gh-14100 <https://github.com/numpy/numpy/pull/14100>`__)\n\n* ``numeric.loads``, ``numeric.load``, ``np.ma.dump``,\n  ``np.ma.dumps``, ``np.ma.load``, ``np.ma.loads`` are removed,\n  use ``pickle`` methods instead\n  (`gh-14256 <https://github.com/numpy/numpy/pull/14256>`__)\n\n* ``arrayprint.FloatFormat``, ``arrayprint.LongFloatFormat`` has been removed,\n  use ``FloatingFormat`` instead\n\n* ``arrayprint.ComplexFormat``, ``arrayprint.LongComplexFormat`` has been\n  removed, use ``ComplexFloatingFormat`` instead\n\n* ``arrayprint.StructureFormat`` has been removed, use ``StructureVoidFormat``\n  instead\n  (`gh-14259 <https://github.com/numpy/numpy/pull/14259>`__)\n\n* ``np.testing.rand`` has been removed. This was deprecated in NumPy 1.11\n  and has been replaced by ``np.random.rand``.\n  (`gh-14325 <https://github.com/numpy/numpy/pull/14325>`__)\n\n* Class ``SafeEval`` in ``numpy/lib/utils.py`` has been removed.\n  This was deprecated in NumPy 1.10. Use ``np.safe_eval`` instead.\n  (`gh-14335 <https://github.com/numpy/numpy/pull/14335>`__)\n\n* Remove deprecated support for boolean and empty condition lists in\n  ``np.select``\n  (`gh-14583 <https://github.com/numpy/numpy/pull/14583>`__)\n\n* Array order only accepts 'C', 'F', 'A', and 'K'. More permissive options\n  were deprecated in NumPy 1.11.\n  (`gh-14596 <https://github.com/numpy/numpy/pull/14596>`__)\n\n* np.linspace parameter ``num`` must be an integer. Deprecated in NumPy 1.12.\n  (`gh-14620 <https://github.com/numpy/numpy/pull/14620>`__)\n\n* UFuncs with multiple outputs must use a tuple for the ``out`` kwarg. This\n  finishes a deprecation started in NumPy 1.10.\n  (`gh-14682 <https://github.com/numpy/numpy/pull/14682>`__)\n\nThe files ``numpy/testing/decorators.py``, ``numpy/testing/noseclasses.py``\nand ``numpy/testing/nosetester.py`` have been removed.  They were never\nmeant to be public (all relevant objects are present in the\n``numpy.testing`` namespace), and importing them has given a deprecation\nwarning since NumPy 1.15.0\n(`gh-14567 <https://github.com/numpy/numpy/pull/14567>`__)\n\n\nCompatibility notes\n===================\n\n`numpy.lib.recfunctions.drop_fields` can no longer return None\n- --------------------------------------------------------------\nIf ``drop_fields`` is used to drop all fields, previously the array would\nbe completely discarded and None returned. Now it returns an array of the\nsame shape as the input, but with no fields. The old behavior can be retained\nwith::\n\n    dropped_arr = drop_fields(arr, ['a', 'b'])\n    if dropped_arr.dtype.names == ():\n        dropped_arr = None\n\nconverting the empty recarray to None\n(`gh-14510 <https://github.com/numpy/numpy/pull/14510>`__)\n\n``numpy.argmin/argmax/min/max`` returns ``NaT`` if it exists in array\n- ---------------------------------------------------------------------\n``numpy.argmin``, ``numpy.argmax``, ``numpy.min``, and ``numpy.max`` will return\n``NaT`` if it exists in the array.\n(`gh-14717 <https://github.com/numpy/numpy/pull/14717>`__)\n\n``np.can_cast(np.uint64, np.timedelta64, casting='safe')`` is now ``False``\n- ---------------------------------------------------------------------------\nPreviously this was ``True`` - however, this was inconsistent with ``uint64``\nnot being safely castable to ``int64``, and resulting in strange type\nresolution.\n\nIf this impacts your code, cast ``uint64`` to ``int64`` first.\n(`gh-14718 <https://github.com/numpy/numpy/pull/14718>`__)\n\nChanged random variate stream from ``numpy.random.Generator.integers``\n- ----------------------------------------------------------------------\nThere was a bug in ``numpy.random.Generator.integers`` that caused biased\nsampling of 8 and 16 bit integer types. Fixing that bug has changed the\noutput stream from what it was in previous releases.\n(`gh-14777 <https://github.com/numpy/numpy/pull/14777>`__)\n\nAdd more ufunc loops for ``datetime64``, ``timedelta64``\n- --------------------------------------------------------\n``np.datetime('NaT')`` should behave more like ``float('Nan')``. Add needed\ninfrastructure so ``np.isinf(a)`` and ``np.isnan(a)`` will run on\n``datetime64`` and ``timedelta64`` dtypes. Also added specific loops for\n``numpy.fmin`` and ``numpy.fmax`` that mask ``NaT``. This may require\nadjustment to user- facing code. Specifically, code that either disallowed the\ncalls to ``numpy.isinf`` or ``numpy.isnan`` or checked that they raised an\nexception will require adaptation, and code that mistakenly called\n``numpy.fmax`` and ``numpy.fmin`` instead of ``numpy.maximum`` or\n``numpy.minimum`` respectively will requre adjustment. This also affects\n``numpy.nanmax`` and ``numpy.nanmin``.\n(`gh-14841 <https://github.com/numpy/numpy/pull/14841>`__)\n\n\nC API changes\n=============\n\n``PyDataType_ISUNSIZED(descr)`` now returns False for structured datatypes\n- --------------------------------------------------------------------------\nPreviously this returned True for any datatype of itemsize 0, but now this\nreturns false for the non-flexible datatype with itemsize 0, ``np.dtype([])``.\n(`gh-14393 <https://github.com/numpy/numpy/pull/14393>`__)\n\n\nNew Features\n============\n\nAdd our own ``*.pxd`` cython import file\n- ----------------------------------------\nAdded a ``numpy/__init__.pxd`` file. It will be used for ``cimport numpy``\n(`gh-12284 <https://github.com/numpy/numpy/pull/12284>`__)\n\nA tuple of axes can now be input to ``expand_dims``\n- ---------------------------------------------------\nThe ``numpy.expand_dims`` ``axis`` keyword can now accept a tuple of\naxes.  Previously, ``axis`` was required to be an integer.\n(`gh-14051 <https://github.com/numpy/numpy/pull/14051>`__)\n\nSupport for 64-bit OpenBLAS\n- ---------------------------\nAdded support for 64-bit (ILP64) OpenBLAS. See ``site.cfg.example``\nfor details.\n(`gh-15012 <https://github.com/numpy/numpy/pull/15012>`__)\n\nAdd ``--f2cmap`` option to F2PY\n- -------------------------------\nAllow specifying a file to load Fortran-to-C type map\ncustomizations from.\n(`gh-15113 <https://github.com/numpy/numpy/pull/15113>`__)\n\n\nImprovements\n============\n\nDifferent C numeric types of the same size have unique names\n- ------------------------------------------------------------\nOn any given platform, two of ``np.intc``, ``np.int_``, and ``np.longlong``\nwould previously appear indistinguishable through their ``repr``, despite\ntheir corresponding ``dtype`` having different properties.\nA similar problem existed for the unsigned counterparts to these types, and on\nsome platforms for ``np.double`` and ``np.longdouble``\n\nThese types now always print with a unique ``__name__``.\n(`gh-10151 <https://github.com/numpy/numpy/pull/10151>`__)\n\n``argwhere`` now produces a consistent result on 0d arrays\n- ----------------------------------------------------------\nOn N-d arrays, ``numpy.argwhere`` now always produces an array of shape\n``(n_non_zero, arr.ndim)``, even when ``arr.ndim == 0``. Previously, the\nlast axis would have a dimension of 1 in this case.\n(`gh-13610 <https://github.com/numpy/numpy/pull/13610>`__)\n\nAdd ``axis`` argument for ``random.permutation`` and ``random.shuffle``\n- -----------------------------------------------------------------------\n\nPreviously the ``random.permutation`` and ``random.shuffle`` functions\ncan only shuffle an array along the first axis; they now have a\nnew argument ``axis`` which allows shuffle along a specified axis.\n(`gh-13829 <https://github.com/numpy/numpy/pull/13829>`__)\n\n``method`` keyword argument for ``np.random.multivariate_normal``\n- -----------------------------------------------------------------\nA ``method`` keyword argument is now available for\n``np.random.multivariate_normal`` with possible values\n``{'svd', 'eigh', 'cholesky'}``. To use it, write\n``np.random.multivariate_normal(..., method=<method>)``.\n(`gh-14197 <https://github.com/numpy/numpy/pull/14197>`__)\n\nAdd complex number support for ``numpy.fromstring``\n- ---------------------------------------------------\nNow ``numpy.fromstring`` can read complex numbers.\n(`gh-14227 <https://github.com/numpy/numpy/pull/14227>`__)\n\n``numpy.unique`` has consistent axes order when ``axis`` is not None\n- --------------------------------------------------------------------\nUsing ``moveaxis`` instead of ``swapaxes`` in ``numpy.unique``, so that the ordering of axes\nexcept the axis in arguments will not be broken.\n(`gh-14255 <https://github.com/numpy/numpy/pull/14255>`__)\n\n``numpy.matmul`` with boolean output now converts to boolean values\n- -------------------------------------------------------------------\nCalling ``numpy.matmul`` where the output is a boolean array would fill the array\nwith uint8 equivalents of the result, rather than 0/1. Now it forces the output\nto 0 or 1 (``NPY_TRUE`` or ``NPY_FALSE``).\n(`gh-14464 <https://github.com/numpy/numpy/pull/14464>`__)\n\n``numpy.random.randint`` produced incorrect value when the range was ``2**32``\n- ------------------------------------------------------------------------------\nThe implementation introduced in 1.17.0 had an incorrect check when\ndetermining whether to use the 32-bit path or the full 64-bit\npath that incorrectly redirected random integer generation with a high - low\nrange of ``2**32`` to the 64-bit generator.\n(`gh-14501 <https://github.com/numpy/numpy/pull/14501>`__)\n\nAdd complex number support for ``numpy.fromfile``\n- -------------------------------------------------\nNow ``numpy.fromfile`` can read complex numbers.\n(`gh-14730 <https://github.com/numpy/numpy/pull/14730>`__)\n\n``std=c99`` added if compiler is named ``gcc``\n- ----------------------------------------------\nGCC before version 5 requires the ``-std=c99`` command line argument. Newer\ncompilers automatically turn on C99 mode. The compiler setup code will\nautomatically add the code if the compiler name has ``gcc`` in it.\n(`gh-14771 <https://github.com/numpy/numpy/pull/14771>`__)\n\n\nChanges\n=======\n\n\n``NaT`` now sorts to the end of arrays\n- --------------------------------------\n``NaT`` is now effectively treated as the largest integer for sorting\npurposes, so that it sorts to the end of arrays. This change is for consistency\nwith ``NaN`` sorting behavior.\n(`gh-12658 <https://github.com/numpy/numpy/pull/12658>`__)\n(`gh-15068 <https://github.com/numpy/numpy/pull/15068>`__)\n\nIncorrect ``threshold`` in ``np.set_printoptions`` raises ``TypeError`` or ``ValueError``\n- -----------------------------------------------------------------------------------------\nPreviously an incorrect ``threshold`` raised ``ValueError``; it now raises ``TypeError``\nfor non-numeric types and ``ValueError`` for ``nan`` values.\n(`gh-13899 <https://github.com/numpy/numpy/pull/13899>`__)\n\nWarn when saving a dtype with metadata\n- --------------------------------------\nA ``UserWarning`` will be emitted when saving an array via ``numpy.save`` with\n``metadata``. Saving such an array may not preserve metadata, and if metadata\nis preserved, loading it will cause a ``ValueError``. This shortcoming in save\nand load will be addressed in a future release.\n(`gh-14142 <https://github.com/numpy/numpy/pull/14142>`__)\n\n``numpy.distutils`` append behavior changed for LDFLAGS and similar\n- -------------------------------------------------------------------\n`numpy.distutils` has always overridden rather than appended to ``LDFLAGS`` and\nother similar such environment variables for compiling Fortran extensions. Now\nthe default behavior has changed to appending - which is the expected behavior\nin most situations.  To preserve the old (overwriting) behavior, set the\n``NPY_DISTUTILS_APPEND_FLAGS`` environment variable to 0.  This applies to:\n``LDFLAGS``, ``F77FLAGS``, ``F90FLAGS``, ``FREEFLAGS``, ``FOPT``, ``FDEBUG``,\nand ``FFLAGS``. NumPy 1.16 and 1.17 gave build warnings in situations where this\nchange in behavior would have affected the compile flags used.\n(`gh-14248 <https://github.com/numpy/numpy/pull/14248>`__)\n\nRemove ``numpy.random.entropy`` without a deprecation\n- -----------------------------------------------------\n\n``numpy.random.entropy`` was added to the ``numpy.random`` namespace in 1.17.0.\nIt was meant to be a private c-extension module, but was exposed as public.\nIt has been replaced by ``numpy.random.SeedSequence`` so the module was\ncompletely removed.\n(`gh-14498 <https://github.com/numpy/numpy/pull/14498>`__)\n\nAdd options to quiet build configuration and build with ``-Werror``\n- -------------------------------------------------------------------\nAdded two new configuration options. During the ``build_src`` subcommand, as\npart of configuring NumPy, the files ``_numpyconfig.h`` and ``config.h`` are\ncreated by probing support for various runtime functions and routines.\nPreviously, the very verbose compiler output during this stage clouded more\nimportant information. By default the output is silenced. Running ``runtests.py\n- --debug-info`` will add ``--verbose-cfg`` to the ``build_src`` subcommand,\nwhich will restore the previous behaviour.\n\nAdding ``CFLAGS=-Werror`` to turn warnings into errors would trigger errors\nduring the configuration. Now ``runtests.py --warn-error`` will add\n``--warn-error`` to the ``build`` subcommand, which will percolate to the\n``build_ext`` and ``build_lib`` subcommands. This will add the compiler flag\nto those stages and turn compiler warnings into errors while actually building\nNumPy itself, avoiding the ``build_src`` subcommand compiler calls.\n\n(`gh-14527 <https://github.com/numpy/numpy/pull/14527>`__)\n(`gh-14518 <https://github.com/numpy/numpy/pull/14518>`__)\n\nChecksums\n=========\n\nMD5\n- ---\n\n    40576031bfba1732ee850a1c576ba096  numpy-1.18.0-cp35-cp35m-macosx_10_6_intel.whl\n    99dce76e7845e10585001a6892bb5f63  numpy-1.18.0-cp35-cp35m-manylinux1_i686.whl\n    81e4e422392219e8bc809d9b17c0d0a6  numpy-1.18.0-cp35-cp35m-manylinux1_x86_64.whl\n    785d52acbbbcdd4967acd6f27e341dc6  numpy-1.18.0-cp35-cp35m-win32.whl\n    52ab10e952b72c69f492f30dcc03e561  numpy-1.18.0-cp35-cp35m-win_amd64.whl\n    dc0f8c3b608f17fd1af2ac5dab012683  numpy-1.18.0-cp36-cp36m-macosx_10_9_x86_64.whl\n    990b9567a5f5322ec0115552be9bd169  numpy-1.18.0-cp36-cp36m-manylinux1_i686.whl\n    7cdcb013123ae7b44100ca00a98f8ab3  numpy-1.18.0-cp36-cp36m-manylinux1_x86_64.whl\n    f6b497230df4d8b9a3e80e8e6b896caa  numpy-1.18.0-cp36-cp36m-win32.whl\n    28de3a14f6fcf1391929f1061590b49d  numpy-1.18.0-cp36-cp36m-win_amd64.whl\n    d3279da6815745d977f16383d9b8c0d7  numpy-1.18.0-cp37-cp37m-macosx_10_9_x86_64.whl\n    3eff2e553b4826428790551834f862e9  numpy-1.18.0-cp37-cp37m-manylinux1_i686.whl\n    f0f7b7e58635dea515f6aa5302bdd924  numpy-1.18.0-cp37-cp37m-manylinux1_x86_64.whl\n    df8e307782f55f508405b135211dbeb0  numpy-1.18.0-cp37-cp37m-win32.whl\n    022dd577b0858b146e2d33ed7426cf07  numpy-1.18.0-cp37-cp37m-win_amd64.whl\n    89bbc272a243cdf5c521fea5efe6b853  numpy-1.18.0-cp38-cp38-macosx_10_9_x86_64.whl\n    dc6e094c4c7777ac4040e6f945788f60  numpy-1.18.0-cp38-cp38-manylinux1_i686.whl\n    4cac27e608e6d24a8b2b6b911bd23d6c  numpy-1.18.0-cp38-cp38-manylinux1_x86_64.whl\n    45a9355fb360d321d90ae55aefb1d206  numpy-1.18.0-cp38-cp38-win32.whl\n    c86dc59260f42e9cce05a396cbb33f4e  numpy-1.18.0-cp38-cp38-win_amd64.whl\n    2f607a0e79321b6e4f426307134dbd2c  numpy-1.18.0.tar.gz\n    3545a7dc22e704461f6ccb604b8da952  numpy-1.18.0.zip\n\nSHA256\n- ------\n\n    b091e5d4cbbe79f0e8b6b6b522346e54a282eadb06e3fd761e9b6fafc2ca91ad  numpy-1.18.0-cp35-cp35m-macosx_10_6_intel.whl\n    443ab93fc35b31f01db8704681eb2fd82f3a1b2fa08eed2dd0e71f1f57423d4a  numpy-1.18.0-cp35-cp35m-manylinux1_i686.whl\n    88c5ccbc4cadf39f32193a5ef22e3f84674418a9fd877c63322917ae8f295a56  numpy-1.18.0-cp35-cp35m-manylinux1_x86_64.whl\n    e1080e37c090534adb2dd7ae1c59ee883e5d8c3e63d2a4d43c20ee348d0459c5  numpy-1.18.0-cp35-cp35m-win32.whl\n    f084d513de729ff10cd72a1f80db468cff464fedb1ef2fea030221a0f62d7ff4  numpy-1.18.0-cp35-cp35m-win_amd64.whl\n    1baefd1fb4695e7f2e305467dbd876d765e6edd30c522894df76f8301efaee36  numpy-1.18.0-cp36-cp36m-macosx_10_9_x86_64.whl\n    cc070fc43a494e42732d6ae2f6621db040611c1dde64762a40c8418023af56d7  numpy-1.18.0-cp36-cp36m-manylinux1_i686.whl\n    6f8113c8dbfc192b58996ee77333696469ea121d1c44ea429d8fd266e4c6be51  numpy-1.18.0-cp36-cp36m-manylinux1_x86_64.whl\n    a30f5c3e1b1b5d16ec1f03f4df28e08b8a7529d8c920bbed657f4fde61f1fbcd  numpy-1.18.0-cp36-cp36m-win32.whl\n    3c68c827689ca0ca713dba598335073ce0966850ec0b30715527dce4ecd84055  numpy-1.18.0-cp36-cp36m-win_amd64.whl\n    f6a7421da632fc01e8a3ecd19c3f7350258d82501a646747664bae9c6a87c731  numpy-1.18.0-cp37-cp37m-macosx_10_9_x86_64.whl\n    905cd6fa6ac14654a6a32b21fad34670e97881d832e24a3ca32e19b455edb4a8  numpy-1.18.0-cp37-cp37m-manylinux1_i686.whl\n    854f6ed4fa91fa6da5d764558804ba5b0f43a51e5fe9fc4fdc93270b052f188a  numpy-1.18.0-cp37-cp37m-manylinux1_x86_64.whl\n    ac3cf835c334fcc6b74dc4e630f9b5ff7b4c43f7fb2a7813208d95d4e10b5623  numpy-1.18.0-cp37-cp37m-win32.whl\n    62506e9e4d2a39c87984f081a2651d4282a1d706b1a82fe9d50a559bb58e705a  numpy-1.18.0-cp37-cp37m-win_amd64.whl\n    9d6de2ad782aae68f7ed0e0e616477fbf693d6d7cc5f0f1505833ff12f84a673  numpy-1.18.0-cp38-cp38-macosx_10_9_x86_64.whl\n    1c35fb1131362e6090d30286cfda52ddd42e69d3e2bf1fea190a0fad83ea3a18  numpy-1.18.0-cp38-cp38-manylinux1_i686.whl\n    56710a756c5009af9f35b91a22790701420406d9ac24cf6b652b0e22cfbbb7ff  numpy-1.18.0-cp38-cp38-manylinux1_x86_64.whl\n    03bbde29ac8fba860bb2c53a1525b3604a9b60417855ac3119d89868ec6041c3  numpy-1.18.0-cp38-cp38-win32.whl\n    712f0c32555132f4b641b918bdb1fd3c692909ae916a233ce7f50eac2de87e37  numpy-1.18.0-cp38-cp38-win_amd64.whl\n    e5eaf340489b76eef91352bf48b36e92ace07f6b0f1c87dcd3b5dbada97df03a  numpy-1.18.0.tar.gz\n    a9d72d9abaf65628f0f31bbb573b7d9304e43b1e6bbae43149c17737a42764c4  numpy-1.18.0.zip\n-----BEGIN PGP SIGNATURE-----\n\niQEzBAEBCAAdFiEEU6DlKD8F4p1xKRSeZ58ig3fFJHsFAl3/lBkACgkQZ58ig3fF\nJHvoCggAlvOOrdrPLXcMQAP+KTSX39jCTGgoq1MWOY3YC+5AqWnAa2LPoiL6pLjb\n5hLzdecQBJQ7e749TxgoW6jJd220zwwtFYAIdgkgHEPpfFCq97Hy0X8VkhferJ7+\nVI2oq3R0ArACyD9I4BfcXoZuqcmkh8/9Y1GqMfzpuU39WXggZbN47W1YC9XvJGs8\n32NHts2kVZyAIZxMGhBIm78Th35rnHg/2e1c5jfLS1eu7dWB5ilOvOHkNxNQp6ov\nNhUNW1/xz97EHxuLzz4YiptZT5KW3324LNp34zM9SH5J/cyCsrzNc9gB1biced6b\nUyKvmjoEeJB0hg1FYrpcE+Z1Dp2odg==\n=A0XS\n-----END PGP SIGNATURE-----\n\n\n.. currentmodule:: numpy\n\n==========================\n", "1.18.5": "==========================\n\nThis is a short release to allow pickle ``protocol=5`` to be used in\nPython3.5. It is motivated by the recent backport of pickle5 to Python3.5.\n\nThe Python versions supported in this release are 3.5-3.8. Downstream\ndevelopers should use Cython >= 0.29.15 for Python 3.8 support and\nOpenBLAS >= 3.7 to avoid errors on the Skylake architecture.\n\nContributors\n============\n\nA total of 3 people contributed to this release.  People with a \"+\" by their\nnames contributed a patch for the first time.\n\n* Charles Harris\n* Matti Picus\n* Siyuan Zhuang +\n\nPull requests merged\n====================\n\nA total of 2 pull requests were merged for this release.\n\n* `16439 <https://github.com/numpy/numpy/pull/16439>`__: ENH: enable pickle protocol 5 support for python3.5\n* `16441 <https://github.com/numpy/numpy/pull/16441>`__: BUG: relpath fails for different drives on windows\n\n\nChecksums\n=========\n\nMD5\n---\n::\n\n    f923519347ba9f6bca59dce0583bdbd5  numpy-1.18.5-cp35-cp35m-macosx_10_9_intel.whl\n    79990253bda9ffa2db75152e77c318e9  numpy-1.18.5-cp35-cp35m-manylinux1_i686.whl\n    d5bf77d6caf4f83ed871ab9e4f9d1f72  numpy-1.18.5-cp35-cp35m-manylinux1_x86_64.whl\n    2cc7cc1b1640d6b50c50d96a35624698  numpy-1.18.5-cp35-cp35m-win32.whl\n    5a93e72e30c56462492a29315e19c0cc  numpy-1.18.5-cp35-cp35m-win_amd64.whl\n    caef5b4785e5deb6891f118a49d48ccc  numpy-1.18.5-cp36-cp36m-macosx_10_9_x86_64.whl\n    402be8c771c2541c7ee936ef63c9ebc0  numpy-1.18.5-cp36-cp36m-manylinux1_i686.whl\n    259dbb8694209921d56ffb091ae42b5b  numpy-1.18.5-cp36-cp36m-manylinux1_x86_64.whl\n    9188a301a9640836322f2dc926640515  numpy-1.18.5-cp36-cp36m-win32.whl\n    acfa82d4e66601386dad19ad3a3983a5  numpy-1.18.5-cp36-cp36m-win_amd64.whl\n    bc1ebaa1ecf20f22b72cbb824c9cbc21  numpy-1.18.5-cp37-cp37m-macosx_10_9_x86_64.whl\n    97f27a6e2e6951cf8107132e7c628004  numpy-1.18.5-cp37-cp37m-manylinux1_i686.whl\n    f261237ab3d47b9b6e859bf240014a48  numpy-1.18.5-cp37-cp37m-manylinux1_x86_64.whl\n    08bdf2289600c5c728a2668b585fdd02  numpy-1.18.5-cp37-cp37m-win32.whl\n    8b793d97dae258d06e63c452a2684b16  numpy-1.18.5-cp37-cp37m-win_amd64.whl\n    2b9153362bf0e53574abc2df048a1578  numpy-1.18.5-cp38-cp38-macosx_10_9_x86_64.whl\n    1715c674b3070ccd90f56fa2cd48cce1  numpy-1.18.5-cp38-cp38-manylinux1_i686.whl\n    2347f759a1b8bc27423bb5ece6ae1c79  numpy-1.18.5-cp38-cp38-manylinux1_x86_64.whl\n    b66c03695208dd843b78acb32557a765  numpy-1.18.5-cp38-cp38-win32.whl\n    81c9e86442602529b3c52d4af7a515b7  numpy-1.18.5-cp38-cp38-win_amd64.whl\n    ca23173650ded5585f7030fee91005bf  numpy-1.18.5.tar.gz\n    0d426af04e17cd480ecf3cd70743eaf4  numpy-1.18.5.zip\n\nSHA256\n------\n::\n\n    e91d31b34fc7c2c8f756b4e902f901f856ae53a93399368d9a0dc7be17ed2ca0  numpy-1.18.5-cp35-cp35m-macosx_10_9_intel.whl\n    7d42ab8cedd175b5ebcb39b5208b25ba104842489ed59fbb29356f671ac93583  numpy-1.18.5-cp35-cp35m-manylinux1_i686.whl\n    a78e438db8ec26d5d9d0e584b27ef25c7afa5a182d1bf4d05e313d2d6d515271  numpy-1.18.5-cp35-cp35m-manylinux1_x86_64.whl\n    a87f59508c2b7ceb8631c20630118cc546f1f815e034193dc72390db038a5cb3  numpy-1.18.5-cp35-cp35m-win32.whl\n    965df25449305092b23d5145b9bdaeb0149b6e41a77a7d728b1644b3c99277c1  numpy-1.18.5-cp35-cp35m-win_amd64.whl\n    ac792b385d81151bae2a5a8adb2b88261ceb4976dbfaaad9ce3a200e036753dc  numpy-1.18.5-cp36-cp36m-macosx_10_9_x86_64.whl\n    ef627986941b5edd1ed74ba89ca43196ed197f1a206a3f18cc9faf2fb84fd675  numpy-1.18.5-cp36-cp36m-manylinux1_i686.whl\n    f718a7949d1c4f622ff548c572e0c03440b49b9531ff00e4ed5738b459f011e8  numpy-1.18.5-cp36-cp36m-manylinux1_x86_64.whl\n    4064f53d4cce69e9ac613256dc2162e56f20a4e2d2086b1956dd2fcf77b7fac5  numpy-1.18.5-cp36-cp36m-win32.whl\n    b03b2c0badeb606d1232e5f78852c102c0a7989d3a534b3129e7856a52f3d161  numpy-1.18.5-cp36-cp36m-win_amd64.whl\n    a7acefddf994af1aeba05bbbafe4ba983a187079f125146dc5859e6d817df824  numpy-1.18.5-cp37-cp37m-macosx_10_9_x86_64.whl\n    cd49930af1d1e49a812d987c2620ee63965b619257bd76eaaa95870ca08837cf  numpy-1.18.5-cp37-cp37m-manylinux1_i686.whl\n    b39321f1a74d1f9183bf1638a745b4fd6fe80efbb1f6b32b932a588b4bc7695f  numpy-1.18.5-cp37-cp37m-manylinux1_x86_64.whl\n    cae14a01a159b1ed91a324722d746523ec757357260c6804d11d6147a9e53e3f  numpy-1.18.5-cp37-cp37m-win32.whl\n    0172304e7d8d40e9e49553901903dc5f5a49a703363ed756796f5808a06fc233  numpy-1.18.5-cp37-cp37m-win_amd64.whl\n    e15b382603c58f24265c9c931c9a45eebf44fe2e6b4eaedbb0d025ab3255228b  numpy-1.18.5-cp38-cp38-macosx_10_9_x86_64.whl\n    3676abe3d621fc467c4c1469ee11e395c82b2d6b5463a9454e37fe9da07cd0d7  numpy-1.18.5-cp38-cp38-manylinux1_i686.whl\n    4674f7d27a6c1c52a4d1aa5f0881f1eff840d2206989bae6acb1c7668c02ebfb  numpy-1.18.5-cp38-cp38-manylinux1_x86_64.whl\n    9c9d6531bc1886454f44aa8f809268bc481295cf9740827254f53c30104f074a  numpy-1.18.5-cp38-cp38-win32.whl\n    3dd6823d3e04b5f223e3e265b4a1eae15f104f4366edd409e5a5e413a98f911f  numpy-1.18.5-cp38-cp38-win_amd64.whl\n    2c095bd1c5290966cceee8b6ef5cd66f13cd0e9d6d0e8d6fc8961abd64a8e51f  numpy-1.18.5.tar.gz\n    34e96e9dae65c4839bd80012023aadd6ee2ccb73ce7fdf3074c62f301e63120b  numpy-1.18.5.zip\n\n\n-----BEGIN PGP SIGNED MESSAGE-----\nHash: SHA1\n\n==========================\n", "1.15.1": "==========================\n\nThis is a bugfix release for bugs and regressions reported following the 1.15.0\nrelease.\n\n* The annoying but harmless RuntimeWarning that \"numpy.dtype size changed\" has\n  been suppressed. The long standing suppression was lost in the transition to\n  pytest.\n* The update to Cython 0.28.3 exposed a problematic use of a gcc attribute used\n  to prefer code size over speed in module initialization, possibly resulting in\n  incorrect compiled code. This has been fixed in latest Cython but has been\n  disabled here for safety.\n* Support for big-endian and ARMv8 architectures has been improved.\n\nThe Python versions supported by this release are 2.7, 3.4-3.7. The wheels are\nlinked with OpenBLAS v0.3.0, which should fix some of the linalg problems\nreported for NumPy 1.14.\n\n\nCompatibility Note\n==================\n\nThe NumPy 1.15.x OS X wheels released on PyPI no longer contain 32-bit\nbinaries.  That will also be the case in future releases. See\n`11625 <https://github.com/numpy/numpy/issues/11625>`__ for the related\ndiscussion.  Those needing 32-bit support should look elsewhere or build\nfrom source.\n\n\nContributors\n============\n\nA total of 7 people contributed to this release.  People with a \"+\" by their\nnames contributed a patch for the first time.\n\n* Charles Harris\n* Chris Billington\n* Elliott Sales de Andrade +\n* Eric Wieser\n* Jeremy Manning +\n* Matti Picus\n* Ralf Gommers\n\nPull requests merged\n====================\n\nA total of 24 pull requests were merged for this release.\n\n* `11647 <https://github.com/numpy/numpy/pull/11647>`__: MAINT: Filter Cython warnings in ``__init__.py``\n* `11648 <https://github.com/numpy/numpy/pull/11648>`__: BUG: Fix doc source links to unwrap decorators\n* `11657 <https://github.com/numpy/numpy/pull/11657>`__: BUG: Ensure singleton dimensions are not dropped when converting...\n* `11661 <https://github.com/numpy/numpy/pull/11661>`__: BUG: Warn on Nan in minimum,maximum for scalars\n* `11665 <https://github.com/numpy/numpy/pull/11665>`__: BUG: cython sometimes emits invalid gcc attribute\n* `11682 <https://github.com/numpy/numpy/pull/11682>`__: BUG: Fix regression in void_getitem\n* `11698 <https://github.com/numpy/numpy/pull/11698>`__: BUG: Make matrix_power again work for object arrays.\n* `11700 <https://github.com/numpy/numpy/pull/11700>`__: BUG: Add missing PyErr_NoMemory after failing malloc\n* `11719 <https://github.com/numpy/numpy/pull/11719>`__: BUG: Fix undefined functions on big-endian systems.\n* `11720 <https://github.com/numpy/numpy/pull/11720>`__: MAINT: Make einsum optimize default to False.\n* `11746 <https://github.com/numpy/numpy/pull/11746>`__: BUG: Fix regression in loadtxt for bz2 text files in Python 2.\n* `11757 <https://github.com/numpy/numpy/pull/11757>`__: BUG: Revert use of `console_scripts`.\n* `11758 <https://github.com/numpy/numpy/pull/11758>`__: BUG: Fix Fortran kind detection for aarch64 & s390x.\n* `11759 <https://github.com/numpy/numpy/pull/11759>`__: BUG: Fix printing of longdouble on ppc64le.\n* `11760 <https://github.com/numpy/numpy/pull/11760>`__: BUG: Fixes for unicode field names in Python 2\n* `11761 <https://github.com/numpy/numpy/pull/11761>`__: BUG: Increase required cython version on python 3.7\n* `11763 <https://github.com/numpy/numpy/pull/11763>`__: BUG: check return value of _buffer_format_string\n* `11775 <https://github.com/numpy/numpy/pull/11775>`__: MAINT: Make assert_array_compare more generic.\n* `11776 <https://github.com/numpy/numpy/pull/11776>`__: TST: Fix urlopen stubbing.\n* `11777 <https://github.com/numpy/numpy/pull/11777>`__: BUG: Fix regression in intersect1d.\n* `11779 <https://github.com/numpy/numpy/pull/11779>`__: BUG: Fix test sensitive to platform byte order.\n* `11781 <https://github.com/numpy/numpy/pull/11781>`__: BUG: Avoid signed overflow in histogram\n* `11785 <https://github.com/numpy/numpy/pull/11785>`__: BUG: Fix pickle and memoryview for datetime64, timedelta64 scalars\n* `11786 <https://github.com/numpy/numpy/pull/11786>`__: BUG: Deprecation triggers segfault\n\nChecksums\n=========\n\nMD5\n- ---\n\n    8e894e6873420259fa13bc685ca922a7  numpy-1.15.1-cp27-cp27m-macosx_10_6_intel.macosx_10_9_intel.macosx_10_9_x86_64.macosx_10_10_intel.macosx_10_10_x86_64.whl\n    75154de03468c18c8b8d337b75d29bad  numpy-1.15.1-cp27-cp27m-manylinux1_i686.whl\n    50e3db64b9be2d399f7035ea71e16092  numpy-1.15.1-cp27-cp27m-manylinux1_x86_64.whl\n    35e15be82a5fc807572c7723171902b4  numpy-1.15.1-cp27-cp27mu-manylinux1_i686.whl\n    315cc1fb777c5251f27e49075b4d13fb  numpy-1.15.1-cp27-cp27mu-manylinux1_x86_64.whl\n    7b6fbdca75eeb0a0c28c09bfaf2e17c2  numpy-1.15.1-cp27-none-win32.whl\n    8bc75bc94bd189a4cc3ded0f0e9b1353  numpy-1.15.1-cp27-none-win_amd64.whl\n    3c8950f10241185376ae6dd425209543  numpy-1.15.1-cp34-cp34m-macosx_10_6_intel.macosx_10_9_intel.macosx_10_9_x86_64.macosx_10_10_intel.macosx_10_10_x86_64.whl\n    3e488ea8de86391335a56e7e2b2c47de  numpy-1.15.1-cp34-cp34m-manylinux1_i686.whl\n    0edee0d56ea5670b93b47410e66fa337  numpy-1.15.1-cp34-cp34m-manylinux1_x86_64.whl\n    67670224f931699c3836a1c9e4e8230b  numpy-1.15.1-cp34-none-win32.whl\n    5b9e984e562aac63b7549e456bd89dfe  numpy-1.15.1-cp34-none-win_amd64.whl\n    063f6a86f0713211b69050545e7c6c2c  numpy-1.15.1-cp35-cp35m-macosx_10_6_intel.macosx_10_9_intel.macosx_10_9_x86_64.macosx_10_10_intel.macosx_10_10_x86_64.whl\n    4afe4fd3ea108a967bd0b9425305b979  numpy-1.15.1-cp35-cp35m-manylinux1_i686.whl\n    e1ebc2bc6d0947159b33f208e844251a  numpy-1.15.1-cp35-cp35m-manylinux1_x86_64.whl\n    910aab0be682f29a182239e4bd4631cf  numpy-1.15.1-cp35-none-win32.whl\n    bfaac6c5f4e8ab65cd76b010ea5c5dfe  numpy-1.15.1-cp35-none-win_amd64.whl\n    ce48f8b807c9ac8b7d00301584ab7976  numpy-1.15.1-cp36-cp36m-macosx_10_6_intel.macosx_10_9_intel.macosx_10_9_x86_64.macosx_10_10_intel.macosx_10_10_x86_64.whl\n    d7d0c86acb89a86894811b8a792fba89  numpy-1.15.1-cp36-cp36m-manylinux1_i686.whl\n    3cd21facc099e72ab56a957978207c8c  numpy-1.15.1-cp36-cp36m-manylinux1_x86_64.whl\n    04471e530164dd25c7a9c1309712cc64  numpy-1.15.1-cp36-none-win32.whl\n    013ea5fbb8a953c2112acaa591c675a8  numpy-1.15.1-cp36-none-win_amd64.whl\n    3fdd39812b8fe172824d2cc52cb807c4  numpy-1.15.1-cp37-cp37m-macosx_10_6_intel.macosx_10_9_intel.macosx_10_9_x86_64.macosx_10_10_intel.macosx_10_10_x86_64.whl\n    381bd5ea598b17333264b1cbc9f62fac  numpy-1.15.1-cp37-cp37m-manylinux1_i686.whl\n    e600bd09303c622ff4d16ed63fefb205  numpy-1.15.1-cp37-cp37m-manylinux1_x86_64.whl\n    c05625370ff437b3e1a4f08cf194e3e4  numpy-1.15.1-cp37-none-win32.whl\n    f476babe66c6104c00accbf0bcfafce5  numpy-1.15.1-cp37-none-win_amd64.whl\n    e369ffae42ab89c7d1be5fe786e27702  numpy-1.15.1.tar.gz\n    898004d5be091fde59ae353e3008fe9b  numpy-1.15.1.zip\n\nSHA256\n- ------\n\n    5e359e9c531075220785603e5966eef20ccae9b3b6b8a06fdfb66c084361ce92  numpy-1.15.1-cp27-cp27m-macosx_10_6_intel.macosx_10_9_intel.macosx_10_9_x86_64.macosx_10_10_intel.macosx_10_10_x86_64.whl\n    419e6faee16097124ee627ed31572c7e80a1070efa25260b78097cca240e219a  numpy-1.15.1-cp27-cp27m-manylinux1_i686.whl\n    719b6789acb2bc86ea9b33a701d7c43dc2fc56d95107fd3c5b0a8230164d4dfb  numpy-1.15.1-cp27-cp27m-manylinux1_x86_64.whl\n    62d55e96ec7b117d3d5e618c15efcf769e70a6effaee5842857b64fb4883887a  numpy-1.15.1-cp27-cp27mu-manylinux1_i686.whl\n    df0b02c6705c5d1c25cc35c7b5d6b6f9b3b30833f9d178843397ae55ecc2eebb  numpy-1.15.1-cp27-cp27mu-manylinux1_x86_64.whl\n    dae8618c0bcbfcf6cf91350f8abcdd84158323711566a8c5892b5c7f832af76f  numpy-1.15.1-cp27-none-win32.whl\n    a3bd01d6d3ed3d7c06d7f9979ba5d68281f15383fafd53b81aa44b9191047cf8  numpy-1.15.1-cp27-none-win_amd64.whl\n    1c362ad12dd09a43b348bb28dd2295dd9cdf77f41f0f45965e04ba97f525b864  numpy-1.15.1-cp34-cp34m-macosx_10_6_intel.macosx_10_9_intel.macosx_10_9_x86_64.macosx_10_10_intel.macosx_10_10_x86_64.whl\n    83b8fc18261b70f45bece2d392537c93dc81eb6c539a16c9ac994c47fc79f09a  numpy-1.15.1-cp34-cp34m-manylinux1_i686.whl\n    ce75ed495a746e3e78cfa22a77096b3bff2eda995616cb7a542047f233091268  numpy-1.15.1-cp34-cp34m-manylinux1_x86_64.whl\n    340ec1697d9bb3a9c464028af7a54245298502e91178bddb4c37626d36e197b7  numpy-1.15.1-cp34-none-win32.whl\n    2156a06bd407918df4ac0122df6497a9c137432118f585e5b17d543e593d1587  numpy-1.15.1-cp34-none-win_amd64.whl\n    549f3e9778b148a47f4fb4682955ed88057eb627c9fe5467f33507c536deda9d  numpy-1.15.1-cp35-cp35m-macosx_10_6_intel.macosx_10_9_intel.macosx_10_9_x86_64.macosx_10_10_intel.macosx_10_10_x86_64.whl\n    378378973546ecc1dfaf9e24c160d683dd04df871ecd2dcc86ce658ca20f92c0  numpy-1.15.1-cp35-cp35m-manylinux1_i686.whl\n    35db8d419345caa4eeaa65cd63f34a15208acd87530a30f0bc25fc84f55c8c80  numpy-1.15.1-cp35-cp35m-manylinux1_x86_64.whl\n    4287104c24e6a09b9b418761a1e7b1bbde65105f110690ca46a23600a3c606b8  numpy-1.15.1-cp35-none-win32.whl\n    7a70f2b60d48828cba94a54a8776b61a9c2657a803d47f5785f8062e3a9c7c55  numpy-1.15.1-cp35-none-win_amd64.whl\n    e3660744cda0d94b90141cdd0db9308b958a372cfeee8d7188fdf5ad9108ea82  numpy-1.15.1-cp36-cp36m-macosx_10_6_intel.macosx_10_9_intel.macosx_10_9_x86_64.macosx_10_10_intel.macosx_10_10_x86_64.whl\n    5ee7f3dbbdba0da75dec7e94bd7a2b10fe57a83e1b38e678200a6ad8e7b14fdc  numpy-1.15.1-cp36-cp36m-manylinux1_i686.whl\n    36e8dcd1813ca92ce7e4299120cee6c03adad33d89b54862c1b1a100443ac399  numpy-1.15.1-cp36-cp36m-manylinux1_x86_64.whl\n    9473ad28375710ab18378e72b59422399b27e957e9339c413bf00793b4b12df0  numpy-1.15.1-cp36-none-win32.whl\n    c81a6afc1d2531a9ada50b58f8c36197f8418ef3d0611d4c1d7af93fdcda764f  numpy-1.15.1-cp36-none-win_amd64.whl\n    98b86c62c08c2e5dc98a9c856d4a95329d11b1c6058cb9b5191d5ea6891acd09  numpy-1.15.1-cp37-cp37m-macosx_10_6_intel.macosx_10_9_intel.macosx_10_9_x86_64.macosx_10_10_intel.macosx_10_10_x86_64.whl\n    24e4149c38489b51fc774b1e1faa9103e82f73344d7a00ba66f6845ab4769f3f  numpy-1.15.1-cp37-cp37m-manylinux1_i686.whl\n    95b085b253080e5d09f7826f5e27dce067bae813a132023a77b739614a29de6e  numpy-1.15.1-cp37-cp37m-manylinux1_x86_64.whl\n    361370e9b7f5e44c41eee29f2bb5cb3b755abb4b038bce6d6cbe08db7ff9cb74  numpy-1.15.1-cp37-none-win32.whl\n    f2362d0ca3e16c37782c1054d7972b8ad2729169567e3f0f4e5dd3cdf85f188e  numpy-1.15.1-cp37-none-win_amd64.whl\n    3c1ccce5d935ef8df16ae0595b459ef08a5cdb05aee195ebc04b9d89a72be7fa  numpy-1.15.1.tar.gz\n    7b9e37f194f8bcdca8e9e6af92e2cbad79e360542effc2dd6b98d63955d8d8a3  numpy-1.15.1.zip\n-----BEGIN PGP SIGNATURE-----\n\niQEcBAEBAgAGBQJbfHKnAAoJEGefIoN3xSR7M78IAIGQXVms9Ior93xO+EtJK5zP\nHKmgfhJmSPNcL9pX8Jk+rxCMHogR6GBhynXpWnFE/oqzsd4HOhwK6MAVVM9IOJEH\npuFFbqN6W2UM6Ka2VJP5FAI6w7Fb8b6xeFgn/sqf26wBasNSUXV0KYEun5MvsHJg\nAxK3uFzI5WoWinyOyk5m+7u5aLA4VSQcGMfzQufAZD01/FJqwk5qeQWF9+7UL6U3\nYEmnb71RVejeC2LqKN8fKskTX6maFahGLVABysmyA8iZjxzGmTM6CgE29XV4fzW6\n7IosPYPJIPbN79EosPlj0tR7aoL3Y4a8kqnAJF2U3H7bp1YVPV5nl2KxTh/zKig=\n=PaAm\n-----END PGP SIGNATURE-----\n\n\n.. currentmodule:: numpy\n\n==========================\n", "1.26.4": "==========================\n\nNumPy 1.26.4 is a maintenance release that fixes bugs and regressions\ndiscovered after the 1.26.3 release. The Python versions supported by this\nrelease are 3.9-3.12. This is the last planned release in the 1.26.x series.\n\n\nContributors\n============\n\nA total of 13 people contributed to this release.  People with a \"+\" by their\nnames contributed a patch for the first time.\n\n* Charles Harris\n* Elliott Sales de Andrade\n* Lucas Colley +\n* Mark Ryan +\n* Matti Picus\n* Nathan Goldbaum\n* Ola x Nilsson +\n* Pieter Eendebak\n* Ralf Gommers\n* Sayed Adel\n* Sebastian Berg\n* Stefan van der Walt\n* Stefano Rivera\n\n\nPull requests merged\n====================\n\nA total of 19 pull requests were merged for this release.\n\n* `25323 <https://github.com/numpy/numpy/pull/25323>`__: BUG: Restore missing asstr import\n* `25523 <https://github.com/numpy/numpy/pull/25523>`__: MAINT: prepare 1.26.x for further development\n* `25539 <https://github.com/numpy/numpy/pull/25539>`__: BUG: ``numpy.array_api``: fix ``linalg.cholesky`` upper decomp...\n* `25584 <https://github.com/numpy/numpy/pull/25584>`__: CI: Bump azure pipeline timeout to 120 minutes\n* `25585 <https://github.com/numpy/numpy/pull/25585>`__: MAINT, BLD: Fix unused inline functions warnings on clang\n* `25599 <https://github.com/numpy/numpy/pull/25599>`__: BLD: include fix for MinGW platform detection\n* `25618 <https://github.com/numpy/numpy/pull/25618>`__: TST: Fix test_numeric on riscv64\n* `25619 <https://github.com/numpy/numpy/pull/25619>`__: BLD: fix building for windows ARM64\n* `25620 <https://github.com/numpy/numpy/pull/25620>`__: MAINT: add ``newaxis`` to ``__all__`` in ``numpy.array_api``\n* `25630 <https://github.com/numpy/numpy/pull/25630>`__: BUG: Use large file fallocate on 32 bit linux platforms\n* `25643 <https://github.com/numpy/numpy/pull/25643>`__: TST: Fix test_warning_calls on Python 3.12\n* `25645 <https://github.com/numpy/numpy/pull/25645>`__: TST: Bump pytz to 2023.3.post1\n* `25658 <https://github.com/numpy/numpy/pull/25658>`__: BUG: Fix AVX512 build flags on Intel Classic Compiler\n* `25670 <https://github.com/numpy/numpy/pull/25670>`__: BLD: fix potential issue with escape sequences in ``__config__.py``\n* `25718 <https://github.com/numpy/numpy/pull/25718>`__: CI: pin cygwin python to 3.9.16-1 and fix typing tests [skip...\n* `25720 <https://github.com/numpy/numpy/pull/25720>`__: MAINT: Bump cibuildwheel to v2.16.4\n* `25748 <https://github.com/numpy/numpy/pull/25748>`__: BLD: unvendor meson-python on 1.26.x and upgrade to meson-python...\n* `25755 <https://github.com/numpy/numpy/pull/25755>`__: MAINT: Include header defining backtrace\n* `25756 <https://github.com/numpy/numpy/pull/25756>`__: BUG: Fix np.quantile([Fraction(2,1)], 0.5) (#24711)\n\n\nChecksums\n=========\n\nMD5\n---\n::\n\n    90f33cdd8934cd07192d6ede114d8d4d  numpy-1.26.4-cp310-cp310-macosx_10_9_x86_64.whl\n    63ac60767f6724490e587f6010bd6839  numpy-1.26.4-cp310-cp310-macosx_11_0_arm64.whl\n    ad4e82b225aaaf5898ea9798b50978d8  numpy-1.26.4-cp310-cp310-manylinux_2_17_aarch64.manylinux2014_aarch64.whl\n    d428e3da2df4fa359313348302cf003a  numpy-1.26.4-cp310-cp310-manylinux_2_17_x86_64.manylinux2014_x86_64.whl\n    89937c3bb596193f8ca9eae2ff84181e  numpy-1.26.4-cp310-cp310-musllinux_1_1_aarch64.whl\n    de4f9da0a4e6dfd4cec39c7ad5139803  numpy-1.26.4-cp310-cp310-musllinux_1_1_x86_64.whl\n    2c1f73fd9b3acf4b9b0c23e985cdd38f  numpy-1.26.4-cp310-cp310-win32.whl\n    920ad1f50e478b1a877fe7b7a46cc520  numpy-1.26.4-cp310-cp310-win_amd64.whl\n    719d1ff12db38903dcfd6749078fb11d  numpy-1.26.4-cp311-cp311-macosx_10_9_x86_64.whl\n    eb601e80194d2e1c00d8daedd8dc68c4  numpy-1.26.4-cp311-cp311-macosx_11_0_arm64.whl\n    71a7ab11996fa370dc28e28731bd5c32  numpy-1.26.4-cp311-cp311-manylinux_2_17_aarch64.manylinux2014_aarch64.whl\n    eb0cdd03e1ee2eb45c57c7340c98cf48  numpy-1.26.4-cp311-cp311-manylinux_2_17_x86_64.manylinux2014_x86_64.whl\n    9d4ae1b0b27a625400f81ed1846a5667  numpy-1.26.4-cp311-cp311-musllinux_1_1_aarch64.whl\n    1b6771350d2f496157430437a895ba4b  numpy-1.26.4-cp311-cp311-musllinux_1_1_x86_64.whl\n    1e4a18612ee4d0e54e0833574ebc6d25  numpy-1.26.4-cp311-cp311-win32.whl\n    5fd325dd8704023c1110835d7a1b095a  numpy-1.26.4-cp311-cp311-win_amd64.whl\n    d95ce582923d24dbddbc108aa5fd2128  numpy-1.26.4-cp312-cp312-macosx_10_9_x86_64.whl\n    6f16f3d70e0d95ce2b032167c546cc95  numpy-1.26.4-cp312-cp312-macosx_11_0_arm64.whl\n    5369536d4c45fbe384147ff23185b48a  numpy-1.26.4-cp312-cp312-manylinux_2_17_aarch64.manylinux2014_aarch64.whl\n    1ceb224096686831ad731e472b65e96a  numpy-1.26.4-cp312-cp312-manylinux_2_17_x86_64.manylinux2014_x86_64.whl\n    cd8d3c00bbc89f9bc07e2df762f9e2ae  numpy-1.26.4-cp312-cp312-musllinux_1_1_aarch64.whl\n    5bd81ce840bb2e42befe01efb0402b79  numpy-1.26.4-cp312-cp312-musllinux_1_1_x86_64.whl\n    2cc3b0757228078395da3efa3dc99f23  numpy-1.26.4-cp312-cp312-win32.whl\n    305155bd5ae879344c58968879584ed1  numpy-1.26.4-cp312-cp312-win_amd64.whl\n    ec2310f67215743e9c5d16b6c9fb87b6  numpy-1.26.4-cp39-cp39-macosx_10_9_x86_64.whl\n    406aea6081c1affbebdb6ad56b5deaf4  numpy-1.26.4-cp39-cp39-macosx_11_0_arm64.whl\n    fee12f0a3cbac7bbf1a1c2d82d3b02a9  numpy-1.26.4-cp39-cp39-manylinux_2_17_aarch64.manylinux2014_aarch64.whl\n    baf4b7143c7b9ce170e62b33380fb573  numpy-1.26.4-cp39-cp39-manylinux_2_17_x86_64.manylinux2014_x86_64.whl\n    376ff29f90b7840ae19ecd59ad1ddf53  numpy-1.26.4-cp39-cp39-musllinux_1_1_aarch64.whl\n    86785b3a7cd156c08c2ebc26f7816fb3  numpy-1.26.4-cp39-cp39-musllinux_1_1_x86_64.whl\n    ab8a9ab69f16b7005f238cda76bc0bac  numpy-1.26.4-cp39-cp39-win32.whl\n    fafa4453e820c7ff40907e5dc79d8199  numpy-1.26.4-cp39-cp39-win_amd64.whl\n    7f13e2f07bd3e4a439ade0e4d27905c6  numpy-1.26.4-pp39-pypy39_pp73-macosx_10_9_x86_64.whl\n    928954b41c1cd0e856f1a31d41722661  numpy-1.26.4-pp39-pypy39_pp73-manylinux_2_17_x86_64.manylinux2014_x86_64.whl\n    57bbd5c0b3848d804c416cbcab4a0ae8  numpy-1.26.4-pp39-pypy39_pp73-win_amd64.whl\n    19550cbe7bedd96a928da9d4ad69509d  numpy-1.26.4.tar.gz\n\nSHA256\n------\n::\n\n    9ff0f4f29c51e2803569d7a51c2304de5554655a60c5d776e35b4a41413830d0  numpy-1.26.4-cp310-cp310-macosx_10_9_x86_64.whl\n    2e4ee3380d6de9c9ec04745830fd9e2eccb3e6cf790d39d7b98ffd19b0dd754a  numpy-1.26.4-cp310-cp310-macosx_11_0_arm64.whl\n    d209d8969599b27ad20994c8e41936ee0964e6da07478d6c35016bc386b66ad4  numpy-1.26.4-cp310-cp310-manylinux_2_17_aarch64.manylinux2014_aarch64.whl\n    ffa75af20b44f8dba823498024771d5ac50620e6915abac414251bd971b4529f  numpy-1.26.4-cp310-cp310-manylinux_2_17_x86_64.manylinux2014_x86_64.whl\n    62b8e4b1e28009ef2846b4c7852046736bab361f7aeadeb6a5b89ebec3c7055a  numpy-1.26.4-cp310-cp310-musllinux_1_1_aarch64.whl\n    a4abb4f9001ad2858e7ac189089c42178fcce737e4169dc61321660f1a96c7d2  numpy-1.26.4-cp310-cp310-musllinux_1_1_x86_64.whl\n    bfe25acf8b437eb2a8b2d49d443800a5f18508cd811fea3181723922a8a82b07  numpy-1.26.4-cp310-cp310-win32.whl\n    b97fe8060236edf3662adfc2c633f56a08ae30560c56310562cb4f95500022d5  numpy-1.26.4-cp310-cp310-win_amd64.whl\n    4c66707fabe114439db9068ee468c26bbdf909cac0fb58686a42a24de1760c71  numpy-1.26.4-cp311-cp311-macosx_10_9_x86_64.whl\n    edd8b5fe47dab091176d21bb6de568acdd906d1887a4584a15a9a96a1dca06ef  numpy-1.26.4-cp311-cp311-macosx_11_0_arm64.whl\n    7ab55401287bfec946ced39700c053796e7cc0e3acbef09993a9ad2adba6ca6e  numpy-1.26.4-cp311-cp311-manylinux_2_17_aarch64.manylinux2014_aarch64.whl\n    666dbfb6ec68962c033a450943ded891bed2d54e6755e35e5835d63f4f6931d5  numpy-1.26.4-cp311-cp311-manylinux_2_17_x86_64.manylinux2014_x86_64.whl\n    96ff0b2ad353d8f990b63294c8986f1ec3cb19d749234014f4e7eb0112ceba5a  numpy-1.26.4-cp311-cp311-musllinux_1_1_aarch64.whl\n    60dedbb91afcbfdc9bc0b1f3f402804070deed7392c23eb7a7f07fa857868e8a  numpy-1.26.4-cp311-cp311-musllinux_1_1_x86_64.whl\n    1af303d6b2210eb850fcf03064d364652b7120803a0b872f5211f5234b399f20  numpy-1.26.4-cp311-cp311-win32.whl\n    cd25bcecc4974d09257ffcd1f098ee778f7834c3ad767fe5db785be9a4aa9cb2  numpy-1.26.4-cp311-cp311-win_amd64.whl\n    b3ce300f3644fb06443ee2222c2201dd3a89ea6040541412b8fa189341847218  numpy-1.26.4-cp312-cp312-macosx_10_9_x86_64.whl\n    03a8c78d01d9781b28a6989f6fa1bb2c4f2d51201cf99d3dd875df6fbd96b23b  numpy-1.26.4-cp312-cp312-macosx_11_0_arm64.whl\n    9fad7dcb1aac3c7f0584a5a8133e3a43eeb2fe127f47e3632d43d677c66c102b  numpy-1.26.4-cp312-cp312-manylinux_2_17_aarch64.manylinux2014_aarch64.whl\n    675d61ffbfa78604709862923189bad94014bef562cc35cf61d3a07bba02a7ed  numpy-1.26.4-cp312-cp312-manylinux_2_17_x86_64.manylinux2014_x86_64.whl\n    ab47dbe5cc8210f55aa58e4805fe224dac469cde56b9f731a4c098b91917159a  numpy-1.26.4-cp312-cp312-musllinux_1_1_aarch64.whl\n    1dda2e7b4ec9dd512f84935c5f126c8bd8b9f2fc001e9f54af255e8c5f16b0e0  numpy-1.26.4-cp312-cp312-musllinux_1_1_x86_64.whl\n    50193e430acfc1346175fcbdaa28ffec49947a06918b7b92130744e81e640110  numpy-1.26.4-cp312-cp312-win32.whl\n    08beddf13648eb95f8d867350f6a018a4be2e5ad54c8d8caed89ebca558b2818  numpy-1.26.4-cp312-cp312-win_amd64.whl\n    7349ab0fa0c429c82442a27a9673fc802ffdb7c7775fad780226cb234965e53c  numpy-1.26.4-cp39-cp39-macosx_10_9_x86_64.whl\n    52b8b60467cd7dd1e9ed082188b4e6bb35aa5cdd01777621a1658910745b90be  numpy-1.26.4-cp39-cp39-macosx_11_0_arm64.whl\n    d5241e0a80d808d70546c697135da2c613f30e28251ff8307eb72ba696945764  numpy-1.26.4-cp39-cp39-manylinux_2_17_aarch64.manylinux2014_aarch64.whl\n    f870204a840a60da0b12273ef34f7051e98c3b5961b61b0c2c1be6dfd64fbcd3  numpy-1.26.4-cp39-cp39-manylinux_2_17_x86_64.manylinux2014_x86_64.whl\n    679b0076f67ecc0138fd2ede3a8fd196dddc2ad3254069bcb9faf9a79b1cebcd  numpy-1.26.4-cp39-cp39-musllinux_1_1_aarch64.whl\n    47711010ad8555514b434df65f7d7b076bb8261df1ca9bb78f53d3b2db02e95c  numpy-1.26.4-cp39-cp39-musllinux_1_1_x86_64.whl\n    a354325ee03388678242a4d7ebcd08b5c727033fcff3b2f536aea978e15ee9e6  numpy-1.26.4-cp39-cp39-win32.whl\n    3373d5d70a5fe74a2c1bb6d2cfd9609ecf686d47a2d7b1d37a8f3b6bf6003aea  numpy-1.26.4-cp39-cp39-win_amd64.whl\n    afedb719a9dcfc7eaf2287b839d8198e06dcd4cb5d276a3df279231138e83d30  numpy-1.26.4-pp39-pypy39_pp73-macosx_10_9_x86_64.whl\n    95a7476c59002f2f6c590b9b7b998306fba6a5aa646b1e22ddfeaf8f78c3a29c  numpy-1.26.4-pp39-pypy39_pp73-manylinux_2_17_x86_64.manylinux2014_x86_64.whl\n    7e50d0a0cc3189f9cb0aeb3a6a6af18c16f59f004b866cd2be1c14b36134a4a0  numpy-1.26.4-pp39-pypy39_pp73-win_amd64.whl\n    2a02aba9ed12e4ac4eb3ea9421c420301a0c6460d9830d74a9df87efa4912010  numpy-1.26.4.tar.gz\n\n\n.. currentmodule:: numpy\n\n==========================\n", "1.21.4": "==========================\n\nThe NumPy 1.21.4 is a maintenance release that fixes a few bugs discovered\nafter 1.21.3. The most important fix here is a fix for the NumPy header files\nto make them work for both x86_64 and M1 hardware when included in the Mac\nuniversal2 wheels. Previously, the header files only worked for M1 and this\ncaused problems for folks building x86_64 extensions. This problem was not seen\nbefore Python 3.10 because there were thin wheels for x86_64 that had\nprecedence. This release also provides thin x86_64 Mac wheels for Python 3.10.\n\nThe Python versions supported in this release are 3.7-3.10. If you want to\ncompile your own version using gcc-11, you will need to use gcc-11.2+ to avoid\nproblems.\n\nContributors\n============\n\nA total of 7 people contributed to this release.  People with a \"+\" by their\nnames contributed a patch for the first time.\n\n* Bas van Beek\n* Charles Harris\n* Isuru Fernando\n* Matthew Brett\n* Sayed Adel\n* Sebastian Berg\n* \u5085\u7acb\u4e1a\uff08Chris Fu\uff09 +\n\nPull requests merged\n====================\n\nA total of 9 pull requests were merged for this release.\n\n* `20278 <https://github.com/numpy/numpy/pull/20278>`__: BUG: Fix shadowed reference of `dtype` in type stub\n* `20293 <https://github.com/numpy/numpy/pull/20293>`__: BUG: Fix headers for universal2 builds\n* `20294 <https://github.com/numpy/numpy/pull/20294>`__: BUG: ``VOID_nonzero`` could sometimes mutate alignment flag\n* `20295 <https://github.com/numpy/numpy/pull/20295>`__: BUG: Do not use nonzero fastpath on unaligned arrays\n* `20296 <https://github.com/numpy/numpy/pull/20296>`__: BUG: Distutils patch to allow for 2 as a minor version (!)\n* `20297 <https://github.com/numpy/numpy/pull/20297>`__: BUG, SIMD: Fix 64-bit/8-bit integer division by a scalar\n* `20298 <https://github.com/numpy/numpy/pull/20298>`__: BUG, SIMD: Workaround broadcasting SIMD 64-bit integers on MSVC...\n* `20300 <https://github.com/numpy/numpy/pull/20300>`__: REL: Prepare for the NumPy 1.21.4 release.\n* `20302 <https://github.com/numpy/numpy/pull/20302>`__: TST: Fix a `Arrayterator` typing test failure\n\nChecksums\n=========\n\nMD5\n---\n::\n\n    95486a3ed027c926fb3fc279db6d843e  numpy-1.21.4-cp310-cp310-macosx_10_9_universal2.whl\n    9f57fad74762f7665669af33583a3dc9  numpy-1.21.4-cp310-cp310-macosx_10_9_x86_64.whl\n    719a9053aef01a067ce44ede2281eef9  numpy-1.21.4-cp310-cp310-macosx_11_0_arm64.whl\n    72035d101774fd03beff391927f59aa9  numpy-1.21.4-cp310-cp310-manylinux_2_17_aarch64.manylinux2014_aarch64.whl\n    5813e7a378a6e3f5c269c23f61eff4d9  numpy-1.21.4-cp310-cp310-manylinux_2_17_x86_64.manylinux2014_x86_64.whl\n    b88a1bc4f08dfb154d5a07d15e387af6  numpy-1.21.4-cp310-cp310-win_amd64.whl\n    f0cc946d2f4ab4df7cc7e0cc8cfd429e  numpy-1.21.4-cp37-cp37m-macosx_10_9_x86_64.whl\n    1234643306ce481f0e5f801ddf3f1099  numpy-1.21.4-cp37-cp37m-manylinux_2_12_i686.manylinux2010_i686.whl\n    b9208ce1695ba61ab2932c7ce7285d1d  numpy-1.21.4-cp37-cp37m-manylinux_2_12_x86_64.manylinux2010_x86_64.whl\n    9804fe2011618bf2d7b8d92f6860b2e3  numpy-1.21.4-cp37-cp37m-manylinux_2_17_aarch64.manylinux2014_aarch64.whl\n    2ad3a06f974acd61326fd66c098df5bc  numpy-1.21.4-cp37-cp37m-win32.whl\n    172301389f1532b2d9130362580e1e22  numpy-1.21.4-cp37-cp37m-win_amd64.whl\n    a037bf88979ae0d4699a0cdce92bbab3  numpy-1.21.4-cp38-cp38-macosx_10_9_universal2.whl\n    ba94609688f575cc8dce84f1512db116  numpy-1.21.4-cp38-cp38-macosx_10_9_x86_64.whl\n    c78edc0ae8c9a5d8d0f9e3eb6dabd0b3  numpy-1.21.4-cp38-cp38-macosx_11_0_arm64.whl\n    d683b6f6af46806391579d528a040451  numpy-1.21.4-cp38-cp38-manylinux_2_12_i686.manylinux2010_i686.whl\n    df631f776716aeb3fd705f3659599b9e  numpy-1.21.4-cp38-cp38-manylinux_2_12_x86_64.manylinux2010_x86_64.whl\n    b1cbca49d24c7ba43d377feb425afdce  numpy-1.21.4-cp38-cp38-manylinux_2_17_aarch64.manylinux2014_aarch64.whl\n    8b5c214bc0f060dbb0287c15dde4673d  numpy-1.21.4-cp38-cp38-win32.whl\n    2307cf9f3c02f6cdad448a681c272974  numpy-1.21.4-cp38-cp38-win_amd64.whl\n    fc02b5a068e29b2dd2de19c7ddd69926  numpy-1.21.4-cp39-cp39-macosx_10_9_universal2.whl\n    f16068540001de8a3d8f096830c97ea2  numpy-1.21.4-cp39-cp39-macosx_10_9_x86_64.whl\n    80562c39cfbdf1af9bb43b2ea5e45b6d  numpy-1.21.4-cp39-cp39-macosx_11_0_arm64.whl\n    6c103bec3085e5a6ea92cf7f6e4189ab  numpy-1.21.4-cp39-cp39-manylinux_2_12_i686.manylinux2010_i686.whl\n    9d715ba5f7596a39eb631f2dae85d203  numpy-1.21.4-cp39-cp39-manylinux_2_12_x86_64.manylinux2010_x86_64.whl\n    8b8cf8c7b093419ff75ed1dd2eaa18ae  numpy-1.21.4-cp39-cp39-manylinux_2_17_aarch64.manylinux2014_aarch64.whl\n    404200b858b7addd03f6cdd5a484d30a  numpy-1.21.4-cp39-cp39-win32.whl\n    cdab6a1bf1b86021526d08a60219a6ad  numpy-1.21.4-cp39-cp39-win_amd64.whl\n    70ca6b591e844fdcb8c22175f094d3b4  numpy-1.21.4-pp37-pypy37_pp73-manylinux_2_12_x86_64.manylinux2010_x86_64.whl\n    06019c1116b3e2791bd507f898257e7f  numpy-1.21.4.tar.gz\n    b3c4477a027d5b6fba5e1065064fd076  numpy-1.21.4.zip\n\nSHA256\n------\n::\n\n    8890b3360f345e8360133bc078d2dacc2843b6ee6059b568781b15b97acbe39f  numpy-1.21.4-cp310-cp310-macosx_10_9_universal2.whl\n    69077388c5a4b997442b843dbdc3a85b420fb693ec8e33020bb24d647c164fa5  numpy-1.21.4-cp310-cp310-macosx_10_9_x86_64.whl\n    e89717274b41ebd568cd7943fc9418eeb49b1785b66031bc8a7f6300463c5898  numpy-1.21.4-cp310-cp310-macosx_11_0_arm64.whl\n    0b78ecfa070460104934e2caf51694ccd00f37d5e5dbe76f021b1b0b0d221823  numpy-1.21.4-cp310-cp310-manylinux_2_17_aarch64.manylinux2014_aarch64.whl\n    615d4e328af7204c13ae3d4df7615a13ff60a49cb0d9106fde07f541207883ca  numpy-1.21.4-cp310-cp310-manylinux_2_17_x86_64.manylinux2014_x86_64.whl\n    1403b4e2181fc72664737d848b60e65150f272fe5a1c1cbc16145ed43884065a  numpy-1.21.4-cp310-cp310-win_amd64.whl\n    74b85a17528ca60cf98381a5e779fc0264b4a88b46025e6bcbe9621f46bb3e63  numpy-1.21.4-cp37-cp37m-macosx_10_9_x86_64.whl\n    92aafa03da8658609f59f18722b88f0a73a249101169e28415b4fa148caf7e41  numpy-1.21.4-cp37-cp37m-manylinux_2_12_i686.manylinux2010_i686.whl\n    5d95668e727c75b3f5088ec7700e260f90ec83f488e4c0aaccb941148b2cd377  numpy-1.21.4-cp37-cp37m-manylinux_2_12_x86_64.manylinux2010_x86_64.whl\n    f5162ec777ba7138906c9c274353ece5603646c6965570d82905546579573f73  numpy-1.21.4-cp37-cp37m-manylinux_2_17_aarch64.manylinux2014_aarch64.whl\n    81225e58ef5fce7f1d80399575576fc5febec79a8a2742e8ef86d7b03beef49f  numpy-1.21.4-cp37-cp37m-win32.whl\n    32fe5b12061f6446adcbb32cf4060a14741f9c21e15aaee59a207b6ce6423469  numpy-1.21.4-cp37-cp37m-win_amd64.whl\n    c449eb870616a7b62e097982c622d2577b3dbc800aaf8689254ec6e0197cbf1e  numpy-1.21.4-cp38-cp38-macosx_10_9_universal2.whl\n    2e4ed57f45f0aa38beca2a03b6532e70e548faf2debbeb3291cfc9b315d9be8f  numpy-1.21.4-cp38-cp38-macosx_10_9_x86_64.whl\n    1247ef28387b7bb7f21caf2dbe4767f4f4175df44d30604d42ad9bd701ebb31f  numpy-1.21.4-cp38-cp38-macosx_11_0_arm64.whl\n    34f3456f530ae8b44231c63082c8899fe9c983fd9b108c997c4b1c8c2d435333  numpy-1.21.4-cp38-cp38-manylinux_2_12_i686.manylinux2010_i686.whl\n    4c9c23158b87ed0e70d9a50c67e5c0b3f75bcf2581a8e34668d4e9d7474d76c6  numpy-1.21.4-cp38-cp38-manylinux_2_12_x86_64.manylinux2010_x86_64.whl\n    e4799be6a2d7d3c33699a6f77201836ac975b2e1b98c2a07f66a38f499cb50ce  numpy-1.21.4-cp38-cp38-manylinux_2_17_aarch64.manylinux2014_aarch64.whl\n    bc988afcea53e6156546e5b2885b7efab089570783d9d82caf1cfd323b0bb3dd  numpy-1.21.4-cp38-cp38-win32.whl\n    170b2a0805c6891ca78c1d96ee72e4c3ed1ae0a992c75444b6ab20ff038ba2cd  numpy-1.21.4-cp38-cp38-win_amd64.whl\n    fde96af889262e85aa033f8ee1d3241e32bf36228318a61f1ace579df4e8170d  numpy-1.21.4-cp39-cp39-macosx_10_9_universal2.whl\n    c885bfc07f77e8fee3dc879152ba993732601f1f11de248d4f357f0ffea6a6d4  numpy-1.21.4-cp39-cp39-macosx_10_9_x86_64.whl\n    9e6f5f50d1eff2f2f752b3089a118aee1ea0da63d56c44f3865681009b0af162  numpy-1.21.4-cp39-cp39-macosx_11_0_arm64.whl\n    ad010846cdffe7ec27e3f933397f8a8d6c801a48634f419e3d075db27acf5880  numpy-1.21.4-cp39-cp39-manylinux_2_12_i686.manylinux2010_i686.whl\n    c74c699b122918a6c4611285cc2cad4a3aafdb135c22a16ec483340ef97d573c  numpy-1.21.4-cp39-cp39-manylinux_2_12_x86_64.manylinux2010_x86_64.whl\n    9864424631775b0c052f3bd98bc2712d131b3e2cd95d1c0c68b91709170890b0  numpy-1.21.4-cp39-cp39-manylinux_2_17_aarch64.manylinux2014_aarch64.whl\n    b1e2312f5b8843a3e4e8224b2b48fe16119617b8fc0a54df8f50098721b5bed2  numpy-1.21.4-cp39-cp39-win32.whl\n    e3c3e990274444031482a31280bf48674441e0a5b55ddb168f3a6db3e0c38ec8  numpy-1.21.4-cp39-cp39-win_amd64.whl\n    a3deb31bc84f2b42584b8c4001c85d1934dbfb4030827110bc36bfd11509b7bf  numpy-1.21.4-pp37-pypy37_pp73-manylinux_2_12_x86_64.manylinux2010_x86_64.whl\n    5d412381aa489b8be82ac5c6a9e99c3eb3f754245ad3f90ab5c339d92f25fb47  numpy-1.21.4.tar.gz\n    e6c76a87633aa3fa16614b61ccedfae45b91df2767cf097aa9c933932a7ed1e0  numpy-1.21.4.zip\n\n\n-----BEGIN PGP SIGNED MESSAGE-----\nHash: SHA256\n\n.. currentmodule:: numpy\n\n==========================\n", "1.17.3": "==========================\n\nThis release contains fixes for bugs reported against NumPy 1.17.2 along with a\nsome documentation improvements. The Python versions supported in this release \nare 3.5-3.8.\n\nDownstream developers should use Cython >= 0.29.13 for Python 3.8 support and\nOpenBLAS >= 3.7 to avoid errors on the Skylake architecture.\n\n\nHighlights\n==========\n\n- - Wheels for Python 3.8\n- - Boolean ``matmul`` fixed to use booleans instead of integers.\n\n\nCompatibility notes\n===================\n\n- - The seldom used ``PyArray_DescrCheck`` macro has been changed/fixed.\n\n\nContributors\n============\n\nA total of 7 people contributed to this release.  People with a \"+\" by their\nnames contributed a patch for the first time.\n\n* Allan Haldane\n* Charles Harris\n* Kevin Sheppard\n* Matti Picus\n* Ralf Gommers\n* Sebastian Berg\n* Warren Weckesser\n\n\nPull requests merged\n====================\n\nA total of 12 pull requests were merged for this release.\n\n* `14456 <https://github.com/numpy/numpy/pull/14456>`__: MAINT: clean up pocketfft modules inside numpy.fft namespace.\n* `14463 <https://github.com/numpy/numpy/pull/14463>`__: BUG: random.hypergeometic assumes npy_long is npy_int64, hung...\n* `14502 <https://github.com/numpy/numpy/pull/14502>`__: BUG: random: Revert gh-14458 and refix gh-14557.\n* `14504 <https://github.com/numpy/numpy/pull/14504>`__: BUG: add a specialized loop for boolean matmul.\n* `14506 <https://github.com/numpy/numpy/pull/14506>`__: MAINT: Update pytest version for Python 3.8\n* `14512 <https://github.com/numpy/numpy/pull/14512>`__: DOC: random: fix doc linking, was referencing private submodules.\n* `14513 <https://github.com/numpy/numpy/pull/14513>`__: BUG,MAINT: Some fixes and minor cleanup based on clang analysis\n* `14515 <https://github.com/numpy/numpy/pull/14515>`__: BUG: Fix randint when range is 2**32\n* `14519 <https://github.com/numpy/numpy/pull/14519>`__: MAINT: remove the entropy c-extension module\n* `14563 <https://github.com/numpy/numpy/pull/14563>`__: DOC: remove note about Pocketfft license file (non-existing here).\n* `14578 <https://github.com/numpy/numpy/pull/14578>`__: BUG: random: Create a legacy implementation of random.binomial.\n* `14687 <https://github.com/numpy/numpy/pull/14687>`__: BUG: properly define PyArray_DescrCheck\n\nChecksums\n=========\n\nMD5\n- ---\n\n    7e96dd5ca587fa647d21628072f08751  numpy-1.17.3-cp35-cp35m-macosx_10_6_intel.whl\n    f5fd3a434d9e426c9f01ca5669e84973  numpy-1.17.3-cp35-cp35m-manylinux1_i686.whl\n    d4520794f05e6466a1064e046b4ade2c  numpy-1.17.3-cp35-cp35m-manylinux1_x86_64.whl\n    67967e337b8378c92af9c2b6926b6dcd  numpy-1.17.3-cp35-cp35m-win32.whl\n    341b29b85c5305edd3f5ca9d9981f1b4  numpy-1.17.3-cp35-cp35m-win_amd64.whl\n    7d9492ee0fbe8292518af104772bcee0  numpy-1.17.3-cp36-cp36m-macosx_10_9_x86_64.whl\n    b0f1a9b0da552e2baa2e6db4668efee8  numpy-1.17.3-cp36-cp36m-manylinux1_i686.whl\n    8b9c50124ae13279e9969fc0cf3b5e5f  numpy-1.17.3-cp36-cp36m-manylinux1_x86_64.whl\n    428766619877efec34ba224d9252396c  numpy-1.17.3-cp36-cp36m-win32.whl\n    a2fd25bf087e7765a4322ef3fa7f87b6  numpy-1.17.3-cp36-cp36m-win_amd64.whl\n    98eb0ec4fe00f9f3309f2e523e76e36e  numpy-1.17.3-cp37-cp37m-macosx_10_9_x86_64.whl\n    415f086791be02d658a2800fa25874e4  numpy-1.17.3-cp37-cp37m-manylinux1_i686.whl\n    3f5fd3e63dc84db7dd3745b007faea46  numpy-1.17.3-cp37-cp37m-manylinux1_x86_64.whl\n    3f7ba813f7318d9671da66c610ab1e91  numpy-1.17.3-cp37-cp37m-win32.whl\n    deb55760769373ad1da9844df8b9c865  numpy-1.17.3-cp37-cp37m-win_amd64.whl\n    964b1cdad1cf20c63461246fe0638956  numpy-1.17.3-cp38-cp38-macosx_10_9_x86_64.whl\n    ece34643fc0c42801a8d3a53708f09ed  numpy-1.17.3-cp38-cp38-manylinux1_i686.whl\n    081fd68219088577857ebd265e963d1e  numpy-1.17.3-cp38-cp38-manylinux1_x86_64.whl\n    a231efeb2cfe69cf94764ccecba73d50  numpy-1.17.3-cp38-cp38-win32.whl\n    1c548f96188826e6999d3ba3fde99cf9  numpy-1.17.3-cp38-cp38-win_amd64.whl\n    48d6d97d6037eb8e171064a850b53aab  numpy-1.17.3.tar.gz\n    a3195ccbbd97b0366f0c46e36a62717a  numpy-1.17.3.zip\n\nSHA256\n- ------\n\n    4dd830a11e8724c9c9379feed1d1be43113f8bcce55f47ea7186d3946769ce26  numpy-1.17.3-cp35-cp35m-macosx_10_6_intel.whl\n    30c84e3a62cfcb9e3066f25226e131451312a044f1fe2040e69ce792cb7de418  numpy-1.17.3-cp35-cp35m-manylinux1_i686.whl\n    9395b0a41e8b7e9a284e3be7060db9d14ad80273841c952c83a5afc241d2bd98  numpy-1.17.3-cp35-cp35m-manylinux1_x86_64.whl\n    9e37c35fc4e9410093b04a77d11a34c64bf658565e30df7cbe882056088a91c1  numpy-1.17.3-cp35-cp35m-win32.whl\n    de2b1c20494bdf47f0160bd88ed05f5e48ae5dc336b8de7cfade71abcc95c0b9  numpy-1.17.3-cp35-cp35m-win_amd64.whl\n    669795516d62f38845c7033679c648903200980d68935baaa17ac5c7ae03ae0c  numpy-1.17.3-cp36-cp36m-macosx_10_9_x86_64.whl\n    4650d94bb9c947151737ee022b934b7d9a845a7c76e476f3e460f09a0c8c6f39  numpy-1.17.3-cp36-cp36m-manylinux1_i686.whl\n    4f2a2b279efde194877aff1f76cf61c68e840db242a5c7169f1ff0fd59a2b1e2  numpy-1.17.3-cp36-cp36m-manylinux1_x86_64.whl\n    ffca69e29079f7880c5392bf675eb8b4146479d976ae1924d01cd92b04cccbcc  numpy-1.17.3-cp36-cp36m-win32.whl\n    2e418f0a59473dac424f888dd57e85f77502a593b207809211c76e5396ae4f5c  numpy-1.17.3-cp36-cp36m-win_amd64.whl\n    75fcd60d682db3e1f8fbe2b8b0c6761937ad56d01c1dc73edf4ef2748d5b6bc4  numpy-1.17.3-cp37-cp37m-macosx_10_9_x86_64.whl\n    28b1180c758abf34a5c3fea76fcee66a87def1656724c42bb14a6f9717a5bdf7  numpy-1.17.3-cp37-cp37m-manylinux1_i686.whl\n    dd0667f5be56fb1b570154c2c0516a528e02d50da121bbbb2cbb0b6f87f59bc2  numpy-1.17.3-cp37-cp37m-manylinux1_x86_64.whl\n    25ffe71f96878e1da7e014467e19e7db90ae7d4e12affbc73101bcf61785214e  numpy-1.17.3-cp37-cp37m-win32.whl\n    0b0dd8f47fb177d00fa6ef2d58783c4f41ad3126b139c91dd2f7c4b3fdf5e9a5  numpy-1.17.3-cp37-cp37m-win_amd64.whl\n    62d22566b3e3428dfc9ec972014c38ed9a4db4f8969c78f5414012ccd80a149e  numpy-1.17.3-cp38-cp38-macosx_10_9_x86_64.whl\n    26efd7f7d755e6ca966a5c0ac5a930a87dbbaab1c51716ac26a38f42ecc9bc4b  numpy-1.17.3-cp38-cp38-manylinux1_i686.whl\n    b46554ad4dafb2927f88de5a1d207398c5385edbb5c84d30b3ef187c4a3894d8  numpy-1.17.3-cp38-cp38-manylinux1_x86_64.whl\n    c867eeccd934920a800f65c6068acdd6b87e80d45cd8c8beefff783b23cdc462  numpy-1.17.3-cp38-cp38-win32.whl\n    f1df7b2b7740dd777571c732f98adb5aad5450aee32772f1b39249c8a50386f6  numpy-1.17.3-cp38-cp38-win_amd64.whl\n    c93733dbebc2599d2747ceac4b18825a73767d289176ed8e02090325656d69aa  numpy-1.17.3.tar.gz\n    a0678793096205a4d784bd99f32803ba8100f639cf3b932dc63b21621390ea7e  numpy-1.17.3.zip\n-----BEGIN PGP SIGNATURE-----\n\niQEzBAEBCAAdFiEEU6DlKD8F4p1xKRSeZ58ig3fFJHsFAl2oepUACgkQZ58ig3fF\nJHsvWQgAhYB5EeEXVnrfB+TKHf3WUnxDfgOo0GdO4VcHls0TaOseM1heIOrCV/mZ\n3TSOpEqT68Lh50I53EHfS4r5iKTF7TY2DhACixvbKqJxA0ZCv7j+r7VZfW95ZAi7\nyxEvPo8bdXQDx1//F5ISRy36lT9ZJ8n2lxdMkcM18i2b+wqt71xhHNlK5emVAYSg\nkii57ek+RtgQeJL6l/sh6PqOdppGsa09cq0iQ97v23y0mrYltGC6BPtOVksIZIWe\nfTTLjJmeqf4oNDYRQb3nVxIQ8OLLCOd8JzD6PmQqd/BqUPaoaGTlyD/gooqZNrv+\nNsNVqkm28SqqEY8syZlsysH3LvoipA==\n=GyUB\n-----END PGP SIGNATURE-----\n\n\n.. currentmodule:: numpy\n\n==========================\n", "1.26.2": "==========================\n\nNumPy 1.26.2 is a maintenance release that fixes bugs and regressions\ndiscovered after the 1.26.1 release. The 1.26.release series is the last\nplanned minor release series before NumPy 2.0. The Python versions supported by\nthis release are 3.9-3.12.\n\n\nContributors\n============\n\nA total of 13 people contributed to this release.  People with a \"+\" by their\nnames contributed a patch for the first time.\n\n* stefan6419846\n* thalassemia +\n* Andrew Nelson\n* Charles Bousseau +\n* Charles Harris\n* Marcel Bargull +\n* Mark Mentovai +\n* Matti Picus\n* Nathan Goldbaum\n* Ralf Gommers\n* Sayed Adel\n* Sebastian Berg\n* William Ayd +\n\n\nPull requests merged\n====================\n\nA total of 25 pull requests were merged for this release.\n\n* `24814 <https://github.com/numpy/numpy/pull/24814>`__: MAINT: align test_dispatcher s390x targets with _umath_tests_mtargets\n* `24929 <https://github.com/numpy/numpy/pull/24929>`__: MAINT: prepare 1.26.x for further development\n* `24955 <https://github.com/numpy/numpy/pull/24955>`__: ENH: Add Cython enumeration for NPY_FR_GENERIC\n* `24962 <https://github.com/numpy/numpy/pull/24962>`__: REL: Remove Python upper version from the release branch\n* `24971 <https://github.com/numpy/numpy/pull/24971>`__: BLD: Use the correct Python interpreter when running tempita.py\n* `24972 <https://github.com/numpy/numpy/pull/24972>`__: MAINT: Remove unhelpful error replacements from ``import_array()``\n* `24977 <https://github.com/numpy/numpy/pull/24977>`__: BLD: use classic linker on macOS, the new one in XCode 15 has...\n* `25003 <https://github.com/numpy/numpy/pull/25003>`__: BLD: musllinux_aarch64 [wheel build]\n* `25043 <https://github.com/numpy/numpy/pull/25043>`__: MAINT: Update mailmap\n* `25049 <https://github.com/numpy/numpy/pull/25049>`__: MAINT: Update meson build infrastructure.\n* `25071 <https://github.com/numpy/numpy/pull/25071>`__: MAINT: Split up .github/workflows to match main\n* `25083 <https://github.com/numpy/numpy/pull/25083>`__: BUG: Backport fix build on ppc64 when the baseline set to Power9...\n* `25093 <https://github.com/numpy/numpy/pull/25093>`__: BLD: Fix features.h detection for Meson builds [1.26.x Backport]\n* `25095 <https://github.com/numpy/numpy/pull/25095>`__: BUG: Avoid intp conversion regression in Cython 3 (backport)\n* `25107 <https://github.com/numpy/numpy/pull/25107>`__: CI: remove obsolete jobs, and move macOS and conda Azure jobs...\n* `25108 <https://github.com/numpy/numpy/pull/25108>`__: CI: Add linux_qemu action and remove travis testing.\n* `25112 <https://github.com/numpy/numpy/pull/25112>`__: MAINT: Update .spin/cmds.py from main.\n* `25113 <https://github.com/numpy/numpy/pull/25113>`__: DOC: Visually divide main license and bundled licenses in wheels\n* `25115 <https://github.com/numpy/numpy/pull/25115>`__: MAINT: Add missing ``noexcept`` to shuffle helpers\n* `25116 <https://github.com/numpy/numpy/pull/25116>`__: DOC: Fix license identifier for OpenBLAS\n* `25117 <https://github.com/numpy/numpy/pull/25117>`__: BLD: improve detection of Netlib libblas/libcblas/liblapack\n* `25118 <https://github.com/numpy/numpy/pull/25118>`__: MAINT: Make bitfield integers unsigned\n* `25119 <https://github.com/numpy/numpy/pull/25119>`__: BUG: Make n a long int for np.random.multinomial\n* `25120 <https://github.com/numpy/numpy/pull/25120>`__: BLD: change default of the ``allow-noblas`` option to true.\n* `25121 <https://github.com/numpy/numpy/pull/25121>`__: BUG: ensure passing ``np.dtype`` to itself doesn't crash\n\n\nChecksums\n=========\n\nMD5\n---\n::\n\n    1a5dc6b5b3bf11ad40a59eedb3b69fa1  numpy-1.26.2-cp310-cp310-macosx_10_9_x86_64.whl\n    4b741c6dfe4e6e22e34e9c5c788d4f04  numpy-1.26.2-cp310-cp310-macosx_11_0_arm64.whl\n    2953687fb26e1dd8a2d1bb7109551fcd  numpy-1.26.2-cp310-cp310-manylinux_2_17_aarch64.manylinux2014_aarch64.whl\n    ea9127a3a03f27fd101c62425c661d8d  numpy-1.26.2-cp310-cp310-manylinux_2_17_x86_64.manylinux2014_x86_64.whl\n    7a6be7c6c1cc3e1ff73f64052fe30677  numpy-1.26.2-cp310-cp310-musllinux_1_1_aarch64.whl\n    4f45d3f69f54fd1638609fde34c33a5c  numpy-1.26.2-cp310-cp310-musllinux_1_1_x86_64.whl\n    f22f5ea26c86eb126ff502fff75d6c21  numpy-1.26.2-cp310-cp310-win32.whl\n    49871452488e1a55d15ab54c6f3e546e  numpy-1.26.2-cp310-cp310-win_amd64.whl\n    676740bf60fb1c8f5a6b31e00b9a4e9b  numpy-1.26.2-cp311-cp311-macosx_10_9_x86_64.whl\n    7170545dcc2a38a1c2386a6081043b64  numpy-1.26.2-cp311-cp311-macosx_11_0_arm64.whl\n    feae1190c73d811e2e7ebcad4baf6edf  numpy-1.26.2-cp311-cp311-manylinux_2_17_aarch64.manylinux2014_aarch64.whl\n    03131896abade61b77e0f6e53abb988a  numpy-1.26.2-cp311-cp311-manylinux_2_17_x86_64.manylinux2014_x86_64.whl\n    f160632f128a3fd46787aa02d8731fbb  numpy-1.26.2-cp311-cp311-musllinux_1_1_aarch64.whl\n    014250db593d589b5533ef7127839c46  numpy-1.26.2-cp311-cp311-musllinux_1_1_x86_64.whl\n    fb437346dac24d0cb23f5314db043c8b  numpy-1.26.2-cp311-cp311-win32.whl\n    7359adc233874898ea768cd4aec28bb3  numpy-1.26.2-cp311-cp311-win_amd64.whl\n    207a678bea75227428e7fb84d4dc457a  numpy-1.26.2-cp312-cp312-macosx_10_9_x86_64.whl\n    302ff6cc047a408cdf21981bd7b26056  numpy-1.26.2-cp312-cp312-macosx_11_0_arm64.whl\n    7526faaea58c76aed395c7128dd6e14d  numpy-1.26.2-cp312-cp312-manylinux_2_17_aarch64.manylinux2014_aarch64.whl\n    28d3b1943d3a8ad4bbb2ae9da0a77cb9  numpy-1.26.2-cp312-cp312-manylinux_2_17_x86_64.manylinux2014_x86_64.whl\n    d91f5b2bb2c931e41ae7c80ec7509a31  numpy-1.26.2-cp312-cp312-musllinux_1_1_aarch64.whl\n    b2504d4239419f012c08fa1eab12f940  numpy-1.26.2-cp312-cp312-musllinux_1_1_x86_64.whl\n    57944ba30adc07f33e83a9b45f5c625a  numpy-1.26.2-cp312-cp312-win32.whl\n    fe38cd95bbee405ce0cf51c8753a2676  numpy-1.26.2-cp312-cp312-win_amd64.whl\n    28e1bc3efaf89cf6f0a2b616c0e16401  numpy-1.26.2-cp39-cp39-macosx_10_9_x86_64.whl\n    9932ccff54855f12ee24f60528279bf1  numpy-1.26.2-cp39-cp39-macosx_11_0_arm64.whl\n    b52c1e987074dad100ad234122a397b9  numpy-1.26.2-cp39-cp39-manylinux_2_17_aarch64.manylinux2014_aarch64.whl\n    1d1bd7e0d2a89ce795a9566a38ed9bb5  numpy-1.26.2-cp39-cp39-manylinux_2_17_x86_64.manylinux2014_x86_64.whl\n    01d2abfe8e9b35415efb791ac6c5865e  numpy-1.26.2-cp39-cp39-musllinux_1_1_aarch64.whl\n    5a6d6ac287ebd93a221e59590329e202  numpy-1.26.2-cp39-cp39-musllinux_1_1_x86_64.whl\n    4e4e4d8cf661a8d2838ee700fabae87e  numpy-1.26.2-cp39-cp39-win32.whl\n    b8e52ecac110471502686abbdf774b78  numpy-1.26.2-cp39-cp39-win_amd64.whl\n    aed2d2914be293f60fedda360b64abf8  numpy-1.26.2-pp39-pypy39_pp73-macosx_10_9_x86_64.whl\n    6bd88e0f33933445d0e18c1a850f60e0  numpy-1.26.2-pp39-pypy39_pp73-manylinux_2_17_x86_64.manylinux2014_x86_64.whl\n    010aeb2a50af0af1f7ef56f76f8cf463  numpy-1.26.2-pp39-pypy39_pp73-win_amd64.whl\n    8f6446a32e47953a03f8fe8533e21e98  numpy-1.26.2.tar.gz\n\nSHA256\n------\n::\n\n    3703fc9258a4a122d17043e57b35e5ef1c5a5837c3db8be396c82e04c1cf9b0f  numpy-1.26.2-cp310-cp310-macosx_10_9_x86_64.whl\n    cc392fdcbd21d4be6ae1bb4475a03ce3b025cd49a9be5345d76d7585aea69440  numpy-1.26.2-cp310-cp310-macosx_11_0_arm64.whl\n    36340109af8da8805d8851ef1d74761b3b88e81a9bd80b290bbfed61bd2b4f75  numpy-1.26.2-cp310-cp310-manylinux_2_17_aarch64.manylinux2014_aarch64.whl\n    bcc008217145b3d77abd3e4d5ef586e3bdfba8fe17940769f8aa09b99e856c00  numpy-1.26.2-cp310-cp310-manylinux_2_17_x86_64.manylinux2014_x86_64.whl\n    3ced40d4e9e18242f70dd02d739e44698df3dcb010d31f495ff00a31ef6014fe  numpy-1.26.2-cp310-cp310-musllinux_1_1_aarch64.whl\n    b272d4cecc32c9e19911891446b72e986157e6a1809b7b56518b4f3755267523  numpy-1.26.2-cp310-cp310-musllinux_1_1_x86_64.whl\n    22f8fc02fdbc829e7a8c578dd8d2e15a9074b630d4da29cda483337e300e3ee9  numpy-1.26.2-cp310-cp310-win32.whl\n    26c9d33f8e8b846d5a65dd068c14e04018d05533b348d9eaeef6c1bd787f9919  numpy-1.26.2-cp310-cp310-win_amd64.whl\n    b96e7b9c624ef3ae2ae0e04fa9b460f6b9f17ad8b4bec6d7756510f1f6c0c841  numpy-1.26.2-cp311-cp311-macosx_10_9_x86_64.whl\n    aa18428111fb9a591d7a9cc1b48150097ba6a7e8299fb56bdf574df650e7d1f1  numpy-1.26.2-cp311-cp311-macosx_11_0_arm64.whl\n    06fa1ed84aa60ea6ef9f91ba57b5ed963c3729534e6e54055fc151fad0423f0a  numpy-1.26.2-cp311-cp311-manylinux_2_17_aarch64.manylinux2014_aarch64.whl\n    96ca5482c3dbdd051bcd1fce8034603d6ebfc125a7bd59f55b40d8f5d246832b  numpy-1.26.2-cp311-cp311-manylinux_2_17_x86_64.manylinux2014_x86_64.whl\n    854ab91a2906ef29dc3925a064fcd365c7b4da743f84b123002f6139bcb3f8a7  numpy-1.26.2-cp311-cp311-musllinux_1_1_aarch64.whl\n    f43740ab089277d403aa07567be138fc2a89d4d9892d113b76153e0e412409f8  numpy-1.26.2-cp311-cp311-musllinux_1_1_x86_64.whl\n    a2bbc29fcb1771cd7b7425f98b05307776a6baf43035d3b80c4b0f29e9545186  numpy-1.26.2-cp311-cp311-win32.whl\n    2b3fca8a5b00184828d12b073af4d0fc5fdd94b1632c2477526f6bd7842d700d  numpy-1.26.2-cp311-cp311-win_amd64.whl\n    a4cd6ed4a339c21f1d1b0fdf13426cb3b284555c27ac2f156dfdaaa7e16bfab0  numpy-1.26.2-cp312-cp312-macosx_10_9_x86_64.whl\n    5d5244aabd6ed7f312268b9247be47343a654ebea52a60f002dc70c769048e75  numpy-1.26.2-cp312-cp312-macosx_11_0_arm64.whl\n    6a3cdb4d9c70e6b8c0814239ead47da00934666f668426fc6e94cce869e13fd7  numpy-1.26.2-cp312-cp312-manylinux_2_17_aarch64.manylinux2014_aarch64.whl\n    aa317b2325f7aa0a9471663e6093c210cb2ae9c0ad824732b307d2c51983d5b6  numpy-1.26.2-cp312-cp312-manylinux_2_17_x86_64.manylinux2014_x86_64.whl\n    174a8880739c16c925799c018f3f55b8130c1f7c8e75ab0a6fa9d41cab092fd6  numpy-1.26.2-cp312-cp312-musllinux_1_1_aarch64.whl\n    f79b231bf5c16b1f39c7f4875e1ded36abee1591e98742b05d8a0fb55d8a3eec  numpy-1.26.2-cp312-cp312-musllinux_1_1_x86_64.whl\n    4a06263321dfd3598cacb252f51e521a8cb4b6df471bb12a7ee5cbab20ea9167  numpy-1.26.2-cp312-cp312-win32.whl\n    b04f5dc6b3efdaab541f7857351aac359e6ae3c126e2edb376929bd3b7f92d7e  numpy-1.26.2-cp312-cp312-win_amd64.whl\n    4eb8df4bf8d3d90d091e0146f6c28492b0be84da3e409ebef54349f71ed271ef  numpy-1.26.2-cp39-cp39-macosx_10_9_x86_64.whl\n    1a13860fdcd95de7cf58bd6f8bc5a5ef81c0b0625eb2c9a783948847abbef2c2  numpy-1.26.2-cp39-cp39-macosx_11_0_arm64.whl\n    64308ebc366a8ed63fd0bf426b6a9468060962f1a4339ab1074c228fa6ade8e3  numpy-1.26.2-cp39-cp39-manylinux_2_17_aarch64.manylinux2014_aarch64.whl\n    baf8aab04a2c0e859da118f0b38617e5ee65d75b83795055fb66c0d5e9e9b818  numpy-1.26.2-cp39-cp39-manylinux_2_17_x86_64.manylinux2014_x86_64.whl\n    d73a3abcac238250091b11caef9ad12413dab01669511779bc9b29261dd50210  numpy-1.26.2-cp39-cp39-musllinux_1_1_aarch64.whl\n    b361d369fc7e5e1714cf827b731ca32bff8d411212fccd29ad98ad622449cc36  numpy-1.26.2-cp39-cp39-musllinux_1_1_x86_64.whl\n    bd3f0091e845164a20bd5a326860c840fe2af79fa12e0469a12768a3ec578d80  numpy-1.26.2-cp39-cp39-win32.whl\n    2beef57fb031dcc0dc8fa4fe297a742027b954949cabb52a2a376c144e5e6060  numpy-1.26.2-cp39-cp39-win_amd64.whl\n    1cc3d5029a30fb5f06704ad6b23b35e11309491c999838c31f124fee32107c79  numpy-1.26.2-pp39-pypy39_pp73-macosx_10_9_x86_64.whl\n    94cc3c222bb9fb5a12e334d0479b97bb2df446fbe622b470928f5284ffca3f8d  numpy-1.26.2-pp39-pypy39_pp73-manylinux_2_17_x86_64.manylinux2014_x86_64.whl\n    fe6b44fb8fcdf7eda4ef4461b97b3f63c466b27ab151bec2366db8b197387841  numpy-1.26.2-pp39-pypy39_pp73-win_amd64.whl\n    f65738447676ab5777f11e6bbbdb8ce11b785e105f690bc45966574816b6d3ea  numpy-1.26.2.tar.gz\n\n\n-----BEGIN PGP SIGNED MESSAGE-----\nHash: SHA256\n\n==========================\n", "1.16.4": "==========================\n\nThe NumPy 1.16.4 release fixes bugs reported against the 1.16.3 release, and\nalso backports several enhancements from master that seem appropriate for a\nrelease series that is the last to support Python 2.7. The wheels on PyPI are\nlinked with OpenBLAS v0.3.7-dev, which should fix issues on Skylake series\ncpus.\n\nDownstream developers building this release should use Cython >= 0.29.2 and,\nif using OpenBLAS, OpenBLAS > v0.3.7. The supported Python versions are 2.7 and\n3.5-3.7.\n\n\nNew deprecations\n================\nWriteable flag of C-API wrapped arrays\n- --------------------------------------\nWhen an array is created from the C-API to wrap a pointer to data, the only\nindication we have of the read-write nature of the data is the ``writeable``\nflag set during creation. It is dangerous to force the flag to writeable.  In\nthe future it will not be possible to switch the writeable flag to ``True``\nfrom python.  This deprecation should not affect many users since arrays\ncreated in such a manner are very rare in practice and only available through\nthe NumPy C-API.\n\n\nCompatibility notes\n===================\n\nPotential changes to the random stream\n- --------------------------------------\nDue to bugs in the application of log to random floating point numbers,\nthe stream may change when sampling from ``np.random.beta``, ``np.random.binomial``,\n``np.random.laplace``, ``np.random.logistic``, ``np.random.logseries`` or\n``np.random.multinomial`` if a 0 is generated in the underlying MT19937 random stream.\nThere is a 1 in :math:`10^{53}` chance of this occurring, and so the probability that\nthe stream changes for any given seed is extremely small. If a 0 is encountered in the\nunderlying generator, then the incorrect value produced (either ``np.inf``\nor ``np.nan``) is now dropped.\n\n\nChanges\n=======\n\n`numpy.lib.recfunctions.structured_to_unstructured` does not squeeze single-field views\n- ---------------------------------------------------------------------------------------\nPreviously ``structured_to_unstructured(arr[['a']])`` would produce a squeezed\nresult inconsistent with ``structured_to_unstructured(arr[['a', b']])``. This\nwas accidental. The old behavior can be retained with\n``structured_to_unstructured(arr[['a']]).squeeze(axis=-1)`` or far more simply,\n``arr['a']``.\n\n\nContributors\n============\n\nA total of 10 people contributed to this release.  People with a \"+\" by their\nnames contributed a patch for the first time.\n\n* Charles Harris\n* Eric Wieser\n* Dennis Zollo +\n* Hunter Damron +\n* Jingbei Li +\n* Kevin Sheppard\n* Matti Picus\n* Nicola Soranzo +\n* Sebastian Berg\n* Tyler Reddy\n\n\nPull requests merged\n====================\n\nA total of 16 pull requests were merged for this release.\n\n* `13392 <https://github.com/numpy/numpy/pull/13392>`__: BUG: Some PyPy versions lack PyStructSequence_InitType2.\n* `13394 <https://github.com/numpy/numpy/pull/13394>`__: MAINT, DEP: Fix deprecated ``assertEquals()``\n* `13396 <https://github.com/numpy/numpy/pull/13396>`__: BUG: Fix structured_to_unstructured on single-field types (backport)\n* `13549 <https://github.com/numpy/numpy/pull/13549>`__: BLD: Make CI pass again with pytest 4.5\n* `13552 <https://github.com/numpy/numpy/pull/13552>`__: TST: Register markers in conftest.py.\n* `13559 <https://github.com/numpy/numpy/pull/13559>`__: BUG: Removes ValueError for empty kwargs in arraymultiter_new\n* `13560 <https://github.com/numpy/numpy/pull/13560>`__: BUG: Add TypeError to accepted exceptions in crackfortran.\n* `13561 <https://github.com/numpy/numpy/pull/13561>`__: BUG: Handle subarrays in descr_to_dtype\n* `13562 <https://github.com/numpy/numpy/pull/13562>`__: BUG: Protect generators from log(0.0)\n* `13563 <https://github.com/numpy/numpy/pull/13563>`__: BUG: Always return views from structured_to_unstructured when...\n* `13564 <https://github.com/numpy/numpy/pull/13564>`__: BUG: Catch stderr when checking compiler version\n* `13565 <https://github.com/numpy/numpy/pull/13565>`__: BUG: longdouble(int) does not work\n* `13587 <https://github.com/numpy/numpy/pull/13587>`__: BUG: distutils/system_info.py fix missing subprocess import (#13523)\n* `13620 <https://github.com/numpy/numpy/pull/13620>`__: BUG,DEP: Fix writeable flag setting for arrays without base\n* `13641 <https://github.com/numpy/numpy/pull/13641>`__: MAINT: Prepare for the 1.16.4 release.\n* `13644 <https://github.com/numpy/numpy/pull/13644>`__: BUG: special case object arrays when printing rel-, abs-error\n\nChecksums\n=========\n\nMD5\n- ---\n\n    a24c599ae3445d9d085e77ce4d072259  numpy-1.16.4-cp27-cp27m-macosx_10_6_intel.macosx_10_9_intel.macosx_10_9_x86_64.macosx_10_10_intel.macosx_10_10_x86_64.whl\n    efcfb51254d83060a2af0d30aa1d1b81  numpy-1.16.4-cp27-cp27m-manylinux1_i686.whl\n    b62eca40cbab3e24c4962e22633d92a5  numpy-1.16.4-cp27-cp27m-manylinux1_x86_64.whl\n    c96618196f6dfc29f4931a2f6fea44ad  numpy-1.16.4-cp27-cp27m-win32.whl\n    6dd36dfd23338844c1ecac8b92efd938  numpy-1.16.4-cp27-cp27m-win_amd64.whl\n    52c8e342f110b2fba426fca60b1c2774  numpy-1.16.4-cp27-cp27mu-manylinux1_i686.whl\n    038f16384a2af6bd3db61dc773ffbe10  numpy-1.16.4-cp27-cp27mu-manylinux1_x86_64.whl\n    32b18d06069d3d86b8e3193b2f455c15  numpy-1.16.4-cp35-cp35m-macosx_10_6_intel.macosx_10_9_intel.macosx_10_9_x86_64.macosx_10_10_intel.macosx_10_10_x86_64.whl\n    d6550e24ff69d4a175d278f39f871d39  numpy-1.16.4-cp35-cp35m-manylinux1_i686.whl\n    07b33ea867cf2657e23dbf93069eff99  numpy-1.16.4-cp35-cp35m-manylinux1_x86_64.whl\n    cc84f9555a711a2bc867d3b941992a68  numpy-1.16.4-cp35-cp35m-win32.whl\n    cf671f2b0e651e701472456107c8e644  numpy-1.16.4-cp35-cp35m-win_amd64.whl\n    1376e801040a91f8b325e827e6d53f91  numpy-1.16.4-cp36-cp36m-macosx_10_6_intel.macosx_10_9_intel.macosx_10_9_x86_64.macosx_10_10_intel.macosx_10_10_x86_64.whl\n    833f763fb0d69c850fae175c65f7b502  numpy-1.16.4-cp36-cp36m-manylinux1_i686.whl\n    255ae62cf215e647ee437d432b6511c2  numpy-1.16.4-cp36-cp36m-manylinux1_x86_64.whl\n    6fcb9a8f601795413ceaf06767caca2d  numpy-1.16.4-cp36-cp36m-win32.whl\n    de4fa9f01692ec94932a289440f18255  numpy-1.16.4-cp36-cp36m-win_amd64.whl\n    dab4ec8a1c07a7a1a54932c461933992  numpy-1.16.4-cp37-cp37m-macosx_10_6_intel.macosx_10_9_intel.macosx_10_9_x86_64.macosx_10_10_intel.macosx_10_10_x86_64.whl\n    c1d3c38c67396809c51f5c98aead5e13  numpy-1.16.4-cp37-cp37m-manylinux1_i686.whl\n    e98fc6a8d90ff7ed26d0ed7faad3aa8d  numpy-1.16.4-cp37-cp37m-manylinux1_x86_64.whl\n    f84869efe5610e6ad6165237c012ea93  numpy-1.16.4-cp37-cp37m-win32.whl\n    17b46c338d04cb8b4773fb6b02919f2b  numpy-1.16.4-cp37-cp37m-win_amd64.whl\n    6edf7334d04d8e8849ad058ccd3b3803  numpy-1.16.4.tar.gz\n    74f7d348c55ace4d22d7ad26c65755aa  numpy-1.16.4.zip\n\nSHA256\n- ------\n\n    b5554368e4ede1856121b0dfa35ce71768102e4aa55e526cb8de7f374ff78722  numpy-1.16.4-cp27-cp27m-macosx_10_6_intel.macosx_10_9_intel.macosx_10_9_x86_64.macosx_10_10_intel.macosx_10_10_x86_64.whl\n    e8baab1bc7c9152715844f1faca6744f2416929de10d7639ed49555a85549f52  numpy-1.16.4-cp27-cp27m-manylinux1_i686.whl\n    2a04dda79606f3d2f760384c38ccd3d5b9bb79d4c8126b67aff5eb09a253763e  numpy-1.16.4-cp27-cp27m-manylinux1_x86_64.whl\n    94f5bd885f67bbb25c82d80184abbf7ce4f6c3c3a41fbaa4182f034bba803e69  numpy-1.16.4-cp27-cp27m-win32.whl\n    7dc253b542bfd4b4eb88d9dbae4ca079e7bf2e2afd819ee18891a43db66c60c7  numpy-1.16.4-cp27-cp27m-win_amd64.whl\n    0778076e764e146d3078b17c24c4d89e0ecd4ac5401beff8e1c87879043a0633  numpy-1.16.4-cp27-cp27mu-manylinux1_i686.whl\n    b0348be89275fd1d4c44ffa39530c41a21062f52299b1e3ee7d1c61f060044b8  numpy-1.16.4-cp27-cp27mu-manylinux1_x86_64.whl\n    52c40f1a4262c896420c6ea1c6fda62cf67070e3947e3307f5562bd783a90336  numpy-1.16.4-cp35-cp35m-macosx_10_6_intel.macosx_10_9_intel.macosx_10_9_x86_64.macosx_10_10_intel.macosx_10_10_x86_64.whl\n    141c7102f20abe6cf0d54c4ced8d565b86df4d3077ba2343b61a6db996cefec7  numpy-1.16.4-cp35-cp35m-manylinux1_i686.whl\n    6e4f8d9e8aa79321657079b9ac03f3cf3fd067bf31c1cca4f56d49543f4356a5  numpy-1.16.4-cp35-cp35m-manylinux1_x86_64.whl\n    d79f18f41751725c56eceab2a886f021d70fd70a6188fd386e29a045945ffc10  numpy-1.16.4-cp35-cp35m-win32.whl\n    14270a1ee8917d11e7753fb54fc7ffd1934f4d529235beec0b275e2ccf00333b  numpy-1.16.4-cp35-cp35m-win_amd64.whl\n    a89e188daa119ffa0d03ce5123dee3f8ffd5115c896c2a9d4f0dbb3d8b95bfa3  numpy-1.16.4-cp36-cp36m-macosx_10_6_intel.macosx_10_9_intel.macosx_10_9_x86_64.macosx_10_10_intel.macosx_10_10_x86_64.whl\n    ec31fe12668af687b99acf1567399632a7c47b0e17cfb9ae47c098644ef36797  numpy-1.16.4-cp36-cp36m-manylinux1_i686.whl\n    27e11c7a8ec9d5838bc59f809bfa86efc8a4fd02e58960fa9c49d998e14332d5  numpy-1.16.4-cp36-cp36m-manylinux1_x86_64.whl\n    dc2ca26a19ab32dc475dbad9dfe723d3a64c835f4c23f625c2b6566ca32b9f29  numpy-1.16.4-cp36-cp36m-win32.whl\n    ad3399da9b0ca36e2f24de72f67ab2854a62e623274607e37e0ce5f5d5fa9166  numpy-1.16.4-cp36-cp36m-win_amd64.whl\n    f58ac38d5ca045a377b3b377c84df8175ab992c970a53332fa8ac2373df44ff7  numpy-1.16.4-cp37-cp37m-macosx_10_6_intel.macosx_10_9_intel.macosx_10_9_x86_64.macosx_10_10_intel.macosx_10_10_x86_64.whl\n    f12b4f7e2d8f9da3141564e6737d79016fe5336cc92de6814eba579744f65b0a  numpy-1.16.4-cp37-cp37m-manylinux1_i686.whl\n    cbddc56b2502d3f87fda4f98d948eb5b11f36ff3902e17cb6cc44727f2200525  numpy-1.16.4-cp37-cp37m-manylinux1_x86_64.whl\n    3c26010c1b51e1224a3ca6b8df807de6e95128b0908c7e34f190e7775455b0ca  numpy-1.16.4-cp37-cp37m-win32.whl\n    dd9bcd4f294eb0633bb33d1a74febdd2b9018b8b8ed325f861fffcd2c7660bb8  numpy-1.16.4-cp37-cp37m-win_amd64.whl\n    a3bccb70ad94091a5b9e2469fabd41ac877c140a6828c2022e35560a2ec0346c  numpy-1.16.4.tar.gz\n    7242be12a58fec245ee9734e625964b97cf7e3f2f7d016603f9e56660ce479c7  numpy-1.16.4.zip\n-----BEGIN PGP SIGNATURE-----\n\niQEzBAEBCAAdFiEEU6DlKD8F4p1xKRSeZ58ig3fFJHsFAlzsrHgACgkQZ58ig3fF\nJHvhawf/UMkDfmp9Mt0c7zD1aBr3E0yyDsHa120MyKsWlODqcy86wA7kTO3MQUtu\n1NbHlrm7zD6tqJ6Zxj5KgMhiO42Q1Yh1yd15G80L0dwS+gC3eX1o6+KMOIuM+y6l\neeRJGwtC3WcuThh8ndop/wrijbDDjW9Mg/sT0mQeZ0amGhHTN6098ya+nJuBD6F1\nhD48eAVRXryIuE7y5IGQPjyMHqg4So25IQBWq+kdWnIs11Am5hXypAPbXXPQnDC4\nFGBqP9aISHRATGbENrTDdbwkAWLspJYHTmSiELuwQE8Eu5T7pCnnbBwDj5O760jX\nu9IqRI7giJdy8AawMGsWkERO+YKH+w==\n=Djuz\n-----END PGP SIGNATURE-----\n\n\n.. currentmodule:: numpy\n\n==========================\n", "1.24.2": "==========================\nNumPy 1.24.2 is a maintenance release that fixes bugs and regressions discovered after the\n1.24.1 release. The Python versions supported by this release are 3.8-3.11.\n\nContributors\n============\n\nA total of 14 people contributed to this release.  People with a \"+\" by their\nnames contributed a patch for the first time.\n\n* Bas van Beek\n* Charles Harris\n* Khem Raj +\n* Mark Harfouche\n* Matti Picus\n* Panagiotis Zestanakis +\n* Peter Hawkins\n* Pradipta Ghosh\n* Ross Barnowski\n* Sayed Adel\n* Sebastian Berg\n* Syam Gadde +\n* dmbelov +\n* pkubaj +\n\nPull requests merged\n====================\n\nA total of 17 pull requests were merged for this release.\n\n* `22965 <https://github.com/numpy/numpy/pull/22965>`__: MAINT: Update python 3.11-dev to 3.11.\n* `22966 <https://github.com/numpy/numpy/pull/22966>`__: DOC: Remove dangling deprecation warning\n* `22967 <https://github.com/numpy/numpy/pull/22967>`__: ENH: Detect CPU features on FreeBSD/powerpc64*\n* `22968 <https://github.com/numpy/numpy/pull/22968>`__: BUG: np.loadtxt cannot load text file with quoted fields separated...\n* `22969 <https://github.com/numpy/numpy/pull/22969>`__: TST: Add fixture to avoid issue with randomizing test order.\n* `22970 <https://github.com/numpy/numpy/pull/22970>`__: BUG: Fix fill violating read-only flag. (#22959)\n* `22971 <https://github.com/numpy/numpy/pull/22971>`__: MAINT: Add additional information to missing scalar AttributeError\n* `22972 <https://github.com/numpy/numpy/pull/22972>`__: MAINT: Move export for scipy arm64 helper into main module\n* `22976 <https://github.com/numpy/numpy/pull/22976>`__: BUG, SIMD: Fix spurious invalid exception for sin/cos on arm64/clang\n* `22989 <https://github.com/numpy/numpy/pull/22989>`__: BUG: Ensure correct loop order in sin, cos, and arctan2\n* `23030 <https://github.com/numpy/numpy/pull/23030>`__: DOC: Add version added information for the strict parameter in...\n* `23031 <https://github.com/numpy/numpy/pull/23031>`__: BUG: use ``_Alignof`` rather than ``offsetof()`` on most compilers\n* `23147 <https://github.com/numpy/numpy/pull/23147>`__: BUG: Fix for npyv__trunc_s32_f32 (VXE)\n* `23148 <https://github.com/numpy/numpy/pull/23148>`__: BUG: Fix integer / float scalar promotion\n* `23149 <https://github.com/numpy/numpy/pull/23149>`__: BUG: Add missing <type_traits> header.\n* `23150 <https://github.com/numpy/numpy/pull/23150>`__: TYP, MAINT: Add a missing explicit ``Any`` parameter to the ``npt.ArrayLike``...\n* `23161 <https://github.com/numpy/numpy/pull/23161>`__: BLD: remove redundant definition of npy_nextafter [wheel build]\n\nChecksums\n=========\n\nMD5\n---\n::\n\n    73fe0b507f56c0baf43171a76ad2003f  numpy-1.24.2-cp310-cp310-macosx_10_9_x86_64.whl\n    2dbbe6f8a14e14978d24de9fcc8b49fe  numpy-1.24.2-cp310-cp310-macosx_11_0_arm64.whl\n    9ddadbf9cac2742318d8b292cb9ca579  numpy-1.24.2-cp310-cp310-manylinux_2_17_aarch64.manylinux2014_aarch64.whl\n    969f4f33baaff53dbbbaf1a146c43534  numpy-1.24.2-cp310-cp310-manylinux_2_17_x86_64.manylinux2014_x86_64.whl\n    6df575dff02feac835d22debb15d190e  numpy-1.24.2-cp310-cp310-win32.whl\n    2f939228a8c33265f2a8a1fce349d6f1  numpy-1.24.2-cp310-cp310-win_amd64.whl\n    c093e61421be01ffff435387839949f1  numpy-1.24.2-cp311-cp311-macosx_10_9_x86_64.whl\n    03d71e3d9a086b56837c461fd7c9188b  numpy-1.24.2-cp311-cp311-macosx_11_0_arm64.whl\n    c0dc33697d156e2b9a029095efeb1b10  numpy-1.24.2-cp311-cp311-manylinux_2_17_aarch64.manylinux2014_aarch64.whl\n    13b57957a1f40e13f8826d14b031a6fe  numpy-1.24.2-cp311-cp311-manylinux_2_17_x86_64.manylinux2014_x86_64.whl\n    5afd966db0b59655618c1859d98d87f6  numpy-1.24.2-cp311-cp311-win32.whl\n    e0b850f9c20871cd65ecb35235688f4d  numpy-1.24.2-cp311-cp311-win_amd64.whl\n    9a30452135ab0387b8ea9007e94e9f81  numpy-1.24.2-cp38-cp38-macosx_10_9_x86_64.whl\n    bdd6eede4524a230574b37e1f631f2c0  numpy-1.24.2-cp38-cp38-macosx_11_0_arm64.whl\n    4f930a9030d77d45a1cb6f374c91fb53  numpy-1.24.2-cp38-cp38-manylinux_2_17_aarch64.manylinux2014_aarch64.whl\n    e77155c010f9dd63ea2815579a28c503  numpy-1.24.2-cp38-cp38-manylinux_2_17_x86_64.manylinux2014_x86_64.whl\n    1a45f4373945eaeabeaa4020ce04e8fd  numpy-1.24.2-cp38-cp38-win32.whl\n    66e93d70fad16b4ccb4531e31aad36e3  numpy-1.24.2-cp38-cp38-win_amd64.whl\n    93a4984da83c6811367d3daf709ed25c  numpy-1.24.2-cp39-cp39-macosx_10_9_x86_64.whl\n    e0281b96c490ba00f1382eb3984b4e51  numpy-1.24.2-cp39-cp39-macosx_11_0_arm64.whl\n    ce97d81e4ae6e10241d471492391b1be  numpy-1.24.2-cp39-cp39-manylinux_2_17_aarch64.manylinux2014_aarch64.whl\n    0c0ea440190705f98abeaa856e7da690  numpy-1.24.2-cp39-cp39-manylinux_2_17_x86_64.manylinux2014_x86_64.whl\n    c25f7fbb185f1b8f7761bc22082d9939  numpy-1.24.2-cp39-cp39-win32.whl\n    7705c6b0bcf22b5e64cf248144b2f554  numpy-1.24.2-cp39-cp39-win_amd64.whl\n    07b6361e36e0093b580dc05799b1f03d  numpy-1.24.2-pp38-pypy38_pp73-macosx_10_9_x86_64.whl\n    4c1466ae486b39d1a35aacb46256ec1e  numpy-1.24.2-pp38-pypy38_pp73-manylinux_2_17_x86_64.manylinux2014_x86_64.whl\n    4fea9d95e0489d06c3a24a87697d2fc0  numpy-1.24.2-pp38-pypy38_pp73-win_amd64.whl\n    c4212a8da1ecf17ece37e2afd0319806  numpy-1.24.2.tar.gz\n\nSHA256\n------\n::\n\n    eef70b4fc1e872ebddc38cddacc87c19a3709c0e3e5d20bf3954c147b1dd941d  numpy-1.24.2-cp310-cp310-macosx_10_9_x86_64.whl\n    e8d2859428712785e8a8b7d2b3ef0a1d1565892367b32f915c4a4df44d0e64f5  numpy-1.24.2-cp310-cp310-macosx_11_0_arm64.whl\n    6524630f71631be2dabe0c541e7675db82651eb998496bbe16bc4f77f0772253  numpy-1.24.2-cp310-cp310-manylinux_2_17_aarch64.manylinux2014_aarch64.whl\n    a51725a815a6188c662fb66fb32077709a9ca38053f0274640293a14fdd22978  numpy-1.24.2-cp310-cp310-manylinux_2_17_x86_64.manylinux2014_x86_64.whl\n    2620e8592136e073bd12ee4536149380695fbe9ebeae845b81237f986479ffc9  numpy-1.24.2-cp310-cp310-win32.whl\n    97cf27e51fa078078c649a51d7ade3c92d9e709ba2bfb97493007103c741f1d0  numpy-1.24.2-cp310-cp310-win_amd64.whl\n    7de8fdde0003f4294655aa5d5f0a89c26b9f22c0a58790c38fae1ed392d44a5a  numpy-1.24.2-cp311-cp311-macosx_10_9_x86_64.whl\n    4173bde9fa2a005c2c6e2ea8ac1618e2ed2c1c6ec8a7657237854d42094123a0  numpy-1.24.2-cp311-cp311-macosx_11_0_arm64.whl\n    4cecaed30dc14123020f77b03601559fff3e6cd0c048f8b5289f4eeabb0eb281  numpy-1.24.2-cp311-cp311-manylinux_2_17_aarch64.manylinux2014_aarch64.whl\n    9a23f8440561a633204a67fb44617ce2a299beecf3295f0d13c495518908e910  numpy-1.24.2-cp311-cp311-manylinux_2_17_x86_64.manylinux2014_x86_64.whl\n    e428c4fbfa085f947b536706a2fc349245d7baa8334f0c5723c56a10595f9b95  numpy-1.24.2-cp311-cp311-win32.whl\n    557d42778a6869c2162deb40ad82612645e21d79e11c1dc62c6e82a2220ffb04  numpy-1.24.2-cp311-cp311-win_amd64.whl\n    d0a2db9d20117bf523dde15858398e7c0858aadca7c0f088ac0d6edd360e9ad2  numpy-1.24.2-cp38-cp38-macosx_10_9_x86_64.whl\n    c72a6b2f4af1adfe193f7beb91ddf708ff867a3f977ef2ec53c0ffb8283ab9f5  numpy-1.24.2-cp38-cp38-macosx_11_0_arm64.whl\n    c29e6bd0ec49a44d7690ecb623a8eac5ab8a923bce0bea6293953992edf3a76a  numpy-1.24.2-cp38-cp38-manylinux_2_17_aarch64.manylinux2014_aarch64.whl\n    2eabd64ddb96a1239791da78fa5f4e1693ae2dadc82a76bc76a14cbb2b966e96  numpy-1.24.2-cp38-cp38-manylinux_2_17_x86_64.manylinux2014_x86_64.whl\n    e3ab5d32784e843fc0dd3ab6dcafc67ef806e6b6828dc6af2f689be0eb4d781d  numpy-1.24.2-cp38-cp38-win32.whl\n    76807b4063f0002c8532cfeac47a3068a69561e9c8715efdad3c642eb27c0756  numpy-1.24.2-cp38-cp38-win_amd64.whl\n    4199e7cfc307a778f72d293372736223e39ec9ac096ff0a2e64853b866a8e18a  numpy-1.24.2-cp39-cp39-macosx_10_9_x86_64.whl\n    adbdce121896fd3a17a77ab0b0b5eedf05a9834a18699db6829a64e1dfccca7f  numpy-1.24.2-cp39-cp39-macosx_11_0_arm64.whl\n    889b2cc88b837d86eda1b17008ebeb679d82875022200c6e8e4ce6cf549b7acb  numpy-1.24.2-cp39-cp39-manylinux_2_17_aarch64.manylinux2014_aarch64.whl\n    f64bb98ac59b3ea3bf74b02f13836eb2e24e48e0ab0145bbda646295769bd780  numpy-1.24.2-cp39-cp39-manylinux_2_17_x86_64.manylinux2014_x86_64.whl\n    63e45511ee4d9d976637d11e6c9864eae50e12dc9598f531c035265991910468  numpy-1.24.2-cp39-cp39-win32.whl\n    a77d3e1163a7770164404607b7ba3967fb49b24782a6ef85d9b5f54126cc39e5  numpy-1.24.2-cp39-cp39-win_amd64.whl\n    92011118955724465fb6853def593cf397b4a1367495e0b59a7e69d40c4eb71d  numpy-1.24.2-pp38-pypy38_pp73-macosx_10_9_x86_64.whl\n    f9006288bcf4895917d02583cf3411f98631275bc67cce355a7f39f8c14338fa  numpy-1.24.2-pp38-pypy38_pp73-manylinux_2_17_x86_64.manylinux2014_x86_64.whl\n    150947adbdfeceec4e5926d956a06865c1c690f2fd902efede4ca6fe2e657c3f  numpy-1.24.2-pp38-pypy38_pp73-win_amd64.whl\n    003a9f530e880cb2cd177cba1af7220b9aa42def9c4afc2a2fc3ee6be7eb2b22  numpy-1.24.2.tar.gz\n\n\n.. currentmodule:: numpy\n\n==========================\n", "2.0.0": "=========================\n\n.. note::\n\n    The release of 2.0 is in progress and the current release overview and\n    highlights are still in a draft state. However, the highlights should\n    already list the most significant changes detailed in the full notes below,\n    and those full notes should be complete (if not copy-edited well enough\n    yet).\n\nNumPy 2.0.0 is the first major release since 2006. It is the result of 11\nmonths of development since the last feature release and is the work of 198\ncontributors spread over 1041 pull requests. It contains a large number of\nexciting new features as well as changes to both the Python and C APIs.\n\nThis major release includes breaking changes that could not happen in a regular\nminor (feature) release - including an ABI break, changes to type promotion\nrules, and API changes which may not have been emitting deprecation warnings\nin 1.26.x. Key documents related to how to adapt to changes in NumPy 2.0, in\naddition to these release notes, include:\n\n- The :ref:`numpy-2-migration-guide`\n- The :ref:`NumPy 2.0-specific advice <numpy-2-abi-handling>` in\n  :ref:`for-downstream-package-authors`\n\n\nHighlights\n==========\n\nHighlights of this release include:\n\n- New features:\n\n  - A new variable-length string dtype, `~numpy.dtypes.StringDType` and a new\n    `numpy.strings` namespace with performant ufuncs for string operations,\n  - Support for ``float32`` and ``longdouble`` in all `numpy.fft` functions,\n  - Support for the array API standard in the main ``numpy`` namespace.\n\n- Performance improvements:\n\n  - Sorting functions (`sort`, `argsort`, `partition`, `argpartition`)\n    have been accelerated through the use of the Intel x86-simd-sort and Google\n    Highway libraries, and may see large (hardware-specific) speedups,\n  - macOS Accelerate support and binary wheels for macOS >=14, with significant\n    performance improvements for linear algebra operations on macOS, and wheels\n    that are about 3 times smaller,\n  - `numpy.char` fixed-length string operations have been accelerated by\n    implementing ufuncs that also support `~numpy.dtypes.StringDType` in\n    addition to the fixed-length string dtypes,\n  - A new tracing and introspection API, `~numpy.lib.introspect.opt_func_info`,\n    to determine which hardware-specific kernels are available and will be\n    dispatched to.\n\n- Python API improvements:\n\n  - A clear split between public and private API, with a new\n    :ref:`module structure <module-structure>`, and each public function now\n    available in a single place,\n  - Many removals of non-recommended functions and aliases. This should make\n    it easier to learn and use NumPy. The number of objects in the main\n    namespace decreased by ~10% and in ``numpy.lib`` by ~80%,\n  - :ref:`Canonical dtype names <canonical-python-and-c-types>` and a new\n    `~numpy.isdtype` introspection function,\n\n- C API improvements:\n\n  - A new :ref:`public C API for creating custom dtypes <dtype-api>`,\n  - Many outdated functions and macros removed, and private internals hidden to\n    ease future extensibility,\n  - New, easier to use, initialization functions:\n    :c:func:`PyArray_ImportNumPyAPI` and :c:func:`PyUFunc_ImportUFuncAPI`.\n\n- Improved behavior:\n\n  - Improvements to type promotion behavior was changed by adopting `NEP\n    50 <NEP50>`_. This fixes many user surprises about promotions which\n    previously often depended on data values of input arrays rather than only\n    their dtypes.  Please see the NEP and the :ref:`numpy-2-migration-guide`\n    for details as this change can lead to changes in output dtypes and lower\n    precision results for mixed-dtype operations.\n  - The default integer type on Windows is now ``int64`` rather than ``int32``,\n    matching the behavior on other platforms,\n  - The maximum number of array dimensions is changed from 32 to 64\n\n- Documentation:\n\n  - The reference guide navigation was significantly improved, and there is now\n    documentation on NumPy's :ref:`module structure <module-structure>`,\n  - The :ref:`building from source <building-from-source>` documentation was\n    completely rewritten,\n\nFurthermore there are many changes to NumPy internals, including continuing to\nmigrate code from C to C++, that will make it easier to improve and maintain\nNumPy in the future.\n\nThe \"no free lunch\" theorem dictates that there is a price to pay for all these\nAPI and behavior improvements and better future extensibility. This price is:\n\n1. Backwards compatibility. There are a significant number of breaking changes\n   to both the Python and C APIs. In the majority of cases, there are clear\n   error messages that will inform the user how to adapt their code. However,\n   there are also changes in behavior for which it was not possible to give\n   such an error message - these cases are all covered in the Deprecation and\n   Compatibility sections below, and in the :ref:`numpy-2-migration-guide`.\n\n   Note that there is a ``ruff`` mode to auto-fix many things in Python code.\n\n2. Breaking changes to the NumPy ABI. As a result, binaries of packages that\n   use the NumPy C API and were built against a NumPy 1.xx release will not\n   work with NumPy 2.0. On import, such packages will see an ``ImportError``\n   with a message about binary incompatibility.\n\n   It is possible to build binaries against NumPy 2.0 that will work at runtime\n   with both NumPy 2.0 and 1.x. See :ref:`numpy-2-abi-handling` for more details.\n\n   **All downstream packages that depend on the NumPy ABI are advised to do a\n   new release built against NumPy 2.0 and verify that that release works with\n   both 2.0 and 1.26 - ideally in the period between 2.0.0rc1 (which will be\n   ABI-stable) and the final 2.0.0 release to avoid problems for their users.**\n\nThe Python versions supported by this release are 3.9-3.12.\n\n\nNumPy 2.0 Python API removals\n=============================\n\n* ``np.geterrobj``, ``np.seterrobj`` and the related ufunc keyword argument\n  ``extobj=`` have been removed.  The preferred replacement for all of these\n  is using the context manager ``with np.errstate():``.\n\n  (`gh-23922 <https://github.com/numpy/numpy/pull/23922>`__)\n\n* ``np.cast`` has been removed. The literal replacement for\n  ``np.cast[dtype](arg)`` is ``np.asarray(arg, dtype=dtype)``.\n\n* ``np.source`` has been removed. The preferred replacement is\n  ``inspect.getsource``.\n\n* ``np.lookfor`` has been removed.\n\n  (`gh-24144 <https://github.com/numpy/numpy/pull/24144>`__)\n\n* ``numpy.who`` has been removed. As an alternative for the removed functionality, one\n  can use a variable explorer that is available in IDEs such as Spyder or Jupyter Notebook.\n\n  (`gh-24321 <https://github.com/numpy/numpy/pull/24321>`__)\n\n* Warnings and exceptions present in `numpy.exceptions` (e.g,\n  `~numpy.exceptions.ComplexWarning`,\n  `~numpy.exceptions.VisibleDeprecationWarning`) are no longer exposed in the\n  main namespace.\n* Multiple niche enums, expired members and functions have been removed from\n  the main namespace, such as: ``ERR_*``, ``SHIFT_*``, ``np.fastCopyAndTranspose``,\n  ``np.kernel_version``, ``np.numarray``, ``np.oldnumeric`` and ``np.set_numeric_ops``.\n\n  (`gh-24316 <https://github.com/numpy/numpy/pull/24316>`__)\n\n* Replaced ``from ... import *`` in the ``numpy/__init__.py`` with explicit imports.\n  As a result, these main namespace members got removed: ``np.FLOATING_POINT_SUPPORT``,\n  ``np.FPE_*``, ``np.NINF``, ``np.PINF``, ``np.NZERO``, ``np.PZERO``, ``np.CLIP``,\n  ``np.WRAP``, ``np.WRAP``, ``np.RAISE``, ``np.BUFSIZE``, ``np.UFUNC_BUFSIZE_DEFAULT``,\n  ``np.UFUNC_PYVALS_NAME``, ``np.ALLOW_THREADS``, ``np.MAXDIMS``, ``np.MAY_SHARE_EXACT``,\n  ``np.MAY_SHARE_BOUNDS``, ``add_newdoc``, ``np.add_docstring`` and\n  ``np.add_newdoc_ufunc``.\n\n  (`gh-24357 <https://github.com/numpy/numpy/pull/24357>`__)\n\n* Alias ``np.float_`` has been removed. Use ``np.float64`` instead.\n\n* Alias ``np.complex_`` has been removed. Use ``np.complex128`` instead.\n\n* Alias ``np.longfloat`` has been removed. Use ``np.longdouble`` instead.\n\n* Alias ``np.singlecomplex`` has been removed. Use ``np.complex64`` instead.\n\n* Alias ``np.cfloat`` has been removed. Use ``np.complex128`` instead.\n\n* Alias ``np.longcomplex`` has been removed. Use ``np.clongdouble`` instead.\n\n* Alias ``np.clongfloat`` has been removed. Use ``np.clongdouble`` instead.\n\n* Alias ``np.string_`` has been removed. Use ``np.bytes_`` instead.\n\n* Alias ``np.unicode_`` has been removed. Use ``np.str_`` instead.\n\n* Alias ``np.Inf`` has been removed. Use ``np.inf`` instead.\n\n* Alias ``np.Infinity`` has been removed. Use ``np.inf`` instead.\n\n* Alias ``np.NaN`` has been removed. Use ``np.nan`` instead.\n\n* Alias ``np.infty`` has been removed. Use ``np.inf`` instead.\n\n* Alias ``np.mat`` has been removed. Use ``np.asmatrix`` instead.\n\n* ``np.issubclass_`` has been removed. Use the ``issubclass`` builtin instead.\n\n* ``np.asfarray`` has been removed. Use ``np.asarray`` with a proper dtype instead.\n\n* ``np.set_string_function`` has been removed. Use ``np.set_printoptions``\n  instead with a formatter for custom printing of NumPy objects.\n\n* ``np.tracemalloc_domain`` is now only available from ``np.lib``.\n\n* ``np.recfromcsv`` and ``recfromtxt`` are now only available from ``np.lib.npyio``.\n\n* ``np.issctype``, ``np.maximum_sctype``, ``np.obj2sctype``, ``np.sctype2char``,\n  ``np.sctypes``, ``np.issubsctype`` were all removed from the\n  main namespace without replacement, as they where niche members.\n\n* Deprecated ``np.deprecate`` and ``np.deprecate_with_doc`` has been removed \n  from the main namespace. Use ``DeprecationWarning`` instead.\n\n* Deprecated ``np.safe_eval`` has been removed from the main namespace. \n  Use ``ast.literal_eval`` instead.\n\n  (`gh-24376 <https://github.com/numpy/numpy/pull/24376>`__)\n\n* ``np.find_common_type`` has been removed. Use ``numpy.promote_types`` or\n  ``numpy.result_type`` instead. To achieve semantics for the ``scalar_types``\n  argument, use ``numpy.result_type`` and pass ``0``, ``0.0``, or ``0j`` as a\n  Python scalar instead.\n\n* ``np.round_`` has been removed. Use ``np.round`` instead.\n\n* ``np.nbytes`` has been removed. Use ``np.dtype(<dtype>).itemsize`` instead.\n\n  (`gh-24477 <https://github.com/numpy/numpy/pull/24477>`__)\n\n* ``np.compare_chararrays`` has been removed from the main namespace. \n  Use ``np.char.compare_chararrays`` instead.\n\n* The ``charrarray`` in the main namespace has been deprecated. It can be imported\n  without a deprecation warning from ``np.char.chararray`` for now,\n  but we are planning to fully deprecate and remove ``chararray`` in the future.\n\n* ``np.format_parser`` has been removed from the main namespace. \n  Use ``np.rec.format_parser`` instead.\n\n  (`gh-24587 <https://github.com/numpy/numpy/pull/24587>`__)\n\n* Support for seven data type string aliases has been removed from ``np.dtype``:\n  ``int0``, ``uint0``, ``void0``, ``object0``, ``str0``, ``bytes0`` and ``bool8``.\n\n  (`gh-24807 <https://github.com/numpy/numpy/pull/24807>`__)\n\n* The experimental ``numpy.array_api`` submodule has been removed. Use the main\n  ``numpy`` namespace for regular usage instead, or the separate\n  ``array-api-strict`` package for the compliance testing use case for which\n  ``numpy.array_api`` was mostly used.\n\n  (`gh-25911 <https://github.com/numpy/numpy/pull/25911>`__)\n\n\n``__array_prepare__`` is removed\n--------------------------------\nUFuncs called ``__array_prepare__`` before running computations\nfor normal ufunc calls (not generalized ufuncs, reductions, etc.).\nThe function was also called instead of ``__array_wrap__`` on the\nresults of some linear algebra functions.\n\nIt is now removed. If you use it, migrate to ``__array_ufunc__`` or rely on\n``__array_wrap__`` which is called with a context in all cases, although only\nafter the result array is filled. In those code paths, ``__array_wrap__`` will\nnow be passed a base class, rather than a subclass array.\n\n(`gh-25105 <https://github.com/numpy/numpy/pull/25105>`__)\n\n\nDeprecations\n============\n\n* ``np.compat`` has been deprecated, as Python 2 is no longer supported.\n\n* ``np.safe_eval`` has been deprecated. ``ast.literal_eval`` should be used instead.\n\n  (`gh-23830 <https://github.com/numpy/numpy/pull/23830>`__)\n\n* ``np.recfromcsv``, ``np.recfromtxt``, ``np.disp``, ``np.get_array_wrap``,\n  ``np.maximum_sctype``, ``np.deprecate`` and ``np.deprecate_with_doc``\n  have been deprecated.\n\n  (`gh-24154 <https://github.com/numpy/numpy/pull/24154>`__)\n\n* ``np.trapz`` has been deprecated. Use ``np.trapezoid`` or a ``scipy.integrate`` function instead.\n\n* ``np.in1d`` has been deprecated. Use ``np.isin`` instead.\n\n* Alias ``np.row_stack`` has been deprecated. Use ``np.vstack`` directly.\n\n  (`gh-24445 <https://github.com/numpy/numpy/pull/24445>`__)\n\n* ``__array_wrap__`` is now passed ``arr, context, return_scalar`` and\n  support for implementations not accepting all three are deprecated.  Its signature\n  should be ``__array_wrap__(self, arr, context=None, return_scalar=False)``\n\n  (`gh-25409 <https://github.com/numpy/numpy/pull/25409>`__)\n\n* Arrays of 2-dimensional vectors for ``np.cross`` have been deprecated. Use\n  arrays of 3-dimensional vectors instead.\n\n  (`gh-24818 <https://github.com/numpy/numpy/pull/24818>`__)\n\n* ``np.dtype(\"a\")`` alias for ``np.dtype(np.bytes_)`` was deprecated. Use\n  ``np.dtype(\"S\")`` alias instead.\n\n  (`gh-24854 <https://github.com/numpy/numpy/pull/24854>`__)\n\n* Use of keyword arguments ``x`` and ``y`` with functions\n  ``assert_array_equal`` and ``assert_array_almost_equal`` has been deprecated.\n  Pass the first two arguments as positional arguments instead.\n\n  (`gh-24978 <https://github.com/numpy/numpy/pull/24978>`__)\n\n\n``numpy.fft`` deprecations for n-D transforms with None values in arguments\n---------------------------------------------------------------------------\nUsing ``fftn``, ``ifftn``, ``rfftn``, ``irfftn``, ``fft2``, ``ifft2``,\n``rfft2`` or ``irfft2`` with the ``s`` parameter set to a value that is not\n``None`` and the ``axes`` parameter set to ``None`` has been deprecated, in\nline with the array API standard. To retain current behaviour, pass a sequence\n[0, ..., k-1] to ``axes`` for an array of dimension k.\n\nFurthermore, passing an array to ``s`` which contains ``None`` values is\ndeprecated as the parameter is documented to accept a sequence of integers\nin both the NumPy docs and the array API specification. To use the default\nbehaviour of the corresponding 1-D transform, pass the value matching\nthe default for its ``n`` parameter. To use the default behaviour for every\naxis, the ``s`` argument can be omitted.\n\n(`gh-25495 <https://github.com/numpy/numpy/pull/25495>`__)\n\n\n``np.linalg.lstsq`` now defaults to a new ``rcond`` value\n---------------------------------------------------------\n`~numpy.linalg.lstsq` now uses the new rcond value of the machine precision\ntimes ``max(M, N)``.  Previously, the machine precision was used but a\nFutureWarning was given to notify that this change will happen eventually.\nThat old behavior can still be achieved by passing ``rcond=-1``.\n\n(`gh-25721 <https://github.com/numpy/numpy/pull/25721>`__)\n\n\nExpired deprecations\n====================\n\n* The ``np.core.umath_tests`` submodule has been removed from the public API.\n  (Deprecated in NumPy 1.15)\n\n  (`gh-23809 <https://github.com/numpy/numpy/pull/23809>`__)\n\n* The ``PyDataMem_SetEventHook`` deprecation has expired and it is\n  removed.  Use ``tracemalloc`` and the ``np.lib.tracemalloc_domain``\n  domain.  (Deprecated in NumPy 1.23)\n\n  (`gh-23921 <https://github.com/numpy/numpy/pull/23921>`__)\n\n* The deprecation of ``set_numeric_ops`` and the C functions\n  ``PyArray_SetNumericOps`` and ``PyArray_GetNumericOps`` has\n  been expired and the functions removed.  (Deprecated in NumPy 1.16)\n\n  (`gh-23998 <https://github.com/numpy/numpy/pull/23998>`__)\n\n* The ``fasttake``, ``fastclip``, and ``fastputmask``  ``ArrFuncs``\n  deprecation is now finalized.\n* The deprecated function ``fastCopyAndTranspose`` and its C counterpart\n  are now removed.\n* The deprecation of ``PyArray_ScalarFromObject`` is now finalized.\n\n  (`gh-24312 <https://github.com/numpy/numpy/pull/24312>`__)\n\n* ``np.msort`` has been removed. For a replacement, ``np.sort(a, axis=0)``\n  should be used instead.\n\n  (`gh-24494 <https://github.com/numpy/numpy/pull/24494>`__)\n\n\n* ``np.dtype((\"f8\", 1)`` will now return a shape 1 subarray dtype\n  rather than a non-subarray one.\n\n  (`gh-25761 <https://github.com/numpy/numpy/pull/25761>`__)\n\n* Assigning to the ``.data`` attribute of an ndarray is disallowed and will\n  raise.\n\n* ``np.binary_repr(a, width)`` will raise if width is too small.\n\n* Using ``NPY_CHAR`` in ``PyArray_DescrFromType()`` will raise, use\n  ``NPY_STRING`` ``NPY_UNICODE``, or ``NPY_VSTRING`` instead.\n\n  (`gh-25794 <https://github.com/numpy/numpy/pull/25794>`__)\n\n\nCompatibility notes\n===================\n\n``loadtxt`` and ``genfromtxt`` default encoding changed\n-------------------------------------------------------\n``loadtxt`` and ``genfromtxt`` now both default to ``encoding=None``\nwhich may mainly modify how ``converters`` work.\nThese will now be passed ``str`` rather than ``bytes``. Pass the\nencoding explicitly to always get the new or old behavior.\nFor ``genfromtxt`` the change also means that returned values will now be\nunicode strings rather than bytes.\n\n(`gh-25158 <https://github.com/numpy/numpy/pull/25158>`__)\n\n\n``f2py`` compatibility notes\n----------------------------\n* ``f2py`` will no longer accept ambiguous ``-m`` and ``.pyf`` CLI\n  combinations.  When more than one ``.pyf`` file is passed, an error is\n  raised. When both ``-m`` and a ``.pyf`` is passed, a warning is emitted and\n  the ``-m`` provided name is ignored.\n\n  (`gh-25181 <https://github.com/numpy/numpy/pull/25181>`__)\n\n* The ``f2py.compile()`` helper has been removed because it leaked memory, has\n  been marked as experimental for several years now, and was implemented as a\n  thin ``subprocess.run`` wrapper. It was also one of the test bottlenecks. See\n  `gh-25122 <https://github.com/numpy/numpy/issues/25122>`_ for the full\n  rationale. It also used several ``np.distutils`` features which are too\n  fragile to be ported to work with ``meson``.\n\n* Users are urged to replace calls to ``f2py.compile`` with calls to\n  ``subprocess.run(\"python\", \"-m\", \"numpy.f2py\",...`` instead, and to use\n  environment variables to interact with ``meson``. `Native files\n  <https://mesonbuild.com/Machine-files.html>`_ are also an option.\n\n  (`gh-25193 <https://github.com/numpy/numpy/pull/25193>`__)\n\n\nMinor changes in behavior of sorting functions\n----------------------------------------------\nDue to algorithmic changes and use of SIMD code, sorting functions with methods\nthat aren't stable may return slightly different results in 2.0.0 compared to\n1.26.x. This includes the default method of `~numpy.argsort` and\n`~numpy.argpartition`.\n\n\nRemoved ambiguity when broadcasting in ``np.solve``\n---------------------------------------------------\nThe broadcasting rules for ``np.solve(a, b)`` were ambiguous when ``b`` had 1\nfewer dimensions than ``a``. This has been resolved in a backward-incompatible\nway and is now compliant with the Array API. The old behaviour can be\nreconstructed by using ``np.solve(a, b[..., None])[..., 0]``.\n\n(`gh-25914 <https://github.com/numpy/numpy/pull/25914>`__)\n\n\nModified representation for ``Polynomial``\n------------------------------------------\nThe representation method for `~numpy.polynomial.polynomial.Polynomial` was\nupdated to include the domain in the representation. The plain text and latex\nrepresentations are now consistent. For example the output of\n``str(np.polynomial.Polynomial([1, 1], domain=[.1, .2]))`` used to be ``1.0 +\n1.0 x``, but now is ``1.0 + 1.0 (-3.0000000000000004 + 20.0 x)``.\n\n(`gh-21760 <https://github.com/numpy/numpy/pull/21760>`__)\n\n\nC API changes\n=============\n\n* The ``PyArray_CGT``, ``PyArray_CLT``, ``PyArray_CGE``, ``PyArray_CLE``,\n  ``PyArray_CEQ``, ``PyArray_CNE`` macros have been removed.\n\n* ``PyArray_MIN`` and ``PyArray_MAX`` have been moved from ``ndarraytypes.h``\n  to ``npy_math.h``.\n\n  (`gh-24258 <https://github.com/numpy/numpy/pull/24258>`__)\n\n* A C API for working with `numpy.dtypes.StringDType` arrays has been exposed.\n  This includes functions for acquiring and releasing mutexes which lock access\n  to the string data, as well as packing and unpacking UTF-8 bytestreams from\n  array entries.\n\n* ``NPY_NTYPES`` has been renamed to ``NPY_NTYPES_LEGACY`` as it does not\n  include new NumPy built-in DTypes. In particular the new string DType\n  will likely not work correctly with code that handles legacy DTypes.\n\n  (`gh-25347 <https://github.com/numpy/numpy/pull/25347>`__)\n\n* The C-API now only exports the static inline function versions\n  of the array accessors (previously this depended on using \"deprecated API\").\n  While we discourage it, the struct fields can still be used directly.\n\n  (`gh-25789 <https://github.com/numpy/numpy/pull/25789>`__)\n\n* NumPy now defines :c:func:`PyArray_Pack` to set an individual memory\n  address.  Unlike ``PyArray_SETITEM`` this function is equivalent to setting\n  an individual array item and does not require a NumPy array input.\n\n  (`gh-25954 <https://github.com/numpy/numpy/pull/25954>`__)\n\n* The ``->f`` slot has been removed from ``PyArray_Descr``.\n  If you use this slot, replace accessing it with\n  ``PyDataType_GetArrFuncs`` (see its documentation and the\n  :ref:`numpy-2-migration-guide`). In some cases using other functions like\n  ``PyArray_GETITEM`` may be an alternatives.\n* ``PyArray_GETITEM`` and ``PyArray_SETITEM`` now require the import of the\n  NumPy API table to be used and are no longer defined in ``ndarraytypes.h``.\n\n  (`gh-25812 <https://github.com/numpy/numpy/pull/25812>`__)\n\n* Due to runtime dependencies, the definition for functionality accessing\n  the dtype flags was moved from ``numpy/ndarraytypes.h`` and is only available\n  after including ``numpy/ndarrayobject.h`` as it requires ``import_array()``.\n  This includes ``PyDataType_FLAGCHK``, ``PyDataType_REFCHK`` and\n  ``NPY_BEGIN_THREADS_DESCR``.\n\n* The dtype flags on ``PyArray_Descr`` must now be accessed through the\n  ``PyDataType_FLAGS`` inline function to be compatible with both 1.x and 2.x.\n  This function is defined in ``npy_2_compat.h`` to allow backporting.\n  Most or all users should use ``PyDataType_FLAGCHK`` which is available on\n  1.x and does not require backporting.\n  Cython users should use Cython 3.  Otherwise access will go through Python\n  unless they use ``PyDataType_FLAGCHK`` instead.\n\n  (`gh-25816 <https://github.com/numpy/numpy/pull/25816>`__)\n\n\nDatetime functionality exposed in the C API and Cython bindings\n---------------------------------------------------------------\nThe functions ``NpyDatetime_ConvertDatetime64ToDatetimeStruct``,\n``NpyDatetime_ConvertDatetimeStructToDatetime64``,\n``NpyDatetime_ConvertPyDateTimeToDatetimeStruct``,\n``NpyDatetime_GetDatetimeISO8601StrLen``, ``NpyDatetime_MakeISO8601Datetime``,\nand ``NpyDatetime_ParseISO8601Datetime`` have been added to the C API to\nfacilitate converting between strings, Python datetimes, and NumPy datetimes in\nexternal libraries.\n\n(`gh-21199 <https://github.com/numpy/numpy/pull/21199>`__)\n\n\nConst correctness for the generalized ufunc C API\n-------------------------------------------------\nThe NumPy C API's functions for constructing generalized ufuncs\n(``PyUFunc_FromFuncAndData``, ``PyUFunc_FromFuncAndDataAndSignature``,\n``PyUFunc_FromFuncAndDataAndSignatureAndIdentity``) take ``types`` and ``data``\narguments that are not modified by NumPy's internals. Like the ``name`` and\n``doc`` arguments, third-party Python extension modules are likely to supply\nthese arguments from static constants. The ``types`` and ``data`` arguments are\nnow const-correct: they are declared as ``const char *types`` and\n``void *const *data``, respectively. C code should not be affected, but C++\ncode may be.\n\n(`gh-23847 <https://github.com/numpy/numpy/pull/23847>`__)\n\n\nLarger ``NPY_MAXDIMS`` and ``NPY_MAXARGS``, ``NPY_RAVEL_AXIS`` introduced\n-------------------------------------------------------------------------\n``NPY_MAXDIMS`` is now 64, you may want to review its use.  This is usually\nused in a stack allocation, where the increase should be safe.\nHowever, we do encourage generally to remove any use of ``NPY_MAXDIMS`` and\n``NPY_MAXARGS`` to eventually allow removing the constraint completely.\nFor the conversion helper and C-API functions mirroring Python ones such as\n``take``, ``NPY_MAXDIMS`` was used to mean ``axis=None``. Such usage must be\nreplaced with ``NPY_RAVEL_AXIS``. See also :ref:`migration_maxdims`.\n\n(`gh-25149 <https://github.com/numpy/numpy/pull/25149>`__)\n\n\n``NPY_MAXARGS`` not constant and ``PyArrayMultiIterObject`` size change\n-----------------------------------------------------------------------\nSince ``NPY_MAXARGS`` was increased, it is now a runtime constant and not\ncompile-time constant anymore.\nWe expect almost no users to notice this.  But if used for stack allocations\nit now must be replaced with a custom constant using ``NPY_MAXARGS`` as an\nadditional runtime check.\n\nThe ``sizeof(PyArrayMultiIterObject)`` no longer includes the full size\nof the object.  We expect nobody to notice this change.  It was necessary\nto avoid issues with Cython.\n\n(`gh-25271 <https://github.com/numpy/numpy/pull/25271>`__)\n\n\nRequired changes for custom legacy user dtypes\n----------------------------------------------\nIn order to improve our DTypes it is unfortunately necessary\nto break the ABI, which requires some changes for dtypes registered\nwith ``PyArray_RegisterDataType``.\nPlease see the documentation of ``PyArray_RegisterDataType`` for how\nto adapt your code and achieve compatibility with both 1.x and 2.x.\n\n(`gh-25792 <https://github.com/numpy/numpy/pull/25792>`__)\n\n\nNew Public DType API\n--------------------\nThe C implementation of the NEP 42 DType API is now public. While the DType API\nhas shipped in NumPy for a few versions, it was only usable in sessions with a\nspecial environment variable set. It is now possible to write custom DTypes\noutside of NumPy using the new DType API and the normal ``import_array()``\nmechanism for importing the numpy C API.\n\nSee :ref:`dtype-api` for more details about the API. As always with a new\nfeature, please report any bugs you run into implementing or using a new\nDType. It is likely that downstream C code that works with dtypes will need to\nbe updated to work correctly with new DTypes.\n\n(`gh-25754 <https://github.com/numpy/numpy/pull/25754>`__)\n\n\nNew C-API import functions\n--------------------------\nWe have now added ``PyArray_ImportNumPyAPI`` and ``PyUFunc_ImportUFuncAPI``\nas static inline functions to import the NumPy C-API tables.\nThe new functions have two advantages over ``import_array`` and\n``import_ufunc``:\n\n- They check whether the import was already performed and are light-weight\n  if not, allowing to add them judiciously (although this is not preferable\n  in most cases).\n- The old mechanisms were macros rather than functions which included a\n  ``return`` statement.\n\nThe ``PyArray_ImportNumPyAPI()`` function is included in ``npy_2_compat.h``\nfor simpler backporting.\n\n(`gh-25866 <https://github.com/numpy/numpy/pull/25866>`__)\n\n\nStructured dtype information access through functions\n-----------------------------------------------------\nThe dtype structures fields ``c_metadata``, ``names``,\n``fields``, and ``subarray`` must now be accessed through new\nfunctions following the same names, such as ``PyDataType_NAMES``.\nDirect access of the fields is not valid as they do not exist for\nall ``PyArray_Descr`` instances.\nThe ``metadata`` field is kept, but the macro version should also be preferred.\n\n(`gh-25802 <https://github.com/numpy/numpy/pull/25802>`__)\n\n\nDescriptor ``elsize`` and ``alignment`` access\n----------------------------------------------\nUnless compiling only with NumPy 2 support, the ``elsize`` and ``aligment``\nfields must now be accessed via ``PyDataType_ELSIZE``,\n``PyDataType_SET_ELSIZE``, and ``PyDataType_ALIGNMENT``.\nIn cases where the descriptor is attached to an array, we advise\nusing ``PyArray_ITEMSIZE`` as it exists on all NumPy versions.\nPlease see :ref:`migration_c_descr` for more information.\n\n(`gh-25943 <https://github.com/numpy/numpy/pull/25943>`__)\n\n\nNumPy 2.0 C API removals\n========================\n\n* ``npy_interrupt.h`` and the corresponding macros like ``NPY_SIGINT_ON``\n  have been removed.  We recommend querying ``PyErr_CheckSignals()`` or\n  ``PyOS_InterruptOccurred()`` periodically (these do currently require\n  holding the GIL though).\n\n* The ``noprefix.h`` header has been removed. Replace missing symbols with\n  their prefixed counterparts (usually an added ``NPY_`` or ``npy_``).\n\n  (`gh-23919 <https://github.com/numpy/numpy/pull/23919>`__)\n\n* ``PyUFunc_GetPyVals``, ``PyUFunc_handlefperr``, and ``PyUFunc_checkfperr``\n  have been removed.\n  If needed, a new backwards compatible function to raise floating point errors\n  could be restored. Reason for removal: there are no known users and the\n  functions would have made ``with np.errstate()`` fixes much more difficult).\n\n  (`gh-23922 <https://github.com/numpy/numpy/pull/23922>`__)\n\n* The ``numpy/old_defines.h`` which was part of the API deprecated since NumPy 1.7\n  has been removed.  This removes macros of the form ``PyArray_CONSTANT``.\n  The `replace_old_macros.sed <https://github.com/numpy/numpy/blob/main/tools/replace_old_macros.sed>`__\n  script may be useful to convert them to the ``NPY_CONSTANT`` version.\n\n  (`gh-24011 <https://github.com/numpy/numpy/pull/24011>`__)\n\n* The ``legacy_inner_loop_selector`` member of the ufunc struct is removed\n  to simplify improvements to the dispatching system.\n  There are no known users overriding or directly accessing this member.\n\n  (`gh-24271 <https://github.com/numpy/numpy/pull/24271>`__)\n\n* ``NPY_INTPLTR`` has been removed to avoid confusion (see ``intp``\n  redefinition).\n\n  (`gh-24888 <https://github.com/numpy/numpy/pull/24888>`__)\n\n* The advanced indexing ``MapIter`` and related API has been removed.\n  The (truly) public part of it was not well tested and had only one\n  known user (Theano).  Making it private will simplify improvements\n  to speed up ``ufunc.at``, make advanced indexing more maintainable,\n  and was important for increasing the maximum number of dimensions of arrays\n  to 64. Please let us know if this API is important to you so we can find a\n  solution together.\n\n  (`gh-25138 <https://github.com/numpy/numpy/pull/25138>`__)\n\n* The ``NPY_MAX_ELSIZE`` macro has been removed, as it only ever reflected\n  builtin numeric types and served no internal purpose.\n\n  (`gh-25149 <https://github.com/numpy/numpy/pull/25149>`__)\n\n* ``PyArray_REFCNT`` and ``NPY_REFCOUNT`` are removed. Use ``Py_REFCNT`` instead.\n\n  (`gh-25156 <https://github.com/numpy/numpy/pull/25156>`__)\n\n* ``PyArrayFlags_Type`` and ``PyArray_NewFlagsObject`` as well as\n  ``PyArrayFlagsObject`` are private now.\n  There is no known use-case; use the Python API if needed.\n\n* ``PyArray_MoveInto``, ``PyArray_CastTo``, ``PyArray_CastAnyTo`` are removed\n  use ``PyArray_CopyInto`` and if absolutely needed ``PyArray_CopyAnyInto``\n  (the latter does a flat copy).\n\n* ``PyArray_FillObjectArray`` is removed, its only true use was for\n  implementing ``np.empty``.  Create a new empty array or use\n  ``PyArray_FillWithScalar()`` (decrefs existing objects).\n\n* ``PyArray_CompareUCS4`` and ``PyArray_CompareString`` are removed.\n  Use the standard C string comparison functions.\n\n* ``PyArray_ISPYTHON`` is removed as it is misleading, has no known\n  use-cases, and is easy to replace.\n\n* ``PyArray_FieldNames`` is removed, as it is unclear what it would\n  be useful for.  It also has incorrect semantics in some possible\n  use-cases.\n\n* ``PyArray_TypestrConvert`` is removed, since it seems a misnomer and unlikely\n  to be used by anyone.  If you know the size or are limited to few types, just\n  use it explicitly, otherwise go via Python strings.\n\n  (`gh-25292 <https://github.com/numpy/numpy/pull/25292>`__)\n\n* ``PyDataType_GetDatetimeMetaData`` is removed, it did not actually\n  do anything since at least NumPy 1.7.\n\n  (`gh-25802 <https://github.com/numpy/numpy/pull/25802>`__)\n\n* ``PyArray_GetCastFunc`` is removed. Note that custom legacy user dtypes\n  can still provide a castfunc as their implementation, but any access to them\n  is now removed.  The reason for this is that NumPy never used these\n  internally for many years.  If you use simple numeric types, please just use\n  C casts directly.  In case you require an alternative, please let us know so\n  we can create new API such as ``PyArray_CastBuffer()`` which could use old or\n  new cast functions depending on the NumPy version.\n\n  (`gh-25161 <https://github.com/numpy/numpy/pull/25161>`__)\n\n\nNew Features\n============\n\n``np.add`` was extended to work with ``unicode`` and ``bytes`` dtypes.\n----------------------------------------------------------------------\n\n  (`gh-24858 <https://github.com/numpy/numpy/pull/24858>`__)\n\n\nA new ``bitwise_count`` function\n--------------------------------\nThis new function counts the number of 1-bits in a number.\n`~numpy.bitwise_count` works on all the numpy integer types and\ninteger-like objects.\n\n.. code-block:: python\n\n    >>> a = np.array([2**i - 1 for i in range(16)])\n    >>> np.bitwise_count(a)\n    array([ 0,  1,  2,  3,  4,  5,  6,  7,  8,  9, 10, 11, 12, 13, 14, 15],\n          dtype=uint8)\n\n(`gh-19355 <https://github.com/numpy/numpy/pull/19355>`__)\n\n\nmacOS Accelerate support, including the ILP64\n---------------------------------------------\nSupport for the updated Accelerate BLAS/LAPACK library, including ILP64 (64-bit\ninteger) support, in macOS 13.3 has been added. This brings arm64 support, and\nsignificant performance improvements of up to 10x for commonly used linear\nalgebra operations. When Accelerate is selected at build time, or if no\nexplicit BLAS library selection is done, the 13.3+ version will automatically\nbe used if available.\n\n(`gh-24053 <https://github.com/numpy/numpy/pull/24053>`__)\n\nBinary wheels are also available. On macOS >=14.0, users who install NumPy from\nPyPI will get wheels built against Accelerate rather than OpenBLAS.\n\n(`gh-25255 <https://github.com/numpy/numpy/pull/25255>`__)\n\n\nOption to use weights for quantile and percentile functions\n-----------------------------------------------------------\nA ``weights`` keyword is now available for `~numpy.quantile`,\n`~numpy.percentile`, `~numpy.nanquantile` and `~numpy.nanpercentile`. Only\n``method=\"inverted_cdf\"`` supports weights.\n\n(`gh-24254 <https://github.com/numpy/numpy/pull/24254>`__)\n\n\nImproved CPU optimization tracking\n----------------------------------\nA new tracer mechanism is available which enables tracking of the enabled\ntargets for each optimized function (i.e., that uses hardware-specific SIMD\ninstructions) in the NumPy library. With this enhancement, it becomes possible\nto precisely monitor the enabled CPU dispatch targets for the dispatched\nfunctions.\n\nA new function named ``opt_func_info`` has been added to the new namespace\n`numpy.lib.introspect`, offering this tracing capability. This function allows\nyou to retrieve information about the enabled targets based on function names\nand data type signatures.\n\n(`gh-24420 <https://github.com/numpy/numpy/pull/24420>`__)\n\n\nA new Meson backend for ``f2py``\n--------------------------------\n``f2py`` in compile mode (i.e. ``f2py -c``) now accepts the ``--backend meson``\noption. This is the default option for Python >=3.12. For older Python versions,\n``f2py`` will still default to ``--backend distutils``.\n\nTo support this in realistic use-cases, in compile mode ``f2py`` takes a\n``--dep`` flag one or many times which maps to ``dependency()`` calls in the\n``meson`` backend, and does nothing in the ``distutils`` backend.\n\nThere are no changes for users of ``f2py`` only as a code generator, i.e. without ``-c``.\n\n(`gh-24532 <https://github.com/numpy/numpy/pull/24532>`__)\n\n\n``bind(c)`` support for ``f2py``\n--------------------------------\nBoth functions and subroutines can be annotated with ``bind(c)``. ``f2py`` will\nhandle both the correct type mapping, and preserve the unique label for other\nC interfaces.\n\n**Note:** ``bind(c, name = 'routine_name_other_than_fortran_routine')`` is not\nhonored by the ``f2py`` bindings by design, since ``bind(c)`` with the ``name``\nis meant to guarantee only the same name in C and Fortran, not in Python and\nFortran.\n\n(`gh-24555 <https://github.com/numpy/numpy/pull/24555>`__)\n\n\nA new ``strict`` option for several testing functions\n-----------------------------------------------------\nThe ``strict`` keyword is now available for `~numpy.testing.assert_allclose`,\n`~numpy.testing.assert_equal`, and `~numpy.testing.assert_array_less`.\nSetting ``strict=True`` will disable the broadcasting behaviour for scalars\nand ensure that input arrays have the same data type.\n\n(`gh-24680 <https://github.com/numpy/numpy/pull/24680>`__,\n`gh-24770 <https://github.com/numpy/numpy/pull/24770>`__,\n`gh-24775 <https://github.com/numpy/numpy/pull/24775>`__)\n\n\nAdd ``np.core.umath.find`` and ``np.core.umath.rfind`` UFuncs\n-------------------------------------------------------------\nAdd two ``find`` and ``rfind`` UFuncs that operate on unicode or byte strings\nand are used in ``np.char``. They operate similar to ``str.find`` and\n``str.rfind``.\n\n(`gh-24868 <https://github.com/numpy/numpy/pull/24868>`__)\n\n\n``diagonal`` and ``trace`` for ``numpy.linalg``\n-----------------------------------------------\n`numpy.linalg.diagonal` and `numpy.linalg.trace` have been\nadded, which are array API standard-compatible variants of `numpy.diagonal` and\n`numpy.trace`. They differ in the default axis selection which define 2-D\nsub-arrays.\n\n(`gh-24887 <https://github.com/numpy/numpy/pull/24887>`__)\n\n\nNew ``long`` and ``ulong`` dtypes\n---------------------------------\n`numpy.long` and `numpy.ulong` have been added as NumPy integers mapping\nto C's ``long`` and ``unsigned long``. Prior to NumPy 1.24, ``numpy.long`` was\nan alias to Python's ``int``.\n\n(`gh-24922 <https://github.com/numpy/numpy/pull/24922>`__)\n\n\n``svdvals`` for ``numpy.linalg``\n--------------------------------\n`numpy.linalg.svdvals` has been added. It computes singular values for\n(a stack of) matrices. Executing ``np.svdvals(x)`` is the same as calling\n``np.svd(x, compute_uv=False, hermitian=False)``.\nThis function is compatible with the array API standard.\n\n(`gh-24940 <https://github.com/numpy/numpy/pull/24940>`__)\n\n\nA new ``isdtype`` function\n--------------------------\n`numpy.isdtype` was added to provide a canonical way to classify NumPy's dtypes\nin compliance with the array API standard.\n\n(`gh-25054 <https://github.com/numpy/numpy/pull/25054>`__)\n\n\nA new ``astype`` function\n-------------------------\n`numpy.astype` was added to provide an array API standard-compatible\nalternative to the `numpy.ndarray.astype` method.\n\n(`gh-25079 <https://github.com/numpy/numpy/pull/25079>`__)\n\n\nArray API compatible functions' aliases\n---------------------------------------\n13 aliases for existing functions were added to improve compatibility with the array API standard:\n\n* Trigonometry: ``acos``, ``acosh``, ``asin``, ``asinh``, ``atan``, ``atanh``, ``atan2``.\n\n* Bitwise: ``bitwise_left_shift``, ``bitwise_invert``, ``bitwise_right_shift``.\n\n* Misc: ``concat``, ``permute_dims``, ``pow``.\n\n* In ``numpy.linalg``: ``tensordot``, ``matmul``.\n\n(`gh-25086 <https://github.com/numpy/numpy/pull/25086>`__)\n\n\nNew ``unique_*`` functions\n--------------------------\nThe `~numpy.unique_all`, `~numpy.unique_counts`, `~numpy.unique_inverse`,\nand `~numpy.unique_values` functions have been added. They provide\nfunctionality of `~numpy.unique` with different sets of flags. They are array API\nstandard-compatible, and because the number of arrays they return does not\ndepend on the values of input arguments, they are easier to target for JIT\ncompilation.\n\n(`gh-25088 <https://github.com/numpy/numpy/pull/25088>`__)\n\n\nMatrix transpose support for ndarrays\n-------------------------------------\nNumPy now offers support for calculating the matrix transpose of an array (or\nstack of arrays). The matrix transpose is equivalent to swapping the last two\naxes of an array. Both ``np.ndarray`` and ``np.ma.MaskedArray`` now expose a\n``.mT`` attribute, and there is a matching new `numpy.matrix_transpose`\nfunction.\n\n(`gh-23762 <https://github.com/numpy/numpy/pull/23762>`__)\n\n\nArray API compatible functions for ``numpy.linalg``\n---------------------------------------------------\nSix new functions and two aliases were added to improve compatibility with\nthe Array API standard for `numpy.linalg`:\n\n* `numpy.linalg.matrix_norm` - Computes the matrix norm of a matrix (or a stack of matrices).\n\n* `numpy.linalg.vector_norm` - Computes the vector norm of a vector (or batch of vectors).\n\n* `numpy.vecdot` - Computes the (vector) dot product of two arrays.\n\n* `numpy.linalg.vecdot` - An alias for `numpy.vecdot`.\n\n* `numpy.linalg.matrix_transpose` - An alias for `numpy.matrix_transpose`.\n\n  (`gh-25155 <https://github.com/numpy/numpy/pull/25155>`__)\n\n* `numpy.linalg.outer` has been added. It computes the outer product of two\n  vectors. It differs from `numpy.outer` by accepting one-dimensional arrays\n  only. This function is compatible with the array API standard.\n\n  (`gh-25101 <https://github.com/numpy/numpy/pull/25101>`__)\n\n* `numpy.linalg.cross` has been added. It computes the cross product of two\n  (arrays of) 3-dimensional vectors. It differs from `numpy.cross` by accepting\n  three-dimensional vectors only. This function is compatible with the array\n  API standard.\n\n  (`gh-25145 <https://github.com/numpy/numpy/pull/25145>`__)\n\n\nA ``correction`` argument for ``var`` and ``std``\n-------------------------------------------------\nA ``correction`` argument was added to `~numpy.var` and `~numpy.std`, which is\nan array API standard compatible alternative to ``ddof``. As both arguments\nserve a similar purpose, only one of them can be provided at the same time.\n\n(`gh-25169 <https://github.com/numpy/numpy/pull/25169>`__)\n\n\n``ndarray.device`` and ``ndarray.to_device``\n--------------------------------------------\nAn ``ndarray.device`` attribute and ``ndarray.to_device`` method were\nadded to ``numpy.ndarray`` for array API standard compatibility.\n\nAdditionally, ``device`` keyword-only arguments were added to:\n`~numpy.asarray`, `~numpy.arange`, `~numpy.empty`, `~numpy.empty_like`,\n`~numpy.eye`, `~numpy.full`, `~numpy.full_like`, `~numpy.linspace`,\n`~numpy.ones`, `~numpy.ones_like`, `~numpy.zeros`, and `~numpy.zeros_like`.\n\nFor all these new arguments, only ``device=\"cpu\"`` is supported.\n\n(`gh-25233 <https://github.com/numpy/numpy/pull/25233>`__)\n\n\nStringDType has been added to NumPy\n-----------------------------------\nWe have added a new variable-width UTF-8 encoded string data type, implementing\na \"NumPy array of Python strings\", including support for a user-provided missing\ndata sentinel. It is intended as a drop-in replacement for arrays of Python\nstrings and missing data sentinels using the object dtype. See `NEP 55\n<https://numpy.org/neps/nep-0055-string_dtype.html>`_ and :ref:`the\ndocumentation <stringdtype>` for more details.\n\n(`gh-25347 <https://github.com/numpy/numpy/pull/25347>`__)\n\n\nNew keywords for ``cholesky`` and ``pinv``\n------------------------------------------\nThe ``upper`` and ``rtol`` keywords were added to `numpy.linalg.cholesky` and\n`numpy.linalg.pinv`, respectively, to improve array API standard compatibility.\n\nFor `~numpy.linalg.pinv`, if neither ``rcond`` nor ``rtol`` is specified,\nthe ``rcond``'s default is used. We plan to deprecate and remove ``rcond`` in\nthe future.\n\n(`gh-25388 <https://github.com/numpy/numpy/pull/25388>`__)\n\n\nNew keywords for ``sort``, ``argsort`` and ``linalg.matrix_rank``\n-----------------------------------------------------------------\nNew keyword parameters were added to improve array API standard compatibility:\n\n* ``rtol`` was added to `~numpy.linalg.matrix_rank`.\n\n* ``stable`` was added to `~numpy.sort` and `~numpy.argsort`.\n\n(`gh-25437 <https://github.com/numpy/numpy/pull/25437>`__)\n\n\nNew ``numpy.strings`` namespace for string ufuncs\n-------------------------------------------------\nNumPy now implements some string operations as ufuncs. The old ``np.char``\nnamespace is still available, and where possible the string manipulation\nfunctions in that namespace have been updated to use the new ufuncs,\nsubstantially improving their performance.\n\nWhere possible, we suggest updating code to use functions in ``np.strings``\ninstead of ``np.char``. In the future we may deprecate ``np.char`` in favor of\n``np.strings``.\n\n(`gh-25463 <https://github.com/numpy/numpy/pull/25463>`__)\n\n\n``numpy.fft`` support for different precisions and in-place calculations\n------------------------------------------------------------------------\nThe various FFT routines in `numpy.fft` now do their calculations natively in\nfloat, double, or long double precision, depending on the input precision,\ninstead of always calculating in double precision. Hence, the calculation will\nnow be less precise for single and more precise for long double precision.\nThe data type of the output array will now be adjusted accordingly.\n\nFurthermore, all FFT routines have gained an ``out`` argument that can be used\nfor in-place calculations.\n\n(`gh-25536 <https://github.com/numpy/numpy/pull/25536>`__)\n\n\nconfigtool and pkg-config support\n---------------------------------\nA new ``numpy-config`` CLI script is available that can be queried for the\nNumPy version and for compile flags needed to use the NumPy C API. This will\nallow build systems to better support the use of NumPy as a dependency.\nAlso, a ``numpy.pc`` pkg-config file is now included with Numpy. In order to\nfind its location for use with ``PKG_CONFIG_PATH``, use\n``numpy-config --pkgconfigdir``.\n\n(`gh-25730 <https://github.com/numpy/numpy/pull/25730>`__)\n\n\nArray API standard support in the main namespace\n------------------------------------------------\nThe main ``numpy`` namespace now supports the array API standard. See\n:ref:`array-api-standard-compatibility` for details.\n\n(`gh-25911 <https://github.com/numpy/numpy/pull/25911>`__)\n\nImprovements\n============\n\nStrings are now supported by ``any``, ``all``, and the logical ufuncs.\n----------------------------------------------------------------------\n\n  (`gh-25651 <https://github.com/numpy/numpy/pull/25651>`__)\n\n\nInteger sequences as the shape argument for ``memmap``\n------------------------------------------------------\n`numpy.memmap` can now be created with any integer sequence as the ``shape``\nargument, such as a list or numpy array of integers. Previously, only the\ntypes of tuple and int could be used without raising an error.\n\n(`gh-23729 <https://github.com/numpy/numpy/pull/23729>`__)\n\n\n``errstate`` is now faster and context safe\n-------------------------------------------\nThe `numpy.errstate` context manager/decorator is now faster and\nsafer.  Previously, it was not context safe and had (rare)\nissues with thread-safety.\n\n(`gh-23936 <https://github.com/numpy/numpy/pull/23936>`__)\n\n\nAArch64 quicksort speed improved by using Highway's VQSort\n----------------------------------------------------------\nThe first introduction of the Google Highway library, using VQSort on AArch64. \nExecution time is improved by up to 16x in some cases, see the PR for benchmark\nresults. Extensions to other platforms will be done in the future.\n\n(`gh-24018 <https://github.com/numpy/numpy/pull/24018>`__)\n\n\nComplex types - underlying C type changes\n-----------------------------------------\n* The underlying C types for all of NumPy's complex types have been changed to\n  use C99 complex types.\n\n* While this change does not affect the memory layout of complex types, it\n  changes the API to be used to directly retrieve or write the real or\n  complex part of the complex number, since direct field access (as in ``c.real``\n  or ``c.imag``) is no longer an option. You can now use utilities provided in\n  ``numpy/npy_math.h`` to do these operations, like this:\n\n  .. code-block:: c\n\n      npy_cdouble c;\n      npy_csetreal(&c, 1.0);\n      npy_csetimag(&c, 0.0);\n      printf(\"%d + %di\\n\", npy_creal(c), npy_cimag(c));\n\n* To ease cross-version compatibility, equivalent macros and a compatibility\n  layer have been added which can be used by downstream packages to continue\n  to support both NumPy 1.x and 2.x. See :ref:`complex-numbers` for more info.\n\n* ``numpy/npy_common.h`` now includes ``complex.h``, which means that ``complex``\n  is now a reserved keyword.\n\n(`gh-24085 <https://github.com/numpy/numpy/pull/24085>`__)\n\n\n``iso_c_binding`` support and improved common blocks for ``f2py``\n-----------------------------------------------------------------\nPreviously, users would have to define their own custom ``f2cmap`` file to use\ntype mappings defined by the Fortran2003 ``iso_c_binding`` intrinsic module.\nThese type maps are now natively supported by ``f2py``\n\n(`gh-24555 <https://github.com/numpy/numpy/pull/24555>`__)\n\n``f2py`` now handles ``common`` blocks which have ``kind`` specifications from\nmodules. This further expands the usability of intrinsics like\n``iso_fortran_env`` and ``iso_c_binding``.\n\n(`gh-25186 <https://github.com/numpy/numpy/pull/25186>`__)\n\n\nCall ``str`` automatically on third argument to functions like ``assert_equal``\n-------------------------------------------------------------------------------\nThe third argument to functions like `~numpy.testing.assert_equal` now has\n``str`` called on it automatically. This way it mimics the built-in ``assert``\nstatement, where ``assert_equal(a, b, obj)`` works like ``assert a == b, obj``.\n\n(`gh-24877 <https://github.com/numpy/numpy/pull/24877>`__)\n\n\nSupport for array-like ``atol``/``rtol`` in ``isclose``, ``allclose``\n---------------------------------------------------------------------\nThe keywords ``atol`` and ``rtol`` in `~numpy.isclose` and `~numpy.allclose`\nnow accept both scalars and arrays. An array, if given, must broadcast\nto the shapes of the first two array arguments.\n\n(`gh-24878 <https://github.com/numpy/numpy/pull/24878>`__)\n\n\nConsistent failure messages in test functions\n---------------------------------------------\nPreviously, some `numpy.testing` assertions printed messages that\nreferred to the actual and desired results as ``x`` and ``y``.\nNow, these values are consistently referred to as ``ACTUAL`` and\n``DESIRED``.\n\n(`gh-24931 <https://github.com/numpy/numpy/pull/24931>`__)\n\n\nn-D FFT transforms allow ``s[i] == -1``\n---------------------------------------\nThe `~numpy.fft.fftn`, `~numpy.fft.ifftn`, `~numpy.fft.rfftn`,\n`~numpy.fft.irfftn`, `~numpy.fft.fft2`, `~numpy.fft.ifft2`, `~numpy.fft.rfft2`\nand `~numpy.fft.irfft2` functions now use the whole input array along the axis\n``i`` if ``s[i] == -1``, in line with the array API standard.\n\n(`gh-25495 <https://github.com/numpy/numpy/pull/25495>`__)\n\n\nGuard PyArrayScalar_VAL and PyUnicodeScalarObject for the limited API\n---------------------------------------------------------------------\n``PyUnicodeScalarObject`` holds a ``PyUnicodeObject``, which is not available\nwhen using ``Py_LIMITED_API``. Add guards to hide it and consequently also make\nthe ``PyArrayScalar_VAL`` macro hidden.\n\n(`gh-25531 <https://github.com/numpy/numpy/pull/25531>`__)\n\n\nChanges\n=======\n\n* ``np.gradient()`` now returns a tuple rather than a list making the\n  return value immutable.\n\n  (`gh-23861 <https://github.com/numpy/numpy/pull/23861>`__)\n\n* Being fully context and thread-safe, ``np.errstate`` can only\n  be entered once now.\n\n* ``np.setbufsize`` is now tied to ``np.errstate()``: leaving an\n  ``np.errstate`` context will also reset the ``bufsize``.\n\n  (`gh-23936 <https://github.com/numpy/numpy/pull/23936>`__)\n\n* A new public ``np.lib.array_utils`` submodule has been introduced and it\n  currently contains three functions: ``byte_bounds`` (moved from\n  ``np.lib.utils``), ``normalize_axis_tuple`` and ``normalize_axis_index``.\n\n  (`gh-24540 <https://github.com/numpy/numpy/pull/24540>`__)\n\n* Introduce `numpy.bool` as the new canonical name for NumPy's boolean dtype,\n  and make `numpy.bool_` an alias to it. Note that until NumPy 1.24,\n  ``np.bool`` was an alias to Python's builtin ``bool``. The new name helps\n  with array API standard compatibility and is a more intuitive name.\n\n  (`gh-25080 <https://github.com/numpy/numpy/pull/25080>`__)\n\n* The ``dtype.flags`` value was previously stored as a signed integer.\n  This means that the aligned dtype struct flag lead to negative flags being\n  set (-128 rather than 128). This flag is now stored unsigned (positive). Code\n  which checks flags manually may need to adapt.  This may include code\n  compiled with Cython 0.29.x.\n\n  (`gh-25816 <https://github.com/numpy/numpy/pull/25816>`__)\n\n\nRepresentation of NumPy scalars changed\n---------------------------------------\nAs per :ref:`NEP 51 <NEP51>`, the scalar representation has been\nupdated to include the type information to avoid confusion with\nPython scalars.\n\nScalars are now printed as ``np.float64(3.0)`` rather than just ``3.0``.\nThis may disrupt workflows that store representations of numbers\n(e.g., to files) making it harder to read them. They should be stored as\nexplicit strings, for example by using ``str()`` or ``f\"{scalar!s}\"``.\nFor the time being, affected users can use ``np.set_printoptions(legacy=\"1.25\")``\nto get the old behavior (with possibly a few exceptions).\nDocumentation of downstream projects may require larger updates,\nif code snippets are tested.  We are working on tooling for\n`doctest-plus <https://github.com/scientific-python/pytest-doctestplus/issues/107>`__\nto facilitate updates.\n\n(`gh-22449 <https://github.com/numpy/numpy/pull/22449>`__)\n\n\nTruthiness of NumPy strings changed\n-----------------------------------\nNumPy strings previously were inconsistent about how they defined\nif the string is ``True`` or ``False`` and the definition did not\nmatch the one used by Python.\nStrings are now considered ``True`` when they are non-empty and\n``False`` when they are empty.\nThis changes the following distinct cases:\n\n* Casts from string to boolean were previously roughly equivalent\n  to ``string_array.astype(np.int64).astype(bool)``, meaning that only\n  valid integers could be cast.\n  Now a string of ``\"0\"`` will be considered ``True`` since it is not empty.\n  If you need the old behavior, you may use the above step (casting\n  to integer first) or ``string_array == \"0\"`` (if the input is only ever ``0`` or ``1``).\n  To get the new result on old NumPy versions use ``string_array != \"\"``.\n* ``np.nonzero(string_array)`` previously ignored whitespace so that\n  a string only containing whitespace was considered ``False``.\n  Whitespace is now considered ``True``.\n\nThis change does not affect ``np.loadtxt``, ``np.fromstring``, or ``np.genfromtxt``.\nThe first two still use the integer definition, while ``genfromtxt`` continues to\nmatch for ``\"true\"`` (ignoring case).\nHowever, if ``np.bool_`` is used as a converter the result will change.\n\nThe change does affect ``np.fromregex`` as it uses direct assignments.\n\n(`gh-23871 <https://github.com/numpy/numpy/pull/23871>`__)\n\n\nA ``mean`` keyword was added to var and std function\n----------------------------------------------------\nOften when the standard deviation is needed the mean is also needed. The same\nholds for the variance and the mean. Until now the mean is then calculated twice,\nthe change introduced here for the `~numpy.var` and `~numpy.std` functions\nallows for passing in a precalculated mean as an keyword argument. See the\ndocstrings for details and an example illustrating the speed-up.\n\n(`gh-24126 <https://github.com/numpy/numpy/pull/24126>`__)\n\n\nRemove datetime64 deprecation warning when constructing with timezone\n---------------------------------------------------------------------\nThe `numpy.datetime64` method now issues a UserWarning rather than a\nDeprecationWarning whenever a timezone is included in the datetime\nstring that is provided.\n\n(`gh-24193 <https://github.com/numpy/numpy/pull/24193>`__)\n\n\nDefault integer dtype is now 64-bit on 64-bit Windows\n-----------------------------------------------------\nThe default NumPy integer is now 64-bit on all 64-bit systems as the historic\n32-bit default on Windows was a common source of issues. Most users should not\nnotice this. The main issues may occur with code interfacing with libraries\nwritten in a compiled language like C.  For more information see\n:ref:`migration_windows_int64`.\n\n(`gh-24224 <https://github.com/numpy/numpy/pull/24224>`__)\n\n\nRenamed ``numpy.core`` to ``numpy._core``\n-----------------------------------------\nAccessing ``numpy.core`` now emits a DeprecationWarning. In practice\nwe have found that most downstream usage of ``numpy.core`` was to access\nfunctionality that is available in the main ``numpy`` namespace.\nIf for some reason you are using functionality in ``numpy.core`` that\nis not available in the main ``numpy`` namespace, this means you are likely\nusing private NumPy internals. You can still access these internals via\n``numpy._core`` without a deprecation warning but we do not provide any\nbackward compatibility guarantees for NumPy internals. Please open an issue\nif you think a mistake was made and something needs to be made public.\n\n(`gh-24634 <https://github.com/numpy/numpy/pull/24634>`__)\n\nThe \"relaxed strides\" debug build option, which was previously enabled through\nthe ``NPY_RELAXED_STRIDES_DEBUG`` environment variable or the\n``-Drelaxed-strides-debug`` config-settings flag has been removed.\n\n(`gh-24717 <https://github.com/numpy/numpy/pull/24717>`__)\n\n\nRedefinition of ``np.intp``/``np.uintp`` (almost never a change)\n----------------------------------------------------------------\nDue to the actual use of these types almost always matching the use of\n``size_t``/``Py_ssize_t`` this is now the definition in C.\nPreviously, it matched ``intptr_t`` and ``uintptr_t`` which would often\nhave been subtly incorrect.\nThis has no effect on the vast majority of machines since the size\nof these types only differ on extremely niche platforms.\n\nHowever, it means that:\n\n* Pointers may not necessarily fit into an ``intp`` typed array anymore.\n  The ``p`` and ``P`` character codes can still be used, however.\n* Creating ``intptr_t`` or ``uintptr_t`` typed arrays in C remains possible\n  in a cross-platform way via ``PyArray_DescrFromType('p')``.\n* The new character codes ``nN`` were introduced.\n* It is now correct to use the Python C-API functions when parsing\n  to ``npy_intp`` typed arguments.\n\n(`gh-24888 <https://github.com/numpy/numpy/pull/24888>`__)\n\n\n``numpy.fft.helper`` made private\n---------------------------------\n``numpy.fft.helper`` was renamed to ``numpy.fft._helper`` to indicate\nthat it is a private submodule. All public functions exported by it\nshould be accessed from `numpy.fft`.\n\n(`gh-24945 <https://github.com/numpy/numpy/pull/24945>`__)\n\n\n``numpy.linalg.linalg`` made private\n------------------------------------\n``numpy.linalg.linalg`` was renamed to ``numpy.linalg._linalg``\nto indicate that it is a private submodule. All public functions\nexported by it should be accessed from `numpy.linalg`.\n\n(`gh-24946 <https://github.com/numpy/numpy/pull/24946>`__)\n\n\nOut-of-bound axis not the same as ``axis=None``\n-----------------------------------------------\nIn some cases ``axis=32`` or for concatenate any large value\nwas the same as ``axis=None``.\nExcept for ``concatenate`` this was deprecate.\nAny out of bound axis value will now error, make sure to use\n``axis=None``.\n\n(`gh-25149 <https://github.com/numpy/numpy/pull/25149>`__)\n\n.. _copy-keyword-changes-2.0:\n\n\nNew ``copy`` keyword meaning for ``array`` and ``asarray`` constructors\n-----------------------------------------------------------------------\nNow `numpy.array` and `numpy.asarray` support three values for ``copy`` parameter:\n\n* ``None`` - A copy will only be made if it is necessary.\n* ``True`` - Always make a copy.\n* ``False`` - Never make a copy. If a copy is required a ``ValueError`` is raised.\n\nThe meaning of ``False`` changed as it now raises an exception if a copy is needed.\n\n(`gh-25168 <https://github.com/numpy/numpy/pull/25168>`__)\n\n\nThe ``__array__`` special method now takes a ``copy`` keyword argument.\n-----------------------------------------------------------------------\nNumPy will pass ``copy`` to the ``__array__`` special method in situations where\nit would be set to a non-default value (e.g. in a call to\n``np.asarray(some_object, copy=False)``). Currently, if an\nunexpected keyword argument error is raised after this, NumPy will print a\nwarning and re-try without the ``copy`` keyword argument. Implementations of\nobjects implementing the ``__array__`` protocol should accept a ``copy`` keyword\nargument with the same meaning as when passed to `numpy.array` or\n`numpy.asarray`.\n\n(`gh-25168 <https://github.com/numpy/numpy/pull/25168>`__)\n\n\nCleanup of initialization of ``numpy.dtype`` with strings with commas\n---------------------------------------------------------------------\nThe interpretation of strings with commas is changed slightly, in that a\ntrailing comma will now always create a structured dtype.  E.g., where\npreviously ``np.dtype(\"i\")`` and ``np.dtype(\"i,\")`` were treated as identical,\nnow ``np.dtype(\"i,\")`` will create a structured dtype, with a single\nfield. This is analogous to ``np.dtype(\"i,i\")`` creating a structured dtype\nwith two fields, and makes the behaviour consistent with that expected of\ntuples.\n\nAt the same time, the use of single number surrounded by parenthesis to\nindicate a sub-array shape, like in ``np.dtype(\"(2)i,\")``, is deprecated.\nInstead; one should use ``np.dtype(\"(2,)i\")`` or ``np.dtype(\"2i\")``.\nEventually, using a number in parentheses will raise an exception, like is the\ncase for initializations without a comma, like ``np.dtype(\"(2)i\")``.\n\n(`gh-25434 <https://github.com/numpy/numpy/pull/25434>`__)\n\n\nChange in how complex sign is calculated\n----------------------------------------\nFollowing the array API standard, the complex sign is now calculated as\n``z / |z|`` (instead of the rather less logical case where the sign of\nthe real part was taken, unless the real part was zero, in which case\nthe sign of the imaginary part was returned).  Like for real numbers,\nzero is returned if ``z==0``.\n\n(`gh-25441 <https://github.com/numpy/numpy/pull/25441>`__)\n\n\nReturn types of functions that returned a list of arrays\n--------------------------------------------------------\nFunctions that returned a list of ndarrays have been changed to return a tuple\nof ndarrays instead. Returning tuples consistently whenever a sequence of\narrays is returned makes it easier for JIT compilers like Numba, as well as for\nstatic type checkers in some cases, to support these functions. Changed\nfunctions are: `~numpy.atleast_1d`, `~numpy.atleast_2d`, `~numpy.atleast_3d`,\n`~numpy.broadcast_arrays`, `~numpy.meshgrid`, `~numpy.ogrid`,\n`~numpy.histogramdd`.\n\n\n``np.unique`` ``return_inverse`` shape for multi-dimensional inputs\n-------------------------------------------------------------------\nWhen multi-dimensional inputs are passed to ``np.unique`` with ``return_inverse=True``,\nthe ``unique_inverse`` output is now shaped such that the input can be reconstructed\ndirectly using ``np.take(unique, unique_inverse)`` when ``axis=None``, and\n``np.take_along_axis(unique, unique_inverse, axis=axis)`` otherwise.\n\n(`gh-25553 <https://github.com/numpy/numpy/pull/25553>`__,\n`gh-25570 <https://github.com/numpy/numpy/pull/25570>`__)\n\n\n``any`` and ``all`` return booleans for object arrays\n-----------------------------------------------------\nThe ``any`` and ``all`` functions and methods now return\nbooleans also for object arrays.  Previously, they did\na reduction which behaved like the Python ``or`` and\n``and`` operators which evaluates to one of the arguments.\nYou can use ``np.logical_or.reduce`` and ``np.logical_and.reduce``\nto achieve the previous behavior.\n\n(`gh-25712 <https://github.com/numpy/numpy/pull/25712>`__)\n\n``np.can_cast`` cannot be called on Python int, float, or complex\n-----------------------------------------------------------------\n``np.can_cast`` cannot be called with Python int, float, or complex instances\nanymore.  This is because NEP 50 means that the result of ``can_cast`` must\nnot depend on the value passed in.\nUnfortunately, for Python scalars whether a cast should be considered\n``\"same_kind\"`` or ``\"safe\"`` may depend on the context and value so that\nthis is currently not implemented.\nIn some cases, this means you may have to add a specific path for:\n``if type(obj) in (int, float, complex): ...``.\n\n(`gh-26393 <https://github.com/numpy/numpy/pull/26393>`__)\n\n\nChecksums\n=========\n\nMD5\n---\n::\n\n    68918d8a47bdb8032d3c29ba0b7aa922  numpy-2.0.0rc2-cp310-cp310-macosx_10_9_x86_64.whl\n    28ef21e0db45a843901d5ecb203004f3  numpy-2.0.0rc2-cp310-cp310-macosx_11_0_arm64.whl\n    b0fbed65410612a81da2610887fcce7a  numpy-2.0.0rc2-cp310-cp310-macosx_14_0_arm64.whl\n    0e263a8bb87d32496e6de1555b6de0d7  numpy-2.0.0rc2-cp310-cp310-macosx_14_0_x86_64.whl\n    3700463b63c17514a42540f75f97e109  numpy-2.0.0rc2-cp310-cp310-manylinux_2_17_aarch64.manylinux2014_aarch64.whl\n    69c0e5b2a6054cee4cef3cfadf5bfc68  numpy-2.0.0rc2-cp310-cp310-manylinux_2_17_x86_64.manylinux2014_x86_64.whl\n    8b6547f02d1fb76a3436900146509476  numpy-2.0.0rc2-cp310-cp310-musllinux_1_1_aarch64.whl\n    85008275bc2ebb5d540ec89d20f95d72  numpy-2.0.0rc2-cp310-cp310-musllinux_1_1_x86_64.whl\n    46d1b93d2f2a6985d6440e010fe231a6  numpy-2.0.0rc2-cp310-cp310-win32.whl\n    df23c9ab080e695009e6c9dfc5c9dfee  numpy-2.0.0rc2-cp310-cp310-win_amd64.whl\n    4f4ac0bbff2152b95851f720be6e04ff  numpy-2.0.0rc2-cp311-cp311-macosx_10_9_x86_64.whl\n    df05a737d40018381c465e083fda65ba  numpy-2.0.0rc2-cp311-cp311-macosx_11_0_arm64.whl\n    9f3bbbce699559418b713f24bac5fd12  numpy-2.0.0rc2-cp311-cp311-macosx_14_0_arm64.whl\n    ced25c7ad09b414f941584582c52ce54  numpy-2.0.0rc2-cp311-cp311-macosx_14_0_x86_64.whl\n    b3af5409624e6aafb31107bd52bb8448  numpy-2.0.0rc2-cp311-cp311-manylinux_2_17_aarch64.manylinux2014_aarch64.whl\n    2859530bd0234983dadaa51b44a09daf  numpy-2.0.0rc2-cp311-cp311-manylinux_2_17_x86_64.manylinux2014_x86_64.whl\n    de6b8fe89c20bd85652679bb4a4671ef  numpy-2.0.0rc2-cp311-cp311-musllinux_1_1_aarch64.whl\n    2f0f3fed01479ee14a05aa1fc960d33a  numpy-2.0.0rc2-cp311-cp311-musllinux_1_1_x86_64.whl\n    0542e8d87c48155e1c8534e2a39f5e7a  numpy-2.0.0rc2-cp311-cp311-win32.whl\n    b7f451c340e92eb3d8b31ea5390f7340  numpy-2.0.0rc2-cp311-cp311-win_amd64.whl\n    f41d4e26c72340801d6f2bb609edba46  numpy-2.0.0rc2-cp312-cp312-macosx_10_9_x86_64.whl\n    1f8b24cc5b3006d778651e9ca9f7ed8c  numpy-2.0.0rc2-cp312-cp312-macosx_11_0_arm64.whl\n    5fd09e2e0fcb38fddac7b3ef1807ed82  numpy-2.0.0rc2-cp312-cp312-macosx_14_0_arm64.whl\n    f6eca0f2a9c770f6c6a4ba551ad7e237  numpy-2.0.0rc2-cp312-cp312-macosx_14_0_x86_64.whl\n    21b03eca64e88b952d843a70185e4144  numpy-2.0.0rc2-cp312-cp312-manylinux_2_17_aarch64.manylinux2014_aarch64.whl\n    f7631a072b83fc080662c3f435ba6fd4  numpy-2.0.0rc2-cp312-cp312-manylinux_2_17_x86_64.manylinux2014_x86_64.whl\n    2a62e6cffd78fd3d35c9142d4c214c00  numpy-2.0.0rc2-cp312-cp312-musllinux_1_1_aarch64.whl\n    25467c8e576bbc140bafe38f3b1fdd60  numpy-2.0.0rc2-cp312-cp312-musllinux_1_1_x86_64.whl\n    b7d74f54199d7fa355ec4abc3f2cafff  numpy-2.0.0rc2-cp312-cp312-win32.whl\n    351eb69f9e0e69b06d13a8c03733e5e6  numpy-2.0.0rc2-cp312-cp312-win_amd64.whl\n    c774b6e40b62f0503788cd7042bf85a1  numpy-2.0.0rc2-cp39-cp39-macosx_10_9_x86_64.whl\n    ef664eaadd0796fbc37fc3cc0c498c2e  numpy-2.0.0rc2-cp39-cp39-macosx_11_0_arm64.whl\n    f9a1d24dbeaa6433b827d82b9622b04b  numpy-2.0.0rc2-cp39-cp39-macosx_14_0_arm64.whl\n    8ea2a873c471a5180d8a316c14abb09f  numpy-2.0.0rc2-cp39-cp39-macosx_14_0_x86_64.whl\n    dce70c212e9c321ca189867f7ebc8e03  numpy-2.0.0rc2-cp39-cp39-manylinux_2_17_aarch64.manylinux2014_aarch64.whl\n    feacd9a21c6de648e8117bc1cc36fcc5  numpy-2.0.0rc2-cp39-cp39-manylinux_2_17_x86_64.manylinux2014_x86_64.whl\n    cd34c2b0f9e25d80d2c4bd70717d565b  numpy-2.0.0rc2-cp39-cp39-musllinux_1_1_aarch64.whl\n    c1efda069b8c8826a6ba6d7a49ada148  numpy-2.0.0rc2-cp39-cp39-musllinux_1_1_x86_64.whl\n    4ef25fd7e575fa64d4c4e9dfdc1c9174  numpy-2.0.0rc2-cp39-cp39-win32.whl\n    d35cd476de68374a10d56737a882e735  numpy-2.0.0rc2-cp39-cp39-win_amd64.whl\n    b83c7ccda03ec1a1fec900c149bdc90d  numpy-2.0.0rc2-pp39-pypy39_pp73-macosx_10_9_x86_64.whl\n    0aff6e5f70e2d9fa299e3895294bd7a8  numpy-2.0.0rc2-pp39-pypy39_pp73-macosx_14_0_x86_64.whl\n    dd1c5bf6559fe41b21c81097e97232c3  numpy-2.0.0rc2-pp39-pypy39_pp73-manylinux_2_17_x86_64.manylinux2014_x86_64.whl\n    ecab2eae88f6ba9421787655909045b7  numpy-2.0.0rc2-pp39-pypy39_pp73-win_amd64.whl\n    884d0fe28f77f07a3d51ba905ffdf0d3  numpy-2.0.0rc2.tar.gz\n\nSHA256\n------\n::\n\n    53286933bf3be7a13459c7a7885ce0935aff56fe0baf280f0e6d80e75cc3ee3c  numpy-2.0.0rc2-cp310-cp310-macosx_10_9_x86_64.whl\n    2bc615498fce8e15b99c1b4d7e018ffebf7bd1a288665b3b916357bdf6725d6a  numpy-2.0.0rc2-cp310-cp310-macosx_11_0_arm64.whl\n    159d9c21a2989afdfebb638f60268becbc3da07eb224d9221a7c37255216feb6  numpy-2.0.0rc2-cp310-cp310-macosx_14_0_arm64.whl\n    c58bc6aac83175dcfa02a0ef92b7a7fff5a0420014202f052a9af6214684e6ac  numpy-2.0.0rc2-cp310-cp310-macosx_14_0_x86_64.whl\n    9b07a5c460941ae5ef8cde51c04b635af58abbbd55387ad6257dbdfda043290a  numpy-2.0.0rc2-cp310-cp310-manylinux_2_17_aarch64.manylinux2014_aarch64.whl\n    0a49e876be11b4409eb3120841c7d2dba1f63549224f85fa4ab7ee83288c3b41  numpy-2.0.0rc2-cp310-cp310-manylinux_2_17_x86_64.manylinux2014_x86_64.whl\n    951164e9919664a3e5e605715809173b47f14329b586e24ec05e66ae516ce11b  numpy-2.0.0rc2-cp310-cp310-musllinux_1_1_aarch64.whl\n    201c0e05854d25f16b15851380c07d61aab34eef76a2acf1c3fcc4bda0879b0b  numpy-2.0.0rc2-cp310-cp310-musllinux_1_1_x86_64.whl\n    800ff28d0da25fca3f843c19035005b73c76350be7c6fa6061c8fcdd248aced9  numpy-2.0.0rc2-cp310-cp310-win32.whl\n    2a9a5ee4b090af548a1019bb76b53b02cb37f09dc002386349ee5e79ff54c40e  numpy-2.0.0rc2-cp310-cp310-win_amd64.whl\n    6d23b0db1fd4ad8225fd32f39036b07a5052398929a5af5291379bceac49d95a  numpy-2.0.0rc2-cp311-cp311-macosx_10_9_x86_64.whl\n    a99ac361ddb0ef14894c3e7405aa98ffdfe6d0101b9f4a2e931f3912f3b43085  numpy-2.0.0rc2-cp311-cp311-macosx_11_0_arm64.whl\n    6aba1c147f69ee1fb8afb44e93178e92d2aa9a3bf5374b6f1cb53ee1cae1376d  numpy-2.0.0rc2-cp311-cp311-macosx_14_0_arm64.whl\n    4f3a4c676ab4ce211e5886cb16cc282e9e18b352b2b1427bbb4c104f9d80f12a  numpy-2.0.0rc2-cp311-cp311-macosx_14_0_x86_64.whl\n    12d3bf0cac2aec23e10b6927ee063aa6cf7ca8deba1d3c5702faa0ea5cfb8049  numpy-2.0.0rc2-cp311-cp311-manylinux_2_17_aarch64.manylinux2014_aarch64.whl\n    a44b0ebf7ef61c289a33c76247874177c446083c5236c7e7e0595350883e0424  numpy-2.0.0rc2-cp311-cp311-manylinux_2_17_x86_64.manylinux2014_x86_64.whl\n    0e146557fdede5a7434a788648e62a9e87db8c6e05136a92483e2c2180ad4bab  numpy-2.0.0rc2-cp311-cp311-musllinux_1_1_aarch64.whl\n    01ac116e2f053f283ac5292fcd146f8f223d4b6cd343beab341748818692a2de  numpy-2.0.0rc2-cp311-cp311-musllinux_1_1_x86_64.whl\n    74dcc392725837896532ec7d65506cbeaecee237871b36ae813521bc3e2c40ed  numpy-2.0.0rc2-cp311-cp311-win32.whl\n    225c2b3303eb2ebf745ab954ef8723cd60f64d926edd73dc963141538ddc48ed  numpy-2.0.0rc2-cp311-cp311-win_amd64.whl\n    32207294f21331ae0d7fd33dc9324447a8117d5af15a0895f39af3441d4af70e  numpy-2.0.0rc2-cp312-cp312-macosx_10_9_x86_64.whl\n    a666cc3d55f301b86edc7f1eaef10ffa1f79206c4b196a1f2649f91c8a1b49b6  numpy-2.0.0rc2-cp312-cp312-macosx_11_0_arm64.whl\n    fa5485c565ca222ba69c5fe04ebd8a89f884615466d74e0856e03fff873bcc43  numpy-2.0.0rc2-cp312-cp312-macosx_14_0_arm64.whl\n    2202abe3e8afb2b88102a75f1beb888f380c09d40898db0f1df5d847623701d5  numpy-2.0.0rc2-cp312-cp312-macosx_14_0_x86_64.whl\n    6b93d6b401db67948a4997e2c45e958df65b98b1a9183e96e96e491f9fb3c2fe  numpy-2.0.0rc2-cp312-cp312-manylinux_2_17_aarch64.manylinux2014_aarch64.whl\n    1691e64c838d33fdba59ac7043144194f8f847b5fec6f47ecd9e117418cc9bdc  numpy-2.0.0rc2-cp312-cp312-manylinux_2_17_x86_64.manylinux2014_x86_64.whl\n    7288d8ac70be23ff29df8da51840aad8f7acd9120d27cd7a61488b96bc5ad68b  numpy-2.0.0rc2-cp312-cp312-musllinux_1_1_aarch64.whl\n    9dd61b79856aed44f818fffe1555fa7ef8f6ffa5b5211cde473e2e33f7a5bd92  numpy-2.0.0rc2-cp312-cp312-musllinux_1_1_x86_64.whl\n    83c76a11c5e5a343fb1cb87afec147d6bebac91758c9c9f01d2c692ae4750e27  numpy-2.0.0rc2-cp312-cp312-win32.whl\n    24bcf0cdd31debdcb80e1f3bb7dba224c9a93a66f48ff1b1df2cb9a53eede944  numpy-2.0.0rc2-cp312-cp312-win_amd64.whl\n    87172a69d7eafb00ea1b734dba9ffebb474505082078ec2d95b99918f14a0a0e  numpy-2.0.0rc2-cp39-cp39-macosx_10_9_x86_64.whl\n    e13a1fa60a471b79a53de8abb87e1e0ad53e6899edee8a29b4db3edccee53d65  numpy-2.0.0rc2-cp39-cp39-macosx_11_0_arm64.whl\n    32725b717f902e7243d270e50ff9487a499820233b57c3e71b33f65a84707e38  numpy-2.0.0rc2-cp39-cp39-macosx_14_0_arm64.whl\n    f8c7012dd6779f078e3f42e19a2204275abe4d68a80dc807a97caf42e825d9c3  numpy-2.0.0rc2-cp39-cp39-macosx_14_0_x86_64.whl\n    a0202e282ec9d45fc6ddb85777fddeea1107fe4555be50dd22d044e7fe01860c  numpy-2.0.0rc2-cp39-cp39-manylinux_2_17_aarch64.manylinux2014_aarch64.whl\n    5262d69981502ded9b397c3fd5a20a1f2c91a66b21325ddff5e6d88486eee6fa  numpy-2.0.0rc2-cp39-cp39-manylinux_2_17_x86_64.manylinux2014_x86_64.whl\n    6fe254c271f8ce4c2e60250f8ee80684abd2be748af84312a05b7614c3ae3b8d  numpy-2.0.0rc2-cp39-cp39-musllinux_1_1_aarch64.whl\n    0a2cf839a7d6cc0b854ba81cdfee96aad2c7e4d558c7e23ca82d08e4f7d7daa7  numpy-2.0.0rc2-cp39-cp39-musllinux_1_1_x86_64.whl\n    9ea90fb601d5ac32ff7f9f0a3bf7ccab5971a0196364b9429734bd270cd2fa67  numpy-2.0.0rc2-cp39-cp39-win32.whl\n    9e00367261ee0347208a8bcc355b6470b084cb777c45141e098328b67b02c98b  numpy-2.0.0rc2-cp39-cp39-win_amd64.whl\n    da6ab9dab471668155e0b208ab710417a7407397794a88b3ccbece5bcf10091d  numpy-2.0.0rc2-pp39-pypy39_pp73-macosx_10_9_x86_64.whl\n    b3ba5f436c6de9b8829f231e9eb9e394aa819efce9eab697cd4e558b0b8c6cc8  numpy-2.0.0rc2-pp39-pypy39_pp73-macosx_14_0_x86_64.whl\n    d5211fd4e126699b16b8573eef007f25afb9459d966b35430908798b24298e3b  numpy-2.0.0rc2-pp39-pypy39_pp73-manylinux_2_17_x86_64.manylinux2014_x86_64.whl\n    0d5cfbf693408cf1ee72d79d36d51f7b63f5e46a5e9cf12f63d4ed07c0f876e0  numpy-2.0.0rc2-pp39-pypy39_pp73-win_amd64.whl\n    868e9edbee689d6fdb7957c0b790de2b2123e6feff5d66045d10760c521f2c00  numpy-2.0.0rc2.tar.gz\n\n\n==========================\n", "1.26.0": "==========================\n\nThe NumPy 1.26.0 release is a continuation of the 1.25.x release cycle with the\naddition of Python 3.12.0 support. Python 3.12 dropped distutils, consequently\nsupporting it required finding a replacement for the setup.py/distutils based\nbuild system NumPy was using. We have chosen to use the Meson build system\ninstead, and this is the first NumPy release supporting it. This is also the\nfirst release that supports Cython 3.0 in addition to retaining 0.29.X\ncompatibility. Supporting those two upgrades was a large project, over 100\nfiles have been touched in this release. The changelog doesn't capture the full\nextent of the work, special thanks to Ralf Gommers, Sayed Adel, St\u00e9fan van der\nWalt, and Matti Picus who did much of the work in the main development branch.\n\nThe highlights of this release are:\n\n- Python 3.12.0 support.\n- Cython 3.0.0 compatibility.\n- Use of the Meson build system\n- Updated SIMD support\n- f2py fixes, meson and bind(x) support\n\nThe Python versions supported in this release are 3.9-3.12.\n\n\nNew Features\n============\n\nArray API v2022.12 support in ``numpy.array_api``\n-------------------------------------------------\n\n- ``numpy.array_api`` now full supports the `v2022.12 version\n  <https://data-apis.org/array-api/2022.12>`__ of the array API standard. Note\n  that this does not yet include the optional ``fft`` extension in the\n  standard.\n\n(`gh-23789 <https://github.com/numpy/numpy/pull/23789>`__)\n\nSupport for the updated Accelerate BLAS/LAPACK library\n------------------------------------------------------\nSupport for the updated Accelerate BLAS/LAPACK library, including ILP64 (64-bit\ninteger) support, in macOS 13.3 has been added. This brings arm64 support, and\nsignificant performance improvements of up to 10x for commonly used linear\nalgebra operations. When Accelerate is selected at build time, the 13.3+\nversion will automatically be used if available.\n\n(`gh-24053 <https://github.com/numpy/numpy/pull/24053>`__)\n\n``meson`` backend for ``f2py``\n------------------------------\n``f2py`` in compile mode (i.e. ``f2py -c``) now accepts the ``--backend meson``\noption. This is the default option for Python ``3.12`` on-wards. Older versions\nwill still default to ``--backend distutils``.\n\nTo support this in realistic use-cases, in compile mode ``f2py`` takes a\n``--dep`` flag one or many times which maps to ``dependency()`` calls in the\n``meson`` backend, and does nothing in the ``distutils`` backend.\n\nThere are no changes for users of ``f2py`` only as a code generator, i.e.\nwithout ``-c``.\n\n(`gh-24532 <https://github.com/numpy/numpy/pull/24532>`__)\n\n``bind(c)`` support for ``f2py``\n--------------------------------\nBoth functions and subroutines can be annotated with ``bind(c)``. ``f2py`` will\nhandle both the correct type mapping, and preserve the unique label for other\n``C`` interfaces.\n\n**Note:** ``bind(c, name = 'routine_name_other_than_fortran_routine')`` is not\nhonored by the ``f2py`` bindings by design, since ``bind(c)`` with the ``name``\nis meant to guarantee only the same name in ``C`` and ``Fortran``, not in\n``Python`` and ``Fortran``.\n\n(`gh-24555 <https://github.com/numpy/numpy/pull/24555>`__)\n\n\nImprovements\n============\n\n``iso_c_binding`` support for ``f2py``\n--------------------------------------\nPreviously, users would have to define their own custom ``f2cmap`` file to use\ntype mappings defined by the Fortran2003 ``iso_c_binding`` intrinsic module.\nThese type maps are now natively supported by ``f2py``\n\n(`gh-24555 <https://github.com/numpy/numpy/pull/24555>`__)\n\n\nBuild system changes\n====================\n\nIn this release, NumPy has switched to Meson as the build system and\nmeson-python as the build backend. Installing NumPy or building a wheel can be\ndone with standard tools like ``pip`` and ``pypa/build``. The following are\nsupported:\n\n- Regular installs: ``pip install numpy`` or (in a cloned repo)\n  ``pip install .``\n- Building a wheel: ``python -m build`` (preferred), or ``pip wheel .``\n- Editable installs: ``pip install -e . --no-build-isolation``\n- Development builds through the custom CLI implemented with\n  `spin <https://github.com/scientific-python/spin>`__: ``spin build``.\n\nAll the regular ``pip`` and ``pypa/build`` flags (e.g.,\n``--no-build-isolation``) should work as expected.\n\nNumPy-specific build customization\n----------------------------------\n\nMany of the NumPy-specific ways of customizing builds have changed.\nThe ``NPY_*`` environment variables which control BLAS/LAPACK, SIMD, threading,\nand other such options are no longer supported, nor is a ``site.cfg`` file to\nselect BLAS and LAPACK. Instead, there are command-line flags that can be\npassed to the build via ``pip``/``build``'s config-settings interface. These\nflags are all listed in the ``meson_options.txt`` file in the root of the repo.\nDetailed documented will be available before the final 1.26.0 release; for now\nplease see `the SciPy \"building from source\" docs\n<http://scipy.github.io/devdocs/building/index.html>`__ since most build\ncustomization works in an almost identical way in SciPy as it does in NumPy.\n\nBuild dependencies\n------------------\n\nWhile the runtime dependencies of NumPy have not changed, the build\ndependencies have. Because we temporarily vendor Meson and meson-python,\nthere are several new dependencies - please see the ``[build-system]`` section\nof ``pyproject.toml`` for details.\n\nTroubleshooting\n---------------\n\nThis build system change is quite large. In case of unexpected issues, it is\nstill possible to use a ``setup.py``-based build as a temporary workaround (on\nPython 3.9-3.11, not 3.12), by copying ``pyproject.toml.setuppy`` to\n``pyproject.toml``. However, please open an issue with details on the NumPy\nissue tracker. We aim to phase out ``setup.py`` builds as soon as possible, and\ntherefore would like to see all potential blockers surfaced early on in the\n1.26.0 release cycle.\n\n\nContributors\n============\n\nA total of 18 people contributed to this release.  People with a \"+\" by their\nnames contributed a patch for the first time.\n\n* DWesl\n* Albert Steppi +\n* Bas van Beek\n* Charles Harris\n* Developer-Ecosystem-Engineering\n* Jake Vanderplas\n* Marten van Kerkwijk\n* Matti Picus\n* Melissa Weber Mendon\u00e7a\n* Namami Shanker\n* Nathan Goldbaum\n* Ralf Gommers\n* Rohit Goswami\n* Sayed Adel\n* Sebastian Berg\n* Stefan van der Walt\n* Tyler Reddy\n* Warren Weckesser\n\n\nPull requests merged\n====================\n\nA total of 51 pull requests were merged for this release.\n\n* `24305 <https://github.com/numpy/numpy/pull/24305>`__: MAINT: Prepare 1.26.x branch for development\n* `24308 <https://github.com/numpy/numpy/pull/24308>`__: MAINT: Massive update of files from main for numpy 1.26\n* `24322 <https://github.com/numpy/numpy/pull/24322>`__: CI: fix wheel builds on the 1.26.x branch\n* `24326 <https://github.com/numpy/numpy/pull/24326>`__: BLD: update openblas to newer version\n* `24327 <https://github.com/numpy/numpy/pull/24327>`__: TYP: Trim down the ``_NestedSequence.__getitem__`` signature\n* `24328 <https://github.com/numpy/numpy/pull/24328>`__: BUG: fix choose refcount leak\n* `24337 <https://github.com/numpy/numpy/pull/24337>`__: TST: fix running the test suite in builds without BLAS/LAPACK\n* `24338 <https://github.com/numpy/numpy/pull/24338>`__: BUG: random: Fix generation of nan by dirichlet.\n* `24340 <https://github.com/numpy/numpy/pull/24340>`__: MAINT: Dependabot updates from main\n* `24342 <https://github.com/numpy/numpy/pull/24342>`__: MAINT: Add back NPY_RUN_MYPY_IN_TESTSUITE=1\n* `24353 <https://github.com/numpy/numpy/pull/24353>`__: MAINT: Update ``extbuild.py`` from main.\n* `24356 <https://github.com/numpy/numpy/pull/24356>`__: TST: fix distutils tests for deprecations in recent setuptools...\n* `24375 <https://github.com/numpy/numpy/pull/24375>`__: MAINT: Update cibuildwheel to version 2.15.0\n* `24381 <https://github.com/numpy/numpy/pull/24381>`__: MAINT: Fix codespaces setup.sh script\n* `24403 <https://github.com/numpy/numpy/pull/24403>`__: ENH: Vendor meson for multi-target build support\n* `24404 <https://github.com/numpy/numpy/pull/24404>`__: BLD: vendor meson-python to make the Windows builds with SIMD...\n* `24405 <https://github.com/numpy/numpy/pull/24405>`__: BLD, SIMD: The meson CPU dispatcher implementation\n* `24406 <https://github.com/numpy/numpy/pull/24406>`__: MAINT: Remove versioneer\n* `24409 <https://github.com/numpy/numpy/pull/24409>`__: REL: Prepare for the NumPy 1.26.0b1 release.\n* `24453 <https://github.com/numpy/numpy/pull/24453>`__: MAINT: Pin upper version of sphinx.\n* `24455 <https://github.com/numpy/numpy/pull/24455>`__: ENH: Add prefix to _ALIGN Macro\n* `24456 <https://github.com/numpy/numpy/pull/24456>`__: BUG: cleanup warnings [skip azp][skip circle][skip travis][skip...\n* `24460 <https://github.com/numpy/numpy/pull/24460>`__: MAINT: Upgrade to spin 0.5\n* `24495 <https://github.com/numpy/numpy/pull/24495>`__: BUG: ``asv dev`` has been removed, use ``asv run``.\n* `24496 <https://github.com/numpy/numpy/pull/24496>`__: BUG: Fix meson build failure due to unchanged inplace auto-generated...\n* `24521 <https://github.com/numpy/numpy/pull/24521>`__: BUG: fix issue with git-version script, needs a shebang to run\n* `24522 <https://github.com/numpy/numpy/pull/24522>`__: BUG: Use a default assignment for git_hash [skip ci]\n* `24524 <https://github.com/numpy/numpy/pull/24524>`__: BUG: fix NPY_cast_info error handling in choose\n* `24526 <https://github.com/numpy/numpy/pull/24526>`__: BUG: Fix common block handling in f2py\n* `24541 <https://github.com/numpy/numpy/pull/24541>`__: CI,TYP: Bump mypy to 1.4.1\n* `24542 <https://github.com/numpy/numpy/pull/24542>`__: BUG: Fix assumed length f2py regression\n* `24544 <https://github.com/numpy/numpy/pull/24544>`__: MAINT: Harmonize fortranobject\n* `24545 <https://github.com/numpy/numpy/pull/24545>`__: TYP: add kind argument to numpy.isin type specification\n* `24561 <https://github.com/numpy/numpy/pull/24561>`__: BUG: fix comparisons between masked and unmasked structured arrays\n* `24590 <https://github.com/numpy/numpy/pull/24590>`__: CI: Exclude import libraries from list of DLLs on Cygwin.\n* `24591 <https://github.com/numpy/numpy/pull/24591>`__: BLD: fix ``_umath_linalg`` dependencies\n* `24594 <https://github.com/numpy/numpy/pull/24594>`__: MAINT: Stop testing on ppc64le.\n* `24602 <https://github.com/numpy/numpy/pull/24602>`__: BLD: meson-cpu: fix SIMD support on platforms with no features\n* `24606 <https://github.com/numpy/numpy/pull/24606>`__: BUG: Change Cython ``binding`` directive to \"False\".\n* `24613 <https://github.com/numpy/numpy/pull/24613>`__: ENH: Adopt new macOS Accelerate BLAS/LAPACK Interfaces, including...\n* `24614 <https://github.com/numpy/numpy/pull/24614>`__: DOC: Update building docs to use Meson\n* `24615 <https://github.com/numpy/numpy/pull/24615>`__: TYP: Add the missing ``casting`` keyword to ``np.clip``\n* `24616 <https://github.com/numpy/numpy/pull/24616>`__: TST: convert cython test from setup.py to meson\n* `24617 <https://github.com/numpy/numpy/pull/24617>`__: MAINT: Fixup ``fromnumeric.pyi``\n* `24622 <https://github.com/numpy/numpy/pull/24622>`__: BUG, ENH: Fix ``iso_c_binding`` type maps and fix ``bind(c)``...\n* `24629 <https://github.com/numpy/numpy/pull/24629>`__: TYP: Allow ``binary_repr`` to accept any object implementing...\n* `24630 <https://github.com/numpy/numpy/pull/24630>`__: TYP: Explicitly declare ``dtype`` and ``generic`` hashable\n* `24637 <https://github.com/numpy/numpy/pull/24637>`__: ENH: Refactor the typing \"reveal\" tests using `typing.assert_type`\n* `24638 <https://github.com/numpy/numpy/pull/24638>`__: MAINT: Bump actions/checkout from 3.6.0 to 4.0.0\n* `24647 <https://github.com/numpy/numpy/pull/24647>`__: ENH: ``meson`` backend for ``f2py``\n* `24648 <https://github.com/numpy/numpy/pull/24648>`__: MAINT: Refactor partial load Workaround for Clang\n\nChecksums\n=========\n\nMD5\n---\n::\n\n    9bcab451e9d0eadcc00ca8ce2f5938e7  numpy-1.26.0rc1-cp310-cp310-macosx_10_9_x86_64.whl\n    4b1c33742eaba91fb2a3fdf531c086f8  numpy-1.26.0rc1-cp310-cp310-macosx_11_0_arm64.whl\n    6adb6b6a762f256f5ca6c82b6a302912  numpy-1.26.0rc1-cp310-cp310-manylinux_2_17_aarch64.manylinux2014_aarch64.whl\n    c4dbed88820255134bcae15d02c658ed  numpy-1.26.0rc1-cp310-cp310-manylinux_2_17_x86_64.manylinux2014_x86_64.whl\n    72dbf4449513dc1ef51b59266199cf37  numpy-1.26.0rc1-cp310-cp310-musllinux_1_1_x86_64.whl\n    c25812360af41a904324503d7ca02cce  numpy-1.26.0rc1-cp310-cp310-win_amd64.whl\n    6bbaeaa8c54a084c749ad4ede57bbeb6  numpy-1.26.0rc1-cp311-cp311-macosx_10_9_x86_64.whl\n    f0585ce50c22914e0f039fd817a847c4  numpy-1.26.0rc1-cp311-cp311-macosx_11_0_arm64.whl\n    79e7deab2a43552aa4f4097183e6287d  numpy-1.26.0rc1-cp311-cp311-manylinux_2_17_aarch64.manylinux2014_aarch64.whl\n    1f94542339a4e6327914398b7785876b  numpy-1.26.0rc1-cp311-cp311-manylinux_2_17_x86_64.manylinux2014_x86_64.whl\n    3c3c3ea226bcf0e92796da621c0ac7fe  numpy-1.26.0rc1-cp311-cp311-musllinux_1_1_x86_64.whl\n    5d6bca28d5c43fc839e4d8eff3b3a35c  numpy-1.26.0rc1-cp311-cp311-win_amd64.whl\n    94df9fa058c650073de474555cc6f0dc  numpy-1.26.0rc1-cp312-cp312-macosx_10_9_x86_64.whl\n    2ef744a42b9db31f7ce4a0c7cb8b546d  numpy-1.26.0rc1-cp312-cp312-macosx_11_0_arm64.whl\n    cf2b61c8480245995348fc2ddc4f556f  numpy-1.26.0rc1-cp312-cp312-manylinux_2_17_aarch64.manylinux2014_aarch64.whl\n    18cea65bce62f924c34d3b0148db4669  numpy-1.26.0rc1-cp312-cp312-manylinux_2_17_x86_64.manylinux2014_x86_64.whl\n    5aede55c449bdc62e59230f786faa400  numpy-1.26.0rc1-cp312-cp312-musllinux_1_1_x86_64.whl\n    15c8199396b8adcfc9a6e4fb730d6faf  numpy-1.26.0rc1-cp312-cp312-win_amd64.whl\n    c9d97598b2bcaac53dc082106d0bc926  numpy-1.26.0rc1-cp39-cp39-macosx_10_9_x86_64.whl\n    8359d919806089cf48086c923e1b2e81  numpy-1.26.0rc1-cp39-cp39-macosx_11_0_arm64.whl\n    4322ecb6dd6db9dc704f54603622da72  numpy-1.26.0rc1-cp39-cp39-manylinux_2_17_aarch64.manylinux2014_aarch64.whl\n    a275abd27929fa7428c94b6c493798d7  numpy-1.26.0rc1-cp39-cp39-manylinux_2_17_x86_64.manylinux2014_x86_64.whl\n    a374c440c6233a78b0bb1bf11776e48f  numpy-1.26.0rc1-cp39-cp39-musllinux_1_1_x86_64.whl\n    3e540eca6628510c604099a6c0a79fb5  numpy-1.26.0rc1-cp39-cp39-win_amd64.whl\n    a7b15d45d9b18bd2f065be1eafa3cfea  numpy-1.26.0rc1-pp39-pypy39_pp73-macosx_10_9_x86_64.whl\n    b7e926a0415c30df7010400936922cd7  numpy-1.26.0rc1-pp39-pypy39_pp73-manylinux_2_17_x86_64.manylinux2014_x86_64.whl\n    8430d4acc483c66d76b8263ac90195e6  numpy-1.26.0rc1-pp39-pypy39_pp73-win_amd64.whl\n    23bf7c39807a9cce5c8ea0ba293b7dd9  numpy-1.26.0rc1.tar.gz\n\nSHA256\n------\n::\n\n    abe4b4414edd3dc61a2f6df6f0aa7711c654fc59f41a0eeae4c34b9bfc18aa22  numpy-1.26.0rc1-cp310-cp310-macosx_10_9_x86_64.whl\n    0e294b045e6fa8f071e4c88836b0df2167fc74ff8561138aa5cd69d1ee98b15e  numpy-1.26.0rc1-cp310-cp310-macosx_11_0_arm64.whl\n    38324eb42bcd45db0b509d02325cb0e3058b6cf05beaf5bd02c221a3133cc9ff  numpy-1.26.0rc1-cp310-cp310-manylinux_2_17_aarch64.manylinux2014_aarch64.whl\n    302003be9baeb79f07153426544f87f534eb9fe3b8399ac8ee8420f5cfd7ed5c  numpy-1.26.0rc1-cp310-cp310-manylinux_2_17_x86_64.manylinux2014_x86_64.whl\n    f8a9eb3d3f74978cb155a12a77046dae5b8d76bfcf56f76cc92f0d5976857ef9  numpy-1.26.0rc1-cp310-cp310-musllinux_1_1_x86_64.whl\n    a9b4723216f7970f571d0d71935b32ffe0eacd011befbaa977f34e928ece8c71  numpy-1.26.0rc1-cp310-cp310-win_amd64.whl\n    5db29b5d2c73a05ef7ed2a37a1ca8f9391579c402a57f6e0944daf755cf7d437  numpy-1.26.0rc1-cp311-cp311-macosx_10_9_x86_64.whl\n    180ef984616afd4d746961ac8c874ddd5d547ba8f7dd8a58c30bde398c95d15c  numpy-1.26.0rc1-cp311-cp311-macosx_11_0_arm64.whl\n    0e3c8d925204ba0aa887244adec030e71003b828d24731f9feb01526aed76458  numpy-1.26.0rc1-cp311-cp311-manylinux_2_17_aarch64.manylinux2014_aarch64.whl\n    01851e82e3256a6c0088e43e69279a0c96214bafa1be326c7a87390d91eb7d44  numpy-1.26.0rc1-cp311-cp311-manylinux_2_17_x86_64.manylinux2014_x86_64.whl\n    26571d9f63f49e7612fcfc4375ad23d6882e951bca335115ce440add1a565556  numpy-1.26.0rc1-cp311-cp311-musllinux_1_1_x86_64.whl\n    f10ef55f19e6634c10b87c5a7c3687461fe950680ebe16e85c03905bcbf6b205  numpy-1.26.0rc1-cp311-cp311-win_amd64.whl\n    b28cc269bbdd2b6e005241100a97460fdd574ce495fa0eeda3d290d8fd0c66fa  numpy-1.26.0rc1-cp312-cp312-macosx_10_9_x86_64.whl\n    965fedf11de8b621a20fe7182b95ef9ee76764bc1fc288e5b2cb6e8440372560  numpy-1.26.0rc1-cp312-cp312-macosx_11_0_arm64.whl\n    2ff5f4f14a772e0f86a250d6db86c4121bc1ce7d788f64053e82638e735bb61b  numpy-1.26.0rc1-cp312-cp312-manylinux_2_17_aarch64.manylinux2014_aarch64.whl\n    290c9be374026e63c6e5f5099a06c2cdfea33ff2935e7f46fcd9a1b38728c80c  numpy-1.26.0rc1-cp312-cp312-manylinux_2_17_x86_64.manylinux2014_x86_64.whl\n    d915b8e07e277a443da4525fd36403ca4f14dcb9cd237ab6a9aff73119b71820  numpy-1.26.0rc1-cp312-cp312-musllinux_1_1_x86_64.whl\n    3042f503964e1e5decacdfd0eeb0ed9eadf9b70ad1a8bb085ee277bd3ddf4362  numpy-1.26.0rc1-cp312-cp312-win_amd64.whl\n    3080a9ec21470a9b485e92a09baedb5136468d89b2f2a1896a27fa9e36341af2  numpy-1.26.0rc1-cp39-cp39-macosx_10_9_x86_64.whl\n    dd42d283561d0fe8911ff0576495a09928a3b53de2c5a6d1959e34a393e8ff65  numpy-1.26.0rc1-cp39-cp39-macosx_11_0_arm64.whl\n    d881436a9b325fa357b7ac32aac0be8c74921ab0f09d47139553e5da23383bc6  numpy-1.26.0rc1-cp39-cp39-manylinux_2_17_aarch64.manylinux2014_aarch64.whl\n    1c6967bfadb4723aa025a8a9870ff554f1b03c428740167ac6616c7df0c9d817  numpy-1.26.0rc1-cp39-cp39-manylinux_2_17_x86_64.manylinux2014_x86_64.whl\n    69580fae06143eb07300d1f1dace92f22dd4d47600e4832bea2b1685d7bc89e9  numpy-1.26.0rc1-cp39-cp39-musllinux_1_1_x86_64.whl\n    5241d904c9b651183c48b5b7f49e76715d96177def6a7a9bb5aa9e9984000786  numpy-1.26.0rc1-cp39-cp39-win_amd64.whl\n    6aa0bda5c93d09f8a0253cc902c6dc66de30228c08bd746d4cb4c73d7daee5bc  numpy-1.26.0rc1-pp39-pypy39_pp73-macosx_10_9_x86_64.whl\n    b6e353a18acbbd0253115477879fef4253e284891f37d08eeda6bf77556d1534  numpy-1.26.0rc1-pp39-pypy39_pp73-manylinux_2_17_x86_64.manylinux2014_x86_64.whl\n    53a6d1f073f8cad9c97a6e7f16eac552475db8246ce379c961edeafb3d0e3152  numpy-1.26.0rc1-pp39-pypy39_pp73-win_amd64.whl\n    49a8cafece27db51fd9ec78c044546b15b0c9bf95466c57ada9eeae64075c2f8  numpy-1.26.0rc1.tar.gz\n\n\n.. currentmodule:: numpy\n\n==========================\n", "1.19.0": "==========================\nThis NumPy release is marked by the removal of much technical debt: support for\nPython 2 has been removed, many deprecations have been expired, and\ndocumentation has been improved. The polishing of the random module continues\napace with bug fixes and better usability from Cython.\n\nThe Python versions supported for this release are 3.6-3.8. Downstream\ndevelopers should use Cython >= 0.29.16 for Python 3.8 support and\nOpenBLAS >= 3.7 to avoid problems on the Skylake architecture.\n\n\nHighlights\n==========\n\n* Code compatibility with Python versions < 3.6 (including Python 2) was\n  dropped from both the python and C code. The shims in ``numpy.compat`` will\n  remain to support third-party packages, but they may be deprecated in a\n  future release. Note that 1.19.x will *not* compile with earlier versions of\n  Python due to the use of f-strings.\n\n  (`gh-15233 <https://github.com/numpy/numpy/pull/15233>`__)\n\n\nExpired deprecations\n====================\n\n``numpy.insert`` and ``numpy.delete`` can no longer be passed an axis on 0d arrays\n----------------------------------------------------------------------------------\nThis concludes a deprecation from 1.9, where when an ``axis`` argument was\npassed to a call to ``~numpy.insert`` and ``~numpy.delete`` on a 0d array, the\n``axis`` and ``obj`` argument and indices would be completely ignored.\nIn these cases, ``insert(arr, \"nonsense\", 42, axis=0)`` would actually overwrite the\nentire array, while ``delete(arr, \"nonsense\", axis=0)`` would be ``arr.copy()``\n\nNow passing ``axis`` on a 0d array raises ``~numpy.AxisError``.\n\n(`gh-15802 <https://github.com/numpy/numpy/pull/15802>`__)\n\n``numpy.delete`` no longer ignores out-of-bounds indices\n--------------------------------------------------------\nThis concludes deprecations from 1.8 and 1.9, where ``np.delete`` would ignore\nboth negative and out-of-bounds items in a sequence of indices. This was at\nodds with its behavior when passed a single index.\n\nNow out-of-bounds items throw ``IndexError``, and negative items index from the\nend.\n\n(`gh-15804 <https://github.com/numpy/numpy/pull/15804>`__)\n\n``numpy.insert`` and ``numpy.delete`` no longer accept non-integral indices\n---------------------------------------------------------------------------\nThis concludes a deprecation from 1.9, where sequences of non-integers indices\nwere allowed and cast to integers. Now passing sequences of non-integral\nindices raises ``IndexError``, just like it does when passing a single\nnon-integral scalar.\n\n(`gh-15805 <https://github.com/numpy/numpy/pull/15805>`__)\n\n``numpy.delete`` no longer casts boolean indices to integers\n------------------------------------------------------------\nThis concludes a deprecation from 1.8, where ``np.delete`` would cast boolean\narrays and scalars passed as an index argument into integer indices. The\nbehavior now is to treat boolean arrays as a mask, and to raise an error\non boolean scalars.\n\n(`gh-15815 <https://github.com/numpy/numpy/pull/15815>`__)\n\n\nCompatibility notes\n===================\n\nChanged random variate stream from ``numpy.random.Generator.dirichlet``\n-----------------------------------------------------------------------\nA bug in the generation of random variates for the Dirichlet distribution\nwith small 'alpha' values was fixed by using a different algorithm when\n``max(alpha) < 0.1``.  Because of the change, the stream of variates\ngenerated by ``dirichlet`` in this case will be different from previous\nreleases.\n\n(`gh-14924 <https://github.com/numpy/numpy/pull/14924>`__)\n\nScalar promotion in ``PyArray_ConvertToCommonType``\n---------------------------------------------------\nThe promotion of mixed scalars and arrays in ``PyArray_ConvertToCommonType``\nhas been changed to adhere to those used by ``np.result_type``.\nThis means that input such as ``(1000, np.array([1], dtype=np.uint8)))``\nwill now return ``uint16`` dtypes. In most cases the behaviour is unchanged.\nNote that the use of this C-API function is generally discouraged.\nThis also fixes ``np.choose`` to behave the same way as the rest of NumPy\nin this respect.\n\n(`gh-14933 <https://github.com/numpy/numpy/pull/14933>`__)\n\nFasttake and fastputmask slots are deprecated and NULL'ed\n---------------------------------------------------------\nThe fasttake and fastputmask slots are now never used and\nmust always be set to NULL. This will result in no change in behaviour.\nHowever, if a user dtype should set one of these a DeprecationWarning\nwill be given.\n\n(`gh-14942 <https://github.com/numpy/numpy/pull/14942>`__)\n\n``np.ediff1d`` casting behaviour with ``to_end`` and ``to_begin``\n-----------------------------------------------------------------\n``np.ediff1d`` now uses the ``\"same_kind\"`` casting rule for\nits additional ``to_end`` and ``to_begin`` arguments. This\nensures type safety except when the input array has a smaller\ninteger type than ``to_begin`` or ``to_end``.\nIn rare cases, the behaviour will be more strict than it was\npreviously in 1.16 and 1.17. This is necessary to solve issues\nwith floating point NaN.\n\n(`gh-14981 <https://github.com/numpy/numpy/pull/14981>`__)\n\nConverting of empty array-like objects to NumPy arrays\n------------------------------------------------------\nObjects with ``len(obj) == 0`` which implement an \"array-like\" interface,\nmeaning an object implementing ``obj.__array__()``,\n``obj.__array_interface__``, ``obj.__array_struct__``, or the python\nbuffer interface and which are also sequences (i.e. Pandas objects)\nwill now always retain there shape correctly when converted to an array.\nIf such an object has a shape of ``(0, 1)`` previously, it could\nbe converted into an array of shape ``(0,)`` (losing all dimensions\nafter the first 0).\n\n(`gh-14995 <https://github.com/numpy/numpy/pull/14995>`__)\n\nRemoved ``multiarray.int_asbuffer``\n-----------------------------------\nAs part of the continued removal of Python 2 compatibility,\n``multiarray.int_asbuffer`` was removed. On Python 3, it threw a\n``NotImplementedError`` and was unused internally. It is expected that there\nare no downstream use cases for this method with Python 3.\n\n(`gh-15229 <https://github.com/numpy/numpy/pull/15229>`__)\n\n``numpy.distutils.compat`` has been removed\n-------------------------------------------\nThis module contained only the function ``get_exception()``, which was used as::\n\n    try:\n        ...\n    except Exception:\n        e = get_exception()\n\nIts purpose was to handle the change in syntax introduced in Python 2.6, from\n``except Exception, e:`` to ``except Exception as e:``, meaning it was only\nnecessary for codebases supporting Python 2.5 and older.\n\n(`gh-15255 <https://github.com/numpy/numpy/pull/15255>`__)\n\n``issubdtype`` no longer interprets ``float`` as ``np.floating``\n----------------------------------------------------------------\n``numpy.issubdtype`` had a FutureWarning since NumPy 1.14 which\nhas expired now. This means that certain input where the second\nargument was neither a datatype nor a NumPy scalar type\n(such as a string or a python type like ``int`` or ``float``)\nwill now be consistent with passing in ``np.dtype(arg2).type``.\nThis makes the result consistent with expectations and leads to\na false result in some cases which previously returned true.\n\n(`gh-15773 <https://github.com/numpy/numpy/pull/15773>`__)\n\nChange output of ``round`` on scalars to be consistent with Python\n------------------------------------------------------------------\n\nOutput of the ``__round__`` dunder method and consequently the Python\nbuilt-in ``round`` has been changed to be a Python ``int`` to be consistent\nwith calling it on Python ``float`` objects when called with no arguments.\nPreviously, it would return a scalar of the ``np.dtype`` that was passed in.\n\n(`gh-15840 <https://github.com/numpy/numpy/pull/15840>`__)\n\nThe ``numpy.ndarray`` constructor no longer interprets ``strides=()`` as ``strides=None``\n-----------------------------------------------------------------------------------------\nThe former has changed to have the expected meaning of setting\n``numpy.ndarray.strides`` to ``()``, while the latter continues to result in\nstrides being chosen automatically.\n\n(`gh-15882 <https://github.com/numpy/numpy/pull/15882>`__)\n\nC-Level string to datetime casts changed\n----------------------------------------\nThe C-level casts from strings were simplified. This changed\nalso fixes string to datetime and timedelta casts to behave\ncorrectly (i.e. like Python casts using ``string_arr.astype(\"M8\")``\nwhile previously the cast would behave like\n``string_arr.astype(np.int_).astype(\"M8\")``.\nThis only affects code using low-level C-API to do manual casts\n(not full array casts) of single scalar values or using e.g.\n``PyArray_GetCastFunc``, and should thus not affect the vast majority\nof users.\n\n(`gh-16068 <https://github.com/numpy/numpy/pull/16068>`__)\n\n``SeedSequence`` with small seeds no longer conflicts with spawning\n-------------------------------------------------------------------\nSmall seeds (less than ``2**96``) were previously implicitly 0-padded out to\n128 bits, the size of the internal entropy pool. When spawned, the spawn key\nwas concatenated before the 0-padding. Since the first spawn key is ``(0,)``,\nsmall seeds before the spawn created the same states as the first spawned\n``SeedSequence``.  Now, the seed is explicitly 0-padded out to the internal\npool size before concatenating the spawn key. Spawned ``SeedSequences`` will\nproduce different results than in the previous release. Unspawned\n``SeedSequences`` will still produce the same results.\n\n(`gh-16551 <https://github.com/numpy/numpy/pull/16551>`__)\n\n\nDeprecations\n============\n\nDeprecate automatic ``dtype=object`` for ragged input\n-----------------------------------------------------\nCalling ``np.array([[1, [1, 2, 3]])`` will issue a ``DeprecationWarning`` as\nper `NEP 34`_. Users should explicitly use ``dtype=object`` to avoid the\nwarning.\n\n.. _`NEP 34`: https://numpy.org/neps/nep-0034.html\n\n(`gh-15119 <https://github.com/numpy/numpy/pull/15119>`__)\n\nPassing ``shape=0`` to factory functions in ``numpy.rec`` is deprecated\n-----------------------------------------------------------------------\n``0`` is treated as a special case and is aliased to ``None`` in the functions:\n\n* ``numpy.core.records.fromarrays``\n* ``numpy.core.records.fromrecords``\n* ``numpy.core.records.fromstring``\n* ``numpy.core.records.fromfile``\n\nIn future, ``0`` will not be special cased, and will be treated as an array\nlength like any other integer.\n\n(`gh-15217 <https://github.com/numpy/numpy/pull/15217>`__)\n\nDeprecation of probably unused C-API functions\n----------------------------------------------\nThe following C-API functions are probably unused and have been\ndeprecated:\n\n* ``PyArray_GetArrayParamsFromObject``\n* ``PyUFunc_GenericFunction``\n* ``PyUFunc_SetUsesArraysAsData``\n\nIn most cases ``PyArray_GetArrayParamsFromObject`` should be replaced\nby converting to an array, while ``PyUFunc_GenericFunction`` can be\nreplaced with ``PyObject_Call`` (see documentation for details).\n\n(`gh-15427 <https://github.com/numpy/numpy/pull/15427>`__)\n\nConverting certain types to dtypes is Deprecated\n------------------------------------------------\nThe super classes of scalar types, such as ``np.integer``, ``np.generic``,\nor ``np.inexact`` will now give a deprecation warning when converted\nto a dtype (or used in a dtype keyword argument).\nThe reason for this is that ``np.integer`` is converted to ``np.int_``,\nwhile it would be expected to represent *any* integer (e.g. also\n``int8``, ``int16``, etc.\nFor example, ``dtype=np.floating`` is currently identical to\n``dtype=np.float64``, even though also ``np.float32`` is a subclass of\n``np.floating``.\n\n(`gh-15534 <https://github.com/numpy/numpy/pull/15534>`__)\n\nDeprecation of ``round`` for ``np.complexfloating`` scalars\n-----------------------------------------------------------\nOutput of the ``__round__`` dunder method and consequently the Python built-in\n``round`` has been deprecated on complex scalars. This does not affect\n``np.round``.\n\n(`gh-15840 <https://github.com/numpy/numpy/pull/15840>`__)\n\n``numpy.ndarray.tostring()`` is deprecated in favor of ``tobytes()``\n--------------------------------------------------------------------\n``~numpy.ndarray.tobytes`` has existed since the 1.9 release, but until this\nrelease ``~numpy.ndarray.tostring`` emitted no warning. The change to emit a\nwarning brings NumPy in line with the builtin ``array.array`` methods of the\nsame name.\n\n(`gh-15867 <https://github.com/numpy/numpy/pull/15867>`__)\n\n\nC API changes\n=============\n\nBetter support for ``const`` dimensions in API functions\n--------------------------------------------------------\nThe following functions now accept a constant array of ``npy_intp``:\n\n* ``PyArray_BroadcastToShape``\n* ``PyArray_IntTupleFromIntp``\n* ``PyArray_OverflowMultiplyList``\n\nPreviously the caller would have to cast away the const-ness to call these\nfunctions.\n\n(`gh-15251 <https://github.com/numpy/numpy/pull/15251>`__)\n\nConst qualify UFunc inner loops\n-------------------------------\n``UFuncGenericFunction`` now expects pointers to const ``dimension`` and\n``strides`` as arguments. This means inner loops may no longer modify\neither ``dimension`` or ``strides``. This change leads to an\n``incompatible-pointer-types`` warning forcing users to either ignore\nthe compiler warnings or to const qualify their own loop signatures.\n\n(`gh-15355 <https://github.com/numpy/numpy/pull/15355>`__)\n\n\nNew Features\n============\n\n``numpy.frompyfunc`` now accepts an identity argument\n-----------------------------------------------------\nThis allows the :attr:``numpy.ufunc.identity`` attribute to be set on the\nresulting ufunc, meaning it can be used for empty and multi-dimensional\ncalls to :meth:``numpy.ufunc.reduce``.\n\n(`gh-8255 <https://github.com/numpy/numpy/pull/8255>`__)\n\n``np.str_`` scalars now support the buffer protocol\n---------------------------------------------------\n``np.str_`` arrays are always stored as UCS4, so the corresponding scalars\nnow expose this through the buffer interface, meaning\n``memoryview(np.str_('test'))`` now works.\n\n(`gh-15385 <https://github.com/numpy/numpy/pull/15385>`__)\n\n``subok`` option for ``numpy.copy``\n-----------------------------------\nA new kwarg, ``subok``, was added to ``numpy.copy`` to allow users to toggle\nthe behavior of ``numpy.copy`` with respect to array subclasses. The default\nvalue is ``False`` which is consistent with the behavior of ``numpy.copy`` for\nprevious numpy versions. To create a copy that preserves an array subclass with\n``numpy.copy``, call ``np.copy(arr, subok=True)``. This addition better\ndocuments that the default behavior of ``numpy.copy`` differs from the\n``numpy.ndarray.copy`` method which respects array subclasses by default.\n\n(`gh-15685 <https://github.com/numpy/numpy/pull/15685>`__)\n\n``numpy.linalg.multi_dot`` now accepts an ``out`` argument\n----------------------------------------------------------\n\n``out`` can be used to avoid creating unnecessary copies of the final product\ncomputed by ``numpy.linalg.multidot``.\n\n(`gh-15715 <https://github.com/numpy/numpy/pull/15715>`__)\n\n``keepdims`` parameter for ``numpy.count_nonzero``\n--------------------------------------------------\nThe parameter ``keepdims`` was added to ``numpy.count_nonzero``. The\nparameter has the same meaning as it does in reduction functions such\nas ``numpy.sum`` or ``numpy.mean``.\n\n(`gh-15870 <https://github.com/numpy/numpy/pull/15870>`__)\n\n``equal_nan`` parameter for ``numpy.array_equal``\n-------------------------------------------------\nThe keyword argument ``equal_nan`` was added to ``numpy.array_equal``.\n``equal_nan`` is a boolean value that toggles whether or not ``nan`` values are\nconsidered equal in comparison (default is ``False``). This matches API used in\nrelated functions such as ``numpy.isclose`` and ``numpy.allclose``.\n\n(`gh-16128 <https://github.com/numpy/numpy/pull/16128>`__)\n\n\nImprovements\n============\n\nImprove detection of CPU features\n=================================\nReplace ``npy_cpu_supports`` which was a gcc specific mechanism to test support\nof AVX with more general functions ``npy_cpu_init`` and ``npy_cpu_have``, and\nexpose the results via a ``NPY_CPU_HAVE`` c-macro as well as a python-level\n``__cpu_features__`` dictionary.\n\n(`gh-13421 <https://github.com/numpy/numpy/pull/13421>`__)\n\nUse 64-bit integer size on 64-bit platforms in fallback lapack_lite\n-------------------------------------------------------------------\nUse 64-bit integer size on 64-bit platforms in the fallback LAPACK library,\nwhich is used when the system has no LAPACK installed, allowing it to deal with\nlinear algebra for large arrays.\n\n(`gh-15218 <https://github.com/numpy/numpy/pull/15218>`__)\n\nUse AVX512 intrinsic to implement ``np.exp`` when input is ``np.float64``\n-------------------------------------------------------------------------\nUse AVX512 intrinsic to implement ``np.exp`` when input is ``np.float64``,\nwhich can improve the performance of ``np.exp`` with ``np.float64`` input 5-7x\nfaster than before. The ``_multiarray_umath.so`` module has grown about 63 KB\non linux64.\n\n(`gh-15648 <https://github.com/numpy/numpy/pull/15648>`__)\n\nAbility to disable madvise hugepages\n------------------------------------\nOn Linux NumPy has previously added support for madavise hugepages which can\nimprove performance for very large arrays.  Unfortunately, on older Kernel\nversions this led to peformance regressions, thus by default the support has\nbeen disabled on kernels before version 4.6. To override the default, you can\nuse the environment variable::\n\n    NUMPY_MADVISE_HUGEPAGE=0\n\nor set it to 1 to force enabling support. Note that this only makes\na difference if the operating system is set up to use madvise\ntransparent hugepage.\n\n(`gh-15769 <https://github.com/numpy/numpy/pull/15769>`__)\n\n``numpy.einsum`` accepts NumPy ``int64`` type in subscript list\n---------------------------------------------------------------\nThere is no longer a type error thrown when ``numpy.einsum`` is passed\na NumPy ``int64`` array as its subscript list.\n\n(`gh-16080 <https://github.com/numpy/numpy/pull/16080>`__)\n\n``np.logaddexp2.identity`` changed to ``-inf``\n----------------------------------------------\nThe ufunc ``~numpy.logaddexp2`` now has an identity of ``-inf``, allowing it to\nbe called on empty sequences.  This matches the identity of ``~numpy.logaddexp``.\n\n(`gh-16102 <https://github.com/numpy/numpy/pull/16102>`__)\n\n\nChanges\n=======\n\nRemove handling of extra argument to ``__array__``\n--------------------------------------------------\nA code path and test have been in the code since NumPy 0.4 for a two-argument\nvariant of ``__array__(dtype=None, context=None)``. It was activated when\ncalling ``ufunc(op)`` or ``ufunc.reduce(op)`` if ``op.__array__`` existed.\nHowever that variant is not documented, and it is not clear what the intention\nwas for its use. It has been removed.\n\n(`gh-15118 <https://github.com/numpy/numpy/pull/15118>`__)\n\n``numpy.random._bit_generator`` moved to ``numpy.random.bit_generator``\n-----------------------------------------------------------------------\nIn order to expose ``numpy.random.BitGenerator`` and\n``numpy.random.SeedSequence`` to Cython, the ``_bitgenerator`` module is now\npublic as ``numpy.random.bit_generator``\n\nCython access to the random distributions is provided via a ``pxd`` file\n------------------------------------------------------------------------\n``c_distributions.pxd`` provides access to the c functions behind many of the\nrandom distributions from Cython, making it convenient to use and extend them.\n\n(`gh-15463 <https://github.com/numpy/numpy/pull/15463>`__)\n\nFixed ``eigh`` and ``cholesky`` methods in ``numpy.random.multivariate_normal``\n-------------------------------------------------------------------------------\nPreviously, when passing ``method='eigh'`` or ``method='cholesky'``,\n``numpy.random.multivariate_normal`` produced samples from the wrong\ndistribution. This is now fixed.\n\n(`gh-15872 <https://github.com/numpy/numpy/pull/15872>`__)\n\nFixed the jumping implementation in ``MT19937.jumped``\n------------------------------------------------------\nThis fix changes the stream produced from jumped MT19937 generators. It does\nnot affect the stream produced using ``RandomState`` or ``MT19937`` that\nare directly seeded.\n\nThe translation of the jumping code for the MT19937 contained a reversed loop\nordering. ``MT19937.jumped`` matches the Makoto Matsumoto's original\nimplementation of the Horner and Sliding Window jump methods.\n\n(`gh-16153 <https://github.com/numpy/numpy/pull/16153>`__)\n\n\nChecksums\n=========\n\nMD5\n---\n::\n\n    17e9b15e5b54f6963da30e9de93437b8  numpy-1.19.0-cp36-cp36m-macosx_10_9_x86_64.whl\n    2117953099e3343e6ac642de66c7127f  numpy-1.19.0-cp36-cp36m-manylinux1_i686.whl\n    fe0d7f18fd5af93cb027fe0e2462b3bc  numpy-1.19.0-cp36-cp36m-manylinux1_x86_64.whl\n    23a76cbf0cec80d59d48f2342de13cb2  numpy-1.19.0-cp36-cp36m-manylinux2010_i686.whl\n    3b35908cd21ce6558ec61806bbc9efee  numpy-1.19.0-cp36-cp36m-manylinux2010_x86_64.whl\n    b35af24ffa550054aadb620f6afb7d67  numpy-1.19.0-cp36-cp36m-manylinux2014_aarch64.whl\n    5d2a0e9c23383abed01c2795c6e9f2c1  numpy-1.19.0-cp36-cp36m-win32.whl\n    e0548c4ec436abb249d2e59ed5fd727f  numpy-1.19.0-cp36-cp36m-win_amd64.whl\n    3f939fa2f3b2f881862f7e02a0116970  numpy-1.19.0-cp37-cp37m-macosx_10_9_x86_64.whl\n    012026c54f196b8f342e4b49cb4b9294  numpy-1.19.0-cp37-cp37m-manylinux1_i686.whl\n    27227fdd6329f098fc9a85e9d40b1916  numpy-1.19.0-cp37-cp37m-manylinux1_x86_64.whl\n    a471c34d7a07468c09696165eae0cd57  numpy-1.19.0-cp37-cp37m-manylinux2010_i686.whl\n    27af6195869cd518f5d2a71885f21806  numpy-1.19.0-cp37-cp37m-manylinux2010_x86_64.whl\n    62dbe6623e9aebd2bb1aef6d1e0f815d  numpy-1.19.0-cp37-cp37m-manylinux2014_aarch64.whl\n    760e6b5681eea93cf6c85bcd1a739068  numpy-1.19.0-cp37-cp37m-win32.whl\n    d75a6104a6cce3c669e2363470d567bc  numpy-1.19.0-cp37-cp37m-win_amd64.whl\n    09f870d54906d964bd0f93b22695f9ae  numpy-1.19.0-cp38-cp38-macosx_10_9_x86_64.whl\n    ea9f4248d9ba0c647e07427cb542c2bf  numpy-1.19.0-cp38-cp38-manylinux1_i686.whl\n    11b7a5b055bb1417c8935d267b7d88de  numpy-1.19.0-cp38-cp38-manylinux1_x86_64.whl\n    6f6dec62163fa21259b7157516cc9e84  numpy-1.19.0-cp38-cp38-manylinux2010_i686.whl\n    ca83ee74cbdac0ffe3ec2c8c79294d67  numpy-1.19.0-cp38-cp38-manylinux2010_x86_64.whl\n    560567c2b3017ed146c3d08b0a58cadb  numpy-1.19.0-cp38-cp38-manylinux2014_aarch64.whl\n    d160b64e914c5f2e4807943c83dae54a  numpy-1.19.0-cp38-cp38-win32.whl\n    4e563e6434af5b90f1f99d9b916b2525  numpy-1.19.0-cp38-cp38-win_amd64.whl\n    a26c769ffe249f02cb73e6fbec7ff9ca  numpy-1.19.0-pp36-pypy36_pp73-manylinux2010_x86_64.whl\n    d59aadf47354bd10c7b9996032ba4da0  numpy-1.19.0.tar.gz\n    3f5ce88a859302f0a1aceb5f75b563fc  numpy-1.19.0.zip\n\nSHA256\n------\n::\n\n    63d971bb211ad3ca37b2adecdd5365f40f3b741a455beecba70fd0dde8b2a4cb  numpy-1.19.0-cp36-cp36m-macosx_10_9_x86_64.whl\n    b6aaeadf1e4866ca0fdf7bb4eed25e521ae21a7947c59f78154b24fc7abbe1dd  numpy-1.19.0-cp36-cp36m-manylinux1_i686.whl\n    13af0184177469192d80db9bd02619f6fa8b922f9f327e077d6f2a6acb1ce1c0  numpy-1.19.0-cp36-cp36m-manylinux1_x86_64.whl\n    356f96c9fbec59974a592452ab6a036cd6f180822a60b529a975c9467fcd5f23  numpy-1.19.0-cp36-cp36m-manylinux2010_i686.whl\n    fa1fe75b4a9e18b66ae7f0b122543c42debcf800aaafa0212aaff3ad273c2596  numpy-1.19.0-cp36-cp36m-manylinux2010_x86_64.whl\n    cbe326f6d364375a8e5a8ccb7e9cd73f4b2f6dc3b2ed205633a0db8243e2a96a  numpy-1.19.0-cp36-cp36m-manylinux2014_aarch64.whl\n    a2e3a39f43f0ce95204beb8fe0831199542ccab1e0c6e486a0b4947256215632  numpy-1.19.0-cp36-cp36m-win32.whl\n    7b852817800eb02e109ae4a9cef2beda8dd50d98b76b6cfb7b5c0099d27b52d4  numpy-1.19.0-cp36-cp36m-win_amd64.whl\n    d97a86937cf9970453c3b62abb55a6475f173347b4cde7f8dcdb48c8e1b9952d  numpy-1.19.0-cp37-cp37m-macosx_10_9_x86_64.whl\n    a86c962e211f37edd61d6e11bb4df7eddc4a519a38a856e20a6498c319efa6b0  numpy-1.19.0-cp37-cp37m-manylinux1_i686.whl\n    d34fbb98ad0d6b563b95de852a284074514331e6b9da0a9fc894fb1cdae7a79e  numpy-1.19.0-cp37-cp37m-manylinux1_x86_64.whl\n    658624a11f6e1c252b2cd170d94bf28c8f9410acab9f2fd4369e11e1cd4e1aaf  numpy-1.19.0-cp37-cp37m-manylinux2010_i686.whl\n    4d054f013a1983551254e2379385e359884e5af105e3efe00418977d02f634a7  numpy-1.19.0-cp37-cp37m-manylinux2010_x86_64.whl\n    26a45798ca2a4e168d00de75d4a524abf5907949231512f372b217ede3429e98  numpy-1.19.0-cp37-cp37m-manylinux2014_aarch64.whl\n    3c40c827d36c6d1c3cf413694d7dc843d50997ebffbc7c87d888a203ed6403a7  numpy-1.19.0-cp37-cp37m-win32.whl\n    be62aeff8f2f054eff7725f502f6228298891fd648dc2630e03e44bf63e8cee0  numpy-1.19.0-cp37-cp37m-win_amd64.whl\n    dd53d7c4a69e766e4900f29db5872f5824a06827d594427cf1a4aa542818b796  numpy-1.19.0-cp38-cp38-macosx_10_9_x86_64.whl\n    30a59fb41bb6b8c465ab50d60a1b298d1cd7b85274e71f38af5a75d6c475d2d2  numpy-1.19.0-cp38-cp38-manylinux1_i686.whl\n    df1889701e2dfd8ba4dc9b1a010f0a60950077fb5242bb92c8b5c7f1a6f2668a  numpy-1.19.0-cp38-cp38-manylinux1_x86_64.whl\n    33c623ef9ca5e19e05991f127c1be5aeb1ab5cdf30cb1c5cf3960752e58b599b  numpy-1.19.0-cp38-cp38-manylinux2010_i686.whl\n    26f509450db547e4dfa3ec739419b31edad646d21fb8d0ed0734188b35ff6b27  numpy-1.19.0-cp38-cp38-manylinux2010_x86_64.whl\n    7b57f26e5e6ee2f14f960db46bd58ffdca25ca06dd997729b1b179fddd35f5a3  numpy-1.19.0-cp38-cp38-manylinux2014_aarch64.whl\n    a8705c5073fe3fcc297fb8e0b31aa794e05af6a329e81b7ca4ffecab7f2b95ef  numpy-1.19.0-cp38-cp38-win32.whl\n    c2edbb783c841e36ca0fa159f0ae97a88ce8137fb3a6cd82eae77349ba4b607b  numpy-1.19.0-cp38-cp38-win_amd64.whl\n    8cde829f14bd38f6da7b2954be0f2837043e8b8d7a9110ec5e318ae6bf706610  numpy-1.19.0-pp36-pypy36_pp73-manylinux2010_x86_64.whl\n    153cf8b0176e57a611931981acfe093d2f7fef623b48f91176efa199798a6b90  numpy-1.19.0.tar.gz\n    76766cc80d6128750075378d3bb7812cf146415bd29b588616f72c943c00d598  numpy-1.19.0.zip\n\n\n.. currentmodule:: numpy\n\n==========================\n", "1.22.4": "==========================\n\nNumPy 1.22.4 is a maintenance release that fixes bugs discovered after the\n1.22.3 release. In addition, the wheels for this release are built using the\nrecently released Cython 0.29.30, which should fix the reported problems with\n`debugging <https://github.com/numpy/numpy/issues/21008>`_.\n\nThe Python versions supported for this release are 3.8-3.10. Note that the Mac\nwheels are now based on OS X 10.14 rather than 10.6 that was used in previous\nNumPy release cycles. 10.14 is the oldest release supported by Apple.\n\nContributors\n============\n\nA total of 12 people contributed to this release.  People with a \"+\" by their\nnames contributed a patch for the first time.\n\n* Alexander Shadchin\n* Bas van Beek\n* Charles Harris\n* Hood Chatham\n* Jarrod Millman\n* John-Mark Gurney +\n* Junyan Ou +\n* Mariusz Felisiak +\n* Ross Barnowski\n* Sebastian Berg\n* Serge Guelton\n* Stefan van der Walt\n\nPull requests merged\n====================\n\nA total of 22 pull requests were merged for this release.\n\n* `21191 <https://github.com/numpy/numpy/pull/21191>`__: TYP, BUG: Fix ``np.lib.stride_tricks`` re-exported under the...\n* `21192 <https://github.com/numpy/numpy/pull/21192>`__: TST: Bump mypy from 0.931 to 0.940\n* `21243 <https://github.com/numpy/numpy/pull/21243>`__: MAINT: Explicitly re-export the types in ``numpy._typing``\n* `21245 <https://github.com/numpy/numpy/pull/21245>`__: MAINT: Specify sphinx, numpydoc versions for CI doc builds\n* `21275 <https://github.com/numpy/numpy/pull/21275>`__: BUG: Fix typos\n* `21277 <https://github.com/numpy/numpy/pull/21277>`__: ENH, BLD: Fix math feature detection for wasm\n* `21350 <https://github.com/numpy/numpy/pull/21350>`__: MAINT: Fix failing simd and cygwin tests.\n* `21438 <https://github.com/numpy/numpy/pull/21438>`__: MAINT: Fix failing Python 3.8 32-bit Windows test.\n* `21444 <https://github.com/numpy/numpy/pull/21444>`__: BUG: add linux guard per #21386\n* `21445 <https://github.com/numpy/numpy/pull/21445>`__: BUG: Allow legacy dtypes to cast to datetime again\n* `21446 <https://github.com/numpy/numpy/pull/21446>`__: BUG: Make mmap handling safer in frombuffer\n* `21447 <https://github.com/numpy/numpy/pull/21447>`__: BUG: Stop using PyBytesObject.ob_shash deprecated in Python 3.11.\n* `21448 <https://github.com/numpy/numpy/pull/21448>`__: ENH: Introduce numpy.core.setup_common.NPY_CXX_FLAGS\n* `21472 <https://github.com/numpy/numpy/pull/21472>`__: BUG: Ensure compile errors are raised correclty\n* `21473 <https://github.com/numpy/numpy/pull/21473>`__: BUG: Fix segmentation fault\n* `21474 <https://github.com/numpy/numpy/pull/21474>`__: MAINT: Update doc requirements\n* `21475 <https://github.com/numpy/numpy/pull/21475>`__: MAINT: Mark ``npy_memchr`` with ``no_sanitize(\"alignment\")`` on clang\n* `21512 <https://github.com/numpy/numpy/pull/21512>`__: DOC: Proposal - make the doc landing page cards more similar...\n* `21525 <https://github.com/numpy/numpy/pull/21525>`__: MAINT: Update Cython version to 0.29.30.\n* `21536 <https://github.com/numpy/numpy/pull/21536>`__: BUG: Fix GCC error during build configuration\n* `21541 <https://github.com/numpy/numpy/pull/21541>`__: REL: Prepare for the NumPy 1.22.4 release.\n* `21547 <https://github.com/numpy/numpy/pull/21547>`__: MAINT: Skip tests that fail on PyPy.\n\n\nChecksums\n=========\n\nMD5\n---\n::\n\n    a19351fd3dc0b3bbc733495ed18b8f24  numpy-1.22.4-cp310-cp310-macosx_10_14_x86_64.whl\n    0730f9e196f70ad89f246bf95ccf05d5  numpy-1.22.4-cp310-cp310-macosx_10_15_x86_64.whl\n    63c74e5395a2b31d8adc5b1aa0c62471  numpy-1.22.4-cp310-cp310-macosx_11_0_arm64.whl\n    f99778023770c12f896768c90f7712e5  numpy-1.22.4-cp310-cp310-manylinux_2_17_aarch64.manylinux2014_aarch64.whl\n    757d68b0cdb4e28ffce8574b6a2f3c5e  numpy-1.22.4-cp310-cp310-manylinux_2_17_x86_64.manylinux2014_x86_64.whl\n    50becf2e048e54dc5227dfe8378aae1e  numpy-1.22.4-cp310-cp310-win32.whl\n    79dfdc29a4730e44d6df33dbea5b35b0  numpy-1.22.4-cp310-cp310-win_amd64.whl\n    8fd8f04d71ead55c2773d1b46668ca67  numpy-1.22.4-cp38-cp38-macosx_10_15_x86_64.whl\n    41a7c6240081010824cc0d5c02900fe6  numpy-1.22.4-cp38-cp38-macosx_11_0_arm64.whl\n    6bc066d3f61da3304c82d92f3f900a4f  numpy-1.22.4-cp38-cp38-manylinux_2_17_aarch64.manylinux2014_aarch64.whl\n    86d959605c66ccba11c6504f25fff0d7  numpy-1.22.4-cp38-cp38-manylinux_2_17_x86_64.manylinux2014_x86_64.whl\n    ae0405894c065349a511e4575b919e2a  numpy-1.22.4-cp38-cp38-win32.whl\n    c9a731d08081396b7a1b66977734d2ac  numpy-1.22.4-cp38-cp38-win_amd64.whl\n    4d9b97d74799e5fc48860f0b4a3b255a  numpy-1.22.4-cp39-cp39-macosx_10_14_x86_64.whl\n    c99fa7e04cb7cc23f1713f2023b4e489  numpy-1.22.4-cp39-cp39-macosx_10_15_x86_64.whl\n    dda3815df12b8a99c6c3069f69997521  numpy-1.22.4-cp39-cp39-macosx_11_0_arm64.whl\n    9b7c5b39d5611d92b66eb545d44b25db  numpy-1.22.4-cp39-cp39-manylinux_2_17_aarch64.manylinux2014_aarch64.whl\n    90fc45eaf8b8c4fac3f3ebd105a5a856  numpy-1.22.4-cp39-cp39-manylinux_2_17_x86_64.manylinux2014_x86_64.whl\n    9562153d4a83d773c20eb626cbd65cde  numpy-1.22.4-cp39-cp39-win32.whl\n    711b23acce54a18ce74fc80f48f48062  numpy-1.22.4-cp39-cp39-win_amd64.whl\n    ab803b24ea557452e828adba1b986af3  numpy-1.22.4-pp38-pypy38_pp73-manylinux_2_17_x86_64.manylinux2014_x86_64.whl\n    09b3a41ea0b9bc20bd1691cf88f0b0d3  numpy-1.22.4.tar.gz\n    b44849506fbb54cdef9dbb435b2b1987  numpy-1.22.4.zip\n\nSHA256\n------\n::\n\n    ba9ead61dfb5d971d77b6c131a9dbee62294a932bf6a356e48c75ae684e635b3  numpy-1.22.4-cp310-cp310-macosx_10_14_x86_64.whl\n    1ce7ab2053e36c0a71e7a13a7475bd3b1f54750b4b433adc96313e127b870887  numpy-1.22.4-cp310-cp310-macosx_10_15_x86_64.whl\n    7228ad13744f63575b3a972d7ee4fd61815b2879998e70930d4ccf9ec721dce0  numpy-1.22.4-cp310-cp310-macosx_11_0_arm64.whl\n    43a8ca7391b626b4c4fe20aefe79fec683279e31e7c79716863b4b25021e0e74  numpy-1.22.4-cp310-cp310-manylinux_2_17_aarch64.manylinux2014_aarch64.whl\n    a911e317e8c826ea632205e63ed8507e0dc877dcdc49744584dfc363df9ca08c  numpy-1.22.4-cp310-cp310-manylinux_2_17_x86_64.manylinux2014_x86_64.whl\n    9ce7df0abeabe7fbd8ccbf343dc0db72f68549856b863ae3dd580255d009648e  numpy-1.22.4-cp310-cp310-win32.whl\n    3e1ffa4748168e1cc8d3cde93f006fe92b5421396221a02f2274aab6ac83b077  numpy-1.22.4-cp310-cp310-win_amd64.whl\n    59d55e634968b8f77d3fd674a3cf0b96e85147cd6556ec64ade018f27e9479e1  numpy-1.22.4-cp38-cp38-macosx_10_15_x86_64.whl\n    c1d937820db6e43bec43e8d016b9b3165dcb42892ea9f106c70fb13d430ffe72  numpy-1.22.4-cp38-cp38-macosx_11_0_arm64.whl\n    d4c5d5eb2ec8da0b4f50c9a843393971f31f1d60be87e0fb0917a49133d257d6  numpy-1.22.4-cp38-cp38-manylinux_2_17_aarch64.manylinux2014_aarch64.whl\n    64f56fc53a2d18b1924abd15745e30d82a5782b2cab3429aceecc6875bd5add0  numpy-1.22.4-cp38-cp38-manylinux_2_17_x86_64.manylinux2014_x86_64.whl\n    fb7a980c81dd932381f8228a426df8aeb70d59bbcda2af075b627bbc50207cba  numpy-1.22.4-cp38-cp38-win32.whl\n    e96d7f3096a36c8754207ab89d4b3282ba7b49ea140e4973591852c77d09eb76  numpy-1.22.4-cp38-cp38-win_amd64.whl\n    4c6036521f11a731ce0648f10c18ae66d7143865f19f7299943c985cdc95afb5  numpy-1.22.4-cp39-cp39-macosx_10_14_x86_64.whl\n    b89bf9b94b3d624e7bb480344e91f68c1c6c75f026ed6755955117de00917a7c  numpy-1.22.4-cp39-cp39-macosx_10_15_x86_64.whl\n    2d487e06ecbf1dc2f18e7efce82ded4f705f4bd0cd02677ffccfb39e5c284c7e  numpy-1.22.4-cp39-cp39-macosx_11_0_arm64.whl\n    f3eb268dbd5cfaffd9448113539e44e2dd1c5ca9ce25576f7c04a5453edc26fa  numpy-1.22.4-cp39-cp39-manylinux_2_17_aarch64.manylinux2014_aarch64.whl\n    37431a77ceb9307c28382c9773da9f306435135fae6b80b62a11c53cfedd8802  numpy-1.22.4-cp39-cp39-manylinux_2_17_x86_64.manylinux2014_x86_64.whl\n    cc7f00008eb7d3f2489fca6f334ec19ca63e31371be28fd5dad955b16ec285bd  numpy-1.22.4-cp39-cp39-win32.whl\n    f0725df166cf4785c0bc4cbfb320203182b1ecd30fee6e541c8752a92df6aa32  numpy-1.22.4-cp39-cp39-win_amd64.whl\n    0791fbd1e43bf74b3502133207e378901272f3c156c4df4954cad833b1380207  numpy-1.22.4-pp38-pypy38_pp73-manylinux_2_17_x86_64.manylinux2014_x86_64.whl\n    b4308198d0e41efaa108e57d69973398439c7299a9d551680cdd603cf6d20709  numpy-1.22.4.tar.gz\n    425b390e4619f58d8526b3dcf656dde069133ae5c240229821f01b5f44ea07af  numpy-1.22.4.zip\n\n\n.. currentmodule:: numpy\n\n==========================\n", "1.18.3": "==========================\n\nThis release contains various bug/regression fixes.\n\nThe Python versions supported in this release are 3.5-3.8. Downstream\ndevelopers should use Cython >= 0.29.15 for Python 3.8 support and OpenBLAS >=\n3.7 to avoid errors on the Skylake architecture.\n\n\nHighlights\n==========\n\n* Fix for the `method='eigh'` and `method='cholesky'` methods in\n  `numpy.random.multivariate_normal`. Those were producing samples from the\n  wrong distribution.\n\n\nContributors\n============\n\nA total of 6 people contributed to this release.  People with a \"+\" by their\nnames contributed a patch for the first time.\n\n* Charles Harris\n* Max Balandat +\n* Mibu287 +\n* Pan Jan +\n* Sebastian Berg\n* panpiort8 +\n\n\nPull requests merged\n====================\n\nA total of 5 pull requests were merged for this release.\n\n* `15916 <https://github.com/numpy/numpy/pull/15916>`__: BUG: Fix eigh and cholesky methods of numpy.random.multivariate_normal\n* `15929 <https://github.com/numpy/numpy/pull/15929>`__: BUG,MAINT: Remove incorrect special case in string to number...\n* `15930 <https://github.com/numpy/numpy/pull/15930>`__: BUG: Guarantee array is in valid state after memory error occurs...\n* `15954 <https://github.com/numpy/numpy/pull/15954>`__: BUG: Check that `pvals` is 1D in `_generator.multinomial`.\n* `16017 <https://github.com/numpy/numpy/pull/16017>`__: BUG: Alpha parameter must be 1D in `generator.dirichlet`\n\nChecksums\n=========\n\nMD5\n---\n::\n\n    6582c9a045ba92cb11a7062cfabba898  numpy-1.18.3-cp35-cp35m-macosx_10_9_intel.whl\n    f70d5c8d4f598653ff66f640487481ce  numpy-1.18.3-cp35-cp35m-manylinux1_i686.whl\n    5c0f1a8c94d095efd21ab4b8ffeed921  numpy-1.18.3-cp35-cp35m-manylinux1_x86_64.whl\n    92cab35405fe3042e7aa8504d8669cd0  numpy-1.18.3-cp35-cp35m-win32.whl\n    8769b5434fd08fe67d912077082b91d7  numpy-1.18.3-cp35-cp35m-win_amd64.whl\n    2f1f330199d95bd8e709d0e4a0eec65e  numpy-1.18.3-cp36-cp36m-macosx_10_9_x86_64.whl\n    19892d1f036da55f8841ef121478d554  numpy-1.18.3-cp36-cp36m-manylinux1_i686.whl\n    676c3dd16e9d80271c31ee5f9c3b8f20  numpy-1.18.3-cp36-cp36m-manylinux1_x86_64.whl\n    6484099fdb78f732a758286d2eb87632  numpy-1.18.3-cp36-cp36m-win32.whl\n    7d99a2a4ba819b75347468c8ed5e5a9e  numpy-1.18.3-cp36-cp36m-win_amd64.whl\n    a5672f35136ea83dfa7960859a38d6e9  numpy-1.18.3-cp37-cp37m-macosx_10_9_x86_64.whl\n    5b36aaaeb4203b3d26c5dc801dbc66bd  numpy-1.18.3-cp37-cp37m-manylinux1_i686.whl\n    afc4b2445d447f1a7c338026778bd34e  numpy-1.18.3-cp37-cp37m-manylinux1_x86_64.whl\n    2ebc3ba9945d108df75319c359190516  numpy-1.18.3-cp37-cp37m-win32.whl\n    a78f661b1c7bd153c8399db90fba652c  numpy-1.18.3-cp37-cp37m-win_amd64.whl\n    8f16d580559468b7cf23a71dc9945f39  numpy-1.18.3-cp38-cp38-macosx_10_9_x86_64.whl\n    5ec887ba38cd99775666f3493d82ea7c  numpy-1.18.3-cp38-cp38-manylinux1_i686.whl\n    88ce81bc31dec4c14bf835dc466308ed  numpy-1.18.3-cp38-cp38-manylinux1_x86_64.whl\n    5afe9a5f3c21299da599210ff5b76834  numpy-1.18.3-cp38-cp38-win32.whl\n    205364093300906654debbe3beb13359  numpy-1.18.3-cp38-cp38-win_amd64.whl\n    cd631c761f141d382b4e1b31c8232fc0  numpy-1.18.3.tar.gz\n    91314710fe9d29d80b6ccc9629e4532b  numpy-1.18.3.zip\n\nSHA256\n------\n::\n\n    a6bc9432c2640b008d5f29bad737714eb3e14bb8854878eacf3d7955c4e91c36  numpy-1.18.3-cp35-cp35m-macosx_10_9_intel.whl\n    48e15612a8357393d176638c8f68a19273676877caea983f8baf188bad430379  numpy-1.18.3-cp35-cp35m-manylinux1_i686.whl\n    eb2286249ebfe8fcb5b425e5ec77e4736d53ee56d3ad296f8947f67150f495e3  numpy-1.18.3-cp35-cp35m-manylinux1_x86_64.whl\n    1e37626bcb8895c4b3873fcfd54e9bfc5ffec8d0f525651d6985fcc5c6b6003c  numpy-1.18.3-cp35-cp35m-win32.whl\n    163c78c04f47f26ca1b21068cea25ed7c5ecafe5f5ab2ea4895656a750582b56  numpy-1.18.3-cp35-cp35m-win_amd64.whl\n    3d9e1554cd9b5999070c467b18e5ae3ebd7369f02706a8850816f576a954295f  numpy-1.18.3-cp36-cp36m-macosx_10_9_x86_64.whl\n    40c24960cd5cec55222963f255858a1c47c6fa50a65a5b03fd7de75e3700eaaa  numpy-1.18.3-cp36-cp36m-manylinux1_i686.whl\n    a551d8cc267c634774830086da42e4ba157fa41dd3b93982bc9501b284b0c689  numpy-1.18.3-cp36-cp36m-manylinux1_x86_64.whl\n    0aa2b318cf81eb1693fcfcbb8007e95e231d7e1aa24288137f3b19905736c3ee  numpy-1.18.3-cp36-cp36m-win32.whl\n    a41f303b3f9157a31ce7203e3ca757a0c40c96669e72d9b6ee1bce8507638970  numpy-1.18.3-cp36-cp36m-win_amd64.whl\n    e607b8cdc2ae5d5a63cd1bec30a15b5ed583ac6a39f04b7ba0f03fcfbf29c05b  numpy-1.18.3-cp37-cp37m-macosx_10_9_x86_64.whl\n    fdee7540d12519865b423af411bd60ddb513d2eb2cd921149b732854995bbf8b  numpy-1.18.3-cp37-cp37m-manylinux1_i686.whl\n    6725d2797c65598778409aba8cd67077bb089d5b7d3d87c2719b206dc84ec05e  numpy-1.18.3-cp37-cp37m-manylinux1_x86_64.whl\n    4847f0c993298b82fad809ea2916d857d0073dc17b0510fbbced663b3265929d  numpy-1.18.3-cp37-cp37m-win32.whl\n    46f404314dbec78cb342904f9596f25f9b16e7cf304030f1339e553c8e77f51c  numpy-1.18.3-cp37-cp37m-win_amd64.whl\n    264fd15590b3f02a1fbc095e7e1f37cdac698ff3829e12ffdcffdce3772f9d44  numpy-1.18.3-cp38-cp38-macosx_10_9_x86_64.whl\n    e94a39d5c40fffe7696009dbd11bc14a349b377e03a384ed011e03d698787dd3  numpy-1.18.3-cp38-cp38-manylinux1_i686.whl\n    a4305564e93f5c4584f6758149fd446df39fd1e0a8c89ca0deb3cce56106a027  numpy-1.18.3-cp38-cp38-manylinux1_x86_64.whl\n    99f0ba97e369f02a21bb95faa3a0de55991fd5f0ece2e30a9e2eaebeac238921  numpy-1.18.3-cp38-cp38-win32.whl\n    c60175d011a2e551a2f74c84e21e7c982489b96b6a5e4b030ecdeacf2914da68  numpy-1.18.3-cp38-cp38-win_amd64.whl\n    93ee59ec38f3bf8f9a42d5f4301f60e6825a4a6385a145f70badcd2bf2a11134  numpy-1.18.3.tar.gz\n    e46e2384209c91996d5ec16744234d1c906ab79a701ce1a26155c9ec890b8dc8  numpy-1.18.3.zip\n\n\n-----BEGIN PGP SIGNED MESSAGE-----\nHash: SHA256\n\n.. currentmodule:: numpy\n\n==========================\n", "1.17.0": "==========================\n\nThis NumPy release contains a number of new features that should substantially\nimprove its performance and usefulness, see Highlights below for a summary. The\nPython versions supported are 3.5-3.7, note that Python 2.7 has been dropped.\nPython 3.8b2 should work with the released source packages, but there are no\nfuture guarantees.\n\nDownstream developers should use Cython >= 0.29.11 for Python 3.8 support and\nOpenBLAS >= 3.7 (not currently out) to avoid problems on the Skylake\narchitecture. The NumPy wheels on PyPI are built from the OpenBLAS development\nbranch in order to avoid those problems.\n\n\nHighlights\n==========\n\n* A new extensible `random` module along with four selectable `random number\n  generators <random.BitGenerators>` and improved seeding designed for use in parallel\n  processes has been added. The currently available bit generators are `MT19937\n  <random.mt19937.MT19937>`, `PCG64 <random.pcg64.PCG64>`, `Philox\n  <random.philox.Philox>`, and `SFC64 <random.sfc64.SFC64>`. See below under\n  New Features.\n\n* NumPy's `FFT <fft>` implementation was changed from fftpack to pocketfft,\n  resulting in faster, more accurate transforms and better handling of datasets\n  of prime length. See below under Improvements.\n\n* New radix sort and timsort sorting methods. It is currently not possible to\n  choose which will be used. They are hardwired to the datatype and used\n  when either ``stable`` or ``mergesort`` is passed as the method. See below\n  under Improvements.\n\n* Overriding numpy functions is now possible by default,\n  see ``__array_function__`` below.\n\n\nNew functions\n=============\n\n* `numpy.errstate` is now also a function decorator\n\n\nDeprecations\n============\n\n`numpy.polynomial` functions warn when passed ``float`` in place of ``int``\n- ---------------------------------------------------------------------------\nPreviously functions in this module would accept ``float`` values provided they\nwere integral (``1.0``, ``2.0``, etc). For consistency with the rest of numpy,\ndoing so is now deprecated, and in future will raise a ``TypeError``.\n\nSimilarly, passing a float like ``0.5`` in place of an integer will now raise a\n``TypeError`` instead of the previous ``ValueError``.\n\nDeprecate `numpy.distutils.exec_command` and ``temp_file_name``\n- ---------------------------------------------------------------\nThe internal use of these functions has been refactored and there are better\nalternatives. Replace ``exec_command`` with `subprocess.Popen` and\n`temp_file_name <numpy.distutils.exec_command>` with `tempfile.mkstemp`.\n\nWriteable flag of C-API wrapped arrays\n- --------------------------------------\nWhen an array is created from the C-API to wrap a pointer to data, the only\nindication we have of the read-write nature of the data is the ``writeable``\nflag set during creation. It is dangerous to force the flag to writeable.\nIn the future it will not be possible to switch the writeable flag to ``True``\nfrom python.\nThis deprecation should not affect many users since arrays created in such\na manner are very rare in practice and only available through the NumPy C-API.\n\n`numpy.nonzero` should no longer be called on 0d arrays\n- -------------------------------------------------------\nThe behavior of `numpy.nonzero` on 0d arrays was surprising, making uses of it\nalmost always incorrect. If the old behavior was intended, it can be preserved\nwithout a warning by using ``nonzero(atleast_1d(arr))`` instead of\n``nonzero(arr)``.  In a future release, it is most likely this will raise a\n``ValueError``.\n\nWriting to the result of `numpy.broadcast_arrays` will warn\n- -----------------------------------------------------------\n\nCommonly `numpy.broadcast_arrays` returns a writeable array with internal\noverlap, making it unsafe to write to. A future version will set the\n``writeable`` flag to ``False``, and require users to manually set it to\n``True`` if they are sure that is what they want to do. Now writing to it will\nemit a deprecation warning with instructions to set the ``writeable`` flag\n``True``.  Note that if one were to inspect the flag before setting it, one\nwould find it would already be ``True``.  Explicitly setting it, though, as one\nwill need to do in future versions, clears an internal flag that is used to\nproduce the deprecation warning. To help alleviate confusion, an additional\n`FutureWarning` will be emitted when accessing the ``writeable`` flag state to\nclarify the contradiction.\n\nNote that for the C-side buffer protocol such an array will return a\nreadonly buffer immediately unless a writable buffer is requested. If\na writeable buffer is requested a warning will be given. When using\ncython, the ``const`` qualifier should be used with such arrays to avoid\nthe warning (e.g. ``cdef const double[::1] view``).\n\n\nFuture Changes\n==============\n\nShape-1 fields in dtypes won't be collapsed to scalars in a future version\n- --------------------------------------------------------------------------\n\nCurrently, a field specified as ``[(name, dtype, 1)]`` or ``\"1type\"`` is\ninterpreted as a scalar field (i.e., the same as ``[(name, dtype)]`` or\n``[(name, dtype, ()]``). This now raises a FutureWarning; in a future version,\nit will be interpreted as a shape-(1,) field, i.e. the same as ``[(name,\ndtype, (1,))]`` or ``\"(1,)type\"`` (consistently with ``[(name, dtype, n)]``\n/ ``\"ntype\"`` with ``n>1``, which is already equivalent to ``[(name, dtype,\n(n,)]`` / ``\"(n,)type\"``).\n\n\nCompatibility notes\n===================\n\n``float16`` subnormal rounding\n- ------------------------------\nCasting from a different floating point precision to ``float16`` used incorrect\nrounding in some edge cases. This means in rare cases, subnormal results will\nnow be rounded up instead of down, changing the last bit (ULP) of the result.\n\nSigned zero when using divmod\n- -----------------------------\nStarting in version `1.12.0`, numpy incorrectly returned a negatively signed zero\nwhen using the ``divmod`` and ``floor_divide`` functions when the result was\nzero. For example::\n\n   >>> np.zeros(10)//1\n   array([-0., -0., -0., -0., -0., -0., -0., -0., -0., -0.])\n\nWith this release, the result is correctly returned as a positively signed\nzero::\n\n   >>> np.zeros(10)//1\n   array([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n\n``MaskedArray.mask`` now returns a view of the mask, not the mask itself\n- ------------------------------------------------------------------------\nReturning the mask itself was unsafe, as it could be reshaped in place which\nwould violate expectations of the masked array code. The behavior of `mask\n<ma.MaskedArray.mask>` is now consistent with `data <ma.MaskedArray.data>`,\nwhich also returns a view.\n\nThe underlying mask can still be accessed with ``._mask`` if it is needed.\nTests that contain ``assert x.mask is not y.mask`` or similar will need to be\nupdated.\n\nDo not lookup ``__buffer__`` attribute in `numpy.frombuffer`\n- ------------------------------------------------------------\nLooking up ``__buffer__`` attribute in `numpy.frombuffer` was undocumented and\nnon-functional. This code was removed. If needed, use\n``frombuffer(memoryview(obj), ...)`` instead.\n\n``out`` is buffered for memory overlaps in `take`, `choose`, `put`\n- ------------------------------------------------------------------\nIf the out argument to these functions is provided and has memory overlap with\nthe other arguments, it is now buffered to avoid order-dependent behavior.\n\nUnpickling while loading requires explicit opt-in\n- -------------------------------------------------\nThe functions `load`, and ``lib.format.read_array`` take an\n``allow_pickle`` keyword which now defaults to ``False`` in response to\n`CVE-2019-6446 <https://nvd.nist.gov/vuln/detail/CVE-2019-6446>`_.\n\n\n.. currentmodule:: numpy.random.mtrand\n\nPotential changes to the random stream in old random module\n- -----------------------------------------------------------\nDue to bugs in the application of ``log`` to random floating point numbers,\nthe stream may change when sampling from `~RandomState.beta`, `~RandomState.binomial`,\n`~RandomState.laplace`, `~RandomState.logistic`, `~RandomState.logseries` or\n`~RandomState.multinomial` if a ``0`` is generated in the underlying `MT19937\n<~numpy.random.mt11937.MT19937>` random stream.  There is a ``1`` in\n:math:`10^{53}` chance of this occurring, so the probability that the stream\nchanges for any given seed is extremely small. If a ``0`` is encountered in the\nunderlying generator, then the incorrect value produced (either `numpy.inf` or\n`numpy.nan`) is now dropped.\n\n.. currentmodule:: numpy\n\n`i0` now always returns a result with the same shape as the input\n- -----------------------------------------------------------------\nPreviously, the output was squeezed, such that, e.g., input with just a single\nelement would lead to an array scalar being returned, and inputs with shapes\nsuch as ``(10, 1)`` would yield results that would not broadcast against the\ninput.\n\nNote that we generally recommend the SciPy implementation over the numpy one:\nit is a proper ufunc written in C, and more than an order of magnitude faster.\n\n`can_cast` no longer assumes all unsafe casting is allowed\n- ----------------------------------------------------------\nPreviously, `can_cast` returned `True` for almost all inputs for\n``casting='unsafe'``, even for cases where casting was not possible, such as\nfrom a structured dtype to a regular one.  This has been fixed, making it\nmore consistent with actual casting using, e.g., the `.astype <ndarray.astype>`\nmethod.\n\n``ndarray.flags.writeable`` can be switched to true slightly more often\n- -----------------------------------------------------------------------\n\nIn rare cases, it was not possible to switch an array from not writeable\nto writeable, although a base array is writeable. This can happen if an\nintermediate `ndarray.base` object is writeable. Previously, only the deepest\nbase object was considered for this decision. However, in rare cases this\nobject does not have the necessary information. In that case switching to\nwriteable was never allowed. This has now been fixed.\n\n\nC API changes\n=============\n\ndimension or stride input arguments are now passed by ``npy_intp const*``\n- -------------------------------------------------------------------------\nPreviously these function arguments were declared as the more strict\n``npy_intp*``, which prevented the caller passing constant data.\nThis change is backwards compatible, but now allows code like::\n\n    npy_intp const fixed_dims[] = {1, 2, 3};\n    // no longer complains that the const-qualifier is discarded\n    npy_intp size = PyArray_MultiplyList(fixed_dims, 3);\n\n\nNew Features\n============\n\n.. currentmodule:: numpy.random\n\nNew extensible `numpy.random` module with selectable random number generators\n- -----------------------------------------------------------------------------\nA new extensible `numpy.random` module along with four selectable random number\ngenerators and improved seeding designed for use in parallel processes has been\nadded. The currently available :ref:`Bit Generators <bit_generator>` are\n`~mt19937.MT19937`, `~pcg64.PCG64`, `~philox.Philox`, and `~sfc64.SFC64`.\n``PCG64`` is the new default while ``MT19937`` is retained for backwards\ncompatibility. Note that the legacy random module is unchanged and is now\nfrozen, your current results will not change. More information is available in\nthe :ref:`API change description <new-or-different>` and in the `top-level view\n<numpy.random>` documentation.\n\n.. currentmodule:: numpy\n\nlibFLAME\n- --------\nSupport for building NumPy with the libFLAME linear algebra package as the LAPACK,\nimplementation, see\n`libFLAME <https://www.cs.utexas.edu/~flame/web/libFLAME.html>`_ for details.\n\nUser-defined BLAS detection order\n- ---------------------------------\n`distutils` now uses an environment variable, comma-separated and case\ninsensitive, to determine the detection order for BLAS libraries.\nBy default ``NPY_BLAS_ORDER=mkl,blis,openblas,atlas,accelerate,blas``.\nHowever, to force the use of OpenBLAS simply do::\n\n   NPY_BLAS_ORDER=openblas python setup.py build\n\nwhich forces the use of OpenBLAS.\nThis may be helpful for users which have a MKL installation but wishes to try\nout different implementations.\n\nUser-defined LAPACK detection order\n- -----------------------------------\n``numpy.distutils`` now uses an environment variable, comma-separated and case\ninsensitive, to determine the detection order for LAPACK libraries.\nBy default ``NPY_LAPACK_ORDER=mkl,openblas,flame,atlas,accelerate,lapack``.\nHowever, to force the use of OpenBLAS simply do::\n\n   NPY_LAPACK_ORDER=openblas python setup.py build\n\nwhich forces the use of OpenBLAS.\nThis may be helpful for users which have a MKL installation but wishes to try\nout different implementations.\n\n`ufunc.reduce` and related functions now accept a ``where`` mask\n- ----------------------------------------------------------------\n`ufunc.reduce`, `sum`, `prod`, `min`, `max` all\nnow accept a ``where`` keyword argument, which can be used to tell which\nelements to include in the reduction.  For reductions that do not have an\nidentity, it is necessary to also pass in an initial value (e.g.,\n``initial=np.inf`` for `min`).  For instance, the equivalent of\n`nansum` would be ``np.sum(a, where=~np.isnan(a))``.\n\nTimsort and radix sort have replaced mergesort for stable sorting\n- -----------------------------------------------------------------\nBoth radix sort and timsort have been implemented and are now used in place of\nmergesort. Due to the need to maintain backward compatibility, the sorting\n``kind`` options ``\"stable\"`` and ``\"mergesort\"`` have been made aliases of\neach other with the actual sort implementation depending on the array type.\nRadix sort is used for small integer types of 16 bits or less and timsort for\nthe remaining types.  Timsort features improved performace on data containing\nalready or nearly sorted data and performs like mergesort on random data and\nrequires :math:`O(n/2)` working space.  Details of the timsort algorithm can be\nfound at `CPython listsort.txt\n<https://github.com/python/cpython/blob/3.7/Objects/listsort.txt>`_.\n\n`packbits` and `unpackbits` accept an ``order`` keyword\n- -------------------------------------------------------\nThe ``order`` keyword defaults to ``big``, and will order the **bits**\naccordingly. For ``'order=big'`` 3 will become ``[0, 0, 0, 0, 0, 0, 1, 1]``,\nand ``[1, 1, 0, 0, 0, 0, 0, 0]`` for ``order=little``\n\n`unpackbits` now accepts a ``count`` parameter\n- ----------------------------------------------\n``count`` allows subsetting the number of bits that will be unpacked up-front,\nrather than reshaping and subsetting later, making the `packbits` operation\ninvertible, and the unpacking less wasteful. Counts larger than the number of\navailable bits add zero padding. Negative counts trim bits off the end instead\nof counting from the beginning. None counts implement the existing behavior of\nunpacking everything.\n\n`linalg.svd` and `linalg.pinv` can be faster on hermitian inputs\n- ----------------------------------------------------------------\nThese functions now accept a ``hermitian`` argument, matching the one added\nto `linalg.matrix_rank` in 1.14.0.\n\ndivmod operation is now supported for two ``timedelta64`` operands\n- ------------------------------------------------------------------\nThe divmod operator now handles two ``timedelta64`` operands, with\ntype signature ``mm->qm``.\n\n`fromfile` now takes an ``offset`` argument\n- -------------------------------------------\nThis function now takes an ``offset`` keyword argument for binary files,\nwhich specifics the offset (in bytes) from the file's current position.\nDefaults to ``0``.\n\nNew mode \"empty\" for `pad`\n- --------------------------\nThis mode pads an array to a desired shape without initializing the new\nentries.\n\n`empty_like` and related functions now accept a ``shape`` argument\n- ------------------------------------------------------------------\n`empty_like`, `full_like`, `ones_like` and `zeros_like` now accept a ``shape``\nkeyword argument, which can be used to create a new array\nas the prototype, overriding its shape as well. This is particularly useful\nwhen combined with the ``__array_function__`` protocol, allowing the creation\nof new arbitrary-shape arrays from NumPy-like libraries when such an array\nis used as the prototype.\n\nFloating point scalars implement ``as_integer_ratio`` to match the builtin float\n- --------------------------------------------------------------------------------\nThis returns a (numerator, denominator) pair, which can be used to construct a\n`fractions.Fraction`.\n\nStructured ``dtype`` objects can be indexed with multiple fields names\n- ----------------------------------------------------------------------\n``arr.dtype[['a', 'b']]`` now returns a dtype that is equivalent to\n``arr[['a', 'b']].dtype``, for consistency with\n``arr.dtype['a'] == arr['a'].dtype``.\n\nLike the dtype of structured arrays indexed with a list of fields, this dtype\nhas the same ``itemsize`` as the original, but only keeps a subset of the fields.\n\nThis means that ``arr[['a', 'b']]`` and ``arr.view(arr.dtype[['a', 'b']])`` are\nequivalent.\n\n``.npy`` files support unicode field names\n- ------------------------------------------\nA new format version of 3.0 has been introduced, which enables structured types\nwith non-latin1 field names. This is used automatically when needed.\n\n\nImprovements\n============\n\nArray comparison assertions include maximum differences\n- -------------------------------------------------------\nError messages from array comparison tests such as\n`testing.assert_allclose` now include \"max absolute difference\" and\n\"max relative difference,\" in addition to the previous \"mismatch\" percentage.\nThis information makes it easier to update absolute and relative error\ntolerances.\n\nReplacement of the fftpack based `fft` module by the pocketfft library\n- ----------------------------------------------------------------------\nBoth implementations have the same ancestor (Fortran77 FFTPACK by Paul N.\nSwarztrauber), but pocketfft contains additional modifications which improve\nboth accuracy and performance in some circumstances. For FFT lengths containing\nlarge prime factors, pocketfft uses Bluestein's algorithm, which maintains\n:math:`O(N log N)` run time complexity instead of deteriorating towards\n:math:`O(N*N)` for prime lengths. Also, accuracy for real valued FFTs with near\nprime lengths has improved and is on par with complex valued FFTs.\n\nFurther improvements to ``ctypes`` support in `numpy.ctypeslib`\n- ---------------------------------------------------------------\nA new `numpy.ctypeslib.as_ctypes_type` function has been added, which can be\nused to converts a `dtype` into a best-guess `ctypes` type. Thanks to this\nnew function, `numpy.ctypeslib.as_ctypes` now supports a much wider range of\narray types, including structures, booleans, and integers of non-native\nendianness.\n\n`numpy.errstate` is now also a function decorator\n- -------------------------------------------------\nCurrently, if you have a function like::\n\n    def foo():\n        pass\n\nand you want to wrap the whole thing in `errstate`, you have to rewrite it\nlike so::\n\n    def foo():\n        with np.errstate(...):\n            pass\n\nbut with this change, you can do::\n\n    np.errstate(...)\n    def foo():\n        pass\n\nthereby saving a level of indentation\n\n`numpy.exp` and `numpy.log` speed up for float32 implementation\n- ---------------------------------------------------------------\nfloat32 implementation of `exp` and `log` now benefit from AVX2/AVX512\ninstruction set which are detected during runtime. `exp` has a max ulp\nerror of 2.52 and `log` has a max ulp error or 3.83.\n\nImprove performance of `numpy.pad`\n- ----------------------------------\nThe performance of the function has been improved for most cases by filling in\na preallocated array with the desired padded shape instead of using\nconcatenation.\n\n`numpy.interp` handles infinities more robustly\n- -----------------------------------------------\nIn some cases where `interp` would previously return `nan`, it now\nreturns an appropriate infinity.\n\nPathlib support for `fromfile`, `tofile` and `ndarray.dump`\n- -----------------------------------------------------------\n`fromfile`, `ndarray.ndarray.tofile` and `ndarray.dump` now support\nthe `pathlib.Path` type for the ``file``/``fid`` parameter.\n\nSpecialized `isnan`, `isinf`, and `isfinite` ufuncs for bool and int types\n- --------------------------------------------------------------------------\nThe boolean and integer types are incapable of storing `nan` and `inf` values,\nwhich allows us to provide specialized ufuncs that are up to 250x faster than\nthe previous approach.\n\n`isfinite` supports ``datetime64`` and ``timedelta64`` types\n- -----------------------------------------------------------------\nPreviously, `isfinite` used to raise a `TypeError` on being used on these\ntwo types.\n\nNew keywords added to `nan_to_num`\n- ----------------------------------\n`nan_to_num` now accepts keywords ``nan``, ``posinf`` and ``neginf``\nallowing the user to define the value to replace the ``nan``, positive and\nnegative ``np.inf`` values respectively.\n\nMemoryErrors caused by allocated overly large arrays are more descriptive\n- -------------------------------------------------------------------------\nOften the cause of a MemoryError is incorrect broadcasting, which results in a\nvery large and incorrect shape. The message of the error now includes this\nshape to help diagnose the cause of failure.\n\n`floor`, `ceil`, and `trunc` now respect builtin magic methods\n- --------------------------------------------------------------\nThese ufuncs now call the ``__floor__``, ``__ceil__``, and ``__trunc__``\nmethods when called on object arrays, making them compatible with\n`decimal.Decimal` and `fractions.Fraction` objects.\n\n`quantile` now works on `fraction.Fraction` and `decimal.Decimal` objects\n- -------------------------------------------------------------------------\nIn general, this handles object arrays more gracefully, and avoids floating-\npoint operations if exact arithmetic types are used.\n\nSupport of object arrays in `matmul`\n- ------------------------------------\nIt is now possible to use `matmul` (or the ```` operator) with object arrays.\nFor instance, it is now possible to do::\n\n    from fractions import Fraction\n    a = np.array([[Fraction(1, 2), Fraction(1, 3)], [Fraction(1, 3), Fraction(1, 2)]])\n    b = a  a\n\n\nChanges\n=======\n\n`median` and `percentile` family of functions no longer warn about ``nan``\n- --------------------------------------------------------------------------\n`numpy.median`, `numpy.percentile`, and `numpy.quantile` used to emit a\n``RuntimeWarning`` when encountering an `nan`. Since they return the\n``nan`` value, the warning is redundant and has been removed.\n\n``timedelta64 % 0`` behavior adjusted to return ``NaT``\n- -------------------------------------------------------\nThe modulus operation with two ``np.timedelta64`` operands now returns\n``NaT`` in the case of division by zero, rather than returning zero\n\nNumPy functions now always support overrides with ``__array_function__``\n- ------------------------------------------------------------------------\nNumPy now always checks the ``__array_function__`` method to implement overrides\nof NumPy functions on non-NumPy arrays, as described in `NEP 18`_. The feature\nwas available for testing with NumPy 1.16 if appropriate environment variables\nare set, but is now always enabled.\n\n.. _`NEP 18` : http://www.numpy.org/neps/nep-0018-array-function-protocol.html\n\n``lib.recfunctions.structured_to_unstructured`` does not squeeze single-field views\n- -----------------------------------------------------------------------------------\nPreviously ``structured_to_unstructured(arr[['a']])`` would produce a squeezed\nresult inconsistent with ``structured_to_unstructured(arr[['a', b']])``. This\nwas accidental. The old behavior can be retained with\n``structured_to_unstructured(arr[['a']]).squeeze(axis=-1)`` or far more simply,\n``arr['a']``.\n\n`clip` now uses a ufunc under the hood\n- --------------------------------------\nThis means that registering clip functions for custom dtypes in C via\n``descr->f->fastclip`` is deprecated - they should use the ufunc registration\nmechanism instead, attaching to the ``np.core.umath.clip`` ufunc.\n\nIt also means that ``clip`` accepts ``where`` and ``casting`` arguments,\nand can be override with ``__array_ufunc__``.\n\nA consequence of this change is that some behaviors of the old ``clip`` have\nbeen deprecated:\n\n* Passing ``nan`` to mean \"do not clip\" as one or both bounds. This didn't work\n  in all cases anyway, and can be better handled by passing infinities of the\n  appropriate sign.\n* Using \"unsafe\" casting by default when an ``out`` argument is passed. Using\n  ``casting=\"unsafe\"`` explicitly will silence this warning.\n\nAdditionally, there are some corner cases with behavior changes:\n\n* Padding ``max < min`` has changed to be more consistent across dtypes, but\n  should not be relied upon.\n* Scalar ``min`` and ``max`` take part in promotion rules like they do in all\n  other ufuncs.\n\n``__array_interface__`` offset now works as documented\n- ------------------------------------------------------\nThe interface may use an ``offset`` value that was mistakenly ignored.\n\nPickle protocol in `savez` set to 3 for ``force zip64`` flag\n- -----------------------------------------------------------------\n`savez` was not using the ``force_zip64`` flag, which limited the size of\nthe archive to 2GB. But using the flag requires us to use pickle protocol 3 to\nwrite ``object`` arrays. The protocol used was bumped to 3, meaning the archive\nwill be unreadable by Python2.\n\nStructured arrays indexed with non-existent fields raise ``KeyError`` not ``ValueError``\n- ----------------------------------------------------------------------------------------\n``arr['bad_field']`` on a structured type raises ``KeyError``, for consistency\nwith ``dict['bad_field']``.\n\n\nChecksums\n=========\n\nMD5\n- ---\n\n    5ac469e3c2cd9b34c2a906d48544f491  numpy-1.17.0-cp35-cp35m-macosx_10_6_intel.macosx_10_9_intel.macosx_10_9_x86_64.macosx_10_10_intel.macosx_10_10_x86_64.whl\n    526c60c36c61b7d30e6a50ffad3e81a2  numpy-1.17.0-cp35-cp35m-manylinux1_i686.whl\n    71066029b28fa03b897fd960be6dc6a9  numpy-1.17.0-cp35-cp35m-manylinux1_x86_64.whl\n    ab16f4b7f83e64113bf118ae3a9414b9  numpy-1.17.0-cp35-cp35m-win32.whl\n    e919d45495558d93275ef4ab724f767a  numpy-1.17.0-cp35-cp35m-win_amd64.whl\n    101e88a9870a5046536f71d77d0a7f5c  numpy-1.17.0-cp36-cp36m-macosx_10_6_intel.macosx_10_9_intel.macosx_10_9_x86_64.macosx_10_10_intel.macosx_10_10_x86_64.whl\n    c996484b56aefecfe3626bcaca88a187  numpy-1.17.0-cp36-cp36m-manylinux1_i686.whl\n    4db1ecda4fbc202722774599cb434378  numpy-1.17.0-cp36-cp36m-manylinux1_x86_64.whl\n    feeecc8ea0bbc37b2f0be447b32a478f  numpy-1.17.0-cp36-cp36m-win32.whl\n    b7efb94a9cf4cc864ea546fb21a4d6bf  numpy-1.17.0-cp36-cp36m-win_amd64.whl\n    c6501eed55a840b2c81b211d6cf5065e  numpy-1.17.0-cp37-cp37m-macosx_10_6_intel.macosx_10_9_intel.macosx_10_9_x86_64.macosx_10_10_intel.macosx_10_10_x86_64.whl\n    49ae9d7440e5dbabf3e02eba5b4bb8cd  numpy-1.17.0-cp37-cp37m-manylinux1_i686.whl\n    a245e8fc884fcd6ad1c53c322496cace  numpy-1.17.0-cp37-cp37m-manylinux1_x86_64.whl\n    0da9af1ac3832ae8b94f5fdce31c8c7d  numpy-1.17.0-cp37-cp37m-win32.whl\n    1ffa1bc110de363748a849a35126d9ff  numpy-1.17.0-cp37-cp37m-win_amd64.whl\n    c48b2ad785f82cdfe28c907ce35e2a71  numpy-1.17.0.tar.gz\n    aed49b31bcb44ec73b8155be78566135  numpy-1.17.0.zip\n\nSHA256\n- ------\n\n    910d2272403c2ea8a52d9159827dc9f7c27fb4b263749dca884e2e4a8af3b302  numpy-1.17.0-cp35-cp35m-macosx_10_6_intel.macosx_10_9_intel.macosx_10_9_x86_64.macosx_10_10_intel.macosx_10_10_x86_64.whl\n    9ce8300950f2f1d29d0e49c28ebfff0d2f1e2a7444830fbb0b913c7c08f31511  numpy-1.17.0-cp35-cp35m-manylinux1_i686.whl\n    7724e9e31ee72389d522b88c0d4201f24edc34277999701ccd4a5392e7d8af61  numpy-1.17.0-cp35-cp35m-manylinux1_x86_64.whl\n    0cdd229a53d2720d21175012ab0599665f8c9588b3b8ffa6095dd7b90f0691dd  numpy-1.17.0-cp35-cp35m-win32.whl\n    5adfde7bd3ee4864536e230bcab1c673f866736698724d5d28c11a4d63672658  numpy-1.17.0-cp35-cp35m-win_amd64.whl\n    464b1c48baf49e8505b1bb754c47a013d2c305c5b14269b5c85ea0625b6a988a  numpy-1.17.0-cp36-cp36m-macosx_10_6_intel.macosx_10_9_intel.macosx_10_9_x86_64.macosx_10_10_intel.macosx_10_10_x86_64.whl\n    eb0fc4a492cb896346c9e2c7a22eae3e766d407df3eb20f4ce027f23f76e4c54  numpy-1.17.0-cp36-cp36m-manylinux1_i686.whl\n    9588c6b4157f493edeb9378788dcd02cb9e6a6aeaa518b511a1c79d06cbd8094  numpy-1.17.0-cp36-cp36m-manylinux1_x86_64.whl\n    03e311b0a4c9f5755da7d52161280c6a78406c7be5c5cc7facfbcebb641efb7e  numpy-1.17.0-cp36-cp36m-win32.whl\n    c3ab2d835b95ccb59d11dfcd56eb0480daea57cdf95d686d22eff35584bc4554  numpy-1.17.0-cp36-cp36m-win_amd64.whl\n    f4e4612de60a4f1c4d06c8c2857cdcb2b8b5289189a12053f37d3f41f06c60d0  numpy-1.17.0-cp37-cp37m-macosx_10_6_intel.macosx_10_9_intel.macosx_10_9_x86_64.macosx_10_10_intel.macosx_10_10_x86_64.whl\n    312bb18e95218bedc3563f26fcc9c1c6bfaaf9d453d15942c0839acdd7e4c473  numpy-1.17.0-cp37-cp37m-manylinux1_i686.whl\n    8d36f7c53ae741e23f54793ffefb2912340b800476eb0a831c6eb602e204c5c4  numpy-1.17.0-cp37-cp37m-manylinux1_x86_64.whl\n    ec0c56eae6cee6299f41e780a0280318a93db519bbb2906103c43f3e2be1206c  numpy-1.17.0-cp37-cp37m-win32.whl\n    be39cca66cc6806652da97103605c7b65ee4442c638f04ff064a7efd9a81d50a  numpy-1.17.0-cp37-cp37m-win_amd64.whl\n    47b7b6145e7ba5918ce26be25999b6d4b35cf9fbfdf46b7da50090ffdb020445  numpy-1.17.0.tar.gz\n    951fefe2fb73f84c620bec4e001e80a80ddaa1b84dce244ded7f1e0cbe0ed34a  numpy-1.17.0.zip\n-----BEGIN PGP SIGNATURE-----\n\niQEzBAEBCAAdFiEEU6DlKD8F4p1xKRSeZ58ig3fFJHsFAl07P9kACgkQZ58ig3fF\nJHsvxAf/Xd86xi9nEUJ6zivcQBbWLHlYHPp4eBCebXQvIuDNI5uXodVgLZksaxBD\nq1+oXHoUQD49EPKqeEfBjjhkrbnLxbONKdUYHZ/oZmDPg0tKK3jxyM2c1di45bII\n0jOQEwB/H0PrBvLTujCHljUBkPOdg28IyKHWE/TmfUBBb9yOASILSxAo9YlKM8tZ\nbIPwrDxHh1zTFH7AKWc4b5GAoM5gh1ZkfX8rL3Kq3v0VtR6O0qYYpu6DvAr5Yy4j\nP76a5eKcB8nsQ3HrdIV2tgreHYS2ViZX3bFzJDwb5z8d/RUthu7RrxEwjxX9ocLe\n7UoI63D+GXb0IwZd50SKwaVwPYQaaw==\n=Djve\n-----END PGP SIGNATURE-----\n\n\n.. currentmodule:: numpy\n\n=========================\n", "1.21.3": "==========================\n\nThe NumPy 1.21.3 is a maintenance release the fixes a few bugs discovered after\n1.21.2. It also provides 64 bit Python 3.10.0 wheels. Note a few oddities about\nPython 3.10:\n\n* There are no 32 bit wheels for Windows, Mac, or Linux.\n* The Mac Intel builds are only available in universal2 wheels.\n\nThe Python versions supported in this release are 3.7-3.10. If you want to\ncompile your own version using gcc-11 you will need to use gcc-11.2+ to avoid\nproblems.\n\nContributors\n============\n\nA total of 7 people contributed to this release.  People with a \"+\" by their\nnames contributed a patch for the first time.\n\n* Aaron Meurer\n* Bas van Beek\n* Charles Harris\n* Developer-Ecosystem-Engineering +\n* Kevin Sheppard\n* Sebastian Berg\n* Warren Weckesser\n\nPull requests merged\n====================\n\nA total of 8 pull requests were merged for this release.\n\n* `19745 <https://github.com/numpy/numpy/pull/19745>`__: ENH: Add dtype-support to 3 ```generic``/``ndarray`` methods\n* `19955 <https://github.com/numpy/numpy/pull/19955>`__: BUG: Resolve Divide by Zero on Apple silicon + test failures...\n* `19958 <https://github.com/numpy/numpy/pull/19958>`__: MAINT: Mark type-check-only ufunc subclasses as ufunc aliases...\n* `19994 <https://github.com/numpy/numpy/pull/19994>`__: BUG: np.tan(np.inf) test failure\n* `20080 <https://github.com/numpy/numpy/pull/20080>`__: BUG: Correct incorrect advance in PCG with emulated int128\n* `20081 <https://github.com/numpy/numpy/pull/20081>`__: BUG: Fix NaT handling in the PyArray_CompareFunc for datetime...\n* `20082 <https://github.com/numpy/numpy/pull/20082>`__: DOC: Ensure that we add documentation also as to the dict for...\n* `20106 <https://github.com/numpy/numpy/pull/20106>`__: BUG: core: result_type(0, np.timedelta64(4)) would seg. fault.\n\nChecksums\n=========\n\nMD5\n---\n::\n\n    9acea9630856659ba48fdb582ecc37b4  numpy-1.21.3-cp310-cp310-macosx_10_9_universal2.whl\n    a70f80a4e74a3153a8307c4f0ea8d13d  numpy-1.21.3-cp310-cp310-macosx_11_0_arm64.whl\n    13cfe83efd261ea1c3d1eb02c1d3af83  numpy-1.21.3-cp310-cp310-manylinux_2_17_aarch64.manylinux2014_aarch64.whl\n    8576bfd867834182269f72abbaa2e81e  numpy-1.21.3-cp310-cp310-manylinux_2_17_x86_64.manylinux2014_x86_64.whl\n    8ac48f503f1e22c0c2b5d056772aca27  numpy-1.21.3-cp310-cp310-win_amd64.whl\n    cbe0d0d7623de3c2c7593f673d1a880a  numpy-1.21.3-cp37-cp37m-macosx_10_9_x86_64.whl\n    0967b18baba13e511c7eb48902a62b39  numpy-1.21.3-cp37-cp37m-manylinux_2_12_i686.manylinux2010_i686.whl\n    da54c9566f3e3f8c7d60efebfdf7e1ae  numpy-1.21.3-cp37-cp37m-manylinux_2_12_x86_64.manylinux2010_x86_64.whl\n    0aa000f3c10cf74bf47770577384b5c8  numpy-1.21.3-cp37-cp37m-manylinux_2_17_aarch64.manylinux2014_aarch64.whl\n    5683501bf91be25c53c52e3b083098c3  numpy-1.21.3-cp37-cp37m-manylinux_2_5_i686.manylinux1_i686.whl\n    89e15d979533f8a314e0ab0648ee7153  numpy-1.21.3-cp37-cp37m-manylinux_2_5_x86_64.manylinux1_x86_64.whl\n    a093fea475b5ed18bd21b3c79e68e388  numpy-1.21.3-cp37-cp37m-win32.whl\n    f906001213ed0902b1aecfaa12224e94  numpy-1.21.3-cp37-cp37m-win_amd64.whl\n    88a2cd378412220d618473dd273baf04  numpy-1.21.3-cp38-cp38-macosx_10_9_universal2.whl\n    1bc55202f604e30f338bc2ed27b561bc  numpy-1.21.3-cp38-cp38-macosx_10_9_x86_64.whl\n    9555dc6de8748958434e8f2feba98494  numpy-1.21.3-cp38-cp38-macosx_11_0_arm64.whl\n    93ad32cc87866e9242156bdadc61e5f5  numpy-1.21.3-cp38-cp38-manylinux_2_12_i686.manylinux2010_i686.whl\n    7cb0b7dd6aee667ecdccae1829260186  numpy-1.21.3-cp38-cp38-manylinux_2_12_x86_64.manylinux2010_x86_64.whl\n    34e6f5f9e9534ef8772f024170c2bd2d  numpy-1.21.3-cp38-cp38-manylinux_2_17_aarch64.manylinux2014_aarch64.whl\n    54e6abfb8f600de2ccd1649b1fca820b  numpy-1.21.3-cp38-cp38-manylinux_2_5_i686.manylinux1_i686.whl\n    260ba58f2dc64e779eac7318ec92f36c  numpy-1.21.3-cp38-cp38-manylinux_2_5_x86_64.manylinux1_x86_64.whl\n    889202c6bdaf8c1ae0803925e9e1a8f7  numpy-1.21.3-cp38-cp38-win32.whl\n    980303a7e6317faf9a56ba8fc80795d9  numpy-1.21.3-cp38-cp38-win_amd64.whl\n    44d6bd26fb910710ab4002d0028c9020  numpy-1.21.3-cp39-cp39-macosx_10_9_universal2.whl\n    6f5b02152bd0b08a77b79657788ce59c  numpy-1.21.3-cp39-cp39-macosx_10_9_x86_64.whl\n    ad05d5c412d15e7880cd65cc6cdd4aac  numpy-1.21.3-cp39-cp39-macosx_11_0_arm64.whl\n    5b61a91221931af4a78c3bd20925a91f  numpy-1.21.3-cp39-cp39-manylinux_2_12_i686.manylinux2010_i686.whl\n    df7344ae04c5a54249fa1b63a256ce61  numpy-1.21.3-cp39-cp39-manylinux_2_12_x86_64.manylinux2010_x86_64.whl\n    c653a096da47b64b42e8f1536a21f7d4  numpy-1.21.3-cp39-cp39-manylinux_2_17_aarch64.manylinux2014_aarch64.whl\n    e0d35451ba1c37f96e032bc6f75ccdf7  numpy-1.21.3-cp39-cp39-win32.whl\n    b2e1dc59b6fa224ce11728d94be740a6  numpy-1.21.3-cp39-cp39-win_amd64.whl\n    8ce925a0fcbc1062985026215d369276  numpy-1.21.3-pp37-pypy37_pp73-manylinux_2_12_x86_64.manylinux2010_x86_64.whl\n    b8e6b7165f105bde0b45cd9ae34bfe20  numpy-1.21.3.tar.gz\n    59d986f5ccf3edfb7d4d14949c6666ed  numpy-1.21.3.zip\n\nSHA256\n------\n::\n\n    508b0b513fa1266875524ba8a9ecc27b02ad771fe1704a16314dc1a816a68737  numpy-1.21.3-cp310-cp310-macosx_10_9_universal2.whl\n    5dfe9d6a4c39b8b6edd7990091fea4f852888e41919d0e6722fe78dd421db0eb  numpy-1.21.3-cp310-cp310-macosx_11_0_arm64.whl\n    8a10968963640e75cc0193e1847616ab4c718e83b6938ae74dea44953950f6b7  numpy-1.21.3-cp310-cp310-manylinux_2_17_aarch64.manylinux2014_aarch64.whl\n    49c6249260890e05b8111ebfc391ed58b3cb4b33e63197b2ec7f776e45330721  numpy-1.21.3-cp310-cp310-manylinux_2_17_x86_64.manylinux2014_x86_64.whl\n    f8f4625536926a155b80ad2bbff44f8cc59e9f2ad14cdda7acf4c135b4dc8ff2  numpy-1.21.3-cp310-cp310-win_amd64.whl\n    e54af82d68ef8255535a6cdb353f55d6b8cf418a83e2be3569243787a4f4866f  numpy-1.21.3-cp37-cp37m-macosx_10_9_x86_64.whl\n    f41b018f126aac18583956c54544db437f25c7ee4794bcb23eb38bef8e5e192a  numpy-1.21.3-cp37-cp37m-manylinux_2_12_i686.manylinux2010_i686.whl\n    50cd26b0cf6664cb3b3dd161ba0a09c9c1343db064e7c69f9f8b551f5104d654  numpy-1.21.3-cp37-cp37m-manylinux_2_12_x86_64.manylinux2010_x86_64.whl\n    4cc9b512e9fb590797474f58b7f6d1f1b654b3a94f4fa8558b48ca8b3cfc97cf  numpy-1.21.3-cp37-cp37m-manylinux_2_17_aarch64.manylinux2014_aarch64.whl\n    88a5d6b268e9ad18f3533e184744acdaa2e913b13148160b1152300c949bbb5f  numpy-1.21.3-cp37-cp37m-manylinux_2_5_i686.manylinux1_i686.whl\n    3c09418a14471c7ae69ba682e2428cae5b4420a766659605566c0fa6987f6b7e  numpy-1.21.3-cp37-cp37m-manylinux_2_5_x86_64.manylinux1_x86_64.whl\n    90bec6a86b348b4559b6482e2b684db4a9a7eed1fa054b86115a48d58fbbf62a  numpy-1.21.3-cp37-cp37m-win32.whl\n    043e83bfc274649c82a6f09836943e4a4aebe5e33656271c7dbf9621dd58b8ec  numpy-1.21.3-cp37-cp37m-win_amd64.whl\n    75621882d2230ab77fb6a03d4cbccd2038511491076e7964ef87306623aa5272  numpy-1.21.3-cp38-cp38-macosx_10_9_universal2.whl\n    188031f833bbb623637e66006cf75e933e00e7231f67e2b45cf8189612bb5dc3  numpy-1.21.3-cp38-cp38-macosx_10_9_x86_64.whl\n    160ccc1bed3a8371bf0d760971f09bfe80a3e18646620e9ded0ad159d9749baa  numpy-1.21.3-cp38-cp38-macosx_11_0_arm64.whl\n    29fb3dcd0468b7715f8ce2c0c2d9bbbaf5ae686334951343a41bd8d155c6ea27  numpy-1.21.3-cp38-cp38-manylinux_2_12_i686.manylinux2010_i686.whl\n    32437f0b275c1d09d9c3add782516413e98cd7c09e6baf4715cbce781fc29912  numpy-1.21.3-cp38-cp38-manylinux_2_12_x86_64.manylinux2010_x86_64.whl\n    e606e6316911471c8d9b4618e082635cfe98876007556e89ce03d52ff5e8fcf0  numpy-1.21.3-cp38-cp38-manylinux_2_17_aarch64.manylinux2014_aarch64.whl\n    a99a6b067e5190ac6d12005a4d85aa6227c5606fa93211f86b1dafb16233e57d  numpy-1.21.3-cp38-cp38-manylinux_2_5_i686.manylinux1_i686.whl\n    dde972a1e11bb7b702ed0e447953e7617723760f420decb97305e66fb4afc54f  numpy-1.21.3-cp38-cp38-manylinux_2_5_x86_64.manylinux1_x86_64.whl\n    fe52dbe47d9deb69b05084abd4b0df7abb39a3c51957c09f635520abd49b29dd  numpy-1.21.3-cp38-cp38-win32.whl\n    75eb7cadc8da49302f5b659d40ba4f6d94d5045fbd9569c9d058e77b0514c9e4  numpy-1.21.3-cp38-cp38-win_amd64.whl\n    2a6ee9620061b2a722749b391c0d80a0e2ae97290f1b32e28d5a362e21941ee4  numpy-1.21.3-cp39-cp39-macosx_10_9_universal2.whl\n    5c4193f70f8069550a1788bd0cd3268ab7d3a2b70583dfe3b2e7f421e9aace06  numpy-1.21.3-cp39-cp39-macosx_10_9_x86_64.whl\n    28f15209fb535dd4c504a7762d3bc440779b0e37d50ed810ced209e5cea60d96  numpy-1.21.3-cp39-cp39-macosx_11_0_arm64.whl\n    c6c2d535a7beb1f8790aaa98fd089ceab2e3dd7ca48aca0af7dc60e6ef93ffe1  numpy-1.21.3-cp39-cp39-manylinux_2_12_i686.manylinux2010_i686.whl\n    bffa2eee3b87376cc6b31eee36d05349571c236d1de1175b804b348dc0941e3f  numpy-1.21.3-cp39-cp39-manylinux_2_12_x86_64.manylinux2010_x86_64.whl\n    cc14e7519fab2a4ed87d31f99c31a3796e4e1fe63a86ebdd1c5a1ea78ebd5896  numpy-1.21.3-cp39-cp39-manylinux_2_17_aarch64.manylinux2014_aarch64.whl\n    dd0482f3fc547f1b1b5d6a8b8e08f63fdc250c58ce688dedd8851e6e26cff0f3  numpy-1.21.3-cp39-cp39-win32.whl\n    300321e3985c968e3ae7fbda187237b225f3ffe6528395a5b7a5407f73cf093e  numpy-1.21.3-cp39-cp39-win_amd64.whl\n    98339aa9911853f131de11010f6dd94c8cec254d3d1f7261528c3b3e3219f139  numpy-1.21.3-pp37-pypy37_pp73-manylinux_2_12_x86_64.manylinux2010_x86_64.whl\n    d0bba24083c01ae43457514d875f10d9ce4c1125d55b1e2573277b2410f2d068  numpy-1.21.3.tar.gz\n    63571bb7897a584ca3249c86dd01c10bcb5fe4296e3568b2e9c1a55356b6410e  numpy-1.21.3.zip\n\n\n-----BEGIN PGP SIGNED MESSAGE-----\nHash: SHA1\n\n==========================\n", "1.15.3": "==========================\n\nThis is a bugfix release for bugs and regressions reported following the 1.15.2\nrelease.  The Python versions supported by this release are 2.7, 3.4-3.7. The\nwheels are linked with OpenBLAS v0.3.0, which should fix some of the linalg\nproblems reported for NumPy 1.14.\n\nCompatibility Note\n==================\n\nThe NumPy 1.15.x OS X wheels released on PyPI no longer contain 32-bit\nbinaries.  That will also be the case in future releases. See\n`11625 <https://github.com/numpy/numpy/issues/11625>`__ for the related\ndiscussion.  Those needing 32-bit support should look elsewhere or build\nfrom source.\n\nContributors\n============\n\nA total of 7 people contributed to this release.  People with a \"+\" by their\nnames contributed a patch for the first time.\n\n* Allan Haldane\n* Charles Harris\n* Jeroen Demeyer\n* Kevin Sheppard\n* Matthew Bowden +\n* Matti Picus\n* Tyler Reddy\n\nPull requests merged\n====================\n\nA total of 12 pull requests were merged for this release.\n\n* `12080 <https://github.com/numpy/numpy/pull/12080>`__: MAINT: Blacklist some MSVC complex functions.\n* `12083 <https://github.com/numpy/numpy/pull/12083>`__: TST: Add azure CI testing to 1.15.x branch.\n* `12084 <https://github.com/numpy/numpy/pull/12084>`__: BUG: test_path() now uses Path.resolve()\n* `12085 <https://github.com/numpy/numpy/pull/12085>`__: TST, MAINT: Fix some failing tests on azure-pipelines mac and...\n* `12187 <https://github.com/numpy/numpy/pull/12187>`__: BUG: Fix memory leak in mapping.c\n* `12188 <https://github.com/numpy/numpy/pull/12188>`__: BUG: Allow boolean subtract in histogram\n* `12189 <https://github.com/numpy/numpy/pull/12189>`__: BUG: Fix in-place permutation\n* `12190 <https://github.com/numpy/numpy/pull/12190>`__: BUG: limit default for get_num_build_jobs() to 8\n* `12191 <https://github.com/numpy/numpy/pull/12191>`__: BUG: OBJECT_to_* should check for errors\n* `12192 <https://github.com/numpy/numpy/pull/12192>`__: DOC: Prepare for NumPy 1.15.3 release.\n* `12237 <https://github.com/numpy/numpy/pull/12237>`__: BUG: Fix MaskedArray fill_value type conversion.\n* `12238 <https://github.com/numpy/numpy/pull/12238>`__: TST: Backport azure-pipeline testing fixes for Mac\n\nChecksums\n=========\n\nMD5\n- ---\n\n    fc1ae8356a65804d02e5c7d9c1c07f65  numpy-1.15.3-cp27-cp27m-macosx_10_6_intel.macosx_10_9_intel.macosx_10_9_x86_64.macosx_10_10_intel.macosx_10_10_x86_64.whl\n    85faf750ff68d76dad812eb6410cc417  numpy-1.15.3-cp27-cp27m-manylinux1_i686.whl\n    6d92d50f6235501475b642fc35212ad7  numpy-1.15.3-cp27-cp27m-manylinux1_x86_64.whl\n    f7430f4ca8d179a9e34072c0d1c1ca9c  numpy-1.15.3-cp27-cp27mu-manylinux1_i686.whl\n    ebd394af280ee41b55add821f84dc180  numpy-1.15.3-cp27-cp27mu-manylinux1_x86_64.whl\n    3bac2fd14dc19c20a0ced77bb8c395de  numpy-1.15.3-cp27-none-win32.whl\n    da69a44d0292379a261f1bf33b2afe3e  numpy-1.15.3-cp27-none-win_amd64.whl\n    c021f69eeed541202947d11c0ec3c2f4  numpy-1.15.3-cp34-cp34m-macosx_10_6_intel.macosx_10_9_intel.macosx_10_9_x86_64.macosx_10_10_intel.macosx_10_10_x86_64.whl\n    4c2a4a7685c7431937aa0b5e6425b7de  numpy-1.15.3-cp34-cp34m-manylinux1_i686.whl\n    2eb4e845844b91853743bb4d4316e237  numpy-1.15.3-cp34-cp34m-manylinux1_x86_64.whl\n    47b03a3e34152c7e1ae7056f672674a5  numpy-1.15.3-cp34-none-win32.whl\n    64ebc4e0a722e5a6f1bd697309c3f951  numpy-1.15.3-cp34-none-win_amd64.whl\n    f7a9b021b45372fa39e009ae396d6108  numpy-1.15.3-cp35-cp35m-macosx_10_6_intel.macosx_10_9_intel.macosx_10_9_x86_64.macosx_10_10_intel.macosx_10_10_x86_64.whl\n    7a7578978757cb69507ab680a2f9b8f3  numpy-1.15.3-cp35-cp35m-manylinux1_i686.whl\n    52d5bd16e06561e735cb7f461370e697  numpy-1.15.3-cp35-cp35m-manylinux1_x86_64.whl\n    c1421e59a425b6cd1307a45612c4911f  numpy-1.15.3-cp35-none-win32.whl\n    2ea2c18feb7f92ebd6b64261265d1b7f  numpy-1.15.3-cp35-none-win_amd64.whl\n    ed7b1d79ad554f59c65b6c2d15924624  numpy-1.15.3-cp36-cp36m-macosx_10_6_intel.macosx_10_9_intel.macosx_10_9_x86_64.macosx_10_10_intel.macosx_10_10_x86_64.whl\n    bece3ef7768bfa7b354b8d1014aa85b3  numpy-1.15.3-cp36-cp36m-manylinux1_i686.whl\n    4ed669d22449b6e1759b320ff9b37eb7  numpy-1.15.3-cp36-cp36m-manylinux1_x86_64.whl\n    a3c7ce17e1fdf009950f2f41adcde29b  numpy-1.15.3-cp36-none-win32.whl\n    890f23c488a00a2c64578bcb3737533e  numpy-1.15.3-cp36-none-win_amd64.whl\n    c3a332b97d53c60d8c129a1a8e062652  numpy-1.15.3-cp37-cp37m-macosx_10_6_intel.macosx_10_9_intel.macosx_10_9_x86_64.macosx_10_10_intel.macosx_10_10_x86_64.whl\n    096f70a3a147a596a9317ce8ac9bf1bd  numpy-1.15.3-cp37-cp37m-manylinux1_i686.whl\n    2317122b49e79ffad91250a428ca54f9  numpy-1.15.3-cp37-cp37m-manylinux1_x86_64.whl\n    2719106f42758fd285bce25fa3c1a78e  numpy-1.15.3-cp37-none-win32.whl\n    9a692a2bbcbaabf98f19fbd9c0c5c163  numpy-1.15.3-cp37-none-win_amd64.whl\n    274dd6db3a13c6b6c47a05b5365e1749  numpy-1.15.3.tar.gz\n    7f1b9e521c2a662cecf3708026e8bdad  numpy-1.15.3.zip\n\nSHA256\n- ------\n\n    3c7959f750b54b445f14962a3ddc41b9eadbab00b86da55fbb1967b2b79aad10  numpy-1.15.3-cp27-cp27m-macosx_10_6_intel.macosx_10_9_intel.macosx_10_9_x86_64.macosx_10_10_intel.macosx_10_10_x86_64.whl\n    9d1598573d310104acb90377f0a8c2319f737084689f5eb18012becaf345cda5  numpy-1.15.3-cp27-cp27m-manylinux1_i686.whl\n    a988db28f54e104a01e8573ceb6f28202b4c15635b1450b2e3b2b822c6564f9b  numpy-1.15.3-cp27-cp27m-manylinux1_x86_64.whl\n    3d8f9273c763a139a99e65c2a3c10f1109df30bedae7f011b10d95c538364704  numpy-1.15.3-cp27-cp27mu-manylinux1_i686.whl\n    919f65e0732195474897b1cafefb4d4e7c2bb8174a725e506b62e9096e4df28d  numpy-1.15.3-cp27-cp27mu-manylinux1_x86_64.whl\n    d263f8f14f2da0c079c0297e829e550d8f2c4e0ffef215506bd1d0ddd2bff3de  numpy-1.15.3-cp27-none-win32.whl\n    b12fe6f31babb9477aa0f9692730654b3ee0e71f33b4568170dfafd439caf0a2  numpy-1.15.3-cp27-none-win_amd64.whl\n    febd31cd0d2fd2509ca2ec53cb339f8bf593c1bd245b9fc55c1917a68532a0af  numpy-1.15.3-cp34-cp34m-macosx_10_6_intel.macosx_10_9_intel.macosx_10_9_x86_64.macosx_10_10_intel.macosx_10_10_x86_64.whl\n    d0f36a24cf8061a2c03e151be3418146717505b9b4ec17502fa3bbdb04ec1431  numpy-1.15.3-cp34-cp34m-manylinux1_i686.whl\n    63bca71691339d2d6f8a7c970821f2b12098a53afccc0190d4e1555e75e5223a  numpy-1.15.3-cp34-cp34m-manylinux1_x86_64.whl\n    b7599ff4acd23f5de983e3aec772153b1043e131487a5c6ad0f94b41a828877a  numpy-1.15.3-cp34-none-win32.whl\n    c9f4dafd6065c4c782be84cd67ceeb9b1d4380af60a7af32be10ebecd723385e  numpy-1.15.3-cp34-none-win_amd64.whl\n    32a07241cb624e104b88b08dea2851bf4ec5d65a1f599d7735041ced7171fd7a  numpy-1.15.3-cp35-cp35m-macosx_10_6_intel.macosx_10_9_intel.macosx_10_9_x86_64.macosx_10_10_intel.macosx_10_10_x86_64.whl\n    8bc4b92a273659e44ca3f3a2f8786cfa39d8302223bcfe7df794429c63d5f5a1  numpy-1.15.3-cp35-cp35m-manylinux1_i686.whl\n    2f5ebc7a04885c7d69e5daa05208faef4db7f1ae6a99f4d36962df8cd54cdc76  numpy-1.15.3-cp35-cp35m-manylinux1_x86_64.whl\n    ce3622b73ccd844ba301c1aea65d36cf9d8331e7c25c16b1725d0f14db99aaf4  numpy-1.15.3-cp35-none-win32.whl\n    9fff90c88bfaad2901be50453d5cd7897a826c1d901f0654ee1d73ab3a48cd18  numpy-1.15.3-cp35-none-win_amd64.whl\n    032df9b6571c5f1d41ea6f6a189223208cb488990373aa686aca55570fcccb42  numpy-1.15.3-cp36-cp36m-macosx_10_6_intel.macosx_10_9_intel.macosx_10_9_x86_64.macosx_10_10_intel.macosx_10_10_x86_64.whl\n    866a7c8774ccc7d603667fad95456b4cf56d79a2bb5a7648ac9f0082e0b9416e  numpy-1.15.3-cp36-cp36m-manylinux1_i686.whl\n    7ae9c3baff3b989859c88e0168ad10902118595b996bf781eaf011bb72428798  numpy-1.15.3-cp36-cp36m-manylinux1_x86_64.whl\n    d8837ff272800668aabdfe70b966631914b0d6513aed4fc1b1428446f771834d  numpy-1.15.3-cp36-none-win32.whl\n    fa337b6bd5fe2b8c4e705f4102186feb9985de9bb8536d32d5129a658f1789e0  numpy-1.15.3-cp36-none-win_amd64.whl\n    2aa0910eaeb603b1a5598193cc3bc8eacf1baf6c95cbc3955eb8e15fa380c133  numpy-1.15.3-cp37-cp37m-macosx_10_6_intel.macosx_10_9_intel.macosx_10_9_x86_64.macosx_10_10_intel.macosx_10_10_x86_64.whl\n    ef694fe72a3995aa778a5095bda946e0d31f7efabd5e8063ad8c6238ab7d3f78  numpy-1.15.3-cp37-cp37m-manylinux1_i686.whl\n    f1fd1a6f40a501ba4035f5ed2c1f4faa68245d1407bf97d2ee401e4f23d1720b  numpy-1.15.3-cp37-cp37m-manylinux1_x86_64.whl\n    094f8a83e5bd0a44a7557fa24a46db6ba7d5299c389ddbc9e0e18722f567fb63  numpy-1.15.3-cp37-none-win32.whl\n    a245464ddf6d90e2d6287e9cef6bcfda2a99467fdcf1b677b99cd0b6c7b43de2  numpy-1.15.3-cp37-none-win_amd64.whl\n    4656ea0d66a3724fd88aafa39a0c5cef216d1257a71b40534fe589abd46ba77b  numpy-1.15.3.tar.gz\n    1c0c80e74759fa4942298044274f2c11b08c86230b25b8b819e55e644f5ff2b6  numpy-1.15.3.zip\n-----BEGIN PGP SIGNATURE-----\n\niQEcBAEBAgAGBQJbzgFyAAoJEGefIoN3xSR7H50H/3yAwCVQSIi7+JXPqcXGwDRK\ngFx877P2J7oCAyahnteRsMPU7iEI2CBZBaKlsWNbc6xXRtvvPjOU3RPdARMA/5dt\n21FvWKgy74ZalV/GmvV2oz8i4YEwzZsoaLaZoySoDOwTx0gCYKoB+K1iCbiTLj1p\npfoUAguZGXr5kj66Ls6EPUQJzrD4L+Ciw6JPDar7E6snP2mqF1Amx27RB7RqO7EU\njtcUMmOSmni9Gr/ZztdfpMKVPBR2BkQmMZudnzLrY+y2zlKXh4rPqzx/k59LgLKV\no64dmCtX4j9YjcIGhfGTlehEwZ2y3+qIct6+2vULFh4JlUCkUbANrtaQ8gBvlr4=\n=p90Y\n-----END PGP SIGNATURE-----\n\n\n.. currentmodule:: numpy\n\n==========================\n", "1.23.2": "==========================\n\nNumPy 1.23.2 is a maintenance release that fixes bugs discovered after the\n1.23.1 release. Notable features are:\n\n- Typing changes needed for Python 3.11\n- Wheels for Python 3.11.0rc1\n\nThe Python versions supported for this release are 3.8-3.11.\n\nContributors\n============\n\nA total of 9 people contributed to this release.  People with a \"+\" by their\nnames contributed a patch for the first time.\n\n* Alexander Grund +\n* Bas van Beek\n* Charles Harris\n* Jon Cusick +\n* Matti Picus\n* Michael Osthege +\n* Pal Barta +\n* Ross Barnowski\n* Sebastian Berg\n\nPull requests merged\n====================\n\nA total of 15 pull requests were merged for this release.\n\n* `22030 <https://github.com/numpy/numpy/pull/22030>`__: ENH: Add ``__array_ufunc__`` typing support to the ``nin=1`` ufuncs\n* `22031 <https://github.com/numpy/numpy/pull/22031>`__: MAINT, TYP: Fix ``np.angle`` dtype-overloads\n* `22032 <https://github.com/numpy/numpy/pull/22032>`__: MAINT: Do not let ``_GenericAlias`` wrap the underlying classes'...\n* `22033 <https://github.com/numpy/numpy/pull/22033>`__: TYP,MAINT: Allow ``einsum`` subscripts to be passed via integer...\n* `22034 <https://github.com/numpy/numpy/pull/22034>`__: MAINT,TYP: Add object-overloads for the ``np.generic`` rich comparisons\n* `22035 <https://github.com/numpy/numpy/pull/22035>`__: MAINT,TYP: Allow the ``squeeze`` and ``transpose`` method to...\n* `22036 <https://github.com/numpy/numpy/pull/22036>`__: BUG: Fix subarray to object cast ownership details\n* `22037 <https://github.com/numpy/numpy/pull/22037>`__: BUG: Use ``Popen`` to silently invoke f77 -v\n* `22038 <https://github.com/numpy/numpy/pull/22038>`__: BUG: Avoid errors on NULL during deepcopy\n* `22039 <https://github.com/numpy/numpy/pull/22039>`__: DOC: Add versionchanged for converter callable behavior.\n* `22057 <https://github.com/numpy/numpy/pull/22057>`__: MAINT: Quiet the anaconda uploads.\n* `22078 <https://github.com/numpy/numpy/pull/22078>`__: ENH: reorder includes for testing on top of system installations...\n* `22106 <https://github.com/numpy/numpy/pull/22106>`__: TST: fix test_linear_interpolation_formula_symmetric\n* `22107 <https://github.com/numpy/numpy/pull/22107>`__: BUG: Fix skip condition for test_loss_of_precision[complex256]\n* `22115 <https://github.com/numpy/numpy/pull/22115>`__: BLD: Build python3.11.0rc1 wheels.\n\nChecksums\n=========\n\nMD5\n---\n::\n\n    fe1e3480ea8c417c8f7b05f543c1448d  numpy-1.23.2-cp310-cp310-macosx_10_9_x86_64.whl\n    0ab14b1afd0a55a374ca69b3b39cab3c  numpy-1.23.2-cp310-cp310-macosx_11_0_arm64.whl\n    df059e5405bfe75c0ac77b01abbdb237  numpy-1.23.2-cp310-cp310-manylinux_2_17_aarch64.manylinux2014_aarch64.whl\n    4ed412c4c078e96edf11ca3b11eef76b  numpy-1.23.2-cp310-cp310-manylinux_2_17_x86_64.manylinux2014_x86_64.whl\n    0caad53d9a5e3c5e8cd29f19a9f0c014  numpy-1.23.2-cp310-cp310-win32.whl\n    01e508b8b4f591daff128da1cfde8e1f  numpy-1.23.2-cp310-cp310-win_amd64.whl\n    8ecdb7e2a87255878b748550d91cfbe0  numpy-1.23.2-cp311-cp311-macosx_10_9_x86_64.whl\n    e3004aae46cec9e234f78eaf473272e0  numpy-1.23.2-cp311-cp311-macosx_11_0_arm64.whl\n    ec23c73caf581867d5ca9255b802f144  numpy-1.23.2-cp311-cp311-manylinux_2_17_aarch64.manylinux2014_aarch64.whl\n    9b8389f528fe113247954248f0b78ce1  numpy-1.23.2-cp311-cp311-manylinux_2_17_x86_64.manylinux2014_x86_64.whl\n    a54b136daa2fbb483909f08eecbfa3c5  numpy-1.23.2-cp311-cp311-win32.whl\n    ead32e141857c5ef33b1a6cd88aefc0f  numpy-1.23.2-cp311-cp311-win_amd64.whl\n    df1f18e52d0a2840d101fdc9c2c6af84  numpy-1.23.2-cp38-cp38-macosx_10_9_x86_64.whl\n    04c986880bb24fac2f44face75eab914  numpy-1.23.2-cp38-cp38-macosx_11_0_arm64.whl\n    edeba58edb214390112810f7ead903a8  numpy-1.23.2-cp38-cp38-manylinux_2_17_aarch64.manylinux2014_aarch64.whl\n    c26ea699d94d7f1009c976c66cc4def3  numpy-1.23.2-cp38-cp38-manylinux_2_17_x86_64.manylinux2014_x86_64.whl\n    c246a78b09f8893d998d449dcab0fac3  numpy-1.23.2-cp38-cp38-win32.whl\n    b5c5a2f961402259e301c49b8b05de55  numpy-1.23.2-cp38-cp38-win_amd64.whl\n    d156dfae94d33eeff7fb9c6e5187e049  numpy-1.23.2-cp39-cp39-macosx_10_9_x86_64.whl\n    7f2ad7867c577eab925a31de76486765  numpy-1.23.2-cp39-cp39-macosx_11_0_arm64.whl\n    76262a8e5d7a4d945446467467300a10  numpy-1.23.2-cp39-cp39-manylinux_2_17_aarch64.manylinux2014_aarch64.whl\n    8ee105f4574d61a2d494418b55f63fcb  numpy-1.23.2-cp39-cp39-manylinux_2_17_x86_64.manylinux2014_x86_64.whl\n    2b7c79cae66023f8e716150223201981  numpy-1.23.2-cp39-cp39-win32.whl\n    d7af57dd070ccb165f3893412eb602e3  numpy-1.23.2-cp39-cp39-win_amd64.whl\n    355a231dbd87a0f2125cc23eb8f97075  numpy-1.23.2-pp38-pypy38_pp73-macosx_10_9_x86_64.whl\n    4ab13c35056f67981d03f9ceec41db42  numpy-1.23.2-pp38-pypy38_pp73-manylinux_2_17_x86_64.manylinux2014_x86_64.whl\n    3a6f1e1256ee9be10d8cdf6be578fe52  numpy-1.23.2-pp38-pypy38_pp73-win_amd64.whl\n    9bf2a361509797de14ceee607387fe0f  numpy-1.23.2.tar.gz\n\nSHA256\n------\n::\n\n    e603ca1fb47b913942f3e660a15e55a9ebca906857edfea476ae5f0fe9b457d5  numpy-1.23.2-cp310-cp310-macosx_10_9_x86_64.whl\n    633679a472934b1c20a12ed0c9a6c9eb167fbb4cb89031939bfd03dd9dbc62b8  numpy-1.23.2-cp310-cp310-macosx_11_0_arm64.whl\n    17e5226674f6ea79e14e3b91bfbc153fdf3ac13f5cc54ee7bc8fdbe820a32da0  numpy-1.23.2-cp310-cp310-manylinux_2_17_aarch64.manylinux2014_aarch64.whl\n    bdc02c0235b261925102b1bd586579b7158e9d0d07ecb61148a1799214a4afd5  numpy-1.23.2-cp310-cp310-manylinux_2_17_x86_64.manylinux2014_x86_64.whl\n    df28dda02c9328e122661f399f7655cdcbcf22ea42daa3650a26bce08a187450  numpy-1.23.2-cp310-cp310-win32.whl\n    8ebf7e194b89bc66b78475bd3624d92980fca4e5bb86dda08d677d786fefc414  numpy-1.23.2-cp310-cp310-win_amd64.whl\n    dc76bca1ca98f4b122114435f83f1fcf3c0fe48e4e6f660e07996abf2f53903c  numpy-1.23.2-cp311-cp311-macosx_10_9_x86_64.whl\n    ecfdd68d334a6b97472ed032b5b37a30d8217c097acfff15e8452c710e775524  numpy-1.23.2-cp311-cp311-macosx_11_0_arm64.whl\n    5593f67e66dea4e237f5af998d31a43e447786b2154ba1ad833676c788f37cde  numpy-1.23.2-cp311-cp311-manylinux_2_17_aarch64.manylinux2014_aarch64.whl\n    ac987b35df8c2a2eab495ee206658117e9ce867acf3ccb376a19e83070e69418  numpy-1.23.2-cp311-cp311-manylinux_2_17_x86_64.manylinux2014_x86_64.whl\n    d98addfd3c8728ee8b2c49126f3c44c703e2b005d4a95998e2167af176a9e722  numpy-1.23.2-cp311-cp311-win32.whl\n    8ecb818231afe5f0f568c81f12ce50f2b828ff2b27487520d85eb44c71313b9e  numpy-1.23.2-cp311-cp311-win_amd64.whl\n    909c56c4d4341ec8315291a105169d8aae732cfb4c250fbc375a1efb7a844f8f  numpy-1.23.2-cp38-cp38-macosx_10_9_x86_64.whl\n    8247f01c4721479e482cc2f9f7d973f3f47810cbc8c65e38fd1bbd3141cc9842  numpy-1.23.2-cp38-cp38-macosx_11_0_arm64.whl\n    b8b97a8a87cadcd3f94659b4ef6ec056261fa1e1c3317f4193ac231d4df70215  numpy-1.23.2-cp38-cp38-manylinux_2_17_aarch64.manylinux2014_aarch64.whl\n    bd5b7ccae24e3d8501ee5563e82febc1771e73bd268eef82a1e8d2b4d556ae66  numpy-1.23.2-cp38-cp38-manylinux_2_17_x86_64.manylinux2014_x86_64.whl\n    9b83d48e464f393d46e8dd8171687394d39bc5abfe2978896b77dc2604e8635d  numpy-1.23.2-cp38-cp38-win32.whl\n    dec198619b7dbd6db58603cd256e092bcadef22a796f778bf87f8592b468441d  numpy-1.23.2-cp38-cp38-win_amd64.whl\n    4f41f5bf20d9a521f8cab3a34557cd77b6f205ab2116651f12959714494268b0  numpy-1.23.2-cp39-cp39-macosx_10_9_x86_64.whl\n    806cc25d5c43e240db709875e947076b2826f47c2c340a5a2f36da5bb10c58d6  numpy-1.23.2-cp39-cp39-macosx_11_0_arm64.whl\n    8f9d84a24889ebb4c641a9b99e54adb8cab50972f0166a3abc14c3b93163f074  numpy-1.23.2-cp39-cp39-manylinux_2_17_aarch64.manylinux2014_aarch64.whl\n    c403c81bb8ffb1c993d0165a11493fd4bf1353d258f6997b3ee288b0a48fce77  numpy-1.23.2-cp39-cp39-manylinux_2_17_x86_64.manylinux2014_x86_64.whl\n    cf8c6aed12a935abf2e290860af8e77b26a042eb7f2582ff83dc7ed5f963340c  numpy-1.23.2-cp39-cp39-win32.whl\n    5e28cd64624dc2354a349152599e55308eb6ca95a13ce6a7d5679ebff2962913  numpy-1.23.2-cp39-cp39-win_amd64.whl\n    806970e69106556d1dd200e26647e9bee5e2b3f1814f9da104a943e8d548ca38  numpy-1.23.2-pp38-pypy38_pp73-macosx_10_9_x86_64.whl\n    2bd879d3ca4b6f39b7770829f73278b7c5e248c91d538aab1e506c628353e47f  numpy-1.23.2-pp38-pypy38_pp73-manylinux_2_17_x86_64.manylinux2014_x86_64.whl\n    be6b350dfbc7f708d9d853663772a9310783ea58f6035eec649fb9c4371b5389  numpy-1.23.2-pp38-pypy38_pp73-win_amd64.whl\n    b78d00e48261fbbd04aa0d7427cf78d18401ee0abd89c7559bbf422e5b1c7d01  numpy-1.23.2.tar.gz\n\n\n.. currentmodule:: numpy\n\n==========================\n", "2.0.1": "==========================\n\nNumPy 2.0.1 is a maintenance release that fixes bugs and regressions\ndiscovered after the 2.0.0 release. NumPy 2.0.1 is the last planned\nrelease in the 2.0.x series, 2.1.0rc1 should be out shortly.\n\nThe Python versions supported by this release are 3.9-3.12.\n\nImprovements\n============\n\n``np.quantile`` with method ``closest_observation`` chooses nearest even order statistic\n----------------------------------------------------------------------------------------\nThis changes the definition of nearest for border cases from the nearest odd\norder statistic to nearest even order statistic. The numpy implementation now\nmatches other reference implementations.\n\n(`gh-26656 <https://github.com/numpy/numpy/pull/26656>`__)\n\nContributors\n============\n\nA total of 15 people contributed to this release.  People with a \"+\" by their\nnames contributed a patch for the first time.\n\n* vahidmech +\n* Alex Herbert +\n* Charles Harris\n* Giovanni Del Monte +\n* Leo Singer\n* Lysandros Nikolaou\n* Matti Picus\n* Nathan Goldbaum\n* Patrick J. Roddy +\n* Raghuveer Devulapalli\n* Ralf Gommers\n* Rostan Tabet +\n* Sebastian Berg\n* Tyler Reddy\n* Yannik Wicke +\n\nPull requests merged\n====================\n\nA total of 24 pull requests were merged for this release.\n\n* `26711 <https://github.com/numpy/numpy/pull/26711>`__: MAINT: prepare 2.0.x for further development\n* `26792 <https://github.com/numpy/numpy/pull/26792>`__: TYP: fix incorrect import in ``ma/extras.pyi`` stub\n* `26793 <https://github.com/numpy/numpy/pull/26793>`__: DOC: Mention '1.25' legacy printing mode in ``set_printoptions``\n* `26794 <https://github.com/numpy/numpy/pull/26794>`__: DOC: Remove mention of NaN and NAN aliases from constants\n* `26821 <https://github.com/numpy/numpy/pull/26821>`__: BLD: Fix x86-simd-sort build failure on openBSD\n* `26822 <https://github.com/numpy/numpy/pull/26822>`__: BUG: Ensure output order follows input in numpy.fft\n* `26823 <https://github.com/numpy/numpy/pull/26823>`__: TYP: fix missing sys import in numeric.pyi\n* `26832 <https://github.com/numpy/numpy/pull/26832>`__: DOC: remove hack to override _add_newdocs_scalars (#26826)\n* `26835 <https://github.com/numpy/numpy/pull/26835>`__: BUG: avoid side-effect of 'include complex.h'\n* `26836 <https://github.com/numpy/numpy/pull/26836>`__: BUG: fix max_rows and chunked string/datetime reading in ``loadtxt``\n* `26837 <https://github.com/numpy/numpy/pull/26837>`__: BUG: fix PyArray_ImportNumPyAPI under -Werror=strict-prototypes\n* `26856 <https://github.com/numpy/numpy/pull/26856>`__: DOC: Update some documentation\n* `26868 <https://github.com/numpy/numpy/pull/26868>`__: BUG: fancy indexing copy\n* `26869 <https://github.com/numpy/numpy/pull/26869>`__: BUG: Mismatched allocation domains in ``PyArray_FillWithScalar``\n* `26870 <https://github.com/numpy/numpy/pull/26870>`__: BUG: Handle --f77flags and --f90flags for meson [wheel build]\n* `26887 <https://github.com/numpy/numpy/pull/26887>`__: BUG: Fix new DTypes and new string promotion when signature is...\n* `26888 <https://github.com/numpy/numpy/pull/26888>`__: BUG: remove numpy.f2py from excludedimports\n* `26959 <https://github.com/numpy/numpy/pull/26959>`__: BUG: Quantile closest_observation to round to nearest even order\n* `26960 <https://github.com/numpy/numpy/pull/26960>`__: BUG: Fix off-by-one error in amount of characters in strip\n* `26961 <https://github.com/numpy/numpy/pull/26961>`__: API: Partially revert unique with return_inverse\n* `26962 <https://github.com/numpy/numpy/pull/26962>`__: BUG,MAINT: Fix utf-8 character stripping memory access\n* `26963 <https://github.com/numpy/numpy/pull/26963>`__: BUG: Fix out-of-bound minimum offset for in1d table method\n* `26971 <https://github.com/numpy/numpy/pull/26971>`__: BUG: fix f2py tests to work with v2 API\n* `26995 <https://github.com/numpy/numpy/pull/26995>`__: BUG: Add object cast to avoid warning with limited API\n\nChecksums\n=========\n\nMD5\n---\n::\n\n    a3e7d0f361ee7302448cae3c10844dd3  numpy-2.0.1-cp310-cp310-macosx_10_9_x86_64.whl\n    cff8546b69e43ae7b5050f05bdc25df2  numpy-2.0.1-cp310-cp310-macosx_11_0_arm64.whl\n    1713d23342528f4f8f4027970f010068  numpy-2.0.1-cp310-cp310-macosx_14_0_arm64.whl\n    20020d28606ea58f986a262daa6018f1  numpy-2.0.1-cp310-cp310-macosx_14_0_x86_64.whl\n    db22154ea943a707917aebc79e449bc5  numpy-2.0.1-cp310-cp310-manylinux_2_17_aarch64.manylinux2014_aarch64.whl\n    fe86cd85f240216f64eb076a62a229d2  numpy-2.0.1-cp310-cp310-manylinux_2_17_x86_64.manylinux2014_x86_64.whl\n    e0ca08f85150af3cc6050d64e8c0bd27  numpy-2.0.1-cp310-cp310-musllinux_1_1_x86_64.whl\n    b76f432906f62e31f0e09c41f3f08b4c  numpy-2.0.1-cp310-cp310-musllinux_1_2_aarch64.whl\n    28e8109e4ef524fa5c272d6faec870ae  numpy-2.0.1-cp310-cp310-win32.whl\n    874beffaefdc73da42300ce691c2419c  numpy-2.0.1-cp310-cp310-win_amd64.whl\n    7bbe029f650c924e952da117842d456d  numpy-2.0.1-cp311-cp311-macosx_10_9_x86_64.whl\n    6d3d6ae26c520e93cef7f11ba3951f57  numpy-2.0.1-cp311-cp311-macosx_11_0_arm64.whl\n    de6082d719437eb7468ae31c407c503e  numpy-2.0.1-cp311-cp311-macosx_14_0_arm64.whl\n    d15a8d95661f8a1dfcc4eb089f9b46e8  numpy-2.0.1-cp311-cp311-macosx_14_0_x86_64.whl\n    c181105e074ee575ccf2c992e40f947a  numpy-2.0.1-cp311-cp311-manylinux_2_17_aarch64.manylinux2014_aarch64.whl\n    00d22b299343fcdc78fbb0716ead6243  numpy-2.0.1-cp311-cp311-manylinux_2_17_x86_64.manylinux2014_x86_64.whl\n    d9c4f49dbedb3f3d0158f00db459bd25  numpy-2.0.1-cp311-cp311-musllinux_1_1_x86_64.whl\n    63caa03e0625327ad3a756e01c83a6ca  numpy-2.0.1-cp311-cp311-musllinux_1_2_aarch64.whl\n    99d01d768a115d448ca2b4680de15191  numpy-2.0.1-cp311-cp311-win32.whl\n    8d1a31eccc8b9f077312095b11f62cb2  numpy-2.0.1-cp311-cp311-win_amd64.whl\n    6cc86f7761a33941d8c1c552186e774b  numpy-2.0.1-cp312-cp312-macosx_10_9_x86_64.whl\n    67c48f352afff5f41108f1b9561d1d5c  numpy-2.0.1-cp312-cp312-macosx_11_0_arm64.whl\n    1068d4eadcac6a869e0e457853b7e611  numpy-2.0.1-cp312-cp312-macosx_14_0_arm64.whl\n    dfb667450315fddcf84381fc8ef16892  numpy-2.0.1-cp312-cp312-macosx_14_0_x86_64.whl\n    69822bbbbb65d8a7d00ae32b435f61cc  numpy-2.0.1-cp312-cp312-manylinux_2_17_aarch64.manylinux2014_aarch64.whl\n    883ed6c41395fb2def6cc0d64dcb817f  numpy-2.0.1-cp312-cp312-manylinux_2_17_x86_64.manylinux2014_x86_64.whl\n    4b1e9fd464821a7d1de3a8ddf911311e  numpy-2.0.1-cp312-cp312-musllinux_1_1_x86_64.whl\n    79e6557f40b8ed8f5973b404d98eab3d  numpy-2.0.1-cp312-cp312-musllinux_1_2_aarch64.whl\n    85596f15d4cf85c2f78b4cc12c2cad1e  numpy-2.0.1-cp312-cp312-win32.whl\n    487c7c2944306f62b3770576ce903a91  numpy-2.0.1-cp312-cp312-win_amd64.whl\n    491093641afa21e65d6e629eb70571fc  numpy-2.0.1-cp39-cp39-macosx_10_9_x86_64.whl\n    5008b16c20f3d7e5a0c7764712f8908e  numpy-2.0.1-cp39-cp39-macosx_11_0_arm64.whl\n    14633b898f863ea797c40ba1cf226c29  numpy-2.0.1-cp39-cp39-macosx_14_0_arm64.whl\n    9054ecb69d21b364e59e94aab24247cb  numpy-2.0.1-cp39-cp39-macosx_14_0_x86_64.whl\n    be028cf4bb691921943939de17593dd7  numpy-2.0.1-cp39-cp39-manylinux_2_17_aarch64.manylinux2014_aarch64.whl\n    9c440ad02ff0a954f696637de37aab2d  numpy-2.0.1-cp39-cp39-manylinux_2_17_x86_64.manylinux2014_x86_64.whl\n    27aec0d286eabe26d8e9149f4572dba1  numpy-2.0.1-cp39-cp39-musllinux_1_1_x86_64.whl\n    b02eda82ee511ee27185c8a4073ea35c  numpy-2.0.1-cp39-cp39-musllinux_1_2_aarch64.whl\n    cf579b902325e023b2dc444692eb5991  numpy-2.0.1-cp39-cp39-win32.whl\n    302c8c3118a5f55d9ef35ed8e517f6b1  numpy-2.0.1-cp39-cp39-win_amd64.whl\n    34c17fe980accfb76c6f348f85b3cfef  numpy-2.0.1-pp39-pypy39_pp73-macosx_10_9_x86_64.whl\n    02676eb84379b0a223288d6fd9d76942  numpy-2.0.1-pp39-pypy39_pp73-macosx_14_0_x86_64.whl\n    b5300e6fe110bf69e1a8901c5c09e3f8  numpy-2.0.1-pp39-pypy39_pp73-manylinux_2_17_x86_64.manylinux2014_x86_64.whl\n    204a3ea7fb851e08d166c74f73f9b8a3  numpy-2.0.1-pp39-pypy39_pp73-win_amd64.whl\n    5df3c50fc124c3167404d396115898d0  numpy-2.0.1.tar.gz\n\nSHA256\n------\n::\n\n    0fbb536eac80e27a2793ffd787895242b7f18ef792563d742c2d673bfcb75134  numpy-2.0.1-cp310-cp310-macosx_10_9_x86_64.whl\n    69ff563d43c69b1baba77af455dd0a839df8d25e8590e79c90fcbe1499ebde42  numpy-2.0.1-cp310-cp310-macosx_11_0_arm64.whl\n    1b902ce0e0a5bb7704556a217c4f63a7974f8f43e090aff03fcf262e0b135e02  numpy-2.0.1-cp310-cp310-macosx_14_0_arm64.whl\n    f1659887361a7151f89e79b276ed8dff3d75877df906328f14d8bb40bb4f5101  numpy-2.0.1-cp310-cp310-macosx_14_0_x86_64.whl\n    4658c398d65d1b25e1760de3157011a80375da861709abd7cef3bad65d6543f9  numpy-2.0.1-cp310-cp310-manylinux_2_17_aarch64.manylinux2014_aarch64.whl\n    4127d4303b9ac9f94ca0441138acead39928938660ca58329fe156f84b9f3015  numpy-2.0.1-cp310-cp310-manylinux_2_17_x86_64.manylinux2014_x86_64.whl\n    e5eeca8067ad04bc8a2a8731183d51d7cbaac66d86085d5f4766ee6bf19c7f87  numpy-2.0.1-cp310-cp310-musllinux_1_1_x86_64.whl\n    9adbd9bb520c866e1bfd7e10e1880a1f7749f1f6e5017686a5fbb9b72cf69f82  numpy-2.0.1-cp310-cp310-musllinux_1_2_aarch64.whl\n    7b9853803278db3bdcc6cd5beca37815b133e9e77ff3d4733c247414e78eb8d1  numpy-2.0.1-cp310-cp310-win32.whl\n    81b0893a39bc5b865b8bf89e9ad7807e16717f19868e9d234bdaf9b1f1393868  numpy-2.0.1-cp310-cp310-win_amd64.whl\n    75b4e316c5902d8163ef9d423b1c3f2f6252226d1aa5cd8a0a03a7d01ffc6268  numpy-2.0.1-cp311-cp311-macosx_10_9_x86_64.whl\n    6e4eeb6eb2fced786e32e6d8df9e755ce5be920d17f7ce00bc38fcde8ccdbf9e  numpy-2.0.1-cp311-cp311-macosx_11_0_arm64.whl\n    a1e01dcaab205fbece13c1410253a9eea1b1c9b61d237b6fa59bcc46e8e89343  numpy-2.0.1-cp311-cp311-macosx_14_0_arm64.whl\n    a8fc2de81ad835d999113ddf87d1ea2b0f4704cbd947c948d2f5513deafe5a7b  numpy-2.0.1-cp311-cp311-macosx_14_0_x86_64.whl\n    5a3d94942c331dd4e0e1147f7a8699a4aa47dffc11bf8a1523c12af8b2e91bbe  numpy-2.0.1-cp311-cp311-manylinux_2_17_aarch64.manylinux2014_aarch64.whl\n    15eb4eca47d36ec3f78cde0a3a2ee24cf05ca7396ef808dda2c0ddad7c2bde67  numpy-2.0.1-cp311-cp311-manylinux_2_17_x86_64.manylinux2014_x86_64.whl\n    b83e16a5511d1b1f8a88cbabb1a6f6a499f82c062a4251892d9ad5d609863fb7  numpy-2.0.1-cp311-cp311-musllinux_1_1_x86_64.whl\n    1f87fec1f9bc1efd23f4227becff04bd0e979e23ca50cc92ec88b38489db3b55  numpy-2.0.1-cp311-cp311-musllinux_1_2_aarch64.whl\n    36d3a9405fd7c511804dc56fc32974fa5533bdeb3cd1604d6b8ff1d292b819c4  numpy-2.0.1-cp311-cp311-win32.whl\n    08458fbf403bff5e2b45f08eda195d4b0c9b35682311da5a5a0a0925b11b9bd8  numpy-2.0.1-cp311-cp311-win_amd64.whl\n    6bf4e6f4a2a2e26655717a1983ef6324f2664d7011f6ef7482e8c0b3d51e82ac  numpy-2.0.1-cp312-cp312-macosx_10_9_x86_64.whl\n    7d6fddc5fe258d3328cd8e3d7d3e02234c5d70e01ebe377a6ab92adb14039cb4  numpy-2.0.1-cp312-cp312-macosx_11_0_arm64.whl\n    5daab361be6ddeb299a918a7c0864fa8618af66019138263247af405018b04e1  numpy-2.0.1-cp312-cp312-macosx_14_0_arm64.whl\n    ea2326a4dca88e4a274ba3a4405eb6c6467d3ffbd8c7d38632502eaae3820587  numpy-2.0.1-cp312-cp312-macosx_14_0_x86_64.whl\n    529af13c5f4b7a932fb0e1911d3a75da204eff023ee5e0e79c1751564221a5c8  numpy-2.0.1-cp312-cp312-manylinux_2_17_aarch64.manylinux2014_aarch64.whl\n    6790654cb13eab303d8402354fabd47472b24635700f631f041bd0b65e37298a  numpy-2.0.1-cp312-cp312-manylinux_2_17_x86_64.manylinux2014_x86_64.whl\n    cbab9fc9c391700e3e1287666dfd82d8666d10e69a6c4a09ab97574c0b7ee0a7  numpy-2.0.1-cp312-cp312-musllinux_1_1_x86_64.whl\n    99d0d92a5e3613c33a5f01db206a33f8fdf3d71f2912b0de1739894668b7a93b  numpy-2.0.1-cp312-cp312-musllinux_1_2_aarch64.whl\n    173a00b9995f73b79eb0191129f2455f1e34c203f559dd118636858cc452a1bf  numpy-2.0.1-cp312-cp312-win32.whl\n    bb2124fdc6e62baae159ebcfa368708867eb56806804d005860b6007388df171  numpy-2.0.1-cp312-cp312-win_amd64.whl\n    bfc085b28d62ff4009364e7ca34b80a9a080cbd97c2c0630bb5f7f770dae9414  numpy-2.0.1-cp39-cp39-macosx_10_9_x86_64.whl\n    8fae4ebbf95a179c1156fab0b142b74e4ba4204c87bde8d3d8b6f9c34c5825ef  numpy-2.0.1-cp39-cp39-macosx_11_0_arm64.whl\n    72dc22e9ec8f6eaa206deb1b1355eb2e253899d7347f5e2fae5f0af613741d06  numpy-2.0.1-cp39-cp39-macosx_14_0_arm64.whl\n    ec87f5f8aca726117a1c9b7083e7656a9d0d606eec7299cc067bb83d26f16e0c  numpy-2.0.1-cp39-cp39-macosx_14_0_x86_64.whl\n    1f682ea61a88479d9498bf2091fdcd722b090724b08b31d63e022adc063bad59  numpy-2.0.1-cp39-cp39-manylinux_2_17_aarch64.manylinux2014_aarch64.whl\n    8efc84f01c1cd7e34b3fb310183e72fcdf55293ee736d679b6d35b35d80bba26  numpy-2.0.1-cp39-cp39-manylinux_2_17_x86_64.manylinux2014_x86_64.whl\n    3fdabe3e2a52bc4eff8dc7a5044342f8bd9f11ef0934fcd3289a788c0eb10018  numpy-2.0.1-cp39-cp39-musllinux_1_1_x86_64.whl\n    24a0e1befbfa14615b49ba9659d3d8818a0f4d8a1c5822af8696706fbda7310c  numpy-2.0.1-cp39-cp39-musllinux_1_2_aarch64.whl\n    f9cf5ea551aec449206954b075db819f52adc1638d46a6738253a712d553c7b4  numpy-2.0.1-cp39-cp39-win32.whl\n    e9e81fa9017eaa416c056e5d9e71be93d05e2c3c2ab308d23307a8bc4443c368  numpy-2.0.1-cp39-cp39-win_amd64.whl\n    61728fba1e464f789b11deb78a57805c70b2ed02343560456190d0501ba37b0f  numpy-2.0.1-pp39-pypy39_pp73-macosx_10_9_x86_64.whl\n    12f5d865d60fb9734e60a60f1d5afa6d962d8d4467c120a1c0cda6eb2964437d  numpy-2.0.1-pp39-pypy39_pp73-macosx_14_0_x86_64.whl\n    eacf3291e263d5a67d8c1a581a8ebbcfd6447204ef58828caf69a5e3e8c75990  numpy-2.0.1-pp39-pypy39_pp73-manylinux_2_17_x86_64.manylinux2014_x86_64.whl\n    2c3a346ae20cfd80b6cfd3e60dc179963ef2ea58da5ec074fd3d9e7a1e7ba97f  numpy-2.0.1-pp39-pypy39_pp73-win_amd64.whl\n    485b87235796410c3519a699cfe1faab097e509e90ebb05dcd098db2ae87e7b3  numpy-2.0.1.tar.gz\n\n\n-----BEGIN PGP SIGNED MESSAGE-----\nHash: SHA1\n\n==========================\n", "1.14.4": "==========================\n\nThis is a bugfix release for bugs reported following the 1.14.3 release. The\nmost significant fixes are:\n\n* fixes for compiler instruction reordering that resulted in NaN's not being\n  properly propagated in `np.max` and `np.min`,\n\n* fixes for bus faults on SPARC and older ARM due to incorrect alignment\n  checks.\n\nThere are also improvements to printing of long doubles on PPC platforms. All\nis not yet perfect on that platform, the whitespace padding is still incorrect\nand is to be fixed in numpy 1.15, consequently NumPy still fails some\nprinting-related (and other) unit tests on ppc systems. However, the printed\nvalues are now correct.\n\nNote that NumPy will error on import if it detects incorrect float32 `dot`\nresults. This problem has been seen on the Mac when working in the Anaconda\nenviroment and is due to a subtle interaction between MKL and PyQt5.  It is not\nstrictly a NumPy problem, but it is best that users be aware of it.  See the\ngh-8577 NumPy issue for more information.\n\nThe Python versions supported in this release are 2.7 and 3.4 - 3.6. The Python\n3.6 wheels available from PIP are built with Python 3.6.2 and should be\ncompatible with all previous versions of Python 3.6. The source releases were\ncythonized with Cython 0.28.2 and should work for the upcoming Python 3.7.\n\nContributors\n============\n\nA total of 7 people contributed to this release.  People with a \"+\" by their\nnames contributed a patch for the first time.\n\n* Allan Haldane\n* Charles Harris\n* Marten van Kerkwijk\n* Matti Picus\n* Pauli Virtanen\n* Ryan Soklaski +\n* Sebastian Berg\n\nPull requests merged\n====================\n\nA total of 11 pull requests were merged for this release.\n\n* `11104 <https://github.com/numpy/numpy/pull/11104>`__: BUG: str of DOUBLE_DOUBLE format wrong on ppc64\n* `11170 <https://github.com/numpy/numpy/pull/11170>`__: TST: linalg: add regression test for gh-8577\n* `11174 <https://github.com/numpy/numpy/pull/11174>`__: MAINT: add sanity-checks to be run at import time\n* `11181 <https://github.com/numpy/numpy/pull/11181>`__: BUG: void dtype setup checked offset not actual pointer for alignment\n* `11194 <https://github.com/numpy/numpy/pull/11194>`__: BUG: Python2 doubles don't print correctly in interactive shell.\n* `11198 <https://github.com/numpy/numpy/pull/11198>`__: BUG: optimizing compilers can reorder call to npy_get_floatstatus\n* `11199 <https://github.com/numpy/numpy/pull/11199>`__: BUG: reduce using SSE only warns if inside SSE loop\n* `11203 <https://github.com/numpy/numpy/pull/11203>`__: BUG: Bytes delimiter/comments in genfromtxt should be decoded\n* `11211 <https://github.com/numpy/numpy/pull/11211>`__: BUG: Fix reference count/memory leak exposed by better testing\n* `11219 <https://github.com/numpy/numpy/pull/11219>`__: BUG: Fixes einsum broadcasting bug when optimize=True\n* `11251 <https://github.com/numpy/numpy/pull/11251>`__: DOC: Document 1.14.4 release.\n\nChecksums\n=========\n\nMD5\n- ---\n\n    118e010f76fba91f05111e775d08b9d2  numpy-1.14.4-cp27-cp27m-macosx_10_6_intel.macosx_10_9_intel.macosx_10_9_x86_64.macosx_10_10_intel.macosx_10_10_x86_64.whl\n    a08af11af72e8393d61f1724e2a42258  numpy-1.14.4-cp27-cp27m-manylinux1_i686.whl\n    bbf56f4de32bb2c4215e01ea4f1b9445  numpy-1.14.4-cp27-cp27m-manylinux1_x86_64.whl\n    b5e17dcc08205a278ffd33c6baeb7562  numpy-1.14.4-cp27-cp27mu-manylinux1_i686.whl\n    e6844d6134fed4f79b52cd89d66edb76  numpy-1.14.4-cp27-cp27mu-manylinux1_x86_64.whl\n    e9d4ab30ffee0f57da2292ed2c42bdcb  numpy-1.14.4-cp27-none-win32.whl\n    ff04e3451a90fdf9ae8b6db8b3e8c2d6  numpy-1.14.4-cp27-none-win_amd64.whl\n    fbe6a5a9a0de9f85bcb729702a132769  numpy-1.14.4-cp34-cp34m-macosx_10_6_intel.macosx_10_9_intel.macosx_10_9_x86_64.macosx_10_10_intel.macosx_10_10_x86_64.whl\n    33a177cf9d60fa26d30dc80b7163a374  numpy-1.14.4-cp34-cp34m-manylinux1_i686.whl\n    6335ee571648d8db7561a619328b69c7  numpy-1.14.4-cp34-cp34m-manylinux1_x86_64.whl\n    e53dd3796a0cdec43037b18c5c54d1a3  numpy-1.14.4-cp34-none-win32.whl\n    aab911c898c58073b47a2d1f28228a41  numpy-1.14.4-cp34-none-win_amd64.whl\n    a05e215d9443c838a531119eb5c1eadc  numpy-1.14.4-cp35-cp35m-macosx_10_6_intel.macosx_10_9_intel.macosx_10_9_x86_64.macosx_10_10_intel.macosx_10_10_x86_64.whl\n    7c5f7ff2cccb13c22b87f768ac1cc6e2  numpy-1.14.4-cp35-cp35m-manylinux1_i686.whl\n    d22105d03a15c9fd6ec4ecffa4b1f764  numpy-1.14.4-cp35-cp35m-manylinux1_x86_64.whl\n    7a5d4c66c7f6e430eb73b5683d99cacb  numpy-1.14.4-cp35-none-win32.whl\n    cf0c074d9243f8bf6eff8291ac12a003  numpy-1.14.4-cp35-none-win_amd64.whl\n    79233bdad30a65beb515c86a4612102d  numpy-1.14.4-cp36-cp36m-macosx_10_6_intel.macosx_10_9_intel.macosx_10_9_x86_64.macosx_10_10_intel.macosx_10_10_x86_64.whl\n    135139bd2ec26e2b52bdd2d36be94c44  numpy-1.14.4-cp36-cp36m-manylinux1_i686.whl\n    9c56d525cf6da2b8489e723d72ccc9a2  numpy-1.14.4-cp36-cp36m-manylinux1_x86_64.whl\n    ec9af9e19aac597e1a245ada9c333e2d  numpy-1.14.4-cp36-none-win32.whl\n    f8ec9c6167f2b0d08066ec78c3a01a4c  numpy-1.14.4-cp36-none-win_amd64.whl\n    7de00fc3be91a3ab913d4efe206b3928  numpy-1.14.4.tar.gz\n    a8a23723342a561e579757553e9db73a  numpy-1.14.4.zip\n\nSHA256\n- ------\n\n    c0c4bdcb771a147cb14286e3aeb72267e1664652d4150b0df255f0c210166a62  numpy-1.14.4-cp27-cp27m-macosx_10_6_intel.macosx_10_9_intel.macosx_10_9_x86_64.macosx_10_10_intel.macosx_10_10_x86_64.whl\n    939376b3b8d9bd42529a2713534c9bae7f11c774614d4d2f7f2a38cae96101f1  numpy-1.14.4-cp27-cp27m-manylinux1_i686.whl\n    6105d909e56c4f3f173a7294154eee5da80853104e9c3ebcf9e523fb3bb6cf70  numpy-1.14.4-cp27-cp27m-manylinux1_x86_64.whl\n    3ed68b8ef0635e12b06c216d3ed33572d9c15b05a5a5d6ab870d073190c3eef3  numpy-1.14.4-cp27-cp27mu-manylinux1_i686.whl\n    1dc831683f18c11e6b5b7ad3610b9f00417b8d3fc63a8adcdbe68844d9dd6f62  numpy-1.14.4-cp27-cp27mu-manylinux1_x86_64.whl\n    8d87ac65d830ee3087e6bd02b0201e68aed4c715ff2e227e3640e7ded38d8a2e  numpy-1.14.4-cp27-none-win32.whl\n    7fbceea93b6877419d84516705a265dfc4626939a29107a4d04db599bf6cdf8d  numpy-1.14.4-cp27-none-win_amd64.whl\n    a1b4a80d59658fc438716095deb1971c6315482b461d976f760d920b6509fd5d  numpy-1.14.4-cp34-cp34m-macosx_10_6_intel.macosx_10_9_intel.macosx_10_9_x86_64.macosx_10_10_intel.macosx_10_10_x86_64.whl\n    ef7a07f6a77658a1038e6d22e53458129c04a95b5770f080b5741320d9491e32  numpy-1.14.4-cp34-cp34m-manylinux1_i686.whl\n    c5065b3aec37cd1b7ec2882b3ab86e200d15219a0fb96fea65a16c6b59d3c0f0  numpy-1.14.4-cp34-cp34m-manylinux1_x86_64.whl\n    b2b2741da83b1e016094b2fef2cadec1abd3ccd3d97428634ec6afe1dcb699b8  numpy-1.14.4-cp34-none-win32.whl\n    419dfe9bcb09d2e87ecf296c5ebf2b047c568419c89588acc9dbce6d2d761bea  numpy-1.14.4-cp34-none-win_amd64.whl\n    be4664fe153ca6dbd961fb06f99b9b88b114ab44649376253b540aafbf42e469  numpy-1.14.4-cp35-cp35m-macosx_10_6_intel.macosx_10_9_intel.macosx_10_9_x86_64.macosx_10_10_intel.macosx_10_10_x86_64.whl\n    0d6d7bbcb54babaf39fe658bcc6f79641c9c62813c6d477802d783c7ba1a437c  numpy-1.14.4-cp35-cp35m-manylinux1_i686.whl\n    f54114395aabe13c7c4e4b425145cfd998eaf0781e87a9e9b2e77426f1ec8a82  numpy-1.14.4-cp35-cp35m-manylinux1_x86_64.whl\n    eb6ccd2b47d43199ec9a7c39bd45e399ccb5756e7367aaf92ced3c46fa67b16b  numpy-1.14.4-cp35-none-win32.whl\n    f6a4ae8d5e1126bf4d8520a9aa6a82d067ab3ce7d21f58f0d50ead2aebda7bfb  numpy-1.14.4-cp35-none-win_amd64.whl\n    b037993dfb1175a68b6a2bfc6b1c2af57c09031d1332fea3ab25a539b43bd475  numpy-1.14.4-cp36-cp36m-macosx_10_6_intel.macosx_10_9_intel.macosx_10_9_x86_64.macosx_10_10_intel.macosx_10_10_x86_64.whl\n    e6c24c83ca64d447a18f041bd53cbe96c74405f59939b6006755105583b62629  numpy-1.14.4-cp36-cp36m-manylinux1_i686.whl\n    f29a9c5607b0fded7a9f0871dbd06918a88cb0a465acfac5c67f92d1a4115d48  numpy-1.14.4-cp36-cp36m-manylinux1_x86_64.whl\n    d9ceb6c680ffbe55ef6cf9d93558e0ddb72d616b885d77c536920f3da2112703  numpy-1.14.4-cp36-none-win32.whl\n    9e6694912f13afd8b1e15aa8002e9c951a377c94080c5442de154d743a69b3ff  numpy-1.14.4-cp36-none-win_amd64.whl\n    c9a83644685edf8b5383b7632daa37df115b41aa20ca6ec3139e707d88f7c903  numpy-1.14.4.tar.gz\n    2185a0f31ecaa0792264fa968c8e0ba6d96acf144b26e2e1d1cd5b77fc11a691  numpy-1.14.4.zip\n-----BEGIN PGP SIGNATURE-----\n\niQEcBAEBAgAGBQJbGBeAAAoJEGefIoN3xSR7MnYH/jec7EEiAwHEmxmJEpbNABpk\n0eHvRfBE7oRIW5d862hpoJKYkjO2mVAorKEPYCWEbXDoVgli744fvbb4WIFb1C+H\nz6iXN8YMVtwFBdDX+PrrH2hqFWEo9ATUbG8I9/nHjcj2sm8MurmDSXrQwyxUd5RL\nwpV4dAnpJTmFAhaHUdnt2uFUmZm4u2pS1SRpknCvNWrKWa9Vj07E08I+lODzmyvr\nXgPUK4K9TBuJ9psGGpRrqoFK9CV/Lb61gCZljjUwXVvPtsXlBoLg/J0BYzvnn8zs\nqLeiUNaPSoe7nT9vjb/RV8V279KFZxWu26xOtYNJs0eIW8bvcVondWhBP+G0zKk=\n=LNWG\n-----END PGP SIGNATURE-----\n\n\n-----BEGIN PGP SIGNED MESSAGE-----\nHash: SHA1\n\n==========================\n", "1.15.0": "==========================\n\nNumPy 1.15.0 is a release with an unusual number of cleanups, many deprecations\nof old functions, and improvements to many existing functions. Please read the\ndetailed descriptions below to see if you are affected.\n\nFor testing, we have switched to pytest as a replacement for the no longer\nmaintained nose framework. The old nose based interface remains for downstream\nprojects who may still be using it.\n\nThe Python versions supported by this release are 2.7, 3.4-3.7. The wheels are\nlinked with OpenBLAS v0.3.0, which should fix some of the linalg problems\nreported for NumPy 1.14.\n\n\nHighlights\n==========\n\n* NumPy has switched to pytest for testing.\n* A new  `numpy.printoptions` context manager.\n* Many improvements to the histogram functions.\n* Support for unicode field names in python 2.7.\n* Improved support for PyPy.\n* Fixes and improvements to `numpy.einsum`.\n\n\nNew functions\n=============\n\n* `numpy.gcd` and `numpy.lcm`, to compute the greatest common divisor and least\n  common multiple.\n\n* `numpy.ma.stack`, the `numpy.stack` array-joining function generalized to\n  masked arrays.\n\n* `numpy.quantile` function, an interface to ``percentile`` without factors of\n  100\n\n* `numpy.nanquantile` function, an interface to ``nanpercentile`` without\n  factors of 100\n\n* `numpy.printoptions`, a context manager that sets print options temporarily\n  for the scope of the ``with`` block::\n\n    >>> with np.printoptions(precision=2):\n    ...     print(np.array([2.0]) / 3)\n    [0.67]\n\n* `numpy.histogram_bin_edges`, a function to get the edges of the bins used by a\n  histogram without needing to calculate the histogram.\n\n* C functions `npy_get_floatstatus_barrier` and `npy_clear_floatstatus_barrier`\n  have been added to deal with compiler optimization changing the order of\n  operations.  See below for details.\n\n\nDeprecations\n============\n\n* Aliases of builtin `pickle` functions are deprecated, in favor of their\n  unaliased ``pickle.<func>`` names:\n\n  * `numpy.loads`\n  * `numpy.core.numeric.load`\n  * `numpy.core.numeric.loads`\n  * `numpy.ma.loads`, `numpy.ma.dumps`\n  * `numpy.ma.load`, `numpy.ma.dump` - these functions already failed on\n    python 3 when called with a string.\n\n* Multidimensional indexing with anything but a tuple is deprecated. This means\n  that the index list in ``ind = [slice(None), 0]; arr[ind]`` should be changed\n  to a tuple, e.g., ``ind = [slice(None), 0]; arr[tuple(ind)]`` or\n  ``arr[(slice(None), 0)]``. That change is necessary to avoid ambiguity in\n  expressions such as ``arr[[[0, 1], [0, 1]]]``, currently interpreted as\n  ``arr[array([0, 1]), array([0, 1])]``, that will be interpreted\n  as ``arr[array([[0, 1], [0, 1]])]`` in the future.\n\n* Imports from the following sub-modules are deprecated, they will be removed\n  at some future date.\n\n  * `numpy.testing.utils`\n  * `numpy.testing.decorators`\n  * `numpy.testing.nosetester`\n  * `numpy.testing.noseclasses`\n  * `numpy.core.umath_tests`\n\n* Giving a generator to `numpy.sum` is now deprecated. This was undocumented\n  behavior, but worked. Previously, it would calculate the sum of the generator\n  expression.  In the future, it might return a different result. Use\n  ``np.sum(np.from_iter(generator))`` or the built-in Python ``sum`` instead.\n\n* Users of the C-API should call ``PyArrayResolveWriteBackIfCopy`` or\n  ``PyArray_DiscardWritbackIfCopy`` on any array with the ``WRITEBACKIFCOPY``\n  flag set, before deallocating the array. A deprecation warning will be\n  emitted if those calls are not used when needed.\n\n* Users of ``nditer`` should use the nditer object as a context manager\n  anytime one of the iterator operands is writeable, so that numpy can\n  manage writeback semantics, or should call ``it.close()``. A\n `RuntimeWarning` may be emitted otherwise in these cases.\n\n* The ``normed`` argument of ``np.histogram``, deprecated long ago in 1.6.0,\n  now emits a ``DeprecationWarning``.\n\n\nFuture Changes\n==============\n\n* NumPy 1.16 will drop support for Python 3.4.\n* NumPy 1.17 will drop support for Python 2.7.\n\n\nCompatibility notes\n===================\n\nCompiled testing modules renamed and made private\n- -------------------------------------------------\nThe following compiled modules have been renamed and made private:\n\n* ``umath_tests`` -> ``_umath_tests``\n* ``test_rational`` -> ``_rational_tests``\n* ``multiarray_tests`` -> ``_multiarray_tests``\n* ``struct_ufunc_test`` -> ``_struct_ufunc_tests``\n* ``operand_flag_tests`` -> ``_operand_flag_tests``\n\nThe ``umath_tests`` module is still available for backwards compatibility, but\nwill be removed in the future.\n\nThe ``NpzFile`` returned by ``np.savez`` is now a ``collections.abc.Mapping``\n- -----------------------------------------------------------------------------\nThis means it behaves like a readonly dictionary, and has a new ``.values()``\nmethod and ``len()`` implementation.\n\nFor python 3, this means that ``.iteritems()``, ``.iterkeys()`` have been\ndeprecated, and ``.keys()`` and ``.items()`` now return views and not lists.\nThis is consistent with how the builtin ``dict`` type changed between python 2\nand python 3.\n\nUnder certain conditions, ``nditer`` must be used in a context manager\n- ----------------------------------------------------------------------\nWhen using an `numpy.nditer` with the ``\"writeonly\"`` or ``\"readwrite\"`` flags, there\nare some circumstances where nditer doesn't actually give you a view of the\nwritable array. Instead, it gives you a copy, and if you make changes to the\ncopy, nditer later writes those changes back into your actual array. Currently,\nthis writeback occurs when the array objects are garbage collected, which makes\nthis API error-prone on CPython and entirely broken on PyPy. Therefore,\n``nditer`` should now be used as a context manager whenever it is used\nwith writeable arrays, e.g., ``with np.nditer(...) as it: ...``. You may also\nexplicitly call ``it.close()`` for cases where a context manager is unusable,\nfor instance in generator expressions.\n\nNumpy has switched to using pytest instead of nose for testing\n- --------------------------------------------------------------\nThe last nose release was 1.3.7 in June, 2015, and development of that tool has\nended, consequently NumPy has now switched to using pytest. The old decorators\nand nose tools that were previously used by some downstream projects remain\navailable, but will not be maintained. The standard testing utilities,\n``assert_almost_equal`` and such, are not be affected by this change except for\nthe nose specific functions ``import_nose`` and ``raises``. Those functions are\nnot used in numpy, but are kept for downstream compatibility.\n\nNumpy no longer monkey-patches ``ctypes`` with ``__array_interface__``\n- ----------------------------------------------------------------------\nPreviously numpy added ``__array_interface__`` attributes to all the integer\ntypes from ``ctypes``.\n\n``np.ma.notmasked_contiguous`` and ``np.ma.flatnotmasked_contiguous`` always return lists\n- -----------------------------------------------------------------------------------------\nThis is the documented behavior, but previously the result could be any of\nslice, None, or list.\n\nAll downstream users seem to check for the ``None`` result from\n``flatnotmasked_contiguous`` and replace it with ``[]``.  Those callers will\ncontinue to work as before.\n\n``np.squeeze`` restores old behavior of objects that cannot handle an ``axis`` argument\n- ---------------------------------------------------------------------------------------\nPrior to version ``1.7.0``, `numpy.squeeze` did not have an ``axis`` argument and\nall empty axes were removed by default. The incorporation of an ``axis``\nargument made it possible to selectively squeeze single or multiple empty axes,\nbut the old API expectation was not respected because axes could still be\nselectively removed (silent success) from an object expecting all empty axes to\nbe removed. That silent, selective removal of empty axes for objects expecting\nthe old behavior has been fixed and the old behavior restored.\n\nunstructured void array's ``.item`` method now returns a bytes object\n- ---------------------------------------------------------------------\n``.item`` now returns a ``bytes`` object instead of a buffer or byte array.\nThis may affect code which assumed the return value was mutable, which is no\nlonger the case.\n\n``copy.copy`` and ``copy.deepcopy`` no longer turn ``masked`` into an array\n- ---------------------------------------------------------------------------\nSince ``np.ma.masked`` is a readonly scalar, copying should be a no-op. These\nfunctions now behave consistently with ``np.copy()``.\n\nMultifield Indexing of Structured Arrays will still return a copy\n- -----------------------------------------------------------------\nThe change that multi-field indexing of structured arrays returns a view\ninstead of a copy is pushed back to 1.16. A new method\n``numpy.lib.recfunctions.repack_fields`` has been introduced to help mitigate\nthe effects of this change, which can be used to write code compatible with\nboth numpy 1.15 and 1.16. For more information on how to update code to account\nfor this future change see the \"accessing multiple fields\" section of the\n`user guide <https://docs.scipy.org/doc/numpy/user/basics.rec.html>`__.\n\n\nC API changes\n=============\n\nNew functions ``npy_get_floatstatus_barrier`` and ``npy_clear_floatstatus_barrier``\n- -----------------------------------------------------------------------------------\nFunctions ``npy_get_floatstatus_barrier`` and ``npy_clear_floatstatus_barrier``\nhave been added and should be used in place of the ``npy_get_floatstatus``and\n``npy_clear_status`` functions. Optimizing compilers like GCC 8.1 and Clang\nwere rearranging the order of operations when the previous functions were used\nin the ufunc SIMD functions, resulting in the floatstatus flags being checked\nbefore the operation whose status we wanted to check was run.  See `10339\n<https://github.com/numpy/numpy/issues/10370>`__.\n\nChanges to ``PyArray_GetDTypeTransferFunction``\n- -----------------------------------------------\n``PyArray_GetDTypeTransferFunction`` now defaults to using user-defined\n``copyswapn`` / ``copyswap`` for user-defined dtypes. If this causes a\nsignificant performance hit, consider implementing ``copyswapn`` to reflect the\nimplementation of ``PyArray_GetStridedCopyFn``.  See `10898\n<https://github.com/numpy/numpy/pull/10898>`__.\n* Functions ``npy_get_floatstatus_barrier`` and ``npy_clear_floatstatus_barrier``\n  have been added and should be used in place of the ``npy_get_floatstatus``and\n  ``npy_clear_status`` functions. Optimizing compilers like GCC 8.1 and Clang\n  were rearranging the order of operations when the previous functions were\n  used in the ufunc SIMD functions, resulting in the floatstatus flags being '\n  checked before the operation whose status we wanted to check was run.\n  See `10339 <https://github.com/numpy/numpy/issues/10370>`__.\n\n\nNew Features\n============\n\n``np.gcd`` and ``np.lcm`` ufuncs added for integer and objects types\n- --------------------------------------------------------------------\nThese compute the greatest common divisor, and lowest common multiple,\nrespectively. These work on all the numpy integer types, as well as the\nbuiltin arbitrary-precision ``Decimal`` and ``long`` types.\n\nSupport for cross-platform builds for iOS\n- -----------------------------------------\nThe build system has been modified to add support for the\n``_PYTHON_HOST_PLATFORM`` environment variable, used by ``distutils`` when\ncompiling on one platform for another platform. This makes it possible to\ncompile NumPy for iOS targets.\n\nThis only enables you to compile NumPy for one specific platform at a time.\nCreating a full iOS-compatible NumPy package requires building for the 5\narchitectures supported by iOS (i386, x86_64, armv7, armv7s and arm64), and\ncombining these 5 compiled builds products into a single \"fat\" binary.\n\n``return_indices`` keyword added for ``np.intersect1d``\n- -------------------------------------------------------\nNew keyword ``return_indices`` returns the indices of the two input arrays\nthat correspond to the common elements.\n\n``np.quantile`` and ``np.nanquantile``\n- --------------------------------------\nLike ``np.percentile`` and ``np.nanpercentile``, but takes quantiles in [0, 1]\nrather than percentiles in [0, 100]. ``np.percentile`` is now a thin wrapper\naround ``np.quantile`` with the extra step of dividing by 100.\n\n\nBuild system\n- ------------\nAdded experimental support for the 64-bit RISC-V architecture.\n\n\nImprovements\n============\n\n``np.einsum`` updates\n- ---------------------\nSyncs einsum path optimization tech between `numpy` and `opt_einsum`. In\nparticular, the `greedy` path has received many enhancements by jcmgray. A\nfull list of issues fixed are:\n\n* Arbitrary memory can be passed into the `greedy` path. Fixes gh-11210.\n* The greedy path has been updated to contain more dynamic programming ideas\n  preventing a large number of duplicate (and expensive) calls that figure out\n  the actual pair contraction that takes place. Now takes a few seconds on\n  several hundred input tensors. Useful for matrix product state theories.\n* Reworks the broadcasting dot error catching found in gh-11218 gh-10352 to be\n  a bit earlier in the process.\n* Enhances the `can_dot` functionality that previous missed an edge case (part\n  of gh-11308).\n\n``np.ufunc.reduce`` and related functions now accept an initial value\n- ---------------------------------------------------------------------\n``np.ufunc.reduce``, ``np.sum``, ``np.prod``, ``np.min`` and ``np.max`` all\nnow accept an ``initial`` keyword argument that specifies the value to start\nthe reduction with.\n\n``np.flip`` can operate over multiple axes\n- ------------------------------------------\n``np.flip`` now accepts None, or tuples of int, in its ``axis`` argument. If\naxis is None, it will flip over all the axes.\n\n``histogram`` and ``histogramdd`` functions have moved to ``np.lib.histograms``\n- -------------------------------------------------------------------------------\nThese were originally found in ``np.lib.function_base``. They are still\navailable under their un-scoped ``np.histogram(dd)`` names, and\nto maintain compatibility, aliased at ``np.lib.function_base.histogram(dd)``.\n\nCode that does ``from np.lib.function_base import *`` will need to be updated\nwith the new location, and should consider not using ``import *`` in future.\n\n``histogram`` will accept NaN values when explicit bins are given\n- -----------------------------------------------------------------\nPreviously it would fail when trying to compute a finite range for the data.\nSince the range is ignored anyway when the bins are given explicitly, this error\nwas needless.\n\nNote that calling ``histogram`` on NaN values continues to raise the\n``RuntimeWarning`` s typical of working with nan values, which can be silenced\nas usual with ``errstate``.\n\n``histogram`` works on datetime types, when explicit bin edges are given\n- ------------------------------------------------------------------------\nDates, times, and timedeltas can now be histogrammed. The bin edges must be\npassed explicitly, and are not yet computed automatically.\n\n``histogram`` \"auto\" estimator handles limited variance better\n- --------------------------------------------------------------\nNo longer does an IQR of 0 result in ``n_bins=1``, rather the number of bins\nchosen is related to the data size in this situation.\n\nThe edges retuned by `histogram`` and ``histogramdd`` now match the data float type\n- -----------------------------------------------------------------------------------\nWhen passed ``np.float16``, ``np.float32``, or ``np.longdouble`` data, the\nreturned edges are now of the same dtype. Previously, ``histogram`` would only\nreturn the same type if explicit bins were given, and ``histogram`` would\nproduce ``float64`` bins no matter what the inputs.\n\n``histogramdd`` allows explicit ranges to be given in a subset of axes\n- ----------------------------------------------------------------------\nThe ``range`` argument of `numpy.histogramdd` can now contain ``None`` values to\nindicate that the range for the corresponding axis should be computed from the\ndata. Previously, this could not be specified on a per-axis basis.\n\nThe normed arguments of ``histogramdd`` and ``histogram2d`` have been renamed\n- -----------------------------------------------------------------------------\nThese arguments are now called ``density``, which is consistent with\n``histogram``. The old argument continues to work, but the new name should be\npreferred.\n\n``np.r_`` works with 0d arrays, and ``np.ma.mr_`` works with ``np.ma.masked``\n- -----------------------------------------------------------------------------\n0d arrays passed to the `r_` and `mr_` concatenation helpers are now treated as\nthough they are arrays of length 1. Previously, passing these was an error.\nAs a result, `numpy.ma.mr_` now works correctly on the ``masked`` constant.\n\n``np.ptp`` accepts a ``keepdims`` argument, and extended axis tuples\n- --------------------------------------------------------------------\n``np.ptp`` (peak-to-peak) can now work over multiple axes, just like ``np.max``\nand ``np.min``.\n\n``MaskedArray.astype`` now is identical to ``ndarray.astype``\n- -------------------------------------------------------------\nThis means it takes all the same arguments, making more code written for\nndarray work for masked array too.\n\nEnable AVX2/AVX512 at compile time\n- ----------------------------------\nChange to simd.inc.src to allow use of AVX2 or AVX512 at compile time. Previously\ncompilation for avx2 (or 512) with -march=native would still use the SSE\ncode for the simd functions even when the rest of the code got AVX2.\n\n``nan_to_num`` always returns scalars when receiving scalar or 0d inputs\n- ------------------------------------------------------------------------\nPreviously an array was returned for integer scalar inputs, which is\ninconsistent with the behavior for float inputs, and that of ufuncs in general.\nFor all types of scalar or 0d input, the result is now a scalar.\n\n``np.flatnonzero`` works on numpy-convertible types\n- ---------------------------------------------------\n``np.flatnonzero`` now uses ``np.ravel(a)`` instead of ``a.ravel()``, so it\nworks for lists, tuples, etc.\n\n``np.interp`` returns numpy scalars rather than builtin scalars\n- ---------------------------------------------------------------\nPreviously ``np.interp(0.5, [0, 1], [10, 20])`` would return a ``float``, but\nnow it returns a ``np.float64`` object, which more closely matches the behavior\nof other functions.\n\nAdditionally, the special case of ``np.interp(object_array_0d, ...)`` is no\nlonger supported, as ``np.interp(object_array_nd)`` was never supported anyway.\n\nAs a result of this change, the ``period`` argument can now be used on 0d\narrays.\n\nAllow dtype field names to be unicode in Python 2\n- -------------------------------------------------\nPreviously ``np.dtype([(u'name', float)])`` would raise a ``TypeError`` in\nPython 2, as only bytestrings were allowed in field names. Now any unicode\nstring field names will be encoded with the ``ascii`` codec, raising a\n``UnicodeEncodeError`` upon failure.\n\nThis change makes it easier to write Python 2/3 compatible code using\n``from __future__ import unicode_literals``, which previously would cause\nstring literal field names to raise a TypeError in Python 2.\n\nComparison ufuncs accept ``dtype=object``, overriding the default ``bool``\n- --------------------------------------------------------------------------\nThis allows object arrays of symbolic types, which override ``==`` and other\noperators to return expressions, to be compared elementwise with\n``np.equal(a, b, dtype=object)``.\n\n``sort`` functions accept ``kind='stable'``\n- -------------------------------------------\nUp until now, to perform a stable sort on the data, the user must do:\n\n    >>> np.sort([5, 2, 6, 2, 1], kind='mergesort')\n    [1, 2, 2, 5, 6]\n\nbecause merge sort is the only stable sorting algorithm available in\nNumPy. However, having kind='mergesort' does not make it explicit that\nthe user wants to perform a stable sort thus harming the readability.\n\nThis change allows the user to specify kind='stable' thus clarifying\nthe intent.\n\nDo not make temporary copies for in-place accumulation\n- ------------------------------------------------------\nWhen ufuncs perform accumulation they no longer make temporary copies because\nof the overlap between input an output, that is, the next element accumulated\nis added before the accumulated result is stored in its place, hence the\noverlap is safe. Avoiding the copy results in faster execution.\n\n``linalg.matrix_power`` can now handle stacks of matrices\n- ---------------------------------------------------------\nLike other functions in ``linalg``, ``matrix_power`` can now deal with arrays\nof dimension larger than 2, which are treated as stacks of matrices. As part\nof the change, to further improve consistency, the name of the first argument\nhas been changed to ``a`` (from ``M``), and the exceptions for non-square\nmatrices have been changed to ``LinAlgError`` (from ``ValueError``).\n\nIncreased performance in ``random.permutation`` for multidimensional arrays\n- ---------------------------------------------------------------------------\n``permutation`` uses the fast path in ``random.shuffle`` for all input\narray dimensions.  Previously the fast path was only used for 1-d arrays.\n\nGeneralized ufuncs now accept ``axes``, ``axis`` and ``keepdims`` arguments\n- ---------------------------------------------------------------------------\nOne can control over which axes a generalized ufunc operates by passing in an\n``axes`` argument, a list of tuples with indices of particular axes.  For\ninstance, for a signature of ``(i,j),(j,k)->(i,k)`` appropriate for matrix\nmultiplication, the base elements are two-dimensional matrices and these are\ntaken to be stored in the two last axes of each argument.  The corresponding\naxes keyword would be ``[(-2, -1), (-2, -1), (-2, -1)]``. If one wanted to\nuse leading dimensions instead, one would pass in ``[(0, 1), (0, 1), (0, 1)]``.\n\nFor simplicity, for generalized ufuncs that operate on 1-dimensional arrays\n(vectors), a single integer is accepted instead of a single-element tuple, and\nfor generalized ufuncs for which all outputs are scalars, the (empty) output\ntuples can be omitted.  Hence, for a signature of ``(i),(i)->()`` appropriate\nfor an inner product, one could pass in ``axes=[0, 0]`` to indicate that the\nvectors are stored in the first dimensions of the two inputs arguments.\n\nAs a short-cut for generalized ufuncs that are similar to reductions, i.e.,\nthat act on a single, shared core dimension such as the inner product example\nabove, one can pass an ``axis`` argument. This is equivalent to passing in\n``axes`` with identical entries for all arguments with that core dimension\n(e.g., for the example above, ``axes=[(axis,), (axis,)]``).\n\nFurthermore, like for reductions, for generalized ufuncs that have inputs that\nall have the same number of core dimensions and outputs with no core dimension,\none can pass in ``keepdims`` to leave a dimension with size 1 in the outputs,\nthus allowing proper broadcasting against the original inputs. The location of\nthe extra dimension can be controlled with ``axes``. For instance, for the\ninner-product example, ``keepdims=True, axes=[-2, -2, -2]`` would act on the\ninner-product example, ``keepdims=True, axis=-2`` would act on the\none-but-last dimension of the input arguments, and leave a size 1 dimension in\nthat place in the output.\n\nfloat128 values now print correctly on ppc systems\n- --------------------------------------------------\nPreviously printing float128 values was buggy on ppc, since the special\ndouble-double floating-point-format on these systems was not accounted for.\nfloat128s now print with correct rounding and uniqueness.\n\nWarning to ppc users: You should upgrade glibc if it is version <=2.23,\nespecially if using float128. On ppc, glibc's malloc in these version often\nmisaligns allocated memory which can crash numpy when using float128 values.\n\nNew ``np.take_along_axis`` and ``np.put_along_axis`` functions\n- --------------------------------------------------------------\nWhen used on multidimensional arrays, ``argsort``, ``argmin``, ``argmax``, and\n``argpartition`` return arrays that are difficult to use as indices.\n``take_along_axis`` provides an easy way to use these indices to lookup values\nwithin an array, so that::\n\n    np.take_along_axis(a, np.argsort(a, axis=axis), axis=axis)\n\nis the same as::\n\n    np.sort(a, axis=axis)\n\n``np.put_along_axis`` acts as the dual operation for writing to these indices\nwithin an array.\n\n\nChecksums\n=========\n\nMD5\n- ---\n\n    4957a50c1125fdecb4cb51829f5feba1  numpy-1.15.0-cp27-cp27m-macosx_10_6_intel.macosx_10_9_intel.macosx_10_9_x86_64.macosx_10_10_intel.macosx_10_10_x86_64.whl\n    d5ffa73c6a3eeba8cfcab283e7db3c2f  numpy-1.15.0-cp27-cp27m-manylinux1_i686.whl\n    a6f7aa33d4d1598dc33831a4bb36570d  numpy-1.15.0-cp27-cp27m-manylinux1_x86_64.whl\n    cbdd2291782deb29f41c9b7d121264e0  numpy-1.15.0-cp27-cp27mu-manylinux1_i686.whl\n    0bd79da73435161850099bfcacc75fae  numpy-1.15.0-cp27-cp27mu-manylinux1_x86_64.whl\n    73f930c046ac09e518d0b4cf2f8ff642  numpy-1.15.0-cp27-none-win32.whl\n    7ba5b463728a792dced42fd6259e511f  numpy-1.15.0-cp27-none-win_amd64.whl\n    badfc9f713510d59f478037c88b3d963  numpy-1.15.0-cp34-cp34m-macosx_10_6_intel.macosx_10_9_intel.macosx_10_9_x86_64.macosx_10_10_intel.macosx_10_10_x86_64.whl\n    662f2536cac7b841f86e9b7488e52371  numpy-1.15.0-cp34-cp34m-manylinux1_i686.whl\n    346d9239f7f12bb7042f8bc847928dc1  numpy-1.15.0-cp34-cp34m-manylinux1_x86_64.whl\n    fd03012584359cd05cee08408df5897d  numpy-1.15.0-cp34-none-win32.whl\n    1032db03cefd82e87f72f2b04b15b7ae  numpy-1.15.0-cp34-none-win_amd64.whl\n    cc463ee62af94c8410fdf95ce9933c3c  numpy-1.15.0-cp35-cp35m-macosx_10_6_intel.macosx_10_9_intel.macosx_10_9_x86_64.macosx_10_10_intel.macosx_10_10_x86_64.whl\n    77655199a4e18719dd5a0b348c44fc92  numpy-1.15.0-cp35-cp35m-manylinux1_i686.whl\n    d76c54272549cf3a2165d40d3fea5e30  numpy-1.15.0-cp35-cp35m-manylinux1_x86_64.whl\n    956c6f7c216b677b27628a97150cd069  numpy-1.15.0-cp35-none-win32.whl\n    2ab8080576932775167a6f9c772b91e4  numpy-1.15.0-cp35-none-win_amd64.whl\n    1a01c8d089d488565acc2836d03a7482  numpy-1.15.0-cp36-cp36m-macosx_10_6_intel.macosx_10_9_intel.macosx_10_9_x86_64.macosx_10_10_intel.macosx_10_10_x86_64.whl\n    5606fa1c1e13e789b802102699d613e2  numpy-1.15.0-cp36-cp36m-manylinux1_i686.whl\n    5635343a70f7cdd17f372966db1526d3  numpy-1.15.0-cp36-cp36m-manylinux1_x86_64.whl\n    166e901c1a86da5ffb8c6d3090ed917e  numpy-1.15.0-cp36-none-win32.whl\n    6423497ad5a610c1deed606ce44893bd  numpy-1.15.0-cp36-none-win_amd64.whl\n    e232fbba29585812bf7fa547f671b768  numpy-1.15.0-cp37-cp37m-macosx_10_6_intel.macosx_10_9_intel.macosx_10_9_x86_64.macosx_10_10_intel.macosx_10_10_x86_64.whl\n    b2fc4551651fae84eb01b8a37f2e1e69  numpy-1.15.0-cp37-cp37m-manylinux1_i686.whl\n    36ed60bef7c5cb252b9d0e8dc5029e08  numpy-1.15.0-cp37-cp37m-manylinux1_x86_64.whl\n    4482a89fa4540c8bbf76028621931266  numpy-1.15.0-cp37-none-win32.whl\n    cfef18ee246468752f1686147c70bd0a  numpy-1.15.0-cp37-none-win_amd64.whl\n    5cf4daff88042326334266f80ad38884  numpy-1.15.0.tar.gz\n    20e13185089011116a98e11c9bf8aa07  numpy-1.15.0.zip\n\nSHA256\n- ------\n\n    a17a8fd5df4fec5b56b4d11c9ba8b9ebfb883c90ec361628d07be00aaa4f009a  numpy-1.15.0-cp27-cp27m-macosx_10_6_intel.macosx_10_9_intel.macosx_10_9_x86_64.macosx_10_10_intel.macosx_10_10_x86_64.whl\n    c3ac359ace241707e5a48fe2922e566ac666aacacf4f8031f2994ac429c31344  numpy-1.15.0-cp27-cp27m-manylinux1_i686.whl\n    e2317cf091c2e7f0dacdc2e72c693cc34403ca1f8e3807622d0bb653dc978616  numpy-1.15.0-cp27-cp27m-manylinux1_x86_64.whl\n    64c6acf5175745fd1b7b7e17c74fdbfb7191af3b378bc54f44560279f41238d3  numpy-1.15.0-cp27-cp27mu-manylinux1_i686.whl\n    924f37e66db78464b4b85ed4b6d2e5cda0c0416e657cac7ccbef14b9fa2c40b5  numpy-1.15.0-cp27-cp27mu-manylinux1_x86_64.whl\n    674ea7917f0657ddb6976bd102ac341bc493d072c32a59b98e5b8c6eaa2d5ec0  numpy-1.15.0-cp27-none-win32.whl\n    ae3864816287d0e86ead580b69921daec568fe680857f07ee2a87bf7fd77ce24  numpy-1.15.0-cp27-none-win_amd64.whl\n    78c35dc7ad184aebf3714dbf43f054714c6e430e14b9c06c49a864fb9e262030  numpy-1.15.0-cp34-cp34m-macosx_10_6_intel.macosx_10_9_intel.macosx_10_9_x86_64.macosx_10_10_intel.macosx_10_10_x86_64.whl\n    c7c660cc0209fdf29a4e50146ca9ac9d8664acaded6b6ae2f5d0ae2e91a0f0cd  numpy-1.15.0-cp34-cp34m-manylinux1_i686.whl\n    3fbccb399fe9095b1c1d7b41e7c7867db8aa0d2347fc44c87a7a180cedda112b  numpy-1.15.0-cp34-cp34m-manylinux1_x86_64.whl\n    aaa519335a71f87217ca8a680c3b66b61960e148407bdf5c209c42f50fe30f49  numpy-1.15.0-cp34-none-win32.whl\n    62cb836506f40ce2529bfba9d09edc4b2687dd18c56cf4457e51c3e7145402fd  numpy-1.15.0-cp34-none-win_amd64.whl\n    55daf757e5f69aa75b4477cf4511bf1f96325c730e4ad32d954ccb593acd2585  numpy-1.15.0-cp35-cp35m-macosx_10_6_intel.macosx_10_9_intel.macosx_10_9_x86_64.macosx_10_10_intel.macosx_10_10_x86_64.whl\n    b5f8c15cb9173f6cdf0f994955e58d1265331029ae26296232379461a297e5f2  numpy-1.15.0-cp35-cp35m-manylinux1_i686.whl\n    24f3bb9a5f6c3936a8ccd4ddfc1210d9511f4aeb879a12efd2e80bec647b8695  numpy-1.15.0-cp35-cp35m-manylinux1_x86_64.whl\n    34033b581bc01b1135ca2e3e93a94daea7c739f21a97a75cca93e29d9f0c8e71  numpy-1.15.0-cp35-none-win32.whl\n    f5a758252502b466b9c2b201ea397dae5a914336c987f3a76c3741a82d43c96e  numpy-1.15.0-cp35-none-win_amd64.whl\n    14fb76bde161c87dcec52d91c78f65aa8a23aa2e1530a71f412dabe03927d917  numpy-1.15.0-cp36-cp36m-macosx_10_6_intel.macosx_10_9_intel.macosx_10_9_x86_64.macosx_10_10_intel.macosx_10_10_x86_64.whl\n    816645178f2180be257a576b735d3ae245b1982280b97ae819550ce8bcdf2b6b  numpy-1.15.0-cp36-cp36m-manylinux1_i686.whl\n    f2a778dd9bb3e4590dbe3bbac28e7c7134280c4ec97e3bf8678170ee58c67b21  numpy-1.15.0-cp36-cp36m-manylinux1_x86_64.whl\n    7f17efe9605444fcbfd990ba9b03371552d65a3c259fc2d258c24fb95afdd728  numpy-1.15.0-cp36-none-win32.whl\n    73a816e441dace289302e04a7a34ec4772ed234ab6885c968e3ca2fc2d06fe2d  numpy-1.15.0-cp36-none-win_amd64.whl\n    21041014b7529237994a6b578701c585703fbb3b1bea356cdb12a5ea7804241c  numpy-1.15.0-cp37-cp37m-macosx_10_6_intel.macosx_10_9_intel.macosx_10_9_x86_64.macosx_10_10_intel.macosx_10_10_x86_64.whl\n    d690a2ff49f6c3bc35336693c9924fe5916be3cc0503fe1ea6c7e2bf951409ee  numpy-1.15.0-cp37-cp37m-manylinux1_i686.whl\n    50718eea8e77a1bedcc85befd22c8dbf5a24c9d2c0c1e36bbb8d7a38da847eb3  numpy-1.15.0-cp37-cp37m-manylinux1_x86_64.whl\n    fb4c33a404d9eff49a0cdc8ead0af6453f62f19e071b60d283f9dc05581e4134  numpy-1.15.0-cp37-none-win32.whl\n    61efc65f325770bbe787f34e00607bc124f08e6c25fdf04723848585e81560dc  numpy-1.15.0-cp37-none-win_amd64.whl\n    259934a941663e93fdd5d28ce3f6aa2a81ce7dda85c395dd07b1f1edff2e0236  numpy-1.15.0.tar.gz\n    f28e73cf18d37a413f7d5de35d024e6b98f14566a10d82100f9dc491a7d449f9  numpy-1.15.0.zip\n-----BEGIN PGP SIGNATURE-----\n\niQEcBAEBAgAGBQJbVgLRAAoJEGefIoN3xSR7qpcIAL7o+XeLF1jPlR48aMkssttW\n5gtaRP26sRFflinDCAWIpSJh3bigAmkGDbYnR3YETC60Szs5REdhQmsCdimxF/ua\nhJrLoSowpPdCOYunljLtPgMYf2I6m8oQwlxKDYHlJxSgbIgNvKNbe5WyoXgIpHK4\nPZJHUWBEBPgTGusSup0q6YnAZeep9gO79+h/MEudJK2UqVi0FaM4rUE/Q2d/XXiN\njZHYZhzd6ZYcjXlmtiKBh7cZdBhVHUeYxg4gpNLwFg0Dzy3TNTEgkRa5va39hnpr\n5G2TcsglRvtFnixGe0zRvFAmVllU6yzor11SWxrVhx3p1UQmz1vaU140pyYhn4I=\n=FOVg\n-----END PGP SIGNATURE-----\n\n\n.. currentmodule:: numpy\n\n==========================\n", "1.23.1": "==========================\n\nThe NumPy 1.23.1 is a maintenance release that fixes bugs discovered after the\n1.23.0 release. Notable fixes are:\n\n- Fix searchsorted for float16 NaNs\n- Fix compilation on Apple M1\n- Fix KeyError in crackfortran operator support (Slycot)\n\nThe Python version supported for this release are 3.8-3.10.\n\n\nContributors\n============\n\nA total of 7 people contributed to this release.  People with a \"+\" by their\nnames contributed a patch for the first time.\n\n* Charles Harris\n* Matthias Koeppe +\n* Pranab Das +\n* Rohit Goswami\n* Sebastian Berg\n* Serge Guelton\n* Srimukh Sripada +\n\n\nPull requests merged\n====================\n\nA total of 8 pull requests were merged for this release.\n\n* `21866 <https://github.com/numpy/numpy/pull/21866>`__: BUG: Fix discovered MachAr (still used within valgrind)\n* `21867 <https://github.com/numpy/numpy/pull/21867>`__: BUG: Handle NaNs correctly for float16 during sorting\n* `21868 <https://github.com/numpy/numpy/pull/21868>`__: BUG: Use ``keepdims`` during normalization in ``np.average`` and...\n* `21869 <https://github.com/numpy/numpy/pull/21869>`__: DOC: mention changes to ``max_rows`` behaviour in ``np.loadtxt``\n* `21870 <https://github.com/numpy/numpy/pull/21870>`__: BUG: Reject non integer array-likes with size 1 in delete\n* `21949 <https://github.com/numpy/numpy/pull/21949>`__: BLD: Make can_link_svml return False for 32bit builds on x86_64\n* `21951 <https://github.com/numpy/numpy/pull/21951>`__: BUG: Reorder extern \"C\" to only apply to function declarations...\n* `21952 <https://github.com/numpy/numpy/pull/21952>`__: BUG: Fix KeyError in crackfortran operator support\n\n\nChecksums\n=========\n\nMD5\n---\n::\n\n    79f0d8c114f282b834b49209d6955f98  numpy-1.23.1-cp310-cp310-macosx_10_9_x86_64.whl\n    42a89a88ef26b768e8933ce46b1cc2bd  numpy-1.23.1-cp310-cp310-macosx_11_0_arm64.whl\n    1c1d68b3483eaf99b9a3583c8ac8bf47  numpy-1.23.1-cp310-cp310-manylinux_2_17_aarch64.manylinux2014_aarch64.whl\n    9d3e9f7f9b3dce6cf15209e4f25f346e  numpy-1.23.1-cp310-cp310-manylinux_2_17_x86_64.manylinux2014_x86_64.whl\n    a9afb7c34b48d08fc50427ae6516b42d  numpy-1.23.1-cp310-cp310-win32.whl\n    a0e02823883bdfcec49309e108f65e13  numpy-1.23.1-cp310-cp310-win_amd64.whl\n    f40cdf4ec7bb0cf31a90a4fa294323c2  numpy-1.23.1-cp38-cp38-macosx_10_9_x86_64.whl\n    80115a959f0fe30d6c401b2650a61c70  numpy-1.23.1-cp38-cp38-macosx_11_0_arm64.whl\n    1cf199b3a93960c4f269853a56a8d8eb  numpy-1.23.1-cp38-cp38-manylinux_2_17_aarch64.manylinux2014_aarch64.whl\n    aa6f0f192312c79cd770c2c395e9982a  numpy-1.23.1-cp38-cp38-manylinux_2_17_x86_64.manylinux2014_x86_64.whl\n    d07bee0ea3142a96cb5e4e16aca273ca  numpy-1.23.1-cp38-cp38-win32.whl\n    02d0734ae8ad5e18a40c6c6de18486a0  numpy-1.23.1-cp38-cp38-win_amd64.whl\n    e1ca14acd7d83bc74bdf6ab0bb4bd195  numpy-1.23.1-cp39-cp39-macosx_10_9_x86_64.whl\n    c9152c62b2f31e742e24bfdc97b28666  numpy-1.23.1-cp39-cp39-macosx_11_0_arm64.whl\n    05b0b37c92f7a7e7c01afac0a5322b40  numpy-1.23.1-cp39-cp39-manylinux_2_17_aarch64.manylinux2014_aarch64.whl\n    d9810bb71a0ef9837e87ea5c44fcab5e  numpy-1.23.1-cp39-cp39-manylinux_2_17_x86_64.manylinux2014_x86_64.whl\n    4255577f857e838f7a94e3a614ddc5eb  numpy-1.23.1-cp39-cp39-win32.whl\n    787486e3cd87b98024ffe1c969c4db7a  numpy-1.23.1-cp39-cp39-win_amd64.whl\n    5c7b2d1471b1b9ec6ff1cb3fe1f8ac14  numpy-1.23.1-pp38-pypy38_pp73-macosx_10_9_x86_64.whl\n    40d5b2ff869707b0d97325ce44631135  numpy-1.23.1-pp38-pypy38_pp73-manylinux_2_17_x86_64.manylinux2014_x86_64.whl\n    44ce1e07927cc09415df9898857792da  numpy-1.23.1-pp38-pypy38_pp73-win_amd64.whl\n    4f8636a9c1a77ca0fb923ba55378891f  numpy-1.23.1.tar.gz\n\nSHA256\n------\n::\n\n    b15c3f1ed08df4980e02cc79ee058b788a3d0bef2fb3c9ca90bb8cbd5b8a3a04  numpy-1.23.1-cp310-cp310-macosx_10_9_x86_64.whl\n    9ce242162015b7e88092dccd0e854548c0926b75c7924a3495e02c6067aba1f5  numpy-1.23.1-cp310-cp310-macosx_11_0_arm64.whl\n    e0d7447679ae9a7124385ccf0ea990bb85bb869cef217e2ea6c844b6a6855073  numpy-1.23.1-cp310-cp310-manylinux_2_17_aarch64.manylinux2014_aarch64.whl\n    3119daed207e9410eaf57dcf9591fdc68045f60483d94956bee0bfdcba790953  numpy-1.23.1-cp310-cp310-manylinux_2_17_x86_64.manylinux2014_x86_64.whl\n    3ab67966c8d45d55a2bdf40701536af6443763907086c0a6d1232688e27e5447  numpy-1.23.1-cp310-cp310-win32.whl\n    1865fdf51446839ca3fffaab172461f2b781163f6f395f1aed256b1ddc253622  numpy-1.23.1-cp310-cp310-win_amd64.whl\n    aeba539285dcf0a1ba755945865ec61240ede5432df41d6e29fab305f4384db2  numpy-1.23.1-cp38-cp38-macosx_10_9_x86_64.whl\n    7e8229f3687cdadba2c4faef39204feb51ef7c1a9b669247d49a24f3e2e1617c  numpy-1.23.1-cp38-cp38-macosx_11_0_arm64.whl\n    68b69f52e6545af010b76516f5daaef6173e73353e3295c5cb9f96c35d755641  numpy-1.23.1-cp38-cp38-manylinux_2_17_aarch64.manylinux2014_aarch64.whl\n    1408c3527a74a0209c781ac82bde2182b0f0bf54dea6e6a363fe0cc4488a7ce7  numpy-1.23.1-cp38-cp38-manylinux_2_17_x86_64.manylinux2014_x86_64.whl\n    47f10ab202fe4d8495ff484b5561c65dd59177949ca07975663f4494f7269e3e  numpy-1.23.1-cp38-cp38-win32.whl\n    37e5ebebb0eb54c5b4a9b04e6f3018e16b8ef257d26c8945925ba8105008e645  numpy-1.23.1-cp38-cp38-win_amd64.whl\n    173f28921b15d341afadf6c3898a34f20a0569e4ad5435297ba262ee8941e77b  numpy-1.23.1-cp39-cp39-macosx_10_9_x86_64.whl\n    876f60de09734fbcb4e27a97c9a286b51284df1326b1ac5f1bf0ad3678236b22  numpy-1.23.1-cp39-cp39-macosx_11_0_arm64.whl\n    35590b9c33c0f1c9732b3231bb6a72d1e4f77872390c47d50a615686ae7ed3fd  numpy-1.23.1-cp39-cp39-manylinux_2_17_aarch64.manylinux2014_aarch64.whl\n    a35c4e64dfca659fe4d0f1421fc0f05b8ed1ca8c46fb73d9e5a7f175f85696bb  numpy-1.23.1-cp39-cp39-manylinux_2_17_x86_64.manylinux2014_x86_64.whl\n    c2f91f88230042a130ceb1b496932aa717dcbd665350beb821534c5c7e15881c  numpy-1.23.1-cp39-cp39-win32.whl\n    37ece2bd095e9781a7156852e43d18044fd0d742934833335599c583618181b9  numpy-1.23.1-cp39-cp39-win_amd64.whl\n    8002574a6b46ac3b5739a003b5233376aeac5163e5dcd43dd7ad062f3e186129  numpy-1.23.1-pp38-pypy38_pp73-macosx_10_9_x86_64.whl\n    5d732d17b8a9061540a10fda5bfeabca5785700ab5469a5e9b93aca5e2d3a5fb  numpy-1.23.1-pp38-pypy38_pp73-manylinux_2_17_x86_64.manylinux2014_x86_64.whl\n    55df0f7483b822855af67e38fb3a526e787adf189383b4934305565d71c4b148  numpy-1.23.1-pp38-pypy38_pp73-win_amd64.whl\n    d748ef349bfef2e1194b59da37ed5a29c19ea8d7e6342019921ba2ba4fd8b624  numpy-1.23.1.tar.gz\n\n\n.. currentmodule:: numpy\n\n==========================\n", "1.22.3": "==========================\n\nNumPy 1.22.3 is a maintenance release that fixes bugs discovered after the\n1.22.2 release. The most noticeable fixes may be those for DLPack. One that may\ncause some problems is disallowing strings as inputs to logical ufuncs. It is\nstill undecided how strings should be treated in those functions and it was\nthought best to simply disallow them until a decision was reached. That should\nnot cause problems with older code.\n\nThe Python versions supported for this release are 3.8-3.10. Note that the Mac\nwheels are now based on OS X 10.14 rather than 10.9 that was used in previous\nNumPy release cycles. 10.14 is the oldest release supported by Apple.\n\nContributors\n============\n\nA total of 9 people contributed to this release.  People with a \"+\" by their\nnames contributed a patch for the first time.\n\n* GalaxySnail +\n* Alexandre de Siqueira\n* Bas van Beek\n* Charles Harris\n* Melissa Weber Mendon\u221a\u00dfa\n* Ross Barnowski\n* Sebastian Berg\n* Tirth Patel\n* Matthieu Darbois\n\nPull requests merged\n====================\n\nA total of 10 pull requests were merged for this release.\n\n* `21048 <https://github.com/numpy/numpy/pull/21048>`__: MAINT: Use \"3.10\" instead of \"3.10-dev\" on travis.\n* `21106 <https://github.com/numpy/numpy/pull/21106>`__: TYP,MAINT: Explicitly allow sequences of array-likes in ``np.concatenate``\n* `21137 <https://github.com/numpy/numpy/pull/21137>`__: BLD,DOC: skip broken ipython 8.1.0\n* `21138 <https://github.com/numpy/numpy/pull/21138>`__: BUG, ENH: np._from_dlpack: export correct device information\n* `21139 <https://github.com/numpy/numpy/pull/21139>`__: BUG: Fix numba DUFuncs added loops getting picked up\n* `21140 <https://github.com/numpy/numpy/pull/21140>`__: BUG: Fix unpickling an empty ndarray with a none-zero dimension...\n* `21141 <https://github.com/numpy/numpy/pull/21141>`__: BUG: use ThreadPoolExecutor instead of ThreadPool\n* `21142 <https://github.com/numpy/numpy/pull/21142>`__: API: Disallow strings in logical ufuncs\n* `21143 <https://github.com/numpy/numpy/pull/21143>`__: MAINT, DOC: Fix SciPy intersphinx link\n* `21148 <https://github.com/numpy/numpy/pull/21148>`__: BUG,ENH: np._from_dlpack: export arrays with any strided size-1...\n\nChecksums\n=========\n\nMD5\n---\n::\n\n    14f1872bbab050b0579e5fcd8b341b81  numpy-1.22.3-cp310-cp310-macosx_10_14_x86_64.whl\n    c673faa3ac8745ad10ed0428a21a77aa  numpy-1.22.3-cp310-cp310-macosx_11_0_arm64.whl\n    d925fff720561673fd7ee8ead0e94935  numpy-1.22.3-cp310-cp310-manylinux_2_17_aarch64.manylinux2014_aarch64.whl\n    319f97f5ee26b9c3c06f7a2a3df412a3  numpy-1.22.3-cp310-cp310-manylinux_2_17_x86_64.manylinux2014_x86_64.whl\n    866eae5dba934cad50eb38c8505c8449  numpy-1.22.3-cp310-cp310-win32.whl\n    e4c512437a6d4eb4a384225861067ad8  numpy-1.22.3-cp310-cp310-win_amd64.whl\n    a28052af37037f0d5c3b47f4a7040135  numpy-1.22.3-cp38-cp38-macosx_10_14_x86_64.whl\n    d22dc074bde64f6e91a2d1990345f821  numpy-1.22.3-cp38-cp38-macosx_11_0_arm64.whl\n    e8a01c2ca1474aff142366a0a2fe0812  numpy-1.22.3-cp38-cp38-manylinux_2_17_aarch64.manylinux2014_aarch64.whl\n    4fe6e71e7871cb31ffc4122aa5707be7  numpy-1.22.3-cp38-cp38-manylinux_2_17_x86_64.manylinux2014_x86_64.whl\n    1273fb3c77383ab28f2fb05192751340  numpy-1.22.3-cp38-cp38-win32.whl\n    001244a6bafa640d7509c85661a4e98e  numpy-1.22.3-cp38-cp38-win_amd64.whl\n    b8694b880a1a68d1716f60a9c9e82b38  numpy-1.22.3-cp39-cp39-macosx_10_14_x86_64.whl\n    ba122eaa0988801e250f8674e3dd612e  numpy-1.22.3-cp39-cp39-macosx_11_0_arm64.whl\n    3641825aca07cb26732425e52d034daf  numpy-1.22.3-cp39-cp39-manylinux_2_17_aarch64.manylinux2014_aarch64.whl\n    f92412e4273c2580abcc1b75c56e9651  numpy-1.22.3-cp39-cp39-manylinux_2_17_x86_64.manylinux2014_x86_64.whl\n    b38604778ffd0a17931c06738c3ce9ed  numpy-1.22.3-cp39-cp39-win32.whl\n    644e0b141fa36a1baf0338032254cc9a  numpy-1.22.3-cp39-cp39-win_amd64.whl\n    99d2dfb943327b108b2c3b923bd42000  numpy-1.22.3-pp38-pypy38_pp73-manylinux_2_17_x86_64.manylinux2014_x86_64.whl\n    3305c27e5bdf7f19247a7eee00ac053e  numpy-1.22.3.tar.gz\n    b56530be068796a50bf5a09105c8011e  numpy-1.22.3.zip\n\nSHA256\n------\n::\n\n    92bfa69cfbdf7dfc3040978ad09a48091143cffb778ec3b03fa170c494118d75  numpy-1.22.3-cp310-cp310-macosx_10_14_x86_64.whl\n    8251ed96f38b47b4295b1ae51631de7ffa8260b5b087808ef09a39a9d66c97ab  numpy-1.22.3-cp310-cp310-macosx_11_0_arm64.whl\n    48a3aecd3b997bf452a2dedb11f4e79bc5bfd21a1d4cc760e703c31d57c84b3e  numpy-1.22.3-cp310-cp310-manylinux_2_17_aarch64.manylinux2014_aarch64.whl\n    a3bae1a2ed00e90b3ba5f7bd0a7c7999b55d609e0c54ceb2b076a25e345fa9f4  numpy-1.22.3-cp310-cp310-manylinux_2_17_x86_64.manylinux2014_x86_64.whl\n    f950f8845b480cffe522913d35567e29dd381b0dc7e4ce6a4a9f9156417d2430  numpy-1.22.3-cp310-cp310-win32.whl\n    08d9b008d0156c70dc392bb3ab3abb6e7a711383c3247b410b39962263576cd4  numpy-1.22.3-cp310-cp310-win_amd64.whl\n    201b4d0552831f7250a08d3b38de0d989d6f6e4658b709a02a73c524ccc6ffce  numpy-1.22.3-cp38-cp38-macosx_10_14_x86_64.whl\n    f8c1f39caad2c896bc0018f699882b345b2a63708008be29b1f355ebf6f933fe  numpy-1.22.3-cp38-cp38-macosx_11_0_arm64.whl\n    568dfd16224abddafb1cbcce2ff14f522abe037268514dd7e42c6776a1c3f8e5  numpy-1.22.3-cp38-cp38-manylinux_2_17_aarch64.manylinux2014_aarch64.whl\n    3ca688e1b9b95d80250bca34b11a05e389b1420d00e87a0d12dc45f131f704a1  numpy-1.22.3-cp38-cp38-manylinux_2_17_x86_64.manylinux2014_x86_64.whl\n    e7927a589df200c5e23c57970bafbd0cd322459aa7b1ff73b7c2e84d6e3eae62  numpy-1.22.3-cp38-cp38-win32.whl\n    07a8c89a04997625236c5ecb7afe35a02af3896c8aa01890a849913a2309c676  numpy-1.22.3-cp38-cp38-win_amd64.whl\n    2c10a93606e0b4b95c9b04b77dc349b398fdfbda382d2a39ba5a822f669a0123  numpy-1.22.3-cp39-cp39-macosx_10_14_x86_64.whl\n    fade0d4f4d292b6f39951b6836d7a3c7ef5b2347f3c420cd9820a1d90d794802  numpy-1.22.3-cp39-cp39-macosx_11_0_arm64.whl\n    5bfb1bb598e8229c2d5d48db1860bcf4311337864ea3efdbe1171fb0c5da515d  numpy-1.22.3-cp39-cp39-manylinux_2_17_aarch64.manylinux2014_aarch64.whl\n    97098b95aa4e418529099c26558eeb8486e66bd1e53a6b606d684d0c3616b168  numpy-1.22.3-cp39-cp39-manylinux_2_17_x86_64.manylinux2014_x86_64.whl\n    fdf3c08bce27132395d3c3ba1503cac12e17282358cb4bddc25cc46b0aca07aa  numpy-1.22.3-cp39-cp39-win32.whl\n    639b54cdf6aa4f82fe37ebf70401bbb74b8508fddcf4797f9fe59615b8c5813a  numpy-1.22.3-cp39-cp39-win_amd64.whl\n    c34ea7e9d13a70bf2ab64a2532fe149a9aced424cd05a2c4ba662fd989e3e45f  numpy-1.22.3-pp38-pypy38_pp73-manylinux_2_17_x86_64.manylinux2014_x86_64.whl\n    a906c0b4301a3d62ccf66d058fe779a65c1c34f6719ef2058f96e1856f48bca5  numpy-1.22.3.tar.gz\n    dbc7601a3b7472d559dc7b933b18b4b66f9aa7452c120e87dfb33d02008c8a18  numpy-1.22.3.zip\n\n\n.. currentmodule:: numpy\n\n==========================\n", "1.22.1": "==========================\n\nThe NumPy 1.22.1 is maintenance release that fixes bugs discovered after the\n1.22.0 release. Notable fixes are:\n\n- Fix f2PY docstring problems (SciPy)\n- Fix reduction type problems (AstroPy)\n- Fix various typing bugs.\n\nThe Python versions supported for this release are 3.8-3.10.\n\n\nContributors\n============\n\nA total of 14 people contributed to this release.  People with a \"+\" by their\nnames contributed a patch for the first time.\n\n* Arryan Singh\n* Bas van Beek\n* Charles Harris\n* Denis Laxalde\n* Isuru Fernando\n* Kevin Sheppard\n* Matthew Barber\n* Matti Picus\n* Melissa Weber Mendon\u221a\u00dfa\n* Mukulika Pahari\n* Omid Rajaei +\n* Pearu Peterson\n* Ralf Gommers\n* Sebastian Berg\n\n\nPull requests merged\n====================\n\nA total of 20 pull requests were merged for this release.\n\n* `20702 <https://github.com/numpy/numpy/pull/20702>`__: MAINT, DOC: Post 1.22.0 release fixes.\n* `20703 <https://github.com/numpy/numpy/pull/20703>`__: DOC, BUG: Use pngs instead of svgs.\n* `20704 <https://github.com/numpy/numpy/pull/20704>`__: DOC: Fixed the link on user-guide landing page\n* `20714 <https://github.com/numpy/numpy/pull/20714>`__: BUG: Restore vc141 support\n* `20724 <https://github.com/numpy/numpy/pull/20724>`__: BUG: Fix array dimensions solver for multidimensional arguments...\n* `20725 <https://github.com/numpy/numpy/pull/20725>`__: TYP: change type annotation for ``__array_namespace__`` to ModuleType\n* `20726 <https://github.com/numpy/numpy/pull/20726>`__: TYP, MAINT: Allow ``ndindex`` to accept integer tuples\n* `20757 <https://github.com/numpy/numpy/pull/20757>`__: BUG: Relax dtype identity check in reductions\n* `20763 <https://github.com/numpy/numpy/pull/20763>`__: TYP: Allow time manipulation functions to accept ``date`` and ``timedelta``...\n* `20768 <https://github.com/numpy/numpy/pull/20768>`__: TYP: Relax the type of ``ndarray.__array_finalize__``\n* `20795 <https://github.com/numpy/numpy/pull/20795>`__: MAINT: Raise RuntimeError if setuptools version is too recent.\n* `20796 <https://github.com/numpy/numpy/pull/20796>`__: BUG, DOC: Fixes SciPy docs build warnings\n* `20797 <https://github.com/numpy/numpy/pull/20797>`__: DOC: fix OpenBLAS version in release note\n* `20798 <https://github.com/numpy/numpy/pull/20798>`__: PERF: Optimize array check for bounded 0,1 values\n* `20805 <https://github.com/numpy/numpy/pull/20805>`__: BUG: Fix that reduce-likes honor out always (and live in the...\n* `20806 <https://github.com/numpy/numpy/pull/20806>`__: BUG: ``array_api.argsort(descending=True)`` respects relative...\n* `20807 <https://github.com/numpy/numpy/pull/20807>`__: BUG: Allow integer inputs for pow-related functions in ``array_api``\n* `20814 <https://github.com/numpy/numpy/pull/20814>`__: DOC: Refer to NumPy, not pandas, in main page\n* `20815 <https://github.com/numpy/numpy/pull/20815>`__: DOC: Update Copyright to 2022 [License]\n* `20819 <https://github.com/numpy/numpy/pull/20819>`__: BUG: Return correctly shaped inverse indices in array_api set...\n\nChecksums\n=========\n\nMD5\n---\n::\n\n    8edd68c8998cb694e244ce793b2d088c  numpy-1.22.1-cp310-cp310-macosx_10_9_universal2.whl\n    e4858aafd41cdba76cd14161bfc512c3  numpy-1.22.1-cp310-cp310-macosx_10_9_x86_64.whl\n    96f4fc3f321625278ca3807c7c8c789c  numpy-1.22.1-cp310-cp310-macosx_11_0_arm64.whl\n    2ddc25b9c9d7b517610689055f9f553a  numpy-1.22.1-cp310-cp310-manylinux_2_17_aarch64.manylinux2014_aarch64.whl\n    8d40c6fd64389c05646b5ef95cded6e5  numpy-1.22.1-cp310-cp310-manylinux_2_17_x86_64.manylinux2014_x86_64.whl\n    1a8359c6436d1bcfe84a094337903a48  numpy-1.22.1-cp310-cp310-win_amd64.whl\n    033f9aa72a732646f3fb4563226320ee  numpy-1.22.1-cp38-cp38-macosx_10_9_universal2.whl\n    59e13abecdf4194f75b654f1d853b244  numpy-1.22.1-cp38-cp38-macosx_10_9_x86_64.whl\n    3ce885a0c10e95f5756d7c1878eaa246  numpy-1.22.1-cp38-cp38-macosx_11_0_arm64.whl\n    546b2a0866561673d5b7eadcc086af24  numpy-1.22.1-cp38-cp38-manylinux_2_17_aarch64.manylinux2014_aarch64.whl\n    200c0a7bc3a24cfa6f4358d7274b5535  numpy-1.22.1-cp38-cp38-manylinux_2_17_x86_64.manylinux2014_x86_64.whl\n    defe48b3b5f44c3991e830f7cde0a79c  numpy-1.22.1-cp38-cp38-win32.whl\n    15557a847a78bcbf651ca6689ae37935  numpy-1.22.1-cp38-cp38-win_amd64.whl\n    067e734594c67d8141190b7eabb979ee  numpy-1.22.1-cp39-cp39-macosx_10_9_universal2.whl\n    1458d42b26da341baaee134d85e3fd70  numpy-1.22.1-cp39-cp39-macosx_10_9_x86_64.whl\n    463b365c80efffd807194c78b4796235  numpy-1.22.1-cp39-cp39-macosx_11_0_arm64.whl\n    58d8dc02dd884898c1b7ee1bee1dd216  numpy-1.22.1-cp39-cp39-manylinux_2_17_aarch64.manylinux2014_aarch64.whl\n    48e2d2905822f78a96d400c78bd16cbb  numpy-1.22.1-cp39-cp39-manylinux_2_17_x86_64.manylinux2014_x86_64.whl\n    c5059bd82d8f2c509c889fba09251307  numpy-1.22.1-cp39-cp39-win32.whl\n    eb9a0655d16897f0adf6ea53b9f3bda4  numpy-1.22.1-cp39-cp39-win_amd64.whl\n    74cb5dba2f37dc445ffd3068eb1d58fe  numpy-1.22.1-pp38-pypy38_pp73-manylinux_2_17_x86_64.manylinux2014_x86_64.whl\n    90fff1ee7c7f843fc7a234addc70c71c  numpy-1.22.1.tar.gz\n    c25dad73053350dd0278605d8ed8a5c7  numpy-1.22.1.zip\n\nSHA256\n------\n::\n\n    3d62d6b0870b53799204515145935608cdeb4cebb95a26800b6750e48884cc5b  numpy-1.22.1-cp310-cp310-macosx_10_9_universal2.whl\n    831f2df87bd3afdfc77829bc94bd997a7c212663889d56518359c827d7113b1f  numpy-1.22.1-cp310-cp310-macosx_10_9_x86_64.whl\n    8d1563060e77096367952fb44fca595f2b2f477156de389ce7c0ade3aef29e21  numpy-1.22.1-cp310-cp310-macosx_11_0_arm64.whl\n    69958735d5e01f7b38226a6c6e7187d72b7e4d42b6b496aca5860b611ca0c193  numpy-1.22.1-cp310-cp310-manylinux_2_17_aarch64.manylinux2014_aarch64.whl\n    45a7dfbf9ed8d68fd39763940591db7637cf8817c5bce1a44f7b56c97cbe211e  numpy-1.22.1-cp310-cp310-manylinux_2_17_x86_64.manylinux2014_x86_64.whl\n    7e957ca8112c689b728037cea9c9567c27cf912741fabda9efc2c7d33d29dfa1  numpy-1.22.1-cp310-cp310-win_amd64.whl\n    800dfeaffb2219d49377da1371d710d7952c9533b57f3d51b15e61c4269a1b5b  numpy-1.22.1-cp38-cp38-macosx_10_9_universal2.whl\n    65f5e257987601fdfc63f1d02fca4d1c44a2b85b802f03bd6abc2b0b14648dd2  numpy-1.22.1-cp38-cp38-macosx_10_9_x86_64.whl\n    632e062569b0fe05654b15ef0e91a53c0a95d08ffe698b66f6ba0f927ad267c2  numpy-1.22.1-cp38-cp38-macosx_11_0_arm64.whl\n    0d245a2bf79188d3f361137608c3cd12ed79076badd743dc660750a9f3074f7c  numpy-1.22.1-cp38-cp38-manylinux_2_17_aarch64.manylinux2014_aarch64.whl\n    26b4018a19d2ad9606ce9089f3d52206a41b23de5dfe8dc947d2ec49ce45d015  numpy-1.22.1-cp38-cp38-manylinux_2_17_x86_64.manylinux2014_x86_64.whl\n    f8ad59e6e341f38266f1549c7c2ec70ea0e3d1effb62a44e5c3dba41c55f0187  numpy-1.22.1-cp38-cp38-win32.whl\n    60f19c61b589d44fbbab8ff126640ae712e163299c2dd422bfe4edc7ec51aa9b  numpy-1.22.1-cp38-cp38-win_amd64.whl\n    2db01d9838a497ba2aa9a87515aeaf458f42351d72d4e7f3b8ddbd1eba9479f2  numpy-1.22.1-cp39-cp39-macosx_10_9_universal2.whl\n    bcd19dab43b852b03868796f533b5f5561e6c0e3048415e675bec8d2e9d286c1  numpy-1.22.1-cp39-cp39-macosx_10_9_x86_64.whl\n    78bfbdf809fc236490e7e65715bbd98377b122f329457fffde206299e163e7f3  numpy-1.22.1-cp39-cp39-macosx_11_0_arm64.whl\n    c51124df17f012c3b757380782ae46eee85213a3215e51477e559739f57d9bf6  numpy-1.22.1-cp39-cp39-manylinux_2_17_aarch64.manylinux2014_aarch64.whl\n    88d54b7b516f0ca38a69590557814de2dd638d7d4ed04864826acaac5ebb8f01  numpy-1.22.1-cp39-cp39-manylinux_2_17_x86_64.manylinux2014_x86_64.whl\n    b5ec9a5eaf391761c61fd873363ef3560a3614e9b4ead17347e4deda4358bca4  numpy-1.22.1-cp39-cp39-win32.whl\n    4ac4d7c9f8ea2a79d721ebfcce81705fc3cd61a10b731354f1049eb8c99521e8  numpy-1.22.1-cp39-cp39-win_amd64.whl\n    e60ef82c358ded965fdd3132b5738eade055f48067ac8a5a8ac75acc00cad31f  numpy-1.22.1-pp38-pypy38_pp73-manylinux_2_17_x86_64.manylinux2014_x86_64.whl\n    dd1968402ae20dfd59b34acd799b494be340c774f6295e9bf1c2b9842a5e416d  numpy-1.22.1.tar.gz\n    e348ccf5bc5235fc405ab19d53bec215bb373300e5523c7b476cc0da8a5e9973  numpy-1.22.1.zip\n\n\n.. currentmodule:: numpy\n\n==========================\n", "1.21.6": "==========================\n\nNumPy 1.21.6 is a very small release that achieves two things:\n\n- Backs out the mistaken backport of C++ code into 1.21.5.\n- Provides a 32 bit Windows wheel for Python 3.10.\n\nThe provision of the 32 bit wheel is intended to make life easier\nfor oldest-supported-numpy.\n\nChecksums\n=========\n\nMD5\n---\n::\n\n    5a3e5d7298056bcfbc3246597af474d4  numpy-1.21.6-cp310-cp310-macosx_10_9_universal2.whl\n    d981d2859842e7b62dc93e24808c7bac  numpy-1.21.6-cp310-cp310-macosx_10_9_x86_64.whl\n    171313893c26529404d09fadb3537ed3  numpy-1.21.6-cp310-cp310-macosx_11_0_arm64.whl\n    5a7a6dfdd43069f9b29d3fe6b7f3a2ce  numpy-1.21.6-cp310-cp310-manylinux_2_17_aarch64.manylinux2014_aarch64.whl\n    a9e25375a72725c5d74442eda53af405  numpy-1.21.6-cp310-cp310-manylinux_2_17_x86_64.manylinux2014_x86_64.whl\n    6f9a782477380b2cdb7606f6f7634c00  numpy-1.21.6-cp310-cp310-win32.whl\n    32a73a348864700a3fa510d2fc4350b7  numpy-1.21.6-cp310-cp310-win_amd64.whl\n    0db8941ebeb0a02cd839d9cd3c5c20bb  numpy-1.21.6-cp37-cp37m-macosx_10_9_x86_64.whl\n    67882155be9592850861f4ad8ba36623  numpy-1.21.6-cp37-cp37m-manylinux_2_12_i686.manylinux2010_i686.whl\n    c70e30e1ff9ab49f898c19e7a6492ae6  numpy-1.21.6-cp37-cp37m-manylinux_2_12_x86_64.manylinux2010_x86_64.whl\n    e32dbd291032c7554a742f1bb9b2f7a3  numpy-1.21.6-cp37-cp37m-manylinux_2_17_aarch64.manylinux2014_aarch64.whl\n    689bf804c2cd16cb241fd943e3833ffd  numpy-1.21.6-cp37-cp37m-win32.whl\n    0062a7b0231a07cb5b9f3d7c495e6fe4  numpy-1.21.6-cp37-cp37m-win_amd64.whl\n    0d08809980ab497659e7aa0df9ce120e  numpy-1.21.6-cp38-cp38-macosx_10_9_universal2.whl\n    3c67d14ea2009069844b27bfbf74304d  numpy-1.21.6-cp38-cp38-macosx_10_9_x86_64.whl\n    5f0e773745cb817313232ac1bf4c7eee  numpy-1.21.6-cp38-cp38-macosx_11_0_arm64.whl\n    fa8011e065f1964d3eb870bb3926fc99  numpy-1.21.6-cp38-cp38-manylinux_2_12_i686.manylinux2010_i686.whl\n    486cf9d4daab59aad253aa5b84a5aa83  numpy-1.21.6-cp38-cp38-manylinux_2_12_x86_64.manylinux2010_x86_64.whl\n    88509abab303c076dfb26f00e455180d  numpy-1.21.6-cp38-cp38-manylinux_2_17_aarch64.manylinux2014_aarch64.whl\n    f7234e2ef837f5f6ddbde8db246fd05b  numpy-1.21.6-cp38-cp38-win32.whl\n    e1063e01fb44ea7a49adea0c33548217  numpy-1.21.6-cp38-cp38-win_amd64.whl\n    61c4caad729e3e0e688accbc1424ed45  numpy-1.21.6-cp39-cp39-macosx_10_9_universal2.whl\n    67488d8ccaeff798f2e314aae7c4c3d6  numpy-1.21.6-cp39-cp39-macosx_10_9_x86_64.whl\n    128c3713b5d1de45a0f522562bac5263  numpy-1.21.6-cp39-cp39-macosx_11_0_arm64.whl\n    50e79cd0610b4ed726b3bf08c3716dab  numpy-1.21.6-cp39-cp39-manylinux_2_12_i686.manylinux2010_i686.whl\n    bd0c9e3c0e488faac61daf3227fb95af  numpy-1.21.6-cp39-cp39-manylinux_2_12_x86_64.manylinux2010_x86_64.whl\n    aa5e9baf1dec16b15e481c23f8a23214  numpy-1.21.6-cp39-cp39-manylinux_2_17_aarch64.manylinux2014_aarch64.whl\n    a2405b0e5d3f775ad30177296a997092  numpy-1.21.6-cp39-cp39-win32.whl\n    f0d20eda8c78f957ea70c5527954303e  numpy-1.21.6-cp39-cp39-win_amd64.whl\n    9682abbcc38cccb7f56e48aacca7de23  numpy-1.21.6-pp37-pypy37_pp73-manylinux_2_12_x86_64.manylinux2010_x86_64.whl\n    6aa3c2e8ea2886bf593bd8e0a1425c64  numpy-1.21.6.tar.gz\n    04aea95dcb1d256d13a45df42173aa1e  numpy-1.21.6.zip\n\nSHA256\n------\n::\n\n    8737609c3bbdd48e380d463134a35ffad3b22dc56295eff6f79fd85bd0eeeb25  numpy-1.21.6-cp310-cp310-macosx_10_9_universal2.whl\n    fdffbfb6832cd0b300995a2b08b8f6fa9f6e856d562800fea9182316d99c4e8e  numpy-1.21.6-cp310-cp310-macosx_10_9_x86_64.whl\n    3820724272f9913b597ccd13a467cc492a0da6b05df26ea09e78b171a0bb9da6  numpy-1.21.6-cp310-cp310-macosx_11_0_arm64.whl\n    f17e562de9edf691a42ddb1eb4a5541c20dd3f9e65b09ded2beb0799c0cf29bb  numpy-1.21.6-cp310-cp310-manylinux_2_17_aarch64.manylinux2014_aarch64.whl\n    5f30427731561ce75d7048ac254dbe47a2ba576229250fb60f0fb74db96501a1  numpy-1.21.6-cp310-cp310-manylinux_2_17_x86_64.manylinux2014_x86_64.whl\n    d4bf4d43077db55589ffc9009c0ba0a94fa4908b9586d6ccce2e0b164c86303c  numpy-1.21.6-cp310-cp310-win32.whl\n    d136337ae3cc69aa5e447e78d8e1514be8c3ec9b54264e680cf0b4bd9011574f  numpy-1.21.6-cp310-cp310-win_amd64.whl\n    6aaf96c7f8cebc220cdfc03f1d5a31952f027dda050e5a703a0d1c396075e3e7  numpy-1.21.6-cp37-cp37m-macosx_10_9_x86_64.whl\n    67c261d6c0a9981820c3a149d255a76918278a6b03b6a036800359aba1256d46  numpy-1.21.6-cp37-cp37m-manylinux_2_12_i686.manylinux2010_i686.whl\n    a6be4cb0ef3b8c9250c19cc122267263093eee7edd4e3fa75395dfda8c17a8e2  numpy-1.21.6-cp37-cp37m-manylinux_2_12_x86_64.manylinux2010_x86_64.whl\n    7c4068a8c44014b2d55f3c3f574c376b2494ca9cc73d2f1bd692382b6dffe3db  numpy-1.21.6-cp37-cp37m-manylinux_2_17_aarch64.manylinux2014_aarch64.whl\n    7c7e5fa88d9ff656e067876e4736379cc962d185d5cd808014a8a928d529ef4e  numpy-1.21.6-cp37-cp37m-win32.whl\n    bcb238c9c96c00d3085b264e5c1a1207672577b93fa666c3b14a45240b14123a  numpy-1.21.6-cp37-cp37m-win_amd64.whl\n    82691fda7c3f77c90e62da69ae60b5ac08e87e775b09813559f8901a88266552  numpy-1.21.6-cp38-cp38-macosx_10_9_universal2.whl\n    643843bcc1c50526b3a71cd2ee561cf0d8773f062c8cbaf9ffac9fdf573f83ab  numpy-1.21.6-cp38-cp38-macosx_10_9_x86_64.whl\n    357768c2e4451ac241465157a3e929b265dfac85d9214074985b1786244f2ef3  numpy-1.21.6-cp38-cp38-macosx_11_0_arm64.whl\n    9f411b2c3f3d76bba0865b35a425157c5dcf54937f82bbeb3d3c180789dd66a6  numpy-1.21.6-cp38-cp38-manylinux_2_12_i686.manylinux2010_i686.whl\n    4aa48afdce4660b0076a00d80afa54e8a97cd49f457d68a4342d188a09451c1a  numpy-1.21.6-cp38-cp38-manylinux_2_12_x86_64.manylinux2010_x86_64.whl\n    d6a96eef20f639e6a97d23e57dd0c1b1069a7b4fd7027482a4c5c451cd7732f4  numpy-1.21.6-cp38-cp38-manylinux_2_17_aarch64.manylinux2014_aarch64.whl\n    5c3c8def4230e1b959671eb959083661b4a0d2e9af93ee339c7dada6759a9470  numpy-1.21.6-cp38-cp38-win32.whl\n    bf2ec4b75d0e9356edea834d1de42b31fe11f726a81dfb2c2112bc1eaa508fcf  numpy-1.21.6-cp38-cp38-win_amd64.whl\n    4391bd07606be175aafd267ef9bea87cf1b8210c787666ce82073b05f202add1  numpy-1.21.6-cp39-cp39-macosx_10_9_universal2.whl\n    67f21981ba2f9d7ba9ade60c9e8cbaa8cf8e9ae51673934480e45cf55e953673  numpy-1.21.6-cp39-cp39-macosx_10_9_x86_64.whl\n    ee5ec40fdd06d62fe5d4084bef4fd50fd4bb6bfd2bf519365f569dc470163ab0  numpy-1.21.6-cp39-cp39-macosx_11_0_arm64.whl\n    1dbe1c91269f880e364526649a52eff93ac30035507ae980d2fed33aaee633ac  numpy-1.21.6-cp39-cp39-manylinux_2_12_i686.manylinux2010_i686.whl\n    d9caa9d5e682102453d96a0ee10c7241b72859b01a941a397fd965f23b3e016b  numpy-1.21.6-cp39-cp39-manylinux_2_12_x86_64.manylinux2010_x86_64.whl\n    58459d3bad03343ac4b1b42ed14d571b8743dc80ccbf27444f266729df1d6f5b  numpy-1.21.6-cp39-cp39-manylinux_2_17_aarch64.manylinux2014_aarch64.whl\n    7f5ae4f304257569ef3b948810816bc87c9146e8c446053539947eedeaa32786  numpy-1.21.6-cp39-cp39-win32.whl\n    e31f0bb5928b793169b87e3d1e070f2342b22d5245c755e2b81caa29756246c3  numpy-1.21.6-cp39-cp39-win_amd64.whl\n    dd1c8f6bd65d07d3810b90d02eba7997e32abbdf1277a481d698969e921a3be0  numpy-1.21.6-pp37-pypy37_pp73-manylinux_2_12_x86_64.manylinux2010_x86_64.whl\n    d4efc6491a1cdc00f9eca9bf2c1aa13671776f6941c7321ddf75b45c862f0c2c  numpy-1.21.6.tar.gz\n    ecb55251139706669fdec2ff073c98ef8e9a84473e51e716211b41aa0f18e656  numpy-1.21.6.zip\n\n\n-----BEGIN PGP SIGNED MESSAGE-----\nHash: SHA256\n\n.. currentmodule:: numpy\n\n==========================\n", "1.17.4": "==========================\n\nThis release contains fixes for bugs reported against NumPy 1.17.3 along with\nsome build improvements. The Python versions supported in this release\nare 3.5-3.8.\n\nDownstream developers should use Cython >= 0.29.13 for Python 3.8 support and\nOpenBLAS >= 3.7 to avoid errors on the Skylake architecture.\n\n\nHighlights\n==========\n\n- - Fixed `random.random_integers` biased generation of 8 and 16 bit integers.\n- - Fixed `np.einsum` regression on Power9 and z/Linux.\n- - Fixed histogram problem with signed integer arrays.\n\n\nContributors\n============\n\nA total of 5 people contributed to this release.  People with a \"+\" by their\nnames contributed a patch for the first time.\n\n* Charles Harris\n* Chris Burr +\n* Matti Picus\n* Qiming Sun +\n* Warren Weckesser\n\n\nPull requests merged\n====================\n\nA total of 8 pull requests were merged for this release.\n\n* `14758 <https://github.com/numpy/numpy/pull/14758>`__: BLD: declare support for python 3.8\n* `14781 <https://github.com/numpy/numpy/pull/14781>`__: BUG: random: biased samples from integers() with 8 or 16 bit...\n* `14851 <https://github.com/numpy/numpy/pull/14851>`__: BUG: Fix _ctypes class circular reference. (#13808)\n* `14852 <https://github.com/numpy/numpy/pull/14852>`__: BLD: add 'apt update' to shippable\n* `14855 <https://github.com/numpy/numpy/pull/14855>`__: BUG: Fix `np.einsum` errors on Power9 Linux and z/Linux\n* `14857 <https://github.com/numpy/numpy/pull/14857>`__: BUG: lib: Fix histogram problem with signed integer arrays.\n* `14858 <https://github.com/numpy/numpy/pull/14858>`__: BLD: Prevent -flto from optimising long double representation...\n* `14866 <https://github.com/numpy/numpy/pull/14866>`__: MAINT: move buffer.h -> npy_buffer.h to avoid conflicts\n\n\nChecksums\n=========\n\nMD5\n- ---\n\n    1d5b9a989a22e2c5d0774d9a8e19f3db  numpy-1.17.4-cp35-cp35m-macosx_10_6_intel.whl\n    3b3fc8a8db5a026349b3ead44e755bc5  numpy-1.17.4-cp35-cp35m-manylinux1_i686.whl\n    bfcafd2994423e9ed8337eb4a10cc885  numpy-1.17.4-cp35-cp35m-manylinux1_x86_64.whl\n    8196de4edb9f37578acab2749e2af61c  numpy-1.17.4-cp35-cp35m-win32.whl\n    71292c5b45feec7cae81a1fc6272b0e0  numpy-1.17.4-cp35-cp35m-win_amd64.whl\n    39cfbfdf236a20f9901b918b39e20e54  numpy-1.17.4-cp36-cp36m-macosx_10_9_x86_64.whl\n    8cff96c6bc944b44b7232d72244e0838  numpy-1.17.4-cp36-cp36m-manylinux1_i686.whl\n    d62a4e3880432bb8deec3a51bcc8a30e  numpy-1.17.4-cp36-cp36m-manylinux1_x86_64.whl\n    aaa948d1ef36659450791229a966ed19  numpy-1.17.4-cp36-cp36m-win32.whl\n    e4482c52d63ab698d2e81ad71903b64b  numpy-1.17.4-cp36-cp36m-win_amd64.whl\n    4fadb49558c6089d8f8f32d775de91ae  numpy-1.17.4-cp37-cp37m-macosx_10_9_x86_64.whl\n    2e3a09d2aefd90856600c821db49cf99  numpy-1.17.4-cp37-cp37m-manylinux1_i686.whl\n    2f0527f8eedcb2b3d83912dd254356f9  numpy-1.17.4-cp37-cp37m-manylinux1_x86_64.whl\n    aded41f748a1dc3f71924200c3fe1bc0  numpy-1.17.4-cp37-cp37m-win32.whl\n    34a187a48ceb4378ac28c6951d7f8dd6  numpy-1.17.4-cp37-cp37m-win_amd64.whl\n    f5da7b0b94eacde2898654cfc25e8e78  numpy-1.17.4-cp38-cp38-macosx_10_9_x86_64.whl\n    08f4a5d6ea64c3f1f22ff9e4da4b55dd  numpy-1.17.4-cp38-cp38-manylinux1_i686.whl\n    bafe3eb23ae8cb6f062e55c7aab52a98  numpy-1.17.4-cp38-cp38-manylinux1_x86_64.whl\n    0f1add30eb00bf40e5456e8ab10b5342  numpy-1.17.4-cp38-cp38-win32.whl\n    11649cda484b4d0d4426c3dab2c8ed5f  numpy-1.17.4-cp38-cp38-win_amd64.whl\n    9147c3ee75e58d657b5b8b5a4f3564e0  numpy-1.17.4.tar.gz\n    d7d3563cca0b99ba68a3f064a9e46ebe  numpy-1.17.4.zip\n\nSHA256\n- ------\n\n    ede47b98de79565fcd7f2decb475e2dcc85ee4097743e551fe26cfc7eb3ff143  numpy-1.17.4-cp35-cp35m-macosx_10_6_intel.whl\n    43bb4b70585f1c2d153e45323a886839f98af8bfa810f7014b20be714c37c447  numpy-1.17.4-cp35-cp35m-manylinux1_i686.whl\n    c7354e8f0eca5c110b7e978034cd86ed98a7a5ffcf69ca97535445a595e07b8e  numpy-1.17.4-cp35-cp35m-manylinux1_x86_64.whl\n    64874913367f18eb3013b16123c9fed113962e75d809fca5b78ebfbb73ed93ba  numpy-1.17.4-cp35-cp35m-win32.whl\n    6ca4000c4a6f95a78c33c7dadbb9495c10880be9c89316aa536eac359ab820ae  numpy-1.17.4-cp35-cp35m-win_amd64.whl\n    75fd817b7061f6378e4659dd792c84c0b60533e867f83e0d1e52d5d8e53df88c  numpy-1.17.4-cp36-cp36m-macosx_10_9_x86_64.whl\n    7d81d784bdbed30137aca242ab307f3e65c8d93f4c7b7d8f322110b2e90177f9  numpy-1.17.4-cp36-cp36m-manylinux1_i686.whl\n    fe39f5fd4103ec4ca3cb8600b19216cd1ff316b4990f4c0b6057ad982c0a34d5  numpy-1.17.4-cp36-cp36m-manylinux1_x86_64.whl\n    e467c57121fe1b78a8f68dd9255fbb3bb3f4f7547c6b9e109f31d14569f490c3  numpy-1.17.4-cp36-cp36m-win32.whl\n    8d0af8d3664f142414fd5b15cabfd3b6cc3ef242a3c7a7493257025be5a6955f  numpy-1.17.4-cp36-cp36m-win_amd64.whl\n    9679831005fb16c6df3dd35d17aa31dc0d4d7573d84f0b44cc481490a65c7725  numpy-1.17.4-cp37-cp37m-macosx_10_9_x86_64.whl\n    acbf5c52db4adb366c064d0b7c7899e3e778d89db585feadd23b06b587d64761  numpy-1.17.4-cp37-cp37m-manylinux1_i686.whl\n    3d52298d0be333583739f1aec9026f3b09fdfe3ddf7c7028cb16d9d2af1cca7e  numpy-1.17.4-cp37-cp37m-manylinux1_x86_64.whl\n    475963c5b9e116c38ad7347e154e5651d05a2286d86455671f5b1eebba5feb76  numpy-1.17.4-cp37-cp37m-win32.whl\n    0c0763787133dfeec19904c22c7e358b231c87ba3206b211652f8cbe1241deb6  numpy-1.17.4-cp37-cp37m-win_amd64.whl\n    683828e50c339fc9e68720396f2de14253992c495fdddef77a1e17de55f1decc  numpy-1.17.4-cp38-cp38-macosx_10_9_x86_64.whl\n    e2e9d8c87120ba2c591f60e32736b82b67f72c37ba88a4c23c81b5b8fa49c018  numpy-1.17.4-cp38-cp38-manylinux1_i686.whl\n    a8f67ebfae9f575d85fa859b54d3bdecaeece74e3274b0b5c5f804d7ca789fe1  numpy-1.17.4-cp38-cp38-manylinux1_x86_64.whl\n    0a7a1dd123aecc9f0076934288ceed7fd9a81ba3919f11a855a7887cbe82a02f  numpy-1.17.4-cp38-cp38-win32.whl\n    ada4805ed51f5bcaa3a06d3dd94939351869c095e30a2b54264f5a5004b52170  numpy-1.17.4-cp38-cp38-win_amd64.whl\n    fb0415475e673cb9a6dd816df999e0ab9f86fa3af2b1770944e7288d2bea4ac9  numpy-1.17.4.tar.gz\n    f58913e9227400f1395c7b800503ebfdb0772f1c33ff8cb4d6451c06cabdf316  numpy-1.17.4.zip\n-----BEGIN PGP SIGNATURE-----\n\niQEzBAEBCAAdFiEEU6DlKD8F4p1xKRSeZ58ig3fFJHsFAl3Iu7cACgkQZ58ig3fF\nJHshpQf8DEr6WHUt8BbAYNtgo62A448H2exH2Wd1bupml7SXenfjOdXjTT+T1qkd\n+D58IqZlV7J0dEwxkh23kDtImLwB1SBf/1JYpJOIpBLsn+ibIUdaqpuFFKIcd+p9\ncDIgaklYpYrPryGuT23YftjD37eCGMQ9yfNeUY5kSIicFhZWxrCpRkXSXKIa9RjN\nI6iob25YLQtN1sDURz3TTFsjZee+dilS2aFVtnKom/ujW+8SBo33NKJHQl4TzhaU\nnbYFsZE//AMTLERYbZvKbRyKXSA0VYrETnIIM40nMB5ditU0exZa2y0a7Bw4ISgn\n4qkkpdetdahSAwrlbL/GX3Qv2H6CIA==\n=L05w\n-----END PGP SIGNATURE-----\n\n\n.. currentmodule:: numpy\n\n==========================\n", "1.24.3": "==========================\nNumPy 1.24.3 is a maintenance release that fixes bugs and regressions discovered after the\n1.24.2 release. The Python versions supported by this release are 3.8-3.11.\n\nContributors\n============\n\nA total of 12 people contributed to this release.  People with a \"+\" by their\nnames contributed a patch for the first time.\n\n* Aleksei Nikiforov +\n* Alexander Heger\n* Bas van Beek\n* Bob Eldering\n* Brock Mendel\n* Charles Harris\n* Kyle Sunden\n* Peter Hawkins\n* Rohit Goswami\n* Sebastian Berg\n* Warren Weckesser\n* dependabot[bot]\n\nPull requests merged\n====================\n\nA total of 17 pull requests were merged for this release.\n\n* `23206 <https://github.com/numpy/numpy/pull/23206>`__: BUG: fix for f2py string scalars (#23194)\n* `23207 <https://github.com/numpy/numpy/pull/23207>`__: BUG: datetime64/timedelta64 comparisons return NotImplemented\n* `23208 <https://github.com/numpy/numpy/pull/23208>`__: MAINT: Pin matplotlib to version 3.6.3 for refguide checks\n* `23221 <https://github.com/numpy/numpy/pull/23221>`__: DOC: Fix matplotlib error in documentation\n* `23226 <https://github.com/numpy/numpy/pull/23226>`__: CI: Ensure submodules are initialized in gitpod.\n* `23341 <https://github.com/numpy/numpy/pull/23341>`__: TYP: Replace duplicate reduce in ufunc type signature with reduceat.\n* `23342 <https://github.com/numpy/numpy/pull/23342>`__: TYP: Remove duplicate CLIP/WRAP/RAISE in ``__init__.pyi``.\n* `23343 <https://github.com/numpy/numpy/pull/23343>`__: TYP: Mark ``d`` argument to fftfreq and rfftfreq as optional...\n* `23344 <https://github.com/numpy/numpy/pull/23344>`__: TYP: Add type annotations for comparison operators to MaskedArray.\n* `23345 <https://github.com/numpy/numpy/pull/23345>`__: TYP: Remove some stray type-check-only imports of ``msort``\n* `23370 <https://github.com/numpy/numpy/pull/23370>`__: BUG: Ensure like is only stripped for ``like=`` dispatched functions\n* `23543 <https://github.com/numpy/numpy/pull/23543>`__: BUG: fix loading and storing big arrays on s390x\n* `23544 <https://github.com/numpy/numpy/pull/23544>`__: MAINT: Bump larsoner/circleci-artifacts-redirector-action\n* `23634 <https://github.com/numpy/numpy/pull/23634>`__: BUG: Ignore invalid and overflow warnings in masked setitem\n* `23635 <https://github.com/numpy/numpy/pull/23635>`__: BUG: Fix masked array raveling when ``order=\"A\"`` or ``order=\"K\"``\n* `23636 <https://github.com/numpy/numpy/pull/23636>`__: MAINT: Update conftest for newer hypothesis versions\n* `23637 <https://github.com/numpy/numpy/pull/23637>`__: BUG: Fix bug in parsing F77 style string arrays.\n\nChecksums\n=========\n\nMD5\n---\n::\n\n    93a3ce07e3773842c54d831f18e3eb8d  numpy-1.24.3-cp310-cp310-macosx_10_9_x86_64.whl\n    39691ff3d1612438dfcd3266c9765aab  numpy-1.24.3-cp310-cp310-macosx_11_0_arm64.whl\n    a99234799a239e7e9c6fa15c212996df  numpy-1.24.3-cp310-cp310-manylinux_2_17_aarch64.manylinux2014_aarch64.whl\n    3673aa638746851dd19d5199e1eb3a91  numpy-1.24.3-cp310-cp310-manylinux_2_17_x86_64.manylinux2014_x86_64.whl\n    3c72962360bcd0938a6bddee6cdca766  numpy-1.24.3-cp310-cp310-win32.whl\n    a3329efa646012fa4ee06ce5e08eadaf  numpy-1.24.3-cp310-cp310-win_amd64.whl\n    5323fb0323d1ec10ee3c35a2fa79cbcd  numpy-1.24.3-cp311-cp311-macosx_10_9_x86_64.whl\n    cfa001dcd07cdf6414ced433e88959d4  numpy-1.24.3-cp311-cp311-macosx_11_0_arm64.whl\n    d75bbfb06ed00d04232dce0e865eb42c  numpy-1.24.3-cp311-cp311-manylinux_2_17_aarch64.manylinux2014_aarch64.whl\n    fe18b810bcf284572467ce585dbc533b  numpy-1.24.3-cp311-cp311-manylinux_2_17_x86_64.manylinux2014_x86_64.whl\n    e97699a4ef96a81e0916bdf15440abe0  numpy-1.24.3-cp311-cp311-win32.whl\n    e6de5b7d77dc43ed47f516eb10bbe8b6  numpy-1.24.3-cp311-cp311-win_amd64.whl\n    dd04ebf441a8913f4900b56e7a33a75e  numpy-1.24.3-cp38-cp38-macosx_10_9_x86_64.whl\n    e47ac5521b0bfc3effb040072d8a7902  numpy-1.24.3-cp38-cp38-macosx_11_0_arm64.whl\n    7b7dae3309e7ca8a8859633a5d337431  numpy-1.24.3-cp38-cp38-manylinux_2_17_aarch64.manylinux2014_aarch64.whl\n    8cc87b88163ed84e70c48fd0f5f8f20e  numpy-1.24.3-cp38-cp38-manylinux_2_17_x86_64.manylinux2014_x86_64.whl\n    350934bae971d0ebe231a59b640069db  numpy-1.24.3-cp38-cp38-win32.whl\n    c4708ef009bb5d427ea94a4fc4a10e12  numpy-1.24.3-cp38-cp38-win_amd64.whl\n    44b08a293a4e12d62c27b8f15ba5664e  numpy-1.24.3-cp39-cp39-macosx_10_9_x86_64.whl\n    3ae7ac30f86c720e42b2324a0ae1adf5  numpy-1.24.3-cp39-cp39-macosx_11_0_arm64.whl\n    065464a8d918c670c7863d1e72e3e6dd  numpy-1.24.3-cp39-cp39-manylinux_2_17_aarch64.manylinux2014_aarch64.whl\n    1f163b9ea417c253e84480aa8d99dee6  numpy-1.24.3-cp39-cp39-manylinux_2_17_x86_64.manylinux2014_x86_64.whl\n    c86e648389e333e062bea11c749b9a32  numpy-1.24.3-cp39-cp39-win32.whl\n    bfe332e577c604d6d62a57381e6aa0a6  numpy-1.24.3-cp39-cp39-win_amd64.whl\n    374695eeef5aca32a5b7f2f518dd3ba1  numpy-1.24.3-pp38-pypy38_pp73-macosx_10_9_x86_64.whl\n    6abd9dba54405182e6e7bb32dbe377bb  numpy-1.24.3-pp38-pypy38_pp73-manylinux_2_17_x86_64.manylinux2014_x86_64.whl\n    0848bd41c08dd5ebbc5a7f0788678e0e  numpy-1.24.3-pp38-pypy38_pp73-win_amd64.whl\n    89e5e2e78407032290ae6acf6dcaea46  numpy-1.24.3.tar.gz\n\nSHA256\n------\n::\n\n    3c1104d3c036fb81ab923f507536daedc718d0ad5a8707c6061cdfd6d184e570  numpy-1.24.3-cp310-cp310-macosx_10_9_x86_64.whl\n    202de8f38fc4a45a3eea4b63e2f376e5f2dc64ef0fa692838e31a808520efaf7  numpy-1.24.3-cp310-cp310-macosx_11_0_arm64.whl\n    8535303847b89aa6b0f00aa1dc62867b5a32923e4d1681a35b5eef2d9591a463  numpy-1.24.3-cp310-cp310-manylinux_2_17_aarch64.manylinux2014_aarch64.whl\n    2d926b52ba1367f9acb76b0df6ed21f0b16a1ad87c6720a1121674e5cf63e2b6  numpy-1.24.3-cp310-cp310-manylinux_2_17_x86_64.manylinux2014_x86_64.whl\n    f21c442fdd2805e91799fbe044a7b999b8571bb0ab0f7850d0cb9641a687092b  numpy-1.24.3-cp310-cp310-win32.whl\n    ab5f23af8c16022663a652d3b25dcdc272ac3f83c3af4c02eb8b824e6b3ab9d7  numpy-1.24.3-cp310-cp310-win_amd64.whl\n    9a7721ec204d3a237225db3e194c25268faf92e19338a35f3a224469cb6039a3  numpy-1.24.3-cp311-cp311-macosx_10_9_x86_64.whl\n    d6cc757de514c00b24ae8cf5c876af2a7c3df189028d68c0cb4eaa9cd5afc2bf  numpy-1.24.3-cp311-cp311-macosx_11_0_arm64.whl\n    76e3f4e85fc5d4fd311f6e9b794d0c00e7002ec122be271f2019d63376f1d385  numpy-1.24.3-cp311-cp311-manylinux_2_17_aarch64.manylinux2014_aarch64.whl\n    a1d3c026f57ceaad42f8231305d4653d5f05dc6332a730ae5c0bea3513de0950  numpy-1.24.3-cp311-cp311-manylinux_2_17_x86_64.manylinux2014_x86_64.whl\n    c91c4afd8abc3908e00a44b2672718905b8611503f7ff87390cc0ac3423fb096  numpy-1.24.3-cp311-cp311-win32.whl\n    5342cf6aad47943286afa6f1609cad9b4266a05e7f2ec408e2cf7aea7ff69d80  numpy-1.24.3-cp311-cp311-win_amd64.whl\n    7776ea65423ca6a15255ba1872d82d207bd1e09f6d0894ee4a64678dd2204078  numpy-1.24.3-cp38-cp38-macosx_10_9_x86_64.whl\n    ae8d0be48d1b6ed82588934aaaa179875e7dc4f3d84da18d7eae6eb3f06c242c  numpy-1.24.3-cp38-cp38-macosx_11_0_arm64.whl\n    ecde0f8adef7dfdec993fd54b0f78183051b6580f606111a6d789cd14c61ea0c  numpy-1.24.3-cp38-cp38-manylinux_2_17_aarch64.manylinux2014_aarch64.whl\n    4749e053a29364d3452c034827102ee100986903263e89884922ef01a0a6fd2f  numpy-1.24.3-cp38-cp38-manylinux_2_17_x86_64.manylinux2014_x86_64.whl\n    d933fabd8f6a319e8530d0de4fcc2e6a61917e0b0c271fded460032db42a0fe4  numpy-1.24.3-cp38-cp38-win32.whl\n    56e48aec79ae238f6e4395886b5eaed058abb7231fb3361ddd7bfdf4eed54289  numpy-1.24.3-cp38-cp38-win_amd64.whl\n    4719d5aefb5189f50887773699eaf94e7d1e02bf36c1a9d353d9f46703758ca4  numpy-1.24.3-cp39-cp39-macosx_10_9_x86_64.whl\n    0ec87a7084caa559c36e0a2309e4ecb1baa03b687201d0a847c8b0ed476a7187  numpy-1.24.3-cp39-cp39-macosx_11_0_arm64.whl\n    ea8282b9bcfe2b5e7d491d0bf7f3e2da29700cec05b49e64d6246923329f2b02  numpy-1.24.3-cp39-cp39-manylinux_2_17_aarch64.manylinux2014_aarch64.whl\n    210461d87fb02a84ef243cac5e814aad2b7f4be953b32cb53327bb49fd77fbb4  numpy-1.24.3-cp39-cp39-manylinux_2_17_x86_64.manylinux2014_x86_64.whl\n    784c6da1a07818491b0ffd63c6bbe5a33deaa0e25a20e1b3ea20cf0e43f8046c  numpy-1.24.3-cp39-cp39-win32.whl\n    d5036197ecae68d7f491fcdb4df90082b0d4960ca6599ba2659957aafced7c17  numpy-1.24.3-cp39-cp39-win_amd64.whl\n    352ee00c7f8387b44d19f4cada524586f07379c0d49270f87233983bc5087ca0  numpy-1.24.3-pp38-pypy38_pp73-macosx_10_9_x86_64.whl\n    1a7d6acc2e7524c9955e5c903160aa4ea083736fde7e91276b0e5d98e6332812  numpy-1.24.3-pp38-pypy38_pp73-manylinux_2_17_x86_64.manylinux2014_x86_64.whl\n    35400e6a8d102fd07c71ed7dcadd9eb62ee9a6e84ec159bd48c28235bbb0f8e4  numpy-1.24.3-pp38-pypy38_pp73-win_amd64.whl\n    ab344f1bf21f140adab8e47fdbc7c35a477dc01408791f8ba00d018dd0bc5155  numpy-1.24.3.tar.gz\n\n\n-----BEGIN PGP SIGNED MESSAGE-----\nHash: SHA256\n\n.. currentmodule:: numpy\n\n==========================\n", "1.17.2": "==========================\n\nThis release contains fixes for bugs reported against NumPy 1.17.1 along with a\nsome documentation improvements. The most important fix is for lexsort when the\nkeys are of type (u)int8 or (u)int16. If you are currently using 1.17 you\nshould upgrade.\n\nThe Python versions supported in this release are 3.5-3.7, Python 2.7 has been\ndropped.  Python 3.8b4 should work with the released source packages, but there\nare no future guarantees.\n\nDownstream developers should use Cython >= 0.29.13 for Python 3.8 support and\nOpenBLAS >= 3.7 to avoid errors on the Skylake architecture. The NumPy wheels\non PyPI are built from the OpenBLAS development branch in order to avoid those\nerrors.\n\n\nContributors\n============\n\nA total of 7 people contributed to this release.  People with a \"+\" by their\nnames contributed a patch for the first time.\n\n* CakeWithSteak +\n* Charles Harris\n* Dan Allan\n* Hameer Abbasi\n* Lars Grueter\n* Matti Picus\n* Sebastian Berg\n\n\nPull requests merged\n====================\n\nA total of 8 pull requests were merged for this release.\n\n* `14418 <https://github.com/numpy/numpy/pull/14418>`__: BUG: Fix aradixsort indirect indexing.\n* `14420 <https://github.com/numpy/numpy/pull/14420>`__: DOC: Fix a minor typo in dispatch documentation.\n* `14421 <https://github.com/numpy/numpy/pull/14421>`__: BUG: test, fix regression in converting to ctypes\n* `14430 <https://github.com/numpy/numpy/pull/14430>`__: BUG: Do not show Override module in private error classes.\n* `14432 <https://github.com/numpy/numpy/pull/14432>`__: BUG: Fixed maximum relative error reporting in assert_allclose.\n* `14433 <https://github.com/numpy/numpy/pull/14433>`__: BUG: Fix uint-overflow if padding with linear_ramp and negative...\n* `14436 <https://github.com/numpy/numpy/pull/14436>`__: BUG: Update 1.17.x with 1.18.0-dev pocketfft.py.\n* `14446 <https://github.com/numpy/numpy/pull/14446>`__: REL: Prepare for NumPy 1.17.2 release.\n\nChecksums\n=========\n\nMD5\n- ---\n\n    900786591ffe811ff9ff8b3fcf9e3ff9  numpy-1.17.2-cp35-cp35m-macosx_10_6_intel.whl\n    307df8c629637865205276f0e48cbe53  numpy-1.17.2-cp35-cp35m-manylinux1_i686.whl\n    279b286a569bacba85dfe44d86ed9767  numpy-1.17.2-cp35-cp35m-manylinux1_x86_64.whl\n    0bc93e932b32408cceb5579f074e30a9  numpy-1.17.2-cp35-cp35m-win32.whl\n    b963be3cae47b66b2c8b433d34cb93d1  numpy-1.17.2-cp35-cp35m-win_amd64.whl\n    3eed381285a43bd23d7c568c6c165ec9  numpy-1.17.2-cp36-cp36m-macosx_10_6_intel.whl\n    0a6d7616b5ed35d65a58c6a61256afb0  numpy-1.17.2-cp36-cp36m-manylinux1_i686.whl\n    5b5a2f0bc6f01c1ae2c831fbfd8c8b06  numpy-1.17.2-cp36-cp36m-manylinux1_x86_64.whl\n    8f166ccebf19a8c9c6ac00c8d93ba566  numpy-1.17.2-cp36-cp36m-win32.whl\n    406fc90887f6af60f2edf229b2cfb2cf  numpy-1.17.2-cp36-cp36m-win_amd64.whl\n    a82da3fd77787c73cae9057f63e3b666  numpy-1.17.2-cp37-cp37m-macosx_10_6_intel.whl\n    1f9b449eca275014f133872cdddf166d  numpy-1.17.2-cp37-cp37m-manylinux1_i686.whl\n    1de9df1e07a1f2becc7925b0861d1b2d  numpy-1.17.2-cp37-cp37m-manylinux1_x86_64.whl\n    0ae4a060c7353723c340aaf0fc655220  numpy-1.17.2-cp37-cp37m-win32.whl\n    a7a026ef5c54dbc295e134d04367514e  numpy-1.17.2-cp37-cp37m-win_amd64.whl\n    68d582e09b951717b7ae1e9c0011d779  numpy-1.17.2.tar.gz\n    a0fffd7651e6ed4c60d94394ca6662cd  numpy-1.17.2.zip\n\nSHA256\n- ------\n\n    3d0b0989dd2d066db006158de7220802899a1e5c8cf622abe2d0bd158fd01c2c  numpy-1.17.2-cp35-cp35m-macosx_10_6_intel.whl\n    7bd355ad7496f4ce1d235e9814ec81ee3d28308d591c067ce92e49f745ba2c2f  numpy-1.17.2-cp35-cp35m-manylinux1_i686.whl\n    7d077f2976b8f3de08a0dcf5d72083f4af5411e8fddacd662aae27baa2601196  numpy-1.17.2-cp35-cp35m-manylinux1_x86_64.whl\n    05dbfe72684cc14b92568de1bc1f41e5f62b00f714afc9adee42f6311738091f  numpy-1.17.2-cp35-cp35m-win32.whl\n    f4a4f6aba148858a5a5d546a99280f71f5ee6ec8182a7d195af1a914195b21a2  numpy-1.17.2-cp35-cp35m-win_amd64.whl\n    ee8e9d7cad5fe6dde50ede0d2e978d81eafeaa6233fb0b8719f60214cf226578  numpy-1.17.2-cp36-cp36m-macosx_10_6_intel.whl\n    438a3f0e7b681642898fd7993d38e2bf140a2d1eafaf3e89bb626db7f50db355  numpy-1.17.2-cp36-cp36m-manylinux1_i686.whl\n    b458de8624c9f6034af492372eb2fee41a8e605f03f4732f43fc099e227858b2  numpy-1.17.2-cp36-cp36m-manylinux1_x86_64.whl\n    0d82cb7271a577529d07bbb05cb58675f2deb09772175fab96dc8de025d8ac05  numpy-1.17.2-cp36-cp36m-win32.whl\n    12322df2e21f033a60c80319c25011194cd2a21294cc66fee0908aeae2c27832  numpy-1.17.2-cp36-cp36m-win_amd64.whl\n    e70fc8ff03a961f13363c2c95ef8285e0cf6a720f8271836f852cc0fa64e97c8  numpy-1.17.2-cp37-cp37m-macosx_10_6_intel.whl\n    a4092682778dc48093e8bda8d26ee8360153e2047826f95a3f5eae09f0ae3abf  numpy-1.17.2-cp37-cp37m-manylinux1_i686.whl\n    10132aa1fef99adc85a905d82e8497a580f83739837d7cbd234649f2e9b9dc58  numpy-1.17.2-cp37-cp37m-manylinux1_x86_64.whl\n    16f19b3aa775dddc9814e02a46b8e6ae6a54ed8cf143962b4e53f0471dbd7b16  numpy-1.17.2-cp37-cp37m-win32.whl\n    5fd214f482ab53f2cea57414c5fb3e58895b17df6e6f5bca5be6a0bb6aea23bb  numpy-1.17.2-cp37-cp37m-win_amd64.whl\n    81a4f748dcfa80a7071ad8f3d9f8edb9f8bc1f0a9bdd19bfd44fd42c02bd286c  numpy-1.17.2.tar.gz\n    73615d3edc84dd7c4aeb212fa3748fb83217e00d201875a47327f55363cef2df  numpy-1.17.2.zip\n-----BEGIN PGP SIGNATURE-----\n\niQEzBAEBCAAdFiEEU6DlKD8F4p1xKRSeZ58ig3fFJHsFAl1y8L8ACgkQZ58ig3fF\nJHvbiggAjZShImtAtP00Hs8RAbjB+1u4r291DxIQciorQcBEhAvOtc2Z5dpxTYtj\nqDeRIMGxLzsBF6+E6ksbQVc5oe3VsSCQ5qUegrx0KvDTrQ7cRnxnMatYY6/p3tDD\nXKDF0+YO8BaMNL3p67n1SCNIRLvBgyku+uhHtTKpJlzLEsloPkfEjrt9deuQ/SQE\nzOJfz0VBlJLhcmbjMFTAY8u8YOBFAfTjJGjLbVphMnpuAsZeUN2W9k/urSkgGb3i\nhaTDkFeERKZ7d8a+EMkeIip9qhFb0RjeiTVDmKkHHz3yu9ZJv8hK2H0vKcdJ/WyP\n12RQXwQLsxyCC3DvFmEklJJki+Yzrg==\n=GEO2\n-----END PGP SIGNATURE-----\n\n\n.. currentmodule:: numpy\n\n==========================\n", "1.25.2": "==========================\nNumPy 1.25.2 is a maintenance release that fixes bugs and regressions\ndiscovered after the 1.25.1 release. This is the last planned release in the\n1.25.x series, the next release will be 1.26.0, which will use the meson build\nsystem and support Python 3.12. The Python versions supported by this release\nare 3.9-3.11.\n\nContributors\n============\n\nA total of 13 people contributed to this release.  People with a \"+\" by their\nnames contributed a patch for the first time.\n\n* Aaron Meurer\n* Andrew Nelson\n* Charles Harris\n* Kevin Sheppard\n* Matti Picus\n* Nathan Goldbaum\n* Peter Hawkins\n* Ralf Gommers\n* Randy Eckenrode +\n* Sam James +\n* Sebastian Berg\n* Tyler Reddy\n* dependabot[bot]\n\nPull requests merged\n====================\n\nA total of 19 pull requests were merged for this release.\n\n* `24148 <https://github.com/numpy/numpy/pull/24148>`__: MAINT: prepare 1.25.x for further development\n* `24174 <https://github.com/numpy/numpy/pull/24174>`__: ENH: Improve clang-cl compliance\n* `24179 <https://github.com/numpy/numpy/pull/24179>`__: MAINT: Upgrade various build dependencies.\n* `24182 <https://github.com/numpy/numpy/pull/24182>`__: BLD: use ``-ftrapping-math`` with Clang on macOS\n* `24183 <https://github.com/numpy/numpy/pull/24183>`__: BUG: properly handle negative indexes in ufunc_at fast path\n* `24184 <https://github.com/numpy/numpy/pull/24184>`__: BUG: PyObject_IsTrue and PyObject_Not error handling in setflags\n* `24185 <https://github.com/numpy/numpy/pull/24185>`__: BUG: histogram small range robust\n* `24186 <https://github.com/numpy/numpy/pull/24186>`__: MAINT: Update meson.build files from main branch\n* `24234 <https://github.com/numpy/numpy/pull/24234>`__: MAINT: exclude min, max and round from ``np.__all__``\n* `24241 <https://github.com/numpy/numpy/pull/24241>`__: MAINT: Dependabot updates\n* `24242 <https://github.com/numpy/numpy/pull/24242>`__: BUG: Fix the signature for np.array_api.take\n* `24243 <https://github.com/numpy/numpy/pull/24243>`__: BLD: update OpenBLAS to an intermeidate commit\n* `24244 <https://github.com/numpy/numpy/pull/24244>`__: BUG: Fix reference count leak in str(scalar).\n* `24245 <https://github.com/numpy/numpy/pull/24245>`__: BUG: fix invalid function pointer conversion error\n* `24255 <https://github.com/numpy/numpy/pull/24255>`__: BUG: Factor out slow ``getenv`` call used for memory policy warning\n* `24292 <https://github.com/numpy/numpy/pull/24292>`__: CI: correct URL in cirrus.star [skip cirrus]\n* `24293 <https://github.com/numpy/numpy/pull/24293>`__: BUG: Fix C types in scalartypes\n* `24294 <https://github.com/numpy/numpy/pull/24294>`__: BUG: do not modify the input to ufunc_at\n* `24295 <https://github.com/numpy/numpy/pull/24295>`__: BUG: Further fixes to indexing loop and added tests\n\n\nChecksums\n=========\n\nMD5\n---\n::\n\n    33518ccb4da8ee11f1dee4b9fef1e468  numpy-1.25.2-cp310-cp310-macosx_10_9_x86_64.whl\n    b5cb0c3b33ef6d93ec2888f25b065636  numpy-1.25.2-cp310-cp310-macosx_11_0_arm64.whl\n    ae027dd38bd73f09c07220b2f516f148  numpy-1.25.2-cp310-cp310-manylinux_2_17_aarch64.manylinux2014_aarch64.whl\n    88cf69dc3c0d293492c4c7e75dccf3d8  numpy-1.25.2-cp310-cp310-manylinux_2_17_x86_64.manylinux2014_x86_64.whl\n    3e4e3ad02375ba71ae2cd05ccd97aba4  numpy-1.25.2-cp310-cp310-musllinux_1_1_x86_64.whl\n    f52bb644682deb26c35ddec77198b65c  numpy-1.25.2-cp310-cp310-win32.whl\n    4944cf36652be7560a6bcd0d5d56e8ea  numpy-1.25.2-cp310-cp310-win_amd64.whl\n    5a56e639defebb7b871c8c5613960ca3  numpy-1.25.2-cp311-cp311-macosx_10_9_x86_64.whl\n    3988b96944e7218e629255214f2598bd  numpy-1.25.2-cp311-cp311-macosx_11_0_arm64.whl\n    302d65015ddd908a862fb3761a2a0363  numpy-1.25.2-cp311-cp311-manylinux_2_17_aarch64.manylinux2014_aarch64.whl\n    e54a2e23272d1c5e5b278bd7e304c948  numpy-1.25.2-cp311-cp311-manylinux_2_17_x86_64.manylinux2014_x86_64.whl\n    961d390e8ccaf11b1b0d6200d2c8b1c0  numpy-1.25.2-cp311-cp311-musllinux_1_1_x86_64.whl\n    e113865b90f97079d344100c41226fbe  numpy-1.25.2-cp311-cp311-win32.whl\n    834a147aa1adaec97655018b882232bd  numpy-1.25.2-cp311-cp311-win_amd64.whl\n    fb55f93a8033bde854c8a2b994045686  numpy-1.25.2-cp39-cp39-macosx_10_9_x86_64.whl\n    d96e754217d29bf045e082b695667e62  numpy-1.25.2-cp39-cp39-macosx_11_0_arm64.whl\n    beab540edebecbb257e482dd9e498b44  numpy-1.25.2-cp39-cp39-manylinux_2_17_aarch64.manylinux2014_aarch64.whl\n    e0d608c9e09cd8feba48567586cfefc0  numpy-1.25.2-cp39-cp39-manylinux_2_17_x86_64.manylinux2014_x86_64.whl\n    fe1fc32c8bb005ca04b8f10ebdcff6dd  numpy-1.25.2-cp39-cp39-musllinux_1_1_x86_64.whl\n    41df58a9935c8ed869c92307c95f02eb  numpy-1.25.2-cp39-cp39-win32.whl\n    a4371272c64493beb8b04ac46c4c1521  numpy-1.25.2-cp39-cp39-win_amd64.whl\n    bbe051cbd5f8661dd054277f0b0f0c3d  numpy-1.25.2-pp39-pypy39_pp73-macosx_10_9_x86_64.whl\n    3f68e6b4af6922989dc0133e37db34ee  numpy-1.25.2-pp39-pypy39_pp73-manylinux_2_17_x86_64.manylinux2014_x86_64.whl\n    fc89421b79e8800240999d3a1d06a4d2  numpy-1.25.2-pp39-pypy39_pp73-win_amd64.whl\n    cee1996a80032d47bdf1d9d17249c34e  numpy-1.25.2.tar.gz\n\nSHA256\n------\n::\n\n    db3ccc4e37a6873045580d413fe79b68e47a681af8db2e046f1dacfa11f86eb3  numpy-1.25.2-cp310-cp310-macosx_10_9_x86_64.whl\n    90319e4f002795ccfc9050110bbbaa16c944b1c37c0baeea43c5fb881693ae1f  numpy-1.25.2-cp310-cp310-macosx_11_0_arm64.whl\n    dfe4a913e29b418d096e696ddd422d8a5d13ffba4ea91f9f60440a3b759b0187  numpy-1.25.2-cp310-cp310-manylinux_2_17_aarch64.manylinux2014_aarch64.whl\n    f08f2e037bba04e707eebf4bc934f1972a315c883a9e0ebfa8a7756eabf9e357  numpy-1.25.2-cp310-cp310-manylinux_2_17_x86_64.manylinux2014_x86_64.whl\n    bec1e7213c7cb00d67093247f8c4db156fd03075f49876957dca4711306d39c9  numpy-1.25.2-cp310-cp310-musllinux_1_1_x86_64.whl\n    7dc869c0c75988e1c693d0e2d5b26034644399dd929bc049db55395b1379e044  numpy-1.25.2-cp310-cp310-win32.whl\n    834b386f2b8210dca38c71a6e0f4fd6922f7d3fcff935dbe3a570945acb1b545  numpy-1.25.2-cp310-cp310-win_amd64.whl\n    c5462d19336db4560041517dbb7759c21d181a67cb01b36ca109b2ae37d32418  numpy-1.25.2-cp311-cp311-macosx_10_9_x86_64.whl\n    c5652ea24d33585ea39eb6a6a15dac87a1206a692719ff45d53c5282e66d4a8f  numpy-1.25.2-cp311-cp311-macosx_11_0_arm64.whl\n    0d60fbae8e0019865fc4784745814cff1c421df5afee233db6d88ab4f14655a2  numpy-1.25.2-cp311-cp311-manylinux_2_17_aarch64.manylinux2014_aarch64.whl\n    60e7f0f7f6d0eee8364b9a6304c2845b9c491ac706048c7e8cf47b83123b8dbf  numpy-1.25.2-cp311-cp311-manylinux_2_17_x86_64.manylinux2014_x86_64.whl\n    bb33d5a1cf360304754913a350edda36d5b8c5331a8237268c48f91253c3a364  numpy-1.25.2-cp311-cp311-musllinux_1_1_x86_64.whl\n    5883c06bb92f2e6c8181df7b39971a5fb436288db58b5a1c3967702d4278691d  numpy-1.25.2-cp311-cp311-win32.whl\n    5c97325a0ba6f9d041feb9390924614b60b99209a71a69c876f71052521d42a4  numpy-1.25.2-cp311-cp311-win_amd64.whl\n    b79e513d7aac42ae918db3ad1341a015488530d0bb2a6abcbdd10a3a829ccfd3  numpy-1.25.2-cp39-cp39-macosx_10_9_x86_64.whl\n    eb942bfb6f84df5ce05dbf4b46673ffed0d3da59f13635ea9b926af3deb76926  numpy-1.25.2-cp39-cp39-macosx_11_0_arm64.whl\n    3e0746410e73384e70d286f93abf2520035250aad8c5714240b0492a7302fdca  numpy-1.25.2-cp39-cp39-manylinux_2_17_aarch64.manylinux2014_aarch64.whl\n    d7806500e4f5bdd04095e849265e55de20d8cc4b661b038957354327f6d9b295  numpy-1.25.2-cp39-cp39-manylinux_2_17_x86_64.manylinux2014_x86_64.whl\n    8b77775f4b7df768967a7c8b3567e309f617dd5e99aeb886fa14dc1a0791141f  numpy-1.25.2-cp39-cp39-musllinux_1_1_x86_64.whl\n    2792d23d62ec51e50ce4d4b7d73de8f67a2fd3ea710dcbc8563a51a03fb07b01  numpy-1.25.2-cp39-cp39-win32.whl\n    76b4115d42a7dfc5d485d358728cdd8719be33cc5ec6ec08632a5d6fca2ed380  numpy-1.25.2-cp39-cp39-win_amd64.whl\n    1a1329e26f46230bf77b02cc19e900db9b52f398d6722ca853349a782d4cff55  numpy-1.25.2-pp39-pypy39_pp73-macosx_10_9_x86_64.whl\n    4c3abc71e8b6edba80a01a52e66d83c5d14433cbcd26a40c329ec7ed09f37901  numpy-1.25.2-pp39-pypy39_pp73-manylinux_2_17_x86_64.manylinux2014_x86_64.whl\n    1b9735c27cea5d995496f46a8b1cd7b408b3f34b6d50459d9ac8fe3a20cc17bf  numpy-1.25.2-pp39-pypy39_pp73-win_amd64.whl\n    fd608e19c8d7c55021dffd43bfe5492fab8cc105cc8986f813f8c3c048b38760  numpy-1.25.2.tar.gz\n\n\n.. currentmodule:: numpy\n\n========================\nNumPy 1.24 Release Notes\n========================\nThe NumPy 1.24.0 release continues the ongoing work to improve the handling and\npromotion of dtypes, increase the execution speed, and clarify the\ndocumentation.  There are also a large number of new and expired deprecations\ndue to changes in promotion and cleanups. This might be called a deprecation\nrelease. Highlights are\n\n* Many new deprecations, check them out.\n* Many expired deprecations,\n* New F2PY features and fixes.\n* New \"dtype\" and \"casting\" keywords for stacking functions.\n\nSee below for the details,\n\n\nDeprecations\n============\n\nDeprecate fastCopyAndTranspose and PyArray_CopyAndTranspose\n-----------------------------------------------------------\nThe ``numpy.fastCopyAndTranspose`` function has been deprecated. Use the\ncorresponding copy and transpose methods directly::\n\n    arr.T.copy()\n\nThe underlying C function ``PyArray_CopyAndTranspose`` has also been deprecated\nfrom the NumPy C-API.\n\n(`gh-22313 <https://github.com/numpy/numpy/pull/22313>`__)\n\nConversion of out-of-bound Python integers\n------------------------------------------\nAttempting a conversion from a Python integer to a NumPy value will now always\ncheck whether the result can be represented by NumPy.  This means the following\nexamples will fail in the future and give a ``DeprecationWarning`` now::\n\n    np.uint8(-1)\n    np.array([3000], dtype=np.int8)\n\nMany of these did succeed before.  Such code was mainly useful for unsigned\nintegers with negative values such as ``np.uint8(-1)`` giving\n``np.iinfo(np.uint8).max``.\n\nNote that conversion between NumPy integers is unaffected, so that\n``np.array(-1).astype(np.uint8)`` continues to work and use C integer overflow\nlogic.\n\n(`gh-22393 <https://github.com/numpy/numpy/pull/22393>`__)\n\nDeprecate ``msort``\n-------------------\nThe ``numpy.msort`` function is deprecated. Use ``np.sort(a, axis=0)`` instead.\n\n(`gh-22456 <https://github.com/numpy/numpy/pull/22456>`__)\n\n``np.str0`` and similar are now deprecated\n------------------------------------------\nThe scalar type aliases ending in a 0 bit size: ``np.object0``, ``np.str0``,\n``np.bytes0``, ``np.void0``, ``np.int0``, ``np.uint0`` as well as ``np.bool8``\nare now deprecated and will eventually be removed.\n\n(`gh-22607 <https://github.com/numpy/numpy/pull/22607>`__)\n\n\nExpired deprecations\n====================\n\n* The ``normed`` keyword argument has been removed from\n  `np.histogram`, `np.histogram2d`, and `np.histogramdd`.\n  Use ``density`` instead.  If ``normed`` was passed by\n  position, ``density`` is now used.\n\n  (`gh-21645 <https://github.com/numpy/numpy/pull/21645>`__)\n\n* Ragged array creation will now always raise a ``ValueError`` unless\n  ``dtype=object`` is passed.  This includes very deeply nested sequences.\n\n  (`gh-22004 <https://github.com/numpy/numpy/pull/22004>`__)\n\n* Support for Visual Studio 2015 and earlier has been removed.\n\n* Support for the Windows Interix POSIX interop layer has been removed.\n\n  (`gh-22139 <https://github.com/numpy/numpy/pull/22139>`__)\n\n* Support for cygwin < 3.3 has been removed.\n\n  (`gh-22159 <https://github.com/numpy/numpy/pull/22159>`__)\n\n* The mini() method of ``np.ma.MaskedArray`` has been removed. Use either\n  ``np.ma.MaskedArray.min()`` or ``np.ma.minimum.reduce()``.\n\n* The single-argument form of ``np.ma.minimum`` and ``np.ma.maximum`` has been\n  removed. Use ``np.ma.minimum.reduce()`` or ``np.ma.maximum.reduce()``\n  instead.\n\n  (`gh-22228 <https://github.com/numpy/numpy/pull/22228>`__)\n\n* Passing dtype instances other than the canonical (mainly native byte-order)\n  ones to ``dtype=`` or ``signature=`` in ufuncs will now raise a\n  ``TypeError``.  We recommend passing the strings ``\"int8\"`` or scalar types\n  ``np.int8`` since the byte-order, datetime/timedelta unit, etc. are never\n  enforced.  (Initially deprecated in NumPy 1.21.)\n\n  (`gh-22540 <https://github.com/numpy/numpy/pull/22540>`__)\n\n* The ``dtype=`` argument to comparison ufuncs is now applied correctly.  That\n  means that only ``bool`` and ``object`` are valid values and ``dtype=object``\n  is enforced.\n\n  (`gh-22541 <https://github.com/numpy/numpy/pull/22541>`__)\n\n* The deprecation for the aliases ``np.object``, ``np.bool``, ``np.float``,\n  ``np.complex``, ``np.str``, and ``np.int`` is expired (introduces NumPy\n  1.20).  Some of these will now give a FutureWarning in addition to raising an\n  error since they will be mapped to the NumPy scalars in the future.\n\n  (`gh-22607 <https://github.com/numpy/numpy/pull/22607>`__)\n\n\nCompatibility notes\n===================\n\n``array.fill(scalar)`` may behave slightly different\n----------------------------------------------------\n``numpy.ndarray.fill`` may in some cases behave slightly different now due to\nthe fact that the logic is aligned with item assignment::\n\n    arr = np.array([1])   with any dtype/value\n    arr.fill(scalar)\n     is now identical to:\n    arr[0] = scalar\n\nPreviously casting may have produced slightly different answers when using\nvalues that could not be represented in the target ``dtype`` or when the target\nhad ``object`` dtype.\n\n(`gh-20924 <https://github.com/numpy/numpy/pull/20924>`__)\n\nSubarray to object cast now copies\n----------------------------------\nCasting a dtype that includes a subarray to an object will now ensure a copy of\nthe subarray.  Previously an unsafe view was returned::\n\n    arr = np.ones(3, dtype=[(\"f\", \"i\", 3)])\n    subarray_fields = arr.astype(object)[0]\n    subarray = subarray_fields[0]   \"f\" field\n\n    np.may_share_memory(subarray, arr)\n\nIs now always false.  While previously it was true for the specific cast.\n\n(`gh-21925 <https://github.com/numpy/numpy/pull/21925>`__)\n\nReturned arrays respect uniqueness of dtype kwarg objects\n---------------------------------------------------------\nWhen the ``dtype`` keyword argument is used with :py:func:`np.array()` or\n:py:func:`asarray()`, the dtype of the returned array now always exactly\nmatches the dtype provided by the caller.\n\nIn some cases this change means that a *view* rather than the input array is\nreturned.  The following is an example for this on 64bit Linux where ``long``\nand ``longlong`` are the same precision but different ``dtypes``::\n\n    >>> arr = np.array([1, 2, 3], dtype=\"long\")\n    >>> new_dtype = np.dtype(\"longlong\")\n    >>> new = np.asarray(arr, dtype=new_dtype)\n    >>> new.dtype is new_dtype\n    True\n    >>> new is arr\n    False\n\nBefore the change, the ``dtype`` did not match because ``new is arr`` was\n``True``.\n\n(`gh-21995 <https://github.com/numpy/numpy/pull/21995>`__)\n\nDLPack export raises ``BufferError``\n------------------------------------\nWhen an array buffer cannot be exported via DLPack a ``BufferError`` is now\nalways raised where previously ``TypeError`` or ``RuntimeError`` was raised.\nThis allows falling back to the buffer protocol or ``__array_interface__`` when\nDLPack was tried first.\n\n(`gh-22542 <https://github.com/numpy/numpy/pull/22542>`__)\n\nNumPy builds are no longer tested on GCC-6\n------------------------------------------\nUbuntu 18.04 is deprecated for GitHub actions and GCC-6 is not available on\nUbuntu 20.04, so builds using that compiler are no longer tested. We still test\nbuilds using GCC-7 and GCC-8.\n\n(`gh-22598 <https://github.com/numpy/numpy/pull/22598>`__)\n\n\nNew Features\n============\n\nNew attribute ``symbol`` added to polynomial classes\n----------------------------------------------------\nThe polynomial classes in the ``numpy.polynomial`` package have a new\n``symbol`` attribute which is used to represent the indeterminate of the\npolynomial.  This can be used to change the value of the variable when\nprinting::\n\n    >>> P_y = np.polynomial.Polynomial([1, 0, -1], symbol=\"y\")\n    >>> print(P_y)\n    1.0 + 0.0\u00b7y\u00b9 - 1.0\u00b7y\u00b2\n\nNote that the polynomial classes only support 1D polynomials, so operations\nthat involve polynomials with different symbols are disallowed when the result\nwould be multivariate::\n\n    >>> P = np.polynomial.Polynomial([1, -1])   default symbol is \"x\"\n    >>> P_z = np.polynomial.Polynomial([1, 1], symbol=\"z\")\n    >>> P * P_z\n    Traceback (most recent call last)\n       ...\n    ValueError: Polynomial symbols differ\n\nThe symbol can be any valid Python identifier. The default is ``symbol=x``,\nconsistent with existing behavior.\n\n(`gh-16154 <https://github.com/numpy/numpy/pull/16154>`__)\n\nF2PY support for Fortran ``character`` strings\n----------------------------------------------\nF2PY now supports wrapping Fortran functions with:\n\n* character (e.g. ``character x``)\n* character array (e.g. ``character, dimension(n) :: x``)\n* character string (e.g. ``character(len=10) x``)\n* and character string array (e.g. ``character(len=10), dimension(n, m) :: x``)\n\narguments, including passing Python unicode strings as Fortran character string\narguments.\n\n(`gh-19388 <https://github.com/numpy/numpy/pull/19388>`__)\n\nNew function ``np.show_runtime``\n--------------------------------\nA new function ``numpy.show_runtime`` has been added to display the runtime\ninformation of the machine in addition to ``numpy.show_config`` which displays\nthe build-related information.\n\n(`gh-21468 <https://github.com/numpy/numpy/pull/21468>`__)\n\n``strict`` option for ``testing.assert_array_equal``\n----------------------------------------------------\nThe ``strict`` option is now available for ``testing.assert_array_equal``.\nSetting ``strict=True`` will disable the broadcasting behaviour for scalars and\nensure that input arrays have the same data type.\n\n(`gh-21595 <https://github.com/numpy/numpy/pull/21595>`__)\n\nNew parameter ``equal_nan`` added to ``np.unique``\n--------------------------------------------------\n``np.unique`` was changed in 1.21 to treat all ``NaN`` values as equal and\nreturn a single ``NaN``. Setting ``equal_nan=False`` will restore pre-1.21\nbehavior to treat ``NaNs`` as unique. Defaults to ``True``.\n\n(`gh-21623 <https://github.com/numpy/numpy/pull/21623>`__)\n\n``casting`` and ``dtype`` keyword arguments for ``numpy.stack``\n---------------------------------------------------------------\nThe ``casting`` and ``dtype`` keyword arguments are now available for\n``numpy.stack``.  To use them, write ``np.stack(..., dtype=None,\ncasting='same_kind')``.\n\n``casting`` and ``dtype`` keyword arguments for ``numpy.vstack``\n----------------------------------------------------------------\nThe ``casting`` and ``dtype`` keyword arguments are now available for\n``numpy.vstack``.  To use them, write ``np.vstack(..., dtype=None,\ncasting='same_kind')``.\n\n``casting`` and ``dtype`` keyword arguments for ``numpy.hstack``\n----------------------------------------------------------------\nThe ``casting`` and ``dtype`` keyword arguments are now available for\n``numpy.hstack``.  To use them, write ``np.hstack(..., dtype=None,\ncasting='same_kind')``.\n\n(`gh-21627 <https://github.com/numpy/numpy/pull/21627>`__)\n\nThe bit generator underlying the singleton RandomState can be changed\n---------------------------------------------------------------------\nThe singleton ``RandomState`` instance exposed in the ``numpy.random`` module\nis initialized at startup with the ``MT19937`` bit generator. The new function\n``set_bit_generator`` allows the default bit generator to be replaced with a\nuser-provided bit generator. This function has been introduced to provide a\nmethod allowing seamless integration of a high-quality, modern bit generator in\nnew code with existing code that makes use of the singleton-provided random\nvariate generating functions. The companion function ``get_bit_generator``\nreturns the current bit generator being used by the singleton ``RandomState``.\nThis is provided to simplify restoring the original source of randomness if\nrequired.\n\nThe preferred method to generate reproducible random numbers is to use a modern\nbit generator in an instance of ``Generator``. The function ``default_rng``\nsimplifies instantiation::\n\n   >>> rg = np.random.default_rng(3728973198)\n   >>> rg.random()\n\nThe same bit generator can then be shared with the singleton instance so that\ncalling functions in the ``random`` module will use the same bit generator::\n\n   >>> orig_bit_gen = np.random.get_bit_generator()\n   >>> np.random.set_bit_generator(rg.bit_generator)\n   >>> np.random.normal()\n\nThe swap is permanent (until reversed) and so any call to functions in the\n``random`` module will use the new bit generator. The original can be restored\nif required for code to run correctly::\n\n   >>> np.random.set_bit_generator(orig_bit_gen)\n\n(`gh-21976 <https://github.com/numpy/numpy/pull/21976>`__)\n\n``np.void`` now has a ``dtype`` argument\n----------------------------------------\nNumPy now allows constructing structured void scalars directly by\npassing the ``dtype`` argument to ``np.void``.\n\n(`gh-22316 <https://github.com/numpy/numpy/pull/22316>`__)\n\n\nImprovements\n============\n\nF2PY Improvements\n-----------------\n* The generated extension modules don't use the deprecated NumPy-C API anymore\n* Improved ``f2py`` generated exception messages\n* Numerous bug and ``flake8`` warning fixes\n* various CPP macros that one can use within C-expressions of signature files\n  are prefixed with ``f2py_``. For example, one should use ``f2py_len(x)``\n  instead of ``len(x)``\n* A new construct ``character(f2py_len=...)`` is introduced to support\n  returning assumed length character strings (e.g. ``character(len=*)``) from\n  wrapper functions\n\nA hook to support rewriting ``f2py`` internal data structures after reading all\nits input files is introduced. This is required, for instance, for BC of SciPy\nsupport where character arguments are treated as character strings arguments in\n``C`` expressions.\n\n(`gh-19388 <https://github.com/numpy/numpy/pull/19388>`__)\n\nIBM zSystems Vector Extension Facility (SIMD)\n---------------------------------------------\nAdded support for SIMD extensions of zSystem (z13, z14, z15), through the\nuniversal intrinsics interface. This support leads to performance improvements\nfor all SIMD kernels implemented using the universal intrinsics, including the\nfollowing operations: rint, floor, trunc, ceil, sqrt, absolute, square,\nreciprocal, tanh, sin, cos, equal, not_equal, greater, greater_equal, less,\nless_equal, maximum, minimum, fmax, fmin, argmax, argmin, add, subtract,\nmultiply, divide.\n\n(`gh-20913 <https://github.com/numpy/numpy/pull/20913>`__)\n\nNumPy now gives floating point errors in casts\n----------------------------------------------\nIn most cases, NumPy previously did not give floating point warnings or errors\nwhen these happened during casts.  For examples, casts like::\n\n    np.array([2e300]).astype(np.float32)   overflow for float32\n    np.array([np.inf]).astype(np.int64)\n\nShould now generally give floating point warnings.  These warnings should warn\nthat floating point overflow occurred.  For errors when converting floating\npoint values to integers users should expect invalid value warnings.\n\nUsers can modify the behavior of these warnings using ``np.errstate``.\n\nNote that for float to int casts, the exact warnings that are given may\nbe platform dependent.  For example::\n\n    arr = np.full(100, value=1000, dtype=np.float64)\n    arr.astype(np.int8)\n\nMay give a result equivalent to (the intermediate cast means no warning is\ngiven)::\n\n    arr.astype(np.int64).astype(np.int8)\n\nMay return an undefined result, with a warning set::\n\n    RuntimeWarning: invalid value encountered in cast\n\nThe precise behavior is subject to the C99 standard and its implementation in\nboth software and hardware.\n\n(`gh-21437 <https://github.com/numpy/numpy/pull/21437>`__)\n\nF2PY supports the value attribute\n---------------------------------\nThe Fortran standard requires that variables declared with the ``value``\nattribute must be passed by value instead of reference. F2PY now supports this\nuse pattern correctly. So ``integer, intent(in), value :: x`` in Fortran codes\nwill have correct wrappers generated.\n\n(`gh-21807 <https://github.com/numpy/numpy/pull/21807>`__)\n\nAdded pickle support for third-party BitGenerators\n--------------------------------------------------\nThe pickle format for bit generators was extended to allow each bit generator\nto supply its own constructor when during pickling. Previous  versions of NumPy\nonly supported unpickling ``Generator`` instances created with one of the core\nset of bit generators supplied with NumPy. Attempting to unpickle a\n``Generator`` that used a third-party bit generators would fail since the\nconstructor used during the unpickling was only aware of the bit generators\nincluded in NumPy.\n\n(`gh-22014 <https://github.com/numpy/numpy/pull/22014>`__)\n\narange() now explicitly fails with dtype=str\n---------------------------------------------\nPreviously, the ``np.arange(n, dtype=str)`` function worked for ``n=1`` and\n``n=2``, but would raise a non-specific exception message for other values of\n``n``. Now, it raises a `TypeError` informing that ``arange`` does not support\nstring dtypes::\n\n    >>> np.arange(2, dtype=str)\n    Traceback (most recent call last)\n       ...\n    TypeError: arange() not supported for inputs with DType <class 'numpy.dtype[str_]'>.\n\n(`gh-22055 <https://github.com/numpy/numpy/pull/22055>`__)\n\n``numpy.typing`` protocols are now runtime checkable\n----------------------------------------------------\nThe protocols used in ``numpy.typing.ArrayLike`` and ``numpy.typing.DTypeLike``\nare now properly marked as runtime checkable, making them easier to use for\nruntime type checkers.\n\n(`gh-22357 <https://github.com/numpy/numpy/pull/22357>`__)\n\n\nPerformance improvements and changes\n====================================\n\nFaster version of ``np.isin`` and ``np.in1d`` for integer arrays\n----------------------------------------------------------------\n``np.in1d`` (used by ``np.isin``) can now switch to a faster algorithm (up to\n>10x faster) when it is passed two integer arrays.  This is often automatically\nused, but you can use ``kind=\"sort\"`` or ``kind=\"table\"`` to force the old or\nnew method, respectively.\n\n(`gh-12065 <https://github.com/numpy/numpy/pull/12065>`__)\n\nFaster comparison operators\n----------------------------\nThe comparison functions (``numpy.equal``, ``numpy.not_equal``, ``numpy.less``,\n``numpy.less_equal``, ``numpy.greater`` and ``numpy.greater_equal``) are now\nmuch faster as they are now vectorized with universal intrinsics. For a CPU\nwith SIMD extension AVX512BW, the performance gain is up to 2.57x, 1.65x and\n19.15x for integer, float and boolean data types, respectively (with N=50000).\n\n(`gh-21483 <https://github.com/numpy/numpy/pull/21483>`__)\n\n\nChanges\n=======\n\nBetter reporting of integer division overflow\n---------------------------------------------\nInteger division overflow of scalars and arrays used to provide a\n``RuntimeWarning`` and the return value was undefined leading to crashes at\nrare occasions::\n\n    >>> np.array([np.iinfo(np.int32).min]*10, dtype=np.int32) // np.int32(-1)\n    <stdin>:1: RuntimeWarning: divide by zero encountered in floor_divide\n    array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0], dtype=int32)\n\nInteger division overflow now returns the input dtype's minimum value and raise\nthe following ``RuntimeWarning``::\n\n    >>> np.array([np.iinfo(np.int32).min]*10, dtype=np.int32) // np.int32(-1)\n    <stdin>:1: RuntimeWarning: overflow encountered in floor_divide\n    array([-2147483648, -2147483648, -2147483648, -2147483648, -2147483648,\n           -2147483648, -2147483648, -2147483648, -2147483648, -2147483648],\n          dtype=int32)\n\n(`gh-21506 <https://github.com/numpy/numpy/pull/21506>`__)\n\n``masked_invalid`` now modifies the mask in-place\n-------------------------------------------------\nWhen used with ``copy=False``, ``numpy.ma.masked_invalid`` now modifies the\ninput masked array in-place.  This makes it behave identically to\n``masked_where`` and better matches the documentation.\n\n(`gh-22046 <https://github.com/numpy/numpy/pull/22046>`__)\n\n``nditer``/``NpyIter`` allows all allocating all operands\n---------------------------------------------------------\nThe NumPy iterator available through ``np.nditer`` in Python and as ``NpyIter``\nin C now supports allocating all arrays.  The iterator shape defaults to ``()``\nin this case.  The operands dtype must be provided, since a \"common dtype\"\ncannot be inferred from the other inputs.\n\n(`gh-22457 <https://github.com/numpy/numpy/pull/22457>`__)\n\nChecksums\n=========\n\nMD5\n---\n::\n\n    0f45cfebcb56027a7c9fc14577082789  numpy-1.24.0rc2-cp310-cp310-macosx_10_9_x86_64.whl\n    c895f8af0f548ba2bbb948119a151cf7  numpy-1.24.0rc2-cp310-cp310-macosx_11_0_arm64.whl\n    4552d324786e3c05732135c59a73fbc6  numpy-1.24.0rc2-cp310-cp310-manylinux_2_17_aarch64.manylinux2014_aarch64.whl\n    99e4634eb1474e8c443cd6cee5dbc39e  numpy-1.24.0rc2-cp310-cp310-manylinux_2_17_x86_64.manylinux2014_x86_64.whl\n    f0304cb2aa708dfe1e0aa16cdfa3046d  numpy-1.24.0rc2-cp310-cp310-win32.whl\n    501424e62329ac7996be850a2fc58963  numpy-1.24.0rc2-cp310-cp310-win_amd64.whl\n    2b6a65ea122eaffb2f3b5643b1ce1ec4  numpy-1.24.0rc2-cp311-cp311-macosx_10_9_x86_64.whl\n    865bbc90494b6e9e845ac1eb08ba0377  numpy-1.24.0rc2-cp311-cp311-macosx_11_0_arm64.whl\n    faa4f8e5050cb7c4319d2c2df23eca05  numpy-1.24.0rc2-cp311-cp311-manylinux_2_17_aarch64.manylinux2014_aarch64.whl\n    509fbe04ec7941baaedc6502d003b864  numpy-1.24.0rc2-cp311-cp311-manylinux_2_17_x86_64.manylinux2014_x86_64.whl\n    2eb1e8cd4c53ee4046fb0cd858daef80  numpy-1.24.0rc2-cp311-cp311-win32.whl\n    f5bd22dee1273898598f373b72e40f84  numpy-1.24.0rc2-cp311-cp311-win_amd64.whl\n    6a7b14b0fcbb33a8a415e27afc856544  numpy-1.24.0rc2-cp38-cp38-macosx_10_9_x86_64.whl\n    8a26467d235710d2db2bc68ef639318f  numpy-1.24.0rc2-cp38-cp38-macosx_11_0_arm64.whl\n    e6f08e32041c4e3ca64b8714f2c1f1c8  numpy-1.24.0rc2-cp38-cp38-manylinux_2_17_aarch64.manylinux2014_aarch64.whl\n    7112b8e3f9a46953b0a1e9a670008ed4  numpy-1.24.0rc2-cp38-cp38-manylinux_2_17_x86_64.manylinux2014_x86_64.whl\n    9a7155f0a4a39e17bd70c17331c7e765  numpy-1.24.0rc2-cp38-cp38-win32.whl\n    cb10d074bf1977d2257209f96465e639  numpy-1.24.0rc2-cp38-cp38-win_amd64.whl\n    0fa5a0f9dfbb817061bd3b438a0e0b19  numpy-1.24.0rc2-cp39-cp39-macosx_10_9_x86_64.whl\n    39bd8e522bf703f0be585a7b30861fd0  numpy-1.24.0rc2-cp39-cp39-macosx_11_0_arm64.whl\n    a8907c987c7b5f66891cf294dbba4347  numpy-1.24.0rc2-cp39-cp39-manylinux_2_17_aarch64.manylinux2014_aarch64.whl\n    7a5f46715e8b93c7b86f275c7ae3f160  numpy-1.24.0rc2-cp39-cp39-manylinux_2_17_x86_64.manylinux2014_x86_64.whl\n    04daa21b43702b1bf5431731d16a59d6  numpy-1.24.0rc2-cp39-cp39-win32.whl\n    046ebc9bb672392443280192e8c71a6d  numpy-1.24.0rc2-cp39-cp39-win_amd64.whl\n    e44b5d937de603499ccf29d96e308cd7  numpy-1.24.0rc2-pp38-pypy38_pp73-macosx_10_9_x86_64.whl\n    6a0c0372e7d4db195dd8e889d70de00b  numpy-1.24.0rc2-pp38-pypy38_pp73-manylinux_2_17_x86_64.manylinux2014_x86_64.whl\n    946e249ee0dab46c57b5b913ccfe80cd  numpy-1.24.0rc2-pp38-pypy38_pp73-win_amd64.whl\n    0974533ba76def71daa78cd0df753e1e  numpy-1.24.0rc2.tar.gz\n\nSHA256\n------\n::\n\n    dce26877ad77c9722e35c9ca82e9272cb6d10aa0a4f95e633b13511dcf549b5f  numpy-1.24.0rc2-cp310-cp310-macosx_10_9_x86_64.whl\n    0983fb5b475406cd6aa2f4f364768fb388e1211fd94fb496ad49e214d5c79792  numpy-1.24.0rc2-cp310-cp310-macosx_11_0_arm64.whl\n    df9a9c28ad95c87b4047e1acd45715eb430fb5f6df39556279b3f36ce75c697b  numpy-1.24.0rc2-cp310-cp310-manylinux_2_17_aarch64.manylinux2014_aarch64.whl\n    bdd44d3133c800792f2beda0e24f86b3ae06a8a31172395c650d13e4c05d1d5b  numpy-1.24.0rc2-cp310-cp310-manylinux_2_17_x86_64.manylinux2014_x86_64.whl\n    ab18e29ad73ce560747de10ebe75f145be3026b7480e76d7a5314c2bef0fc831  numpy-1.24.0rc2-cp310-cp310-win32.whl\n    1651a59e5d8dbb09b84254e358aa2fe10431df5a92ddefb1ac20208c75bd2fa2  numpy-1.24.0rc2-cp310-cp310-win_amd64.whl\n    146d7e5ee04433ce8eb504d0dcffff524a5ba759bd1fb9c73189c3436b04d59c  numpy-1.24.0rc2-cp311-cp311-macosx_10_9_x86_64.whl\n    a68647adc9945eac88f4fce96195177c2a81577baa448c1c1bbd5751c550e8b5  numpy-1.24.0rc2-cp311-cp311-macosx_11_0_arm64.whl\n    50346a0d81444f420518c7d6996524d7e559cdfa2e41886381442f012593590e  numpy-1.24.0rc2-cp311-cp311-manylinux_2_17_aarch64.manylinux2014_aarch64.whl\n    8bc069b085289f3b7a578519504962330fab91459a847195b914f69b9170b75c  numpy-1.24.0rc2-cp311-cp311-manylinux_2_17_x86_64.manylinux2014_x86_64.whl\n    07c0f3b174970054c613c33e90627fbafbc5d9115adf8829658b833278e7017c  numpy-1.24.0rc2-cp311-cp311-win32.whl\n    1d6198ee7eb45e5d9cc8a5c9102b734f0c5683c0e440ae7cfad90ad8cb9316d2  numpy-1.24.0rc2-cp311-cp311-win_amd64.whl\n    e948367a0b9aa68a081c4cf817751c6d0d589a37ce6bb40fea39a882b4858834  numpy-1.24.0rc2-cp38-cp38-macosx_10_9_x86_64.whl\n    e4909946cf43ff713f95780d483793d8fb23c1559686a8221e91f89e5ecceea0  numpy-1.24.0rc2-cp38-cp38-macosx_11_0_arm64.whl\n    0704c94f89bf8d5d4f5722b305a29cbb1ad91c7f3dcdcda61cb80d6e5443365b  numpy-1.24.0rc2-cp38-cp38-manylinux_2_17_aarch64.manylinux2014_aarch64.whl\n    748285bca9fb0f06a16034d4b9c6dce77997d2ccddf769aaeb4760fea4752ea2  numpy-1.24.0rc2-cp38-cp38-manylinux_2_17_x86_64.manylinux2014_x86_64.whl\n    b6e807f59c1f71e74603a2a88b0b997d7f43e002f6e5f7f55649c6e07738f1ad  numpy-1.24.0rc2-cp38-cp38-win32.whl\n    0a5c85f625751b77a6f613db2de5f62514024a7ea6d3be534421746e094b2121  numpy-1.24.0rc2-cp38-cp38-win_amd64.whl\n    5db5f7a8f150614684c34449010c15b61df8d8e5fc0cd79ce30e82f493598599  numpy-1.24.0rc2-cp39-cp39-macosx_10_9_x86_64.whl\n    6f34b8f2996ebad781cd878276e03d247f0129640fb0ae76bb16addc4df822d1  numpy-1.24.0rc2-cp39-cp39-macosx_11_0_arm64.whl\n    e30689dd418f2db3d2d3039cb08011047d27708fdc24c592d56fa58aaeb01672  numpy-1.24.0rc2-cp39-cp39-manylinux_2_17_aarch64.manylinux2014_aarch64.whl\n    925d39290878d680eb8dd690f969faa0a4956b7bd77daf3573486eb39d8e5724  numpy-1.24.0rc2-cp39-cp39-manylinux_2_17_x86_64.manylinux2014_x86_64.whl\n    a2495e48db12f546e4e3f9ea1f665390828098344bf63bca50309a68d713d302  numpy-1.24.0rc2-cp39-cp39-win32.whl\n    ea9ca0989fdd42d3320a94f540f317fb615be9ceab75a07078a84b9933582da5  numpy-1.24.0rc2-cp39-cp39-win_amd64.whl\n    c9ff51e627e7584eb7ee09f6fe494862e45f796e53b5ee7267d3d5633a79dac6  numpy-1.24.0rc2-pp38-pypy38_pp73-macosx_10_9_x86_64.whl\n    b4eca15593bec5ef3e2e05c157ff1be3990d04a862f49fd46b4e527ff390b778  numpy-1.24.0rc2-pp38-pypy38_pp73-manylinux_2_17_x86_64.manylinux2014_x86_64.whl\n    b45bdcde72ce02a92ae183ef211bcf7f04e15d5e3df6714866de66d8ec8cc822  numpy-1.24.0rc2-pp38-pypy38_pp73-win_amd64.whl\n    c943c61fa708a6225e199aff755b2c3f5a353a2bbb726e10334a05b8e1fc030b  numpy-1.24.0rc2.tar.gz\n\n\n.. currentmodule:: numpy\n\n==========================\n", "1.22.2": "==========================\n\nThe NumPy 1.22.2 is maintenance release that fixes bugs discovered after the\n1.22.1 release. Notable fixes are:\n\n- Several build related fixes for downstream projects and other platforms.\n- Various Annotation fixes/additions.\n- Numpy wheels for Windows will use the 1.41 tool chain, fixing downstream link\n  problems for projects using NumPy provided libraries on Windows.\n- Deal with CVE-2021-41495 complaint.\n\nThe Python versions supported for this release are 3.8-3.10.\n\nContributors\n============\n\nA total of 14 people contributed to this release.  People with a \"+\" by their\nnames contributed a patch for the first time.\n\n* Andrew J. Hesford +\n* Bas van Beek\n* Br\u221a\u00a9nainn Woodsend +\n* Charles Harris\n* Hood Chatham\n* Janus Heide +\n* Leo Singer\n* Matti Picus\n* Mukulika Pahari\n* Niyas Sait\n* Pearu Peterson\n* Ralf Gommers\n* Sebastian Berg\n* Serge Guelton\n\nPull requests merged\n====================\n\nA total of 21 pull requests were merged for this release.\n\n* `20842 <https://github.com/numpy/numpy/pull/20842>`__: BLD: Add NPY_DISABLE_SVML env var to opt out of SVML\n* `20843 <https://github.com/numpy/numpy/pull/20843>`__: BUG: Fix build of third party extensions with Py_LIMITED_API\n* `20844 <https://github.com/numpy/numpy/pull/20844>`__: TYP: Fix pyright being unable to infer the ``real`` and ``imag``...\n* `20845 <https://github.com/numpy/numpy/pull/20845>`__: BUG: Fix comparator function signatures\n* `20906 <https://github.com/numpy/numpy/pull/20906>`__: BUG: Avoid importing ``numpy.distutils`` on import numpy.testing\n* `20907 <https://github.com/numpy/numpy/pull/20907>`__: MAINT: remove outdated mingw32 fseek support\n* `20908 <https://github.com/numpy/numpy/pull/20908>`__: TYP: Relax the return type of ``np.vectorize``\n* `20909 <https://github.com/numpy/numpy/pull/20909>`__: BUG: fix f2py's define for threading when building with Mingw\n* `20910 <https://github.com/numpy/numpy/pull/20910>`__: BUG: distutils: fix building mixed C/Fortran extensions\n* `20912 <https://github.com/numpy/numpy/pull/20912>`__: DOC,TST: Fix Pandas code example as per new release\n* `20935 <https://github.com/numpy/numpy/pull/20935>`__: TYP, MAINT: Add annotations for ``flatiter.__setitem__``\n* `20936 <https://github.com/numpy/numpy/pull/20936>`__: MAINT, TYP: Added missing where typehints in ``fromnumeric.pyi``\n* `20937 <https://github.com/numpy/numpy/pull/20937>`__: BUG: Fix build_ext interaction with non numpy extensions\n* `20938 <https://github.com/numpy/numpy/pull/20938>`__: BUG: Fix missing intrinsics for windows/arm64 target\n* `20945 <https://github.com/numpy/numpy/pull/20945>`__: REL: Prepare for the NumPy 1.22.2 release.\n* `20982 <https://github.com/numpy/numpy/pull/20982>`__: MAINT: f2py: don't generate code that triggers ``-Wsometimes-uninitialized``.\n* `20983 <https://github.com/numpy/numpy/pull/20983>`__: BUG: Fix incorrect return type in reduce without initial value\n* `20984 <https://github.com/numpy/numpy/pull/20984>`__: ENH: review return values for PyArray_DescrNew\n* `20985 <https://github.com/numpy/numpy/pull/20985>`__: MAINT: be more tolerant of setuptools >= 60\n* `20986 <https://github.com/numpy/numpy/pull/20986>`__: BUG: Fix misplaced return.\n* `20992 <https://github.com/numpy/numpy/pull/20992>`__: MAINT: Further small return value validation fixes\n\nChecksums\n=========\n\nMD5\n---\n::\n\n    2319f8d7c629d0ba3d3d3b1d5605d494  numpy-1.22.2-cp310-cp310-macosx_10_14_x86_64.whl\n    023c01a6d3aa528f8e88b0837dcab7ed  numpy-1.22.2-cp310-cp310-macosx_11_0_arm64.whl\n    84b36e8893b811d17a19404c68db7ce6  numpy-1.22.2-cp310-cp310-manylinux_2_17_aarch64.manylinux2014_aarch64.whl\n    744da9614e8272a384b542d129cd17a9  numpy-1.22.2-cp310-cp310-manylinux_2_17_x86_64.manylinux2014_x86_64.whl\n    ee012ed5e7c98c6f48026dfa818b2274  numpy-1.22.2-cp310-cp310-win_amd64.whl\n    73e4fdcf398327bc4241dc38b6d10211  numpy-1.22.2-cp38-cp38-macosx_10_14_x86_64.whl\n    9fcbca2a614af3b9a37456643ab1c99d  numpy-1.22.2-cp38-cp38-macosx_11_0_arm64.whl\n    b7e0d4a19867d33765c7187d1390eef4  numpy-1.22.2-cp38-cp38-manylinux_2_17_aarch64.manylinux2014_aarch64.whl\n    dc8d79d75588737ea77fe85a4f05365a  numpy-1.22.2-cp38-cp38-manylinux_2_17_x86_64.manylinux2014_x86_64.whl\n    05906141c095148c53c043c381e6fabe  numpy-1.22.2-cp38-cp38-win32.whl\n    05d3b6d34c0fa031e69ec0476e8d4c9c  numpy-1.22.2-cp38-cp38-win_amd64.whl\n    1449889d856de0e88437fa76d3284e00  numpy-1.22.2-cp39-cp39-macosx_10_14_x86_64.whl\n    e25666ab6ec0692368f328b7b98c27a3  numpy-1.22.2-cp39-cp39-macosx_11_0_arm64.whl\n    59e3013894bcc6267054c746d9339cf8  numpy-1.22.2-cp39-cp39-manylinux_2_17_aarch64.manylinux2014_aarch64.whl\n    7606b9898c20d2b2aa7fc7018bc9c5cd  numpy-1.22.2-cp39-cp39-manylinux_2_17_x86_64.manylinux2014_x86_64.whl\n    2686a1495c620e85842967bf8a5f1b2f  numpy-1.22.2-cp39-cp39-win32.whl\n    54432a84807ab69ac3432e6090d5a169  numpy-1.22.2-cp39-cp39-win_amd64.whl\n    4dbecace42595742485b854b213341b6  numpy-1.22.2-pp38-pypy38_pp73-manylinux_2_17_x86_64.manylinux2014_x86_64.whl\n    5b506b01ef454f39272ca75de1c7f61c  numpy-1.22.2.tar.gz\n    a903008d992b77cb68129173c0f61f60  numpy-1.22.2.zip\n\nSHA256\n------\n::\n\n    515a8b6edbb904594685da6e176ac9fbea8f73a5ebae947281de6613e27f1956  numpy-1.22.2-cp310-cp310-macosx_10_14_x86_64.whl\n    76a4f9bce0278becc2da7da3b8ef854bed41a991f4226911a24a9711baad672c  numpy-1.22.2-cp310-cp310-macosx_11_0_arm64.whl\n    168259b1b184aa83a514f307352c25c56af111c269ffc109d9704e81f72e764b  numpy-1.22.2-cp310-cp310-manylinux_2_17_aarch64.manylinux2014_aarch64.whl\n    3556c5550de40027d3121ebbb170f61bbe19eb639c7ad0c7b482cd9b560cd23b  numpy-1.22.2-cp310-cp310-manylinux_2_17_x86_64.manylinux2014_x86_64.whl\n    aafa46b5a39a27aca566198d3312fb3bde95ce9677085efd02c86f7ef6be4ec7  numpy-1.22.2-cp310-cp310-win_amd64.whl\n    55535c7c2f61e2b2fc817c5cbe1af7cb907c7f011e46ae0a52caa4be1f19afe2  numpy-1.22.2-cp38-cp38-macosx_10_14_x86_64.whl\n    60cb8e5933193a3cc2912ee29ca331e9c15b2da034f76159b7abc520b3d1233a  numpy-1.22.2-cp38-cp38-macosx_11_0_arm64.whl\n    0b536b6840e84c1c6a410f3a5aa727821e6108f3454d81a5cd5900999ef04f89  numpy-1.22.2-cp38-cp38-manylinux_2_17_aarch64.manylinux2014_aarch64.whl\n    2638389562bda1635b564490d76713695ff497242a83d9b684d27bb4a6cc9d7a  numpy-1.22.2-cp38-cp38-manylinux_2_17_x86_64.manylinux2014_x86_64.whl\n    6767ad399e9327bfdbaa40871be4254d1995f4a3ca3806127f10cec778bd9896  numpy-1.22.2-cp38-cp38-win32.whl\n    03ae5850619abb34a879d5f2d4bb4dcd025d6d8fb72f5e461dae84edccfe129f  numpy-1.22.2-cp38-cp38-win_amd64.whl\n    d76a26c5118c4d96e264acc9e3242d72e1a2b92e739807b3b69d8d47684b6677  numpy-1.22.2-cp39-cp39-macosx_10_14_x86_64.whl\n    15efb7b93806d438e3bc590ca8ef2f953b0ce4f86f337ef4559d31ec6cf9d7dd  numpy-1.22.2-cp39-cp39-macosx_11_0_arm64.whl\n    badca914580eb46385e7f7e4e426fea6de0a37b9e06bec252e481ae7ec287082  numpy-1.22.2-cp39-cp39-manylinux_2_17_aarch64.manylinux2014_aarch64.whl\n    94dd11d9f13ea1be17bac39c1942f527cbf7065f94953cf62dfe805653da2f8f  numpy-1.22.2-cp39-cp39-manylinux_2_17_x86_64.manylinux2014_x86_64.whl\n    8cf33634b60c9cef346663a222d9841d3bbbc0a2f00221d6bcfd0d993d5543f6  numpy-1.22.2-cp39-cp39-win32.whl\n    59153979d60f5bfe9e4c00e401e24dfe0469ef8da6d68247439d3278f30a180f  numpy-1.22.2-cp39-cp39-win_amd64.whl\n    4a176959b6e7e00b5a0d6f549a479f869829bfd8150282c590deee6d099bbb6e  numpy-1.22.2-pp38-pypy38_pp73-manylinux_2_17_x86_64.manylinux2014_x86_64.whl\n    093d513a460fd94f94c16193c3ef29b2d69a33e482071e3d6d6e561a700587a6  numpy-1.22.2.tar.gz\n    076aee5a3763d41da6bef9565fdf3cb987606f567cd8b104aded2b38b7b47abf  numpy-1.22.2.zip\n\n\n-----BEGIN PGP SIGNED MESSAGE-----\nHash: SHA1\n\n==========================\n", "1.14.6": "==========================\n\nThis is a bugfix release for bugs reported following the 1.14.5 release. The\nmost significant fixes are:\n\n* Fix for behavior change in ``ma.masked_values(shrink=True)``\n* Fix the new cached allocations machinery to be thread safe.\n\nThe Python versions supported in this release are 2.7 and 3.4 - 3.7. The Python\n3.6 wheels on PyPI should be compatible with all Python 3.6 versions.\n\nContributors\n============\n\nA total of 4 people contributed to this release.  People with a \"+\" by their\nnames contributed a patch for the first time.\n\n* Charles Harris\n* Eric Wieser\n* Julian Taylor\n* Matti Picus\n\nPull requests merged\n====================\n\nA total of 4 pull requests were merged for this release.\n\n* `11985 <https://github.com/numpy/numpy/pull/11985>`__: BUG: fix cached allocations without the GIL\n* `11986 <https://github.com/numpy/numpy/pull/11986>`__: BUG: Undo behavior change in ma.masked_values(shrink=True)\n* `11987 <https://github.com/numpy/numpy/pull/11987>`__: BUG: fix refcount leak in PyArray_AdaptFlexibleDType\n* `11995 <https://github.com/numpy/numpy/pull/11995>`__: TST: Add Python 3.7 testing to NumPy 1.14.\n\nChecksums\n=========\n\nMD5\n- ---\n\n    f67c12a012b32b44e39eb057d6c5e5a9  numpy-1.14.6-cp27-cp27m-macosx_10_6_intel.macosx_10_9_intel.macosx_10_9_x86_64.macosx_10_10_intel.macosx_10_10_x86_64.whl\n    a9325f87cd57dca3164e8920bd93ed30  numpy-1.14.6-cp27-cp27m-manylinux1_i686.whl\n    a02a64177b422b6059242f01fc39eba9  numpy-1.14.6-cp27-cp27m-manylinux1_x86_64.whl\n    4d45b10bc3be5e2e87aaf530bbcd9e48  numpy-1.14.6-cp27-cp27mu-manylinux1_i686.whl\n    d9e0e8d2aa9a198bcebb9e6627669c7b  numpy-1.14.6-cp27-cp27mu-manylinux1_x86_64.whl\n    cfe9797b5bb22896aae777a356e77eab  numpy-1.14.6-cp27-none-win32.whl\n    7e2bb331cc8fc5939a362df46cf60081  numpy-1.14.6-cp27-none-win_amd64.whl\n    1ba6477836db55255943977535bf6821  numpy-1.14.6-cp34-cp34m-macosx_10_6_intel.macosx_10_9_intel.macosx_10_9_x86_64.macosx_10_10_intel.macosx_10_10_x86_64.whl\n    e341e9d58654c8afd15728495a523473  numpy-1.14.6-cp34-cp34m-manylinux1_i686.whl\n    e326047645ebee9bfac01922663488c7  numpy-1.14.6-cp34-cp34m-manylinux1_x86_64.whl\n    29f8f49c0c3b3282fcd644d66bf15001  numpy-1.14.6-cp34-none-win32.whl\n    92ad00143740a54180bb6f2015004940  numpy-1.14.6-cp34-none-win_amd64.whl\n    0f25ad62a1f7627729296d47a72d5fe4  numpy-1.14.6-cp35-cp35m-macosx_10_6_intel.macosx_10_9_intel.macosx_10_9_x86_64.macosx_10_10_intel.macosx_10_10_x86_64.whl\n    9027e902724fe6d0468f30f9fed878c9  numpy-1.14.6-cp35-cp35m-manylinux1_i686.whl\n    25cc365ada785dd26ed74eae5b90630d  numpy-1.14.6-cp35-cp35m-manylinux1_x86_64.whl\n    b969c8694c91918927b74f82dcbd6e51  numpy-1.14.6-cp35-none-win32.whl\n    db451ea9b296b95644bbdb0dfe133d38  numpy-1.14.6-cp35-none-win_amd64.whl\n    afc5355fe367e833bf8b503e2be19e11  numpy-1.14.6-cp36-cp36m-macosx_10_6_intel.macosx_10_9_intel.macosx_10_9_x86_64.macosx_10_10_intel.macosx_10_10_x86_64.whl\n    200cdb3ed59ced85a6fe4255b4e93c32  numpy-1.14.6-cp36-cp36m-manylinux1_i686.whl\n    b40851c94f1c7586a1f5b4e9602a748a  numpy-1.14.6-cp36-cp36m-manylinux1_x86_64.whl\n    7ece416512eb587d237e0ea35a764387  numpy-1.14.6-cp36-none-win32.whl\n    fb0334939e7f0716415971c1566a3da5  numpy-1.14.6-cp36-none-win_amd64.whl\n    7cd2d7d164af228289e2a2dd7dc2f6b0  numpy-1.14.6-cp37-cp37m-macosx_10_6_intel.macosx_10_9_intel.macosx_10_9_x86_64.macosx_10_10_intel.macosx_10_10_x86_64.whl\n    f816dd37be0320767994c18aaca1f530  numpy-1.14.6-cp37-cp37m-manylinux1_i686.whl\n    29539a787aa1c04c5026c7b9c4e611e4  numpy-1.14.6-cp37-cp37m-manylinux1_x86_64.whl\n    d957e060a892311bd19df11fd2efbce3  numpy-1.14.6-cp37-none-win32.whl\n    4660539e780b295ab849fe9cd6491994  numpy-1.14.6-cp37-none-win_amd64.whl\n    dd01e3e29e8f46f2be8f176d3649cab1  numpy-1.14.6.tar.gz\n    9118b06f0ff86f9545beee4a10a80717  numpy-1.14.6.zip\n\nSHA256\n- ------\n\n    bd6b3906a50f9ad755e2c21a78661eff1bbaab3c803c0fcf22927ec50372dba6  numpy-1.14.6-cp27-cp27m-macosx_10_6_intel.macosx_10_9_intel.macosx_10_9_x86_64.macosx_10_10_intel.macosx_10_10_x86_64.whl\n    f1dd9a8ecbe9f8f13652afe04c470bb837578e402a3641649ddc41764d0e4326  numpy-1.14.6-cp27-cp27m-manylinux1_i686.whl\n    4c774c852cad87f692e6b3e374ba7074c7a9897cf4bafcc47ad48142d455f3ae  numpy-1.14.6-cp27-cp27m-manylinux1_x86_64.whl\n    40f9c0ae71453e4d28d40e502e531e72810bf3b12b2d55cad939ab86a26ead42  numpy-1.14.6-cp27-cp27mu-manylinux1_i686.whl\n    964c2c6a9e0ecac54a368effa26a89a97b2e15266dc68dc78f2519f3040be623  numpy-1.14.6-cp27-cp27mu-manylinux1_x86_64.whl\n    4e2f4c7031507b23b14056a4bc2b4cbe865607f55b45bfc15cc745a268bc817e  numpy-1.14.6-cp27-none-win32.whl\n    35be3f06ad20030bfba9ae199fa5d5474aebeabb3197d2ce9fcd8c417f7415e3  numpy-1.14.6-cp27-none-win_amd64.whl\n    e11e5eba43e0d8b077aafa11e43db7a77af4fa435557972dd3570898e0cbb736  numpy-1.14.6-cp34-cp34m-macosx_10_6_intel.macosx_10_9_intel.macosx_10_9_x86_64.macosx_10_10_intel.macosx_10_10_x86_64.whl\n    1718e009ac6699868c82c4ed154e64945479f5c3d8826b2e10c470e9fad7bd18  numpy-1.14.6-cp34-cp34m-manylinux1_i686.whl\n    6eb031402a278a6fa5838e543cf36ed6d21a6ee90e9a2803570d47908ca5e9fd  numpy-1.14.6-cp34-cp34m-manylinux1_x86_64.whl\n    1b07024c4d87bf7a0738c438aa7fb709f9d7c093513bb8ffb2ac849f4553658c  numpy-1.14.6-cp34-none-win32.whl\n    e5daec856ea0e1111391179449b855aa29f1433ac507adc3d6c00a96abb438cb  numpy-1.14.6-cp34-none-win_amd64.whl\n    0e7c5e5358be186e0d6c73a9b34e1b890602ac1db413adc61794e2e3e02ec65c  numpy-1.14.6-cp35-cp35m-macosx_10_6_intel.macosx_10_9_intel.macosx_10_9_x86_64.macosx_10_10_intel.macosx_10_10_x86_64.whl\n    6f2a52bb05c560fd6f29d7b49dfe8b4d7c5445c448e5587969446a0f10cf9164  numpy-1.14.6-cp35-cp35m-manylinux1_i686.whl\n    1454aca5a62fe18bb2828ea1b2f9d1534afed7216c13404a6657cda57937c54b  numpy-1.14.6-cp35-cp35m-manylinux1_x86_64.whl\n    686869ff6adc49b3066fdb44198c0655603b33e2c4d852a04c6a84cd8b224786  numpy-1.14.6-cp35-none-win32.whl\n    057ca467673a4b0422a9365ea0b53572813764f60896d3d1423f5cc9d2dd0d02  numpy-1.14.6-cp35-none-win_amd64.whl\n    db10d3d10658a847f85fe9df0d5fe6df190a30d32423d670c3824580e373c0a8  numpy-1.14.6-cp36-cp36m-macosx_10_6_intel.macosx_10_9_intel.macosx_10_9_x86_64.macosx_10_10_intel.macosx_10_10_x86_64.whl\n    7ce70ef6fd9bdfafd896c617761129fafaa06e4683d0bfbf3c56a87c89e02d61  numpy-1.14.6-cp36-cp36m-manylinux1_i686.whl\n    4ab59a69a627ee73a2723b60723abfe0404947c16acef7b0880d6bbec93ba7cd  numpy-1.14.6-cp36-cp36m-manylinux1_x86_64.whl\n    33acfba9f453b0b6465c0aa5fe5cb0d32b8483850bc8cc776b4d3cc96595aa03  numpy-1.14.6-cp36-none-win32.whl\n    6d3e10394dada2cdf8ba354025ddf15a744b4e833c77347e31547c4b5c77deab  numpy-1.14.6-cp36-none-win_amd64.whl\n    d37f058ea9a2fd2a9160b0cc65bbfb302dfcea8d5fe178299938d95d7bfa2b83  numpy-1.14.6-cp37-cp37m-macosx_10_6_intel.macosx_10_9_intel.macosx_10_9_x86_64.macosx_10_10_intel.macosx_10_10_x86_64.whl\n    a1cafe27328c1f01127297f11e2be25d5d3821d2654a7459e017cfce98258995  numpy-1.14.6-cp37-cp37m-manylinux1_i686.whl\n    df2937c62d8d3059c1396c7cacfc12577c0923e2a37557592759358848b1544c  numpy-1.14.6-cp37-cp37m-manylinux1_x86_64.whl\n    d3f22c0781ad5fe51d7210f36a91f01620355520996fc332a1d0cf24e0cab794  numpy-1.14.6-cp37-none-win32.whl\n    fe909f8d14b2f16ea5d9ec2234fc0ffbfccccaef1ba6bc27d9d21acfe8cc72e1  numpy-1.14.6-cp37-none-win_amd64.whl\n    61b01b87d1e76df9a1e43fff727c1e0289c4cd2bc7be9f806e97b45aed3682cc  numpy-1.14.6.tar.gz\n    1250edf6f6c43e1d7823f0967416bc18258bb271dc536298eb0ea00a9e45b80a  numpy-1.14.6.zip\n-----BEGIN PGP SIGNATURE-----\n\niQEcBAEBAgAGBQJbp8MFAAoJEGefIoN3xSR7oI4H/1A9ERtTOm6WRFq/EORmx9cI\n3OvlEyb2p71zWeO4r0xRKx8p07ulj15ywSi3drH+hpZJh0sxKRpgFSO27obTNPj6\ngZXFtx4O9e1Y03mHf9PEjPaO7BkJmlFvx5zyhDniXazsR6wNzKurkmK26sLI2X9S\nOkkLlq5gSqxCSdibB5HhalhS3UQ0nIxkz3WXw6P4WltYe/Ncu0xQYsJQXZ8UgG1Z\nnikY82a+Dw7Y1q39VPV6DGsYN+BylxLM0s5KGAhgwMBJegNWL3F+3pEdXBsHUDCv\nAEXxsSKr8JfPlVbUayOZeUtY2J9jf5hGK7iaSnqCPCLVlYza9J39BWHoZuEGl/8=\n=xFaC\n-----END PGP SIGNATURE-----\n\n\n-----BEGIN PGP SIGNED MESSAGE-----\nHash: SHA1\n\n==========================\n", "1.16.0": "==========================\n\nThis NumPy release is the last one to support Python 2.7 and will be maintained\nas a long term release with bug fixes until 2020.  Support for Python 3.4 been\ndropped, the supported Python versions are 2.7 and 3.5-3.7. The wheels on PyPI\nare linked with OpenBLAS v0.3.4+,  which should fix the known threading issues\nfound in previous OpenBLAS versions.\n\nDownstream developers building this release should use Cython >= 0.29 and, if\nusing OpenBLAS, OpenBLAS > v0.3.4.\n\nThis release has seen a lot of refactoring and features many bug fixes, improved\ncode organization, and better cross platform compatibility. Not all of these\nimprovements will be visible to users, but they should help make maintenance\neasier going forward.\n\n\nHighlights\n==========\n\n* Experimental support for overriding numpy functions,\n  see ``__array_function__`` below.\n\n* The ``matmul`` function is now a ufunc. This provides better\n  performance and allows overriding with ``__array_ufunc__``.\n\n* Improved support for the ARM and POWER architectures.\n\n* Improved support for AIX and PyPy.\n\n* Improved interop with ctypes.\n\n* Improved support for PEP 3118.\n\n\n\nNew functions\n=============\n\n* New functions added to the `numpy.lib.recfuntions` module to ease the\n  structured assignment changes:\n\n    * ``assign_fields_by_name``\n    * ``structured_to_unstructured``\n    * ``unstructured_to_structured``\n    * ``apply_along_fields``\n    * ``require_fields``\n\n  See the user guide at <https://docs.scipy.org/doc/numpy/user/basics.rec.html>\n  for more info.\n\n\nNew deprecations\n================\n\n* The type dictionaries `numpy.core.typeNA` and `numpy.core.sctypeNA` are\n  deprecated. They were buggy and not documented and will be removed in the\n  1.18 release. Use`numpy.sctypeDict` instead.\n\n* The `numpy.asscalar` function is deprecated. It is an alias to the more\n  powerful `numpy.ndarray.item`, not tested, and fails for scalars.\n\n* The `numpy.set_array_ops` and `numpy.get_array_ops` functions are deprecated.\n  As part of `NEP 15`, they have been deprecated along with the C-API functions\n  :c:func:`PyArray_SetNumericOps` and :c:func:`PyArray_GetNumericOps`. Users\n  who wish to override the inner loop functions in built-in ufuncs should use\n  :c:func:`PyUFunc_ReplaceLoopBySignature`.\n\n* The `numpy.unravel_index` keyword argument ``dims`` is deprecated, use\n  ``shape`` instead.\n\n* The `numpy.histogram` ``normed`` argument is deprecated.  It was deprecated\n  previously, but no warning was issued.\n\n* The ``positive`` operator (``+``) applied to non-numerical arrays is\n  deprecated. See below for details.\n\n* Passing an iterator to the stack functions is deprecated\n\n\nExpired deprecations\n====================\n\n* NaT comparisons now return ``False`` without a warning, finishing a\n  deprecation cycle begun in NumPy 1.11.\n\n* ``np.lib.function_base.unique`` was removed, finishing a deprecation cycle\n  begun in NumPy 1.4. Use `numpy.unique` instead.\n\n* multi-field indexing now returns views instead of copies, finishing a\n  deprecation cycle begun in NumPy 1.7. The change was previously attempted in\n  NumPy 1.14 but reverted until now.\n\n* ``np.PackageLoader`` and ``np.pkgload`` have been removed. These were\n  deprecated in 1.10, had no tests, and seem to no longer work in 1.15.\n\n\nFuture changes\n==============\n\n* NumPy 1.17 will drop support for Python 2.7.\n\n\nCompatibility notes\n===================\n\nf2py script on Windows\n- ----------------------\nOn Windows, the installed script for running f2py is now an ``.exe`` file\nrather than a ``*.py`` file and should be run from the command line as ``f2py``\nwhenever the ``Scripts`` directory is in the path. Running ``f2py`` as a module\n``python -m numpy.f2py [...]`` will work without path modification in any\nversion of NumPy.\n\nNaT comparisons\n- ---------------\nConsistent with the behavior of NaN, all comparisons other than inequality\nchecks with datetime64 or timedelta64 NaT (\"not-a-time\") values now always\nreturn ``False``, and inequality checks with NaT now always return ``True``.\nThis includes comparisons beteween NaT values. For compatibility with the\nold behavior, use ``np.isnat`` to explicitly check for NaT or convert\ndatetime64/timedelta64 arrays with ``.astype(np.int64)`` before making\ncomparisons.\n\ncomplex64/128 alignment has changed\n- -----------------------------------\nThe memory alignment of complex types is now the same as a C-struct composed of\ntwo floating point values, while before it was equal to the size of the type.\nFor many users (for instance on x64/unix/gcc) this means that complex64 is now\n4-byte aligned instead of 8-byte aligned. An important consequence is that\naligned structured dtypes may now have a different size. For instance,\n``np.dtype('c8,u1', align=True)`` used to have an itemsize of 16 (on x64/gcc)\nbut now it is 12.\n\nMore in detail, the complex64 type now has the same alignment as a C-struct\n``struct {float r, i;}``, according to the compiler used to compile numpy, and\nsimilarly for the complex128 and complex256 types.\n\nnd_grid __len__ removal\n- -----------------------\n``len(np.mgrid)`` and ``len(np.ogrid)`` are now considered nonsensical\nand raise a ``TypeError``.\n\n``np.unravel_index`` now accepts ``shape`` keyword argument\n- -----------------------------------------------------------\nPreviously, only the ``dims`` keyword argument was accepted\nfor specification of the shape of the array to be used\nfor unraveling. ``dims`` remains supported, but is now deprecated.\n\nmulti-field views return a view instead of a copy\n- -------------------------------------------------\nIndexing a structured array with multiple fields, e.g., ``arr[['f1', 'f3']]``,\nreturns a view into the original array instead of a copy. The returned view\nwill often have extra padding bytes corresponding to intervening fields in the\noriginal array, unlike before, which will affect code such as\n``arr[['f1', 'f3']].view('float64')``. This change has been planned since numpy\n1.7. Operations hitting this path have emitted ``FutureWarnings`` since then.\nAdditional ``FutureWarnings`` about this change were added in 1.12.\n\nTo help users update their code to account for these changes, a number of\nfunctions have been added to the ``numpy.lib.recfunctions`` module which\nsafely allow such operations. For instance, the code above can be replaced\nwith ``structured_to_unstructured(arr[['f1', 'f3']], dtype='float64')``.\nSee the \"accessing multiple fields\" section of the\n`user guide <https://docs.scipy.org/doc/numpy/user/basics.rec.html#accessing-multiple-fields>`__.\n\n\nC API changes\n=============\n\nThe :c:data:`NPY_API_VERSION` was incremented to 0x0000D, due to the addition\nof:\n\n* :c:member:`PyUFuncObject.core_dim_flags`\n* :c:member:`PyUFuncObject.core_dim_sizes`\n* :c:member:`PyUFuncObject.identity_value`\n* :c:function:`PyUFunc_FromFuncAndDataAndSignatureAndIdentity`\n\n\nNew Features\n============\n\nIntegrated squared error (ISE) estimator added to ``histogram``\n- ---------------------------------------------------------------\nThis method (``bins='stone'``) for optimizing the bin number is a\ngeneralization of the Scott's rule. The Scott's rule assumes the distribution\nis approximately Normal, while the ISE_ is a non-parametric method based on\ncross-validation.\n\n.. _ISE: https://en.wikipedia.org/wiki/Histogram#Minimizing_cross-validation_estimated_squared_error\n\n``max_rows`` keyword added for ``np.loadtxt``\n- ---------------------------------------------\nNew keyword ``max_rows`` in `numpy.loadtxt` sets the maximum rows of the\ncontent to be read after ``skiprows``, as in `numpy.genfromtxt`.\n\nmodulus operator support added for ``np.timedelta64`` operands\n- --------------------------------------------------------------\nThe modulus (remainder) operator is now supported for two operands\nof type ``np.timedelta64``. The operands may have different units\nand the return value will match the type of the operands.\n\n\nImprovements\n============\n\nno-copy pickling of numpy arrays\n- --------------------------------\nUp to protocol 4, numpy array pickling created 2 spurious copies of the data\nbeing serialized.  With pickle protocol 5, and the ``PickleBuffer`` API, a\nlarge variety of numpy arrays can now be serialized without any copy using\nout-of-band buffers, and with one less copy using in-band buffers. This\nresults, for large arrays, in an up to 66% drop in peak memory usage.\n\nbuild shell independence\n- ------------------------\nNumPy builds should no longer interact with the host machine\nshell directly. ``exec_command`` has been replaced with\n``subprocess.check_output`` where appropriate.\n\n`np.polynomial.Polynomial` classes render in LaTeX in Jupyter notebooks\n- -----------------------------------------------------------------------\nWhen used in a front-end that supports it, `Polynomial` instances are now\nrendered through LaTeX. The current format is experimental, and is subject to\nchange.\n\n``randint`` and ``choice`` now work on empty distributions\n- ----------------------------------------------------------\nEven when no elements needed to be drawn, ``np.random.randint`` and\n``np.random.choice`` raised an error when the arguments described an empty\ndistribution. This has been fixed so that e.g.\n``np.random.choice([], 0) == np.array([], dtype=float64)``.\n\n``linalg.lstsq``, ``linalg.qr``, and ``linalg.svd`` now work with empty arrays\n- ------------------------------------------------------------------------------\nPreviously, a ``LinAlgError`` would be raised when an empty matrix/empty\nmatrices (with zero rows and/or columns) is/are passed in. Now outputs of\nappropriate shapes are returned.\n\nChain exceptions to give better error messages for invalid PEP3118 format strings\n- ---------------------------------------------------------------------------------\nThis should help track down problems.\n\nEinsum optimization path updates and efficiency improvements\n- ------------------------------------------------------------\nEinsum was synchronized with the current upstream work.\n\n`numpy.angle` and `numpy.expand_dims` now work on ``ndarray`` subclasses\n- ------------------------------------------------------------------------\nIn particular, they now work for masked arrays.\n\n``NPY_NO_DEPRECATED_API`` compiler warning suppression\n- ------------------------------------------------------\nSetting ``NPY_NO_DEPRECATED_API`` to a value of 0 will suppress the current compiler\nwarnings when the deprecated numpy API is used.\n\n``np.diff`` Added kwargs prepend and append\n- -------------------------------------------\nNew kwargs ``prepend`` and ``append``, allow for values to be inserted on\neither end of the differences.  Similar to options for `ediff1d`. Now the\ninverse of `cumsum` can be obtained easily via ``prepend=0``.\n\nARM support updated\n- -------------------\nSupport for ARM CPUs has been updated to accommodate 32 and 64 bit targets,\nand also big and little endian byte ordering. AARCH32 memory alignment issues\nhave been addressed. CI testing has been expanded to include AARCH64 targets\nvia the services of shippable.com.\n\nAppending to build flags\n- ------------------------\n`numpy.distutils` has always overridden rather than appended to `LDFLAGS` and\nother similar such environment variables for compiling Fortran extensions.\nNow, if the `NPY_DISTUTILS_APPEND_FLAGS` environment variable is set to 1, the\nbehavior will be appending.  This applied to: `LDFLAGS`, `F77FLAGS`,\n`F90FLAGS`, `FREEFLAGS`, `FOPT`, `FDEBUG`, and `FFLAGS`.  See gh-11525 for more\ndetails.\n\nGeneralized ufunc signatures now allow fixed-size dimensions\n- ------------------------------------------------------------\nBy using a numerical value in the signature of a generalized ufunc, one can\nindicate that the given function requires input or output to have dimensions\nwith the given size. E.g., the signature of a function that converts a polar\nangle to a two-dimensional cartesian unit vector would be ``()->(2)``; that\nfor one that converts two spherical angles to a three-dimensional unit vector\nwould be ``(),()->(3)``; and that for the cross product of two\nthree-dimensional vectors would be ``(3),(3)->(3)``.\n\nNote that to the elementary function these dimensions are not treated any\ndifferently from variable ones indicated with a name starting with a letter;\nthe loop still is passed the corresponding size, but it can now count on that\nsize being equal to the fixed one given in the signature.\n\nGeneralized ufunc signatures now allow flexible dimensions\n- ----------------------------------------------------------\nSome functions, in particular numpy's implementation of ```` as ``matmul``,\nare very similar to generalized ufuncs in that they operate over core\ndimensions, but one could not present them as such because they were able to\ndeal with inputs in which a dimension is missing. To support this, it is now\nallowed to postfix a dimension name with a question mark to indicate that the\ndimension does not necessarily have to be present.\n\nWith this addition, the signature for ``matmul`` can be expressed as\n``(m?,n),(n,p?)->(m?,p?)``.  This indicates that if, e.g., the second operand\nhas only one dimension, for the purposes of the elementary function it will be\ntreated as if that input has core shape ``(n, 1)``, and the output has the\ncorresponding core shape of ``(m, 1)``. The actual output array, however, has\nthe flexible dimension removed, i.e., it will have shape ``(..., m)``.\nSimilarly, if both arguments have only a single dimension, the inputs will be\npresented as having shapes ``(1, n)`` and ``(n, 1)`` to the elementary\nfunction, and the output as ``(1, 1)``, while the actual output array returned\nwill have shape ``()``. In this way, the signature allows one to use a\nsingle elementary function for four related but different signatures,\n``(m,n),(n,p)->(m,p)``, ``(n),(n,p)->(p)``, ``(m,n),(n)->(m)`` and\n``(n),(n)->()``.\n\n``np.clip`` and the ``clip`` method check for memory overlap\n- ------------------------------------------------------------\nThe ``out`` argument to these functions is now always tested for memory overlap\nto avoid corrupted results when memory overlap occurs.\n\nNew value ``unscaled`` for option ``cov`` in ``np.polyfit``\n- -----------------------------------------------------------\nA further possible value has been added to the ``cov`` parameter of the\n``np.polyfit`` function. With ``cov='unscaled'`` the scaling of the covariance\nmatrix is disabled completely (similar to setting ``absolute_sigma=True`` in\n``scipy.optimize.curve_fit``). This would be useful in occasions, where the\nweights are given by 1/sigma with sigma being the (known) standard errors of\n(Gaussian distributed) data points, in which case the unscaled matrix is\nalready a correct estimate for the covariance matrix.\n\nDetailed docstrings for scalar numeric types\n- --------------------------------------------\nThe ``help`` function, when applied to numeric types such as `numpy.intc`,\n`numpy.int_`, and `numpy.longlong`, now lists all of the aliased names for that\ntype, distinguishing between platform -dependent and -independent aliases.\n\n``__module__`` attribute now points to public modules\n- -----------------------------------------------------\nThe ``__module__`` attribute on most NumPy functions has been updated to refer\nto the preferred public module from which to access a function, rather than\nthe module in which the function happens to be defined. This produces more\ninformative displays for functions in tools such as IPython, e.g., instead of\n``<function 'numpy.core.fromnumeric.sum'>`` you now see\n``<function 'numpy.sum'>``.\n\nLarge allocations marked as suitable for transparent hugepages\n- --------------------------------------------------------------\nOn systems that support transparent hugepages over the madvise system call\nnumpy now marks that large memory allocations can be backed by hugepages which\nreduces page fault overhead and can in some fault heavy cases improve\nperformance significantly. On Linux the setting for huge pages to be used,\n`/sys/kernel/mm/transparent_hugepage/enabled`, must be at least `madvise`.\nSystems which already have it set to `always` will not see much difference as\nthe kernel will automatically use huge pages where appropriate.\n\nUsers of very old Linux kernels (~3.x and older) should make sure that\n`/sys/kernel/mm/transparent_hugepage/defrag` is not set to `always` to avoid\nperformance problems due concurrency issues in the memory defragmentation.\n\nAlpine Linux (and other musl c library distros) support\n- -------------------------------------------------------\nWe now default to use `fenv.h` for floating point status error reporting.\nPreviously we had a broken default that sometimes would not report underflow,\noverflow, and invalid floating point operations. Now we can support non-glibc\ndistrubutions like Alpine Linux as long as they ship `fenv.h`.\n\nSpeedup ``np.block`` for large arrays\n- -------------------------------------\nLarge arrays (greater than ``512 * 512``) now use a blocking algorithm based on\ncopying the data directly into the appropriate slice of the resulting array.\nThis results in significant speedups for these large arrays, particularly for\narrays being blocked along more than 2 dimensions.\n\n``arr.ctypes.data_as(...)`` holds a reference to arr\n~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\nPreviously the caller was responsible for keeping the array alive for the\nlifetime of the pointer.\n\nSpeedup ``np.take`` for read-only arrays\n- ----------------------------------------\nThe implementation of ``np.take`` no longer makes an unnecessary copy of the\nsource array when its ``writeable`` flag is set to ``False``.\n\nSupport path-like objects for more functions\n- --------------------------------------------\nThe ``np.core.records.fromfile`` function now supports ``pathlib.Path``\nand other path-like objects in addition to a file object. Furthermore, the\n``np.load`` function now also supports path-like objects when using memory\nmapping (``mmap_mode`` keyword argument).\n\nBetter behaviour of ufunc identities during reductions\n- ------------------------------------------------------\nUniversal functions have an ``.identity`` which is used when ``.reduce`` is\ncalled on an empty axis.\n\nAs of this release, the logical binary ufuncs, `logical_and`, `logical_or`,\nand `logical_xor`, now have ``identity`` s of type `bool`, where previously they\nwere of type `int`. This restores the 1.14 behavior of getting ``bool`` s when\nreducing empty object arrays with these ufuncs, while also keeping the 1.15\nbehavior of getting ``int`` s when reducing empty object arrays with arithmetic\nufuncs like ``add`` and ``multiply``.\n\nAdditionally, `logaddexp` now has an identity of ``-inf``, allowing it to be\ncalled on empty sequences, where previously it could not be.\n\nThis is possible thanks to the new\n:c:function:`PyUFunc_FromFuncAndDataAndSignatureAndIdentity`, which allows\narbitrary values to be used as identities now.\n\nImproved conversion from ctypes objects\n- ---------------------------------------\nNumpy has always supported taking a value or type from ``ctypes`` and\nconverting it into an array or dtype, but only behaved correctly for simpler\ntypes. As of this release, this caveat is lifted - now:\n\n* The ``_pack_`` attribute of ``ctypes.Structure``, used to emulate C's\n  ``__attribute__((packed))``, is respected.\n* Endianness of all ctypes objects is preserved\n* ``ctypes.Union`` is supported\n* Non-representable constructs raise exceptions, rather than producing\n  dangerously incorrect results:\n\n  * Bitfields are no longer interpreted as sub-arrays\n  * Pointers are no longer replaced with the type that they point to\n\nA new ``ndpointer.contents`` member\n- -----------------------------------\nThis matches the ``.contents`` member of normal ctypes arrays, and can be used\nto construct an ``np.array`` around the pointers contents.  This replaces\n``np.array(some_nd_pointer)``, which stopped working in 1.15.  As a side effect\nof this change, ``ndpointer`` now supports dtypes with overlapping fields and\npadding.\n\n``matmul`` is now a ``ufunc``\n- -----------------------------\n`numpy.matmul` is now a ufunc which means that both the function and the\n``__matmul__`` operator can now be overridden by ``__array_ufunc__``. Its\nimplementation has also changed. It uses the same BLAS routines as\n`numpy.dot`, ensuring its performance is similar for large matrices.\n\nStart and stop arrays for ``linspace``, ``logspace`` and ``geomspace``\n- ----------------------------------------------------------------------\nThese functions used to be limited to scalar stop and start values, but can\nnow take arrays, which will be properly broadcast and result in an output\nwhich has one axis prepended.  This can be used, e.g., to obtain linearly\ninterpolated points between sets of points.\n\nCI extended with additional services\n- ------------------------------------\nWe now use additional free CI services, thanks to the companies that provide:\n\n* Codecoverage testing via codecov.io\n* Arm testing via shippable.com\n* Additional test runs on azure pipelines\n\nThese are in addition to our continued use of travis, appveyor (for wheels) and\nLGTM\n\n\nChanges\n=======\n\nComparison ufuncs will now error rather than return NotImplemented\n- ------------------------------------------------------------------\nPreviously, comparison ufuncs such as ``np.equal`` would return\n`NotImplemented` if their arguments had structured dtypes, to help comparison\noperators such as ``__eq__`` deal with those.  This is no longer needed, as the\nrelevant logic has moved to the comparison operators proper (which thus do\ncontinue to return `NotImplemented` as needed). Hence, like all other ufuncs,\nthe comparison ufuncs will now error on structured dtypes.\n\nPositive will now raise a deprecation warning for non-numerical arrays\n- ----------------------------------------------------------------------\nPreviously, ``+array`` unconditionally returned a copy. Now, it will\nraise a ``DeprecationWarning`` if the array is not numerical (i.e.,\nif ``np.positive(array)`` raises a ``TypeError``. For ``ndarray``\nsubclasses that override the default ``__array_ufunc__`` implementation,\nthe ``TypeError`` is passed on.\n\n``NDArrayOperatorsMixin`` now implements matrix multiplication\n- --------------------------------------------------------------\nPreviously, ``np.lib.mixins.NDArrayOperatorsMixin`` did not implement the\nspecial methods for Python's matrix multiplication operator (````). This has\nchanged now that ``matmul`` is a ufunc and can be overridden using\n``__array_ufunc__``.\n\nThe scaling of the covariance matrix in ``np.polyfit`` is different\n- -------------------------------------------------------------------\nSo far, ``np.polyfit`` used a non-standard factor in the scaling of the the\ncovariance matrix. Namely, rather than using the standard ``chisq/(M-N)``, it\nscaled it with ``chisq/(M-N-2)`` where M is the number of data points and N is the\nnumber of parameters.  This scaling is inconsistent with other fitting programs\nsuch as e.g. ``scipy.optimize.curve_fit`` and was changed to ``chisq/(M-N)``.\n\n``maximum`` and ``minimum`` no longer emit warnings\n- ---------------------------------------------------\nAs part of code introduced in 1.10,  ``float32`` and ``float64`` set invalid\nfloat status when a Nan is encountered in `numpy.maximum` and `numpy.minimum`,\nwhen using SSE2 semantics. This caused a `RuntimeWarning` to sometimes be\nemitted. In 1.15 we fixed the inconsistencies which caused the warnings to\nbecome more conspicuous. Now no warnings will be emitted.\n\nUmath and multiarray c-extension modules merged into a single module\n- --------------------------------------------------------------------\nThe two modules were merged, according to `NEP 15`_. Previously `np.core.umath`\nand `np.core.multiarray` were seperate c-extension modules. They are now python\nwrappers to the single `np.core/_multiarray_math` c-extension module.\n\n.. _`NEP 15` : http://www.numpy.org/neps/nep-0015-merge-multiarray-umath.html\n\n``getfield`` validity checks extended\n- -------------------------------------\n`numpy.ndarray.getfield` now checks the dtype and offset arguments to prevent\naccessing invalid memory locations.\n\nNumPy functions now support overrides with ``__array_function__``\n- -----------------------------------------------------------------\nIt is now possible to override the implementation of almost all NumPy functions\non non-NumPy arrays by defining a ``__array_function__`` method, as described\nin `NEP 18`_. The sole exception are functions for explicitly casting to NumPy\narrays such as ``np.array``. As noted in the NEP, this feature remains\nexperimental and the details of how to implement such overrides may change in\nthe future.\n\n.. _`NEP 15` : http://www.numpy.org/neps/nep-0015-merge-multiarray-umath.html\n.. _`NEP 18` : http://www.numpy.org/neps/nep-0018-array-function-protocol.html\n\nArrays based off readonly buffers cannot be set ``writeable``\n- -------------------------------------------------------------\nWe now disallow setting the ``writeable`` flag True on arrays created\nfrom ``fromstring(readonly-buffer)``.\n\nChecksums\n=========\n\nMD5\n- ---\n\n    67d46af4e62111285f27a9c5731f16f9  numpy-1.16.0-cp27-cp27m-macosx_10_6_intel.macosx_10_9_intel.macosx_10_9_x86_64.macosx_10_10_intel.macosx_10_10_x86_64.whl\n    a1afdd521bf4480f4a5f43f39a345a80  numpy-1.16.0-cp27-cp27m-manylinux1_i686.whl\n    66d2e3fee4504c371da147a56fa9f900  numpy-1.16.0-cp27-cp27m-manylinux1_x86_64.whl\n    63648ca2ba0dae7f7f57cc8fc87f0fba  numpy-1.16.0-cp27-cp27m-win32.whl\n    9a53cf0c5e77f02ea9b5ff3587a1f8ac  numpy-1.16.0-cp27-cp27m-win_amd64.whl\n    7253e6e78dc1ae134abcf40201ca73ad  numpy-1.16.0-cp27-cp27mu-manylinux1_i686.whl\n    c47496091e10e31eeb9d9b07f3136237  numpy-1.16.0-cp27-cp27mu-manylinux1_x86_64.whl\n    048918abcf3936c947d06f1ee629757e  numpy-1.16.0-cp35-cp35m-macosx_10_6_intel.macosx_10_9_intel.macosx_10_9_x86_64.macosx_10_10_intel.macosx_10_10_x86_64.whl\n    968ea61a147bd500b5d858b91ccf709d  numpy-1.16.0-cp35-cp35m-manylinux1_i686.whl\n    ee52de6e269576f468285b0f45fe9618  numpy-1.16.0-cp35-cp35m-manylinux1_x86_64.whl\n    608e1d02d014bda5c4081881a25f9fbc  numpy-1.16.0-cp35-cp35m-win32.whl\n    4ed0e6114562eefb75da7aadc3db4f8a  numpy-1.16.0-cp35-cp35m-win_amd64.whl\n    809ed96a113cf46e81ae50c9703e7a5c  numpy-1.16.0-cp36-cp36m-macosx_10_6_intel.macosx_10_9_intel.macosx_10_9_x86_64.macosx_10_10_intel.macosx_10_10_x86_64.whl\n    26ceb7aa63fa82bc444e69156444fe6f  numpy-1.16.0-cp36-cp36m-manylinux1_i686.whl\n    5877c113fcd82198ad2285e3074a089c  numpy-1.16.0-cp36-cp36m-manylinux1_x86_64.whl\n    2ce0cc7d22e3f94e51315c1df4fd81bd  numpy-1.16.0-cp36-cp36m-win32.whl\n    b1e5a08c6a85c8a51f8039b3dc3dad3d  numpy-1.16.0-cp36-cp36m-win_amd64.whl\n    748fe792a69f79b0c3a926139b23bdbc  numpy-1.16.0-cp37-cp37m-macosx_10_6_intel.macosx_10_9_intel.macosx_10_9_x86_64.macosx_10_10_intel.macosx_10_10_x86_64.whl\n    d424c537c28510340f06a317608d7743  numpy-1.16.0-cp37-cp37m-manylinux1_i686.whl\n    8d87c0b1f8d7ad46b1976328d6c66cef  numpy-1.16.0-cp37-cp37m-manylinux1_x86_64.whl\n    25da2b41f81d4862bb36a07218477ea6  numpy-1.16.0-cp37-cp37m-win32.whl\n    22af7b6ff2da30fca2334886fdbf8573  numpy-1.16.0-cp37-cp37m-win_amd64.whl\n    d30393335b59081555fa29c680ab4784  numpy-1.16.0.tar.gz\n    90b5ec981eb9746785f43e9bfc003fed  numpy-1.16.0.zip\n\nSHA256\n- ------\n\n    a80ecac5664f420556a725a5646f2d1c60a7c0489d68a38b5056393e949e27ac  numpy-1.16.0-cp27-cp27m-macosx_10_6_intel.macosx_10_9_intel.macosx_10_9_x86_64.macosx_10_10_intel.macosx_10_10_x86_64.whl\n    be43df2c563e264b38e3318574d80fc8f365df3fb745270934d2dbe54e006f41  numpy-1.16.0-cp27-cp27m-manylinux1_i686.whl\n    f00a2c21f60284e024bba351875f3501c6d5817d64997a0afe4f4355161a8889  numpy-1.16.0-cp27-cp27m-manylinux1_x86_64.whl\n    5774d49516c37fd3fc1f232e033d2b152f3323ca4c7bfefd7277e4c67f3c08b4  numpy-1.16.0-cp27-cp27m-win32.whl\n    25600e8901012180a1b7cd1ac3e27e7793586ecd432383191929ac2edf37ff5d  numpy-1.16.0-cp27-cp27m-win_amd64.whl\n    803b2af862dcad6c11231ea3cd1015d1293efd6c87088be33d713a9b23e9e419  numpy-1.16.0-cp27-cp27mu-manylinux1_i686.whl\n    24a9c287a4a1c427c2d45bf7c4fc6180c52a08fa0990d4c94e4c86a9b1e23ba5  numpy-1.16.0-cp27-cp27mu-manylinux1_x86_64.whl\n    96e49a0c82b4e3130093002f625545104037c2d25866fa2e0c90d6e54f5a1fbc  numpy-1.16.0-cp35-cp35m-macosx_10_6_intel.macosx_10_9_intel.macosx_10_9_x86_64.macosx_10_10_intel.macosx_10_10_x86_64.whl\n    a1dd8221f0e69038748f47b8bb3248d0b9ecdf13fe837440951c3d5ff72639bb  numpy-1.16.0-cp35-cp35m-manylinux1_i686.whl\n    3e90a9fce378114b6c2fc01fff7423300515c7b54b7cc71b02a22bc0bd7dfdd8  numpy-1.16.0-cp35-cp35m-manylinux1_x86_64.whl\n    0470c5dc32212a08ebc2405f32e8ceb9a5b1c8ac61a2daf9835ec0856a220495  numpy-1.16.0-cp35-cp35m-win32.whl\n    c40cb17188f6ae3c5b6efc6f0fd43a7ddd219b7807fe179e71027849a9b91afc  numpy-1.16.0-cp35-cp35m-win_amd64.whl\n    00a458d6821b1e87be873f2126d5646b901047a7480e8ae9773ecf214f0e19f3  numpy-1.16.0-cp36-cp36m-macosx_10_6_intel.macosx_10_9_intel.macosx_10_9_x86_64.macosx_10_10_intel.macosx_10_10_x86_64.whl\n    f1232f98a6bbd6d1678249f94028bccc541bbc306aa5c4e1471a881b0e5a3409  numpy-1.16.0-cp36-cp36m-manylinux1_i686.whl\n    2d279bd99329e72c30937bdef82b6dc7779c7607c5a379bab1bf76be1f4c1422  numpy-1.16.0-cp36-cp36m-manylinux1_x86_64.whl\n    95c830b09626508f7808ce7f1344fb98068e63143e6050e5dc3063142fc60007  numpy-1.16.0-cp36-cp36m-win32.whl\n    ef4ae41add536cb825d8aa029c15ef510aead06ea5b68daea64f0b9ecbff17db  numpy-1.16.0-cp36-cp36m-win_amd64.whl\n    32af2bcf4bb7631dac19736a6e092ec9715e770dcaa1f85fcd99dec5040b2a4d  numpy-1.16.0-cp37-cp37m-macosx_10_6_intel.macosx_10_9_intel.macosx_10_9_x86_64.macosx_10_10_intel.macosx_10_10_x86_64.whl\n    c6251e0f0ecac53ba2b99d9f0cc16fa9021914a78869c38213c436ba343641f0  numpy-1.16.0-cp37-cp37m-manylinux1_i686.whl\n    b19a47ff1bd2fca0cacdfa830c967746764c32dca6a0c0328d9c893f4bfe2f6b  numpy-1.16.0-cp37-cp37m-manylinux1_x86_64.whl\n    fea682f6ddc09517df0e6d5caad9613c6d91a42232aeb082df67e4d205de19cc  numpy-1.16.0-cp37-cp37m-win32.whl\n    64ff21aac30d40c20ba994c94a08d439b8ced3b9c704af897e9e4ba09d10e62c  numpy-1.16.0-cp37-cp37m-win_amd64.whl\n    9b98898687b5dd05c4ac7bcf7e8669a50dd2bb19591b772e045e5806c23e0ca4  numpy-1.16.0.tar.gz\n    cb189bd98b2e7ac02df389b6212846ab20661f4bafe16b5a70a6f1728c1cc7cb  numpy-1.16.0.zip\n-----BEGIN PGP SIGNATURE-----\n\niQEcBAEBAgAGBQJcO/U7AAoJEGefIoN3xSR7hAwH/03g71NpxgBWq9EX5QMwhR9G\nIrlDTxCs7wfiQiYvKbwe6gmEQojO7uQW3lWK5Pb+Tl/h2QeIMKjN3nZK823ifc6D\nKPyliXNYb5p+iFNEoLcYcyuusWt6+3dWSI2QV+iKnxPyFA647m/u8IhsPfMuC/F2\nUzltB13Y2Le63bl+Vc5IYpr5HgILZGnp+O46lgm0YuBDgyh3R8qajV+tpuRxwVBo\nh6aTwEQJGwIuygPdMvmnbnBlNZF2luZ0poAFeUeuMjbSXQgsNwTJyCEFJTnCbiLi\nWx4a8GXajvtyBcHzO8NKwrd5xZTcQnI5RTFiC7wTVXqtWBQab0WodTY7FD6/uRY=\n=AC5i\n-----END PGP SIGNATURE-----\n\n\n.. currentmodule:: numpy\n\n========================\nNumPy 1.24 Release Notes\n========================\nThe NumPy 1.24.0 release continues the ongoing work to improve the handling and\npromotion of dtypes, increase the execution speed, and clarify the\ndocumentation.  There are also a large number of new and expired deprecations\ndue to changes in promotion and cleanups. This might be called a deprecation\nrelease. Highlights are\n\n* Many new deprecations, check them out.\n* Many expired deprecations,\n* New F2PY features and fixes.\n* New \"dtype\" and \"casting\" keywords for stacking functions.\n\nSee below for the details,\n\n\nDeprecations\n============\n\nDeprecate fastCopyAndTranspose and PyArray_CopyAndTranspose\n-----------------------------------------------------------\nThe ``numpy.fastCopyAndTranspose`` function has been deprecated. Use the\ncorresponding copy and transpose methods directly::\n\n    arr.T.copy()\n\nThe underlying C function ``PyArray_CopyAndTranspose`` has also been deprecated\nfrom the NumPy C-API.\n\n(`gh-22313 <https://github.com/numpy/numpy/pull/22313>`__)\n\nConversion of out-of-bound Python integers\n------------------------------------------\nAttempting a conversion from a Python integer to a NumPy value will now always\ncheck whether the result can be represented by NumPy.  This means the following\nexamples will fail in the future and give a ``DeprecationWarning`` now::\n\n    np.uint8(-1)\n    np.array([3000], dtype=np.int8)\n\nMany of these did succeed before.  Such code was mainly useful for unsigned\nintegers with negative values such as ``np.uint8(-1)`` giving\n``np.iinfo(np.uint8).max``.\n\nNote that conversion between NumPy integers is unaffected, so that\n``np.array(-1).astype(np.uint8)`` continues to work and use C integer overflow\nlogic.\n\n(`gh-22393 <https://github.com/numpy/numpy/pull/22393>`__)\n\nDeprecate ``msort``\n-------------------\nThe ``numpy.msort`` function is deprecated. Use ``np.sort(a, axis=0)`` instead.\n\n(`gh-22456 <https://github.com/numpy/numpy/pull/22456>`__)\n\n``np.str0`` and similar are now deprecated\n------------------------------------------\nThe scalar type aliases ending in a 0 bit size: ``np.object0``, ``np.str0``,\n``np.bytes0``, ``np.void0``, ``np.int0``, ``np.uint0`` as well as ``np.bool8``\nare now deprecated and will eventually be removed.\n\n(`gh-22607 <https://github.com/numpy/numpy/pull/22607>`__)\n\n\nExpired deprecations\n====================\n\n* The ``normed`` keyword argument has been removed from\n  `np.histogram`, `np.histogram2d`, and `np.histogramdd`.\n  Use ``density`` instead.  If ``normed`` was passed by\n  position, ``density`` is now used.\n\n  (`gh-21645 <https://github.com/numpy/numpy/pull/21645>`__)\n\n* Ragged array creation will now always raise a ``ValueError`` unless\n  ``dtype=object`` is passed.  This includes very deeply nested sequences.\n\n  (`gh-22004 <https://github.com/numpy/numpy/pull/22004>`__)\n\n* Support for Visual Studio 2015 and earlier has been removed.\n\n* Support for the Windows Interix POSIX interop layer has been removed.\n\n  (`gh-22139 <https://github.com/numpy/numpy/pull/22139>`__)\n\n* Support for cygwin < 3.3 has been removed.\n\n  (`gh-22159 <https://github.com/numpy/numpy/pull/22159>`__)\n\n* The mini() method of ``np.ma.MaskedArray`` has been removed. Use either\n  ``np.ma.MaskedArray.min()`` or ``np.ma.minimum.reduce()``.\n\n* The single-argument form of ``np.ma.minimum`` and ``np.ma.maximum`` has been\n  removed. Use ``np.ma.minimum.reduce()`` or ``np.ma.maximum.reduce()``\n  instead.\n\n  (`gh-22228 <https://github.com/numpy/numpy/pull/22228>`__)\n\n* Passing dtype instances other than the canonical (mainly native byte-order)\n  ones to ``dtype=`` or ``signature=`` in ufuncs will now raise a\n  ``TypeError``.  We recommend passing the strings ``\"int8\"`` or scalar types\n  ``np.int8`` since the byte-order, datetime/timedelta unit, etc. are never\n  enforced.  (Initially deprecated in NumPy 1.21.)\n\n  (`gh-22540 <https://github.com/numpy/numpy/pull/22540>`__)\n\n* The ``dtype=`` argument to comparison ufuncs is now applied correctly.  That\n  means that only ``bool`` and ``object`` are valid values and ``dtype=object``\n  is enforced.\n\n  (`gh-22541 <https://github.com/numpy/numpy/pull/22541>`__)\n\n* The deprecation for the aliases ``np.object``, ``np.bool``, ``np.float``,\n  ``np.complex``, ``np.str``, and ``np.int`` is expired (introduces NumPy\n  1.20).  Some of these will now give a FutureWarning in addition to raising an\n  error since they will be mapped to the NumPy scalars in the future.\n\n  (`gh-22607 <https://github.com/numpy/numpy/pull/22607>`__)\n\n\nCompatibility notes\n===================\n\n``array.fill(scalar)`` may behave slightly different\n----------------------------------------------------\n``numpy.ndarray.fill`` may in some cases behave slightly different now due to\nthe fact that the logic is aligned with item assignment::\n\n    arr = np.array([1])   with any dtype/value\n    arr.fill(scalar)\n     is now identical to:\n    arr[0] = scalar\n\nPreviously casting may have produced slightly different answers when using\nvalues that could not be represented in the target ``dtype`` or when the target\nhad ``object`` dtype.\n\n(`gh-20924 <https://github.com/numpy/numpy/pull/20924>`__)\n\nSubarray to object cast now copies\n----------------------------------\nCasting a dtype that includes a subarray to an object will now ensure a copy of\nthe subarray.  Previously an unsafe view was returned::\n\n    arr = np.ones(3, dtype=[(\"f\", \"i\", 3)])\n    subarray_fields = arr.astype(object)[0]\n    subarray = subarray_fields[0]   \"f\" field\n\n    np.may_share_memory(subarray, arr)\n\nIs now always false.  While previously it was true for the specific cast.\n\n(`gh-21925 <https://github.com/numpy/numpy/pull/21925>`__)\n\nReturned arrays respect uniqueness of dtype kwarg objects\n---------------------------------------------------------\nWhen the ``dtype`` keyword argument is used with :py:func:`np.array()` or\n:py:func:`asarray()`, the dtype of the returned array now always exactly\nmatches the dtype provided by the caller.\n\nIn some cases this change means that a *view* rather than the input array is\nreturned.  The following is an example for this on 64bit Linux where ``long``\nand ``longlong`` are the same precision but different ``dtypes``::\n\n    >>> arr = np.array([1, 2, 3], dtype=\"long\")\n    >>> new_dtype = np.dtype(\"longlong\")\n    >>> new = np.asarray(arr, dtype=new_dtype)\n    >>> new.dtype is new_dtype\n    True\n    >>> new is arr\n    False\n\nBefore the change, the ``dtype`` did not match because ``new is arr`` was\n``True``.\n\n(`gh-21995 <https://github.com/numpy/numpy/pull/21995>`__)\n\nDLPack export raises ``BufferError``\n------------------------------------\nWhen an array buffer cannot be exported via DLPack a ``BufferError`` is now\nalways raised where previously ``TypeError`` or ``RuntimeError`` was raised.\nThis allows falling back to the buffer protocol or ``__array_interface__`` when\nDLPack was tried first.\n\n(`gh-22542 <https://github.com/numpy/numpy/pull/22542>`__)\n\nNumPy builds are no longer tested on GCC-6\n------------------------------------------\nUbuntu 18.04 is deprecated for GitHub actions and GCC-6 is not available on\nUbuntu 20.04, so builds using that compiler are no longer tested. We still test\nbuilds using GCC-7 and GCC-8.\n\n(`gh-22598 <https://github.com/numpy/numpy/pull/22598>`__)\n\n\nNew Features\n============\n\nNew attribute ``symbol`` added to polynomial classes\n----------------------------------------------------\nThe polynomial classes in the ``numpy.polynomial`` package have a new\n``symbol`` attribute which is used to represent the indeterminate of the\npolynomial.  This can be used to change the value of the variable when\nprinting::\n\n    >>> P_y = np.polynomial.Polynomial([1, 0, -1], symbol=\"y\")\n    >>> print(P_y)\n    1.0 + 0.0\u00b7y\u00b9 - 1.0\u00b7y\u00b2\n\nNote that the polynomial classes only support 1D polynomials, so operations\nthat involve polynomials with different symbols are disallowed when the result\nwould be multivariate::\n\n    >>> P = np.polynomial.Polynomial([1, -1])   default symbol is \"x\"\n    >>> P_z = np.polynomial.Polynomial([1, 1], symbol=\"z\")\n    >>> P * P_z\n    Traceback (most recent call last)\n       ...\n    ValueError: Polynomial symbols differ\n\nThe symbol can be any valid Python identifier. The default is ``symbol=x``,\nconsistent with existing behavior.\n\n(`gh-16154 <https://github.com/numpy/numpy/pull/16154>`__)\n\nF2PY support for Fortran ``character`` strings\n----------------------------------------------\nF2PY now supports wrapping Fortran functions with:\n\n* character (e.g. ``character x``)\n* character array (e.g. ``character, dimension(n) :: x``)\n* character string (e.g. ``character(len=10) x``)\n* and character string array (e.g. ``character(len=10), dimension(n, m) :: x``)\n\narguments, including passing Python unicode strings as Fortran character string\narguments.\n\n(`gh-19388 <https://github.com/numpy/numpy/pull/19388>`__)\n\nNew function ``np.show_runtime``\n--------------------------------\nA new function ``numpy.show_runtime`` has been added to display the runtime\ninformation of the machine in addition to ``numpy.show_config`` which displays\nthe build-related information.\n\n(`gh-21468 <https://github.com/numpy/numpy/pull/21468>`__)\n\n``strict`` option for ``testing.assert_array_equal``\n----------------------------------------------------\nThe ``strict`` option is now available for ``testing.assert_array_equal``.\nSetting ``strict=True`` will disable the broadcasting behaviour for scalars and\nensure that input arrays have the same data type.\n\n(`gh-21595 <https://github.com/numpy/numpy/pull/21595>`__)\n\nNew parameter ``equal_nan`` added to ``np.unique``\n--------------------------------------------------\n``np.unique`` was changed in 1.21 to treat all ``NaN`` values as equal and\nreturn a single ``NaN``. Setting ``equal_nan=False`` will restore pre-1.21\nbehavior to treat ``NaNs`` as unique. Defaults to ``True``.\n\n(`gh-21623 <https://github.com/numpy/numpy/pull/21623>`__)\n\n``casting`` and ``dtype`` keyword arguments for ``numpy.stack``\n---------------------------------------------------------------\nThe ``casting`` and ``dtype`` keyword arguments are now available for\n``numpy.stack``.  To use them, write ``np.stack(..., dtype=None,\ncasting='same_kind')``.\n\n``casting`` and ``dtype`` keyword arguments for ``numpy.vstack``\n----------------------------------------------------------------\nThe ``casting`` and ``dtype`` keyword arguments are now available for\n``numpy.vstack``.  To use them, write ``np.vstack(..., dtype=None,\ncasting='same_kind')``.\n\n``casting`` and ``dtype`` keyword arguments for ``numpy.hstack``\n----------------------------------------------------------------\nThe ``casting`` and ``dtype`` keyword arguments are now available for\n``numpy.hstack``.  To use them, write ``np.hstack(..., dtype=None,\ncasting='same_kind')``.\n\n(`gh-21627 <https://github.com/numpy/numpy/pull/21627>`__)\n\nThe bit generator underlying the singleton RandomState can be changed\n---------------------------------------------------------------------\nThe singleton ``RandomState`` instance exposed in the ``numpy.random`` module\nis initialized at startup with the ``MT19937`` bit generator. The new function\n``set_bit_generator`` allows the default bit generator to be replaced with a\nuser-provided bit generator. This function has been introduced to provide a\nmethod allowing seamless integration of a high-quality, modern bit generator in\nnew code with existing code that makes use of the singleton-provided random\nvariate generating functions. The companion function ``get_bit_generator``\nreturns the current bit generator being used by the singleton ``RandomState``.\nThis is provided to simplify restoring the original source of randomness if\nrequired.\n\nThe preferred method to generate reproducible random numbers is to use a modern\nbit generator in an instance of ``Generator``. The function ``default_rng``\nsimplifies instantiation::\n\n   >>> rg = np.random.default_rng(3728973198)\n   >>> rg.random()\n\nThe same bit generator can then be shared with the singleton instance so that\ncalling functions in the ``random`` module will use the same bit generator::\n\n   >>> orig_bit_gen = np.random.get_bit_generator()\n   >>> np.random.set_bit_generator(rg.bit_generator)\n   >>> np.random.normal()\n\nThe swap is permanent (until reversed) and so any call to functions in the\n``random`` module will use the new bit generator. The original can be restored\nif required for code to run correctly::\n\n   >>> np.random.set_bit_generator(orig_bit_gen)\n\n(`gh-21976 <https://github.com/numpy/numpy/pull/21976>`__)\n\n``np.void`` now has a ``dtype`` argument\n----------------------------------------\nNumPy now allows constructing structured void scalars directly by\npassing the ``dtype`` argument to ``np.void``.\n\n(`gh-22316 <https://github.com/numpy/numpy/pull/22316>`__)\n\n\nImprovements\n============\n\nF2PY Improvements\n-----------------\n* The generated extension modules don't use the deprecated NumPy-C API anymore\n* Improved ``f2py`` generated exception messages\n* Numerous bug and ``flake8`` warning fixes\n* various CPP macros that one can use within C-expressions of signature files\n  are prefixed with ``f2py_``. For example, one should use ``f2py_len(x)``\n  instead of ``len(x)``\n* A new construct ``character(f2py_len=...)`` is introduced to support\n  returning assumed length character strings (e.g. ``character(len=*)``) from\n  wrapper functions\n\nA hook to support rewriting ``f2py`` internal data structures after reading all\nits input files is introduced. This is required, for instance, for BC of SciPy\nsupport where character arguments are treated as character strings arguments in\n``C`` expressions.\n\n(`gh-19388 <https://github.com/numpy/numpy/pull/19388>`__)\n\nIBM zSystems Vector Extension Facility (SIMD)\n---------------------------------------------\nAdded support for SIMD extensions of zSystem (z13, z14, z15), through the\nuniversal intrinsics interface. This support leads to performance improvements\nfor all SIMD kernels implemented using the universal intrinsics, including the\nfollowing operations: rint, floor, trunc, ceil, sqrt, absolute, square,\nreciprocal, tanh, sin, cos, equal, not_equal, greater, greater_equal, less,\nless_equal, maximum, minimum, fmax, fmin, argmax, argmin, add, subtract,\nmultiply, divide.\n\n(`gh-20913 <https://github.com/numpy/numpy/pull/20913>`__)\n\nNumPy now gives floating point errors in casts\n----------------------------------------------\nIn most cases, NumPy previously did not give floating point warnings or errors\nwhen these happened during casts.  For examples, casts like::\n\n    np.array([2e300]).astype(np.float32)   overflow for float32\n    np.array([np.inf]).astype(np.int64)\n\nShould now generally give floating point warnings.  These warnings should warn\nthat floating point overflow occurred.  For errors when converting floating\npoint values to integers users should expect invalid value warnings.\n\nUsers can modify the behavior of these warnings using ``np.errstate``.\n\nNote that for float to int casts, the exact warnings that are given may\nbe platform dependent.  For example::\n\n    arr = np.full(100, value=1000, dtype=np.float64)\n    arr.astype(np.int8)\n\nMay give a result equivalent to (the intermediate cast means no warning is\ngiven)::\n\n    arr.astype(np.int64).astype(np.int8)\n\nMay return an undefined result, with a warning set::\n\n    RuntimeWarning: invalid value encountered in cast\n\nThe precise behavior is subject to the C99 standard and its implementation in\nboth software and hardware.\n\n(`gh-21437 <https://github.com/numpy/numpy/pull/21437>`__)\n\nF2PY supports the value attribute\n---------------------------------\nThe Fortran standard requires that variables declared with the ``value``\nattribute must be passed by value instead of reference. F2PY now supports this\nuse pattern correctly. So ``integer, intent(in), value :: x`` in Fortran codes\nwill have correct wrappers generated.\n\n(`gh-21807 <https://github.com/numpy/numpy/pull/21807>`__)\n\nAdded pickle support for third-party BitGenerators\n--------------------------------------------------\nThe pickle format for bit generators was extended to allow each bit generator\nto supply its own constructor when during pickling. Previous  versions of NumPy\nonly supported unpickling ``Generator`` instances created with one of the core\nset of bit generators supplied with NumPy. Attempting to unpickle a\n``Generator`` that used a third-party bit generators would fail since the\nconstructor used during the unpickling was only aware of the bit generators\nincluded in NumPy.\n\n(`gh-22014 <https://github.com/numpy/numpy/pull/22014>`__)\n\narange() now explicitly fails with dtype=str\n---------------------------------------------\nPreviously, the ``np.arange(n, dtype=str)`` function worked for ``n=1`` and\n``n=2``, but would raise a non-specific exception message for other values of\n``n``. Now, it raises a `TypeError` informing that ``arange`` does not support\nstring dtypes::\n\n    >>> np.arange(2, dtype=str)\n    Traceback (most recent call last)\n       ...\n    TypeError: arange() not supported for inputs with DType <class 'numpy.dtype[str_]'>.\n\n(`gh-22055 <https://github.com/numpy/numpy/pull/22055>`__)\n\n``numpy.typing`` protocols are now runtime checkable\n----------------------------------------------------\nThe protocols used in ``numpy.typing.ArrayLike`` and ``numpy.typing.DTypeLike``\nare now properly marked as runtime checkable, making them easier to use for\nruntime type checkers.\n\n(`gh-22357 <https://github.com/numpy/numpy/pull/22357>`__)\n\n\nPerformance improvements and changes\n====================================\n\nFaster version of ``np.isin`` and ``np.in1d`` for integer arrays\n----------------------------------------------------------------\n``np.in1d`` (used by ``np.isin``) can now switch to a faster algorithm (up to\n>10x faster) when it is passed two integer arrays.  This is often automatically\nused, but you can use ``kind=\"sort\"`` or ``kind=\"table\"`` to force the old or\nnew method, respectively.\n\n(`gh-12065 <https://github.com/numpy/numpy/pull/12065>`__)\n\nFaster comparison operators\n----------------------------\nThe comparison functions (``numpy.equal``, ``numpy.not_equal``, ``numpy.less``,\n``numpy.less_equal``, ``numpy.greater`` and ``numpy.greater_equal``) are now\nmuch faster as they are now vectorized with universal intrinsics. For a CPU\nwith SIMD extension AVX512BW, the performance gain is up to 2.57x, 1.65x and\n19.15x for integer, float and boolean data types, respectively (with N=50000).\n\n(`gh-21483 <https://github.com/numpy/numpy/pull/21483>`__)\n\n\nChanges\n=======\n\nBetter reporting of integer division overflow\n---------------------------------------------\nInteger division overflow of scalars and arrays used to provide a\n``RuntimeWarning`` and the return value was undefined leading to crashes at\nrare occasions::\n\n    >>> np.array([np.iinfo(np.int32).min]*10, dtype=np.int32) // np.int32(-1)\n    <stdin>:1: RuntimeWarning: divide by zero encountered in floor_divide\n    array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0], dtype=int32)\n\nInteger division overflow now returns the input dtype's minimum value and raise\nthe following ``RuntimeWarning``::\n\n    >>> np.array([np.iinfo(np.int32).min]*10, dtype=np.int32) // np.int32(-1)\n    <stdin>:1: RuntimeWarning: overflow encountered in floor_divide\n    array([-2147483648, -2147483648, -2147483648, -2147483648, -2147483648,\n           -2147483648, -2147483648, -2147483648, -2147483648, -2147483648],\n          dtype=int32)\n\n(`gh-21506 <https://github.com/numpy/numpy/pull/21506>`__)\n\n``masked_invalid`` now modifies the mask in-place\n-------------------------------------------------\nWhen used with ``copy=False``, ``numpy.ma.masked_invalid`` now modifies the\ninput masked array in-place.  This makes it behave identically to\n``masked_where`` and better matches the documentation.\n\n(`gh-22046 <https://github.com/numpy/numpy/pull/22046>`__)\n\n``nditer``/``NpyIter`` allows all allocating all operands\n---------------------------------------------------------\nThe NumPy iterator available through ``np.nditer`` in Python and as ``NpyIter``\nin C now supports allocating all arrays.  The iterator shape defaults to ``()``\nin this case.  The operands dtype must be provided, since a \"common dtype\"\ncannot be inferred from the other inputs.\n\n(`gh-22457 <https://github.com/numpy/numpy/pull/22457>`__)\n\nChecksums\n=========\n\nMD5\n---\n::\n\n    1f08c901040ebe1324d16cfc71fe3cd2  numpy-1.24.0rc1-cp310-cp310-macosx_10_9_x86_64.whl\n    d35a59a1ccf1542d690860ad85fbb0f0  numpy-1.24.0rc1-cp310-cp310-macosx_11_0_arm64.whl\n    c7db37964986d7b9756fd1aa077b7e72  numpy-1.24.0rc1-cp310-cp310-manylinux_2_17_aarch64.manylinux2014_aarch64.whl\n    72c2dad61fc86c4d87e23d0de975e0b6  numpy-1.24.0rc1-cp310-cp310-manylinux_2_17_x86_64.manylinux2014_x86_64.whl\n    3c769f1089253266d7a522144696bde3  numpy-1.24.0rc1-cp310-cp310-win32.whl\n    96226a2045063b9caff40fe2a2098e72  numpy-1.24.0rc1-cp310-cp310-win_amd64.whl\n    b20897446f52e7fcde80e12c7cc1dc1e  numpy-1.24.0rc1-cp311-cp311-macosx_10_9_x86_64.whl\n    9cafe21759e90c705533d1f3201d35aa  numpy-1.24.0rc1-cp311-cp311-macosx_11_0_arm64.whl\n    0e8621d07dae7ffaba6cfe83f7288042  numpy-1.24.0rc1-cp311-cp311-manylinux_2_17_aarch64.manylinux2014_aarch64.whl\n    0c67808eed6ba6f9e9074e6f11951f09  numpy-1.24.0rc1-cp311-cp311-manylinux_2_17_x86_64.manylinux2014_x86_64.whl\n    1065bea5d0670360353e698093954e35  numpy-1.24.0rc1-cp311-cp311-win32.whl\n    fe2122ec86b45e00b648071ee2931fbc  numpy-1.24.0rc1-cp311-cp311-win_amd64.whl\n    ab3e8424a04338d43ed466ade66de7a8  numpy-1.24.0rc1-cp38-cp38-macosx_10_9_x86_64.whl\n    fc6eac08a59c4efb3962d990ff94f2b7  numpy-1.24.0rc1-cp38-cp38-macosx_11_0_arm64.whl\n    3498ac93ae6abba813e5d76f86ae5356  numpy-1.24.0rc1-cp38-cp38-manylinux_2_17_x86_64.manylinux2014_x86_64.whl\n    629ce4b8cb011ff735ebd482fbf51702  numpy-1.24.0rc1-cp38-cp38-win32.whl\n    cb503a78e27f0f46b6b43d211275dc58  numpy-1.24.0rc1-cp38-cp38-win_amd64.whl\n    ffccdb9750336f5e55ab90c8eb7c1a8d  numpy-1.24.0rc1-cp39-cp39-macosx_10_9_x86_64.whl\n    9751b9f833238a7309ad4e6b43fa8cb5  numpy-1.24.0rc1-cp39-cp39-macosx_11_0_arm64.whl\n    cb8a10f411773f0ac5e06df067599d45  numpy-1.24.0rc1-cp39-cp39-manylinux_2_17_aarch64.manylinux2014_aarch64.whl\n    8d670816134824972afb512498b95ede  numpy-1.24.0rc1-cp39-cp39-manylinux_2_17_x86_64.manylinux2014_x86_64.whl\n    60687b97ab720f6be9e3542e5761769f  numpy-1.24.0rc1-cp39-cp39-win32.whl\n    11fd99748acc0726ac164034c32bb3cd  numpy-1.24.0rc1-cp39-cp39-win_amd64.whl\n    09e1d6f6d75facaf84d2b87a33874d4b  numpy-1.24.0rc1-pp38-pypy38_pp73-macosx_10_9_x86_64.whl\n    2da9ad07343b410aca4edf1285e4266b  numpy-1.24.0rc1-pp38-pypy38_pp73-manylinux_2_17_x86_64.manylinux2014_x86_64.whl\n    9a0e466a55632cc1d67db119f586cd05  numpy-1.24.0rc1-pp38-pypy38_pp73-win_amd64.whl\n    abc863895b02cdcc436474f6cdf2d14d  numpy-1.24.0rc1.tar.gz\n\nSHA256\n------\n::\n\n    36acf6043b94a0e8af75d0a1931678d20e673b83fd79798c805ebc995e233cff  numpy-1.24.0rc1-cp310-cp310-macosx_10_9_x86_64.whl\n    244c2c22f776e168e1060112f87717d73df2462e0eba4095a7673fe87db49b7a  numpy-1.24.0rc1-cp310-cp310-macosx_11_0_arm64.whl\n    730112e692c165e8ad69071c70653522ee19d8c8af2da839339de01013eeef24  numpy-1.24.0rc1-cp310-cp310-manylinux_2_17_aarch64.manylinux2014_aarch64.whl\n    960b0d980adfa5c37fea89fc556bb482f9d957a3188be46d03a00fa1bd8f617b  numpy-1.24.0rc1-cp310-cp310-manylinux_2_17_x86_64.manylinux2014_x86_64.whl\n    f54788f1a6941cb1b57bcf5ff09a281e5db75bbf9f2ac9534a626128ded0244f  numpy-1.24.0rc1-cp310-cp310-win32.whl\n    07fef63a5113969d7897589928870c57dd3e28671d617f688486f12c3a3b466a  numpy-1.24.0rc1-cp310-cp310-win_amd64.whl\n    aea88e02d9335052172f4d6c8163721c3edd086ea3bf3bc9b6d5c55661540f1b  numpy-1.24.0rc1-cp311-cp311-macosx_10_9_x86_64.whl\n    3950be11c03d250ea780280ce37a6fe7bd21dafcb478e08190c72b6c58ed7d18  numpy-1.24.0rc1-cp311-cp311-macosx_11_0_arm64.whl\n    743c30cda228f8be9fe552453870b412b38ac232972c617a0f18765dedf395a5  numpy-1.24.0rc1-cp311-cp311-manylinux_2_17_aarch64.manylinux2014_aarch64.whl\n    cab1335b70e24e88ef2b9f727b9f5fc6e0d31d9fe9da0213f6c28cf615b65db0  numpy-1.24.0rc1-cp311-cp311-manylinux_2_17_x86_64.manylinux2014_x86_64.whl\n    5283759f0dd905f9e62ed55775345fbb233a53146ceaf2f75e96d939f564ee79  numpy-1.24.0rc1-cp311-cp311-win32.whl\n    427bd9c45777e8baf782b6b33ebc26a88716c2d9b76b0474987660c2c066dca0  numpy-1.24.0rc1-cp311-cp311-win_amd64.whl\n    20edfad312395d1cb8ad6ca5d2c42d2dab057f5d1920af3f94c7a72103335d8a  numpy-1.24.0rc1-cp38-cp38-macosx_10_9_x86_64.whl\n    79134b92e1fb86915369753b3e64a359416cd98ea2329d270eb4e1d0ab300c0d  numpy-1.24.0rc1-cp38-cp38-macosx_11_0_arm64.whl\n    6f00858573e2316ac5d190cf81dc178d94579969f827ac34c7a53110428e6f72  numpy-1.24.0rc1-cp38-cp38-manylinux_2_17_x86_64.manylinux2014_x86_64.whl\n    a8d6f78be3ad0bd9b4adecba2fda570ef491ae69f8c7cc84acd382802a81e242  numpy-1.24.0rc1-cp38-cp38-win32.whl\n    f1f5fa912df64dd48ec55352b72f4b036ab7b3911e996703f436e17baca780f9  numpy-1.24.0rc1-cp38-cp38-win_amd64.whl\n    8d149b3c3062dc68e29bdb244edc30c5d80e2c654b5c27c32773bf7354452b48  numpy-1.24.0rc1-cp39-cp39-macosx_10_9_x86_64.whl\n    d177fbd4d22248640d73f07c3aac2cc1f79c412f61564452abd08606ee5e3713  numpy-1.24.0rc1-cp39-cp39-macosx_11_0_arm64.whl\n    05faa4ecb98d7bc593afc5b10c25f0e7dd65244b653756b083c605fbf60b9b67  numpy-1.24.0rc1-cp39-cp39-manylinux_2_17_aarch64.manylinux2014_aarch64.whl\n    06d8827c6fa511b61047376efc3a677d447193bf88e6bbde35b4e5223a4b58d6  numpy-1.24.0rc1-cp39-cp39-manylinux_2_17_x86_64.manylinux2014_x86_64.whl\n    15605b92bf10b10e110a9c0f1c4ef6cd58246532c62a0c3d3188c05e69cdcdb6  numpy-1.24.0rc1-cp39-cp39-win32.whl\n    8046f5c23769791be8432a592b9881984e0e4abc7f552c7e5c349420a27323e7  numpy-1.24.0rc1-cp39-cp39-win_amd64.whl\n    aa9c4a2f65d669e6559123154da944ad6bd7605cbba5cce81bf6794617870510  numpy-1.24.0rc1-pp38-pypy38_pp73-macosx_10_9_x86_64.whl\n    e44fd1bdfa50979ddec76318e21abc82ee3858e5f45dfc5153b6f660d9d29851  numpy-1.24.0rc1-pp38-pypy38_pp73-manylinux_2_17_x86_64.manylinux2014_x86_64.whl\n    1802199d70d9f8ac11eb63a1ef50d33915b78a84bacacaadb2896175005103d4  numpy-1.24.0rc1-pp38-pypy38_pp73-win_amd64.whl\n    d601180710004799acb8f80e564b84e71490fac9d84e115e2f5b0f6709754f16  numpy-1.24.0rc1.tar.gz\n\n\n.. currentmodule:: numpy\n\n==========================\n", "1.20.0": "==========================\nThis NumPy release is the largest so made to date, some 684 PRs contributed by\n184 people have been merged. See the list of highlights below for more details.\nThe Python versions supported for this release are 3.7-3.9, support for Python\n3.6 has been dropped. Highlights are\n\n- Annotations for NumPy functions. This work is ongoing and improvements can\n  be expected pending feedback from users.\n\n- Wider use of SIMD to increase execution speed of ufuncs. Much work has been\n  done in introducing universal functions that will ease use of modern\n  features across different hardware platforms. This work is ongoing.\n\n- Preliminary work in changing the dtype and casting implementations in order to\n  provide an easier path to extending dtypes. This work is ongoing but enough\n  has been done to allow experimentation and feedback.\n\n- Extensive documentation improvements comprising some 185 PR merges. This work\n  is ongoing and part of the larger project to improve NumPy's online presence\n  and usefulness to new users.\n\n- Further cleanups related to removing Python 2.7. This improves code\n  readability and removes technical debt.\n\n- Preliminary support for the upcoming Cython 3.0.\n\n\nNew functions\n=============\n\nThe random.Generator class has a new ``permuted`` function.\n-----------------------------------------------------------\nThe new function differs from ``shuffle`` and ``permutation`` in that the\nsubarrays indexed by an axis are permuted rather than the axis being treated as\na separate 1-D array for every combination of the other indexes. For example,\nit is now possible to permute the rows or columns of a 2-D array.\n\n(`gh-15121 <https://github.com/numpy/numpy/pull/15121>`__)\n\n``sliding_window_view`` provides a sliding window view for numpy arrays\n-----------------------------------------------------------------------\n`numpy.lib.stride_tricks.sliding_window_view` constructs views on numpy\narrays that offer a sliding or moving window access to the array. This allows\nfor the simple implementation of certain algorithms, such as running means.\n\n(`gh-17394 <https://github.com/numpy/numpy/pull/17394>`__)\n\n`numpy.broadcast_shapes` is a new user-facing function\n------------------------------------------------------\n`~numpy.broadcast_shapes` gets the resulting shape from\nbroadcasting the given shape tuples against each other.\n\n.. code:: python\n\n    >>> np.broadcast_shapes((1, 2), (3, 1))\n    (3, 2)\n\n    >>> np.broadcast_shapes(2, (3, 1))\n    (3, 2)\n\n    >>> np.broadcast_shapes((6, 7), (5, 6, 1), (7,), (5, 1, 7))\n    (5, 6, 7)\n\n(`gh-17535 <https://github.com/numpy/numpy/pull/17535>`__)\n\n\nDeprecations\n============\n\nUsing the aliases of builtin types like ``np.int`` is deprecated\n----------------------------------------------------------------\n\nFor a long time, ``np.int`` has been an alias of the builtin ``int``. This is\nrepeatedly a cause of confusion for newcomers, and existed mainly for historic\nreasons.\n\nThese aliases have been deprecated. The table below shows the full list of\ndeprecated aliases, along with their exact meaning. Replacing uses of items in\nthe first column with the contents of the second column will work identically\nand silence the deprecation warning.\n\nThe third column lists alternative NumPy names which may occasionally be\npreferential. See also :ref:`basics.types` for additional details.\n\n=================  ============  ==================================================================\nDeprecated name    Identical to  NumPy scalar type names\n=================  ============  ==================================================================\n``numpy.bool``     ``bool``      `numpy.bool_`\n``numpy.int``      ``int``       `numpy.int_` (default), ``numpy.int64``, or ``numpy.int32``\n``numpy.float``    ``float``     `numpy.float64`, `numpy.float_`, `numpy.double` (equivalent)\n``numpy.complex``  ``complex``   `numpy.complex128`, `numpy.complex_`, `numpy.cdouble` (equivalent)\n``numpy.object``   ``object``    `numpy.object_`\n``numpy.str``      ``str``       `numpy.str_`\n``numpy.long``     ``int``       `numpy.int_` (C ``long``), `numpy.longlong` (largest integer type)\n``numpy.unicode``  ``str``       `numpy.unicode_`\n=================  ============  ==================================================================\n\nTo give a clear guideline for the vast majority of cases, for the types\n``bool``, ``object``, ``str`` (and ``unicode``) using the plain version\nis shorter and clear, and generally a good replacement.\nFor ``float`` and ``complex`` you can use ``float64`` and ``complex128``\nif you wish to be more explicit about the precision.\n\nFor ``np.int`` a direct replacement with ``np.int_`` or ``int`` is also\ngood and will not change behavior, but the precision will continue to depend\non the computer and operating system.\nIf you want to be more explicit and review the current use, you have the\nfollowing alternatives:\n\n* ``np.int64`` or ``np.int32`` to specify the precision exactly.\n  This ensures that results cannot depend on the computer or operating system.\n* ``np.int_`` or ``int`` (the default), but be aware that it depends on\n  the computer and operating system.\n* The C types: ``np.cint`` (int), ``np.int_`` (long), ``np.longlong``.\n* ``np.intp`` which is 32bit on 32bit machines 64bit on 64bit machines.\n  This can be the best type to use for indexing.\n\nWhen used with ``np.dtype(...)`` or ``dtype=...`` changing it to the\nNumPy name as mentioned above will have no effect on the output.\nIf used as a scalar with::\n\n    np.float(123)\n\nchanging it can subtly change the result.  In this case, the Python version\n``float(123)`` or ``int(12.)`` is normally preferable, although the NumPy\nversion may be useful for consistency with NumPy arrays (for example,\nNumPy behaves differently for things like division by zero).\n\n(`gh-14882 <https://github.com/numpy/numpy/pull/14882>`__)\n\nPassing ``shape=None`` to functions with a non-optional shape argument is deprecated\n------------------------------------------------------------------------------------\nPreviously, this was an alias for passing ``shape=()``.\nThis deprecation is emitted by `PyArray_IntpConverter` in the C API. If your\nAPI is intended to support passing ``None``, then you should check for ``None``\nprior to invoking the converter, so as to be able to distinguish ``None`` and\n``()``.\n\n(`gh-15886 <https://github.com/numpy/numpy/pull/15886>`__)\n\nIndexing errors will be reported even when index result is empty\n----------------------------------------------------------------\nIn the future, NumPy will raise an IndexError when an\ninteger array index contains out of bound values even if a non-indexed\ndimension is of length 0. This will now emit a DeprecationWarning.\nThis can happen when the array is previously empty, or an empty\nslice is involved::\n\n    arr1 = np.zeros((5, 0))\n    arr1[[20]]\n    arr2 = np.zeros((5, 5))\n    arr2[[20], :0]\n\nPreviously the non-empty index ``[20]`` was not checked for correctness.\nIt will now be checked causing a deprecation warning which will be turned\ninto an error. This also applies to assignments.\n\n(`gh-15900 <https://github.com/numpy/numpy/pull/15900>`__)\n\nInexact matches for ``mode`` and ``searchside`` are deprecated\n--------------------------------------------------------------\nInexact and case insensitive matches for ``mode`` and ``searchside`` were valid\ninputs earlier and will give a DeprecationWarning now.  For example, below are\nsome example usages which are now deprecated and will give a\nDeprecationWarning::\n\n    import numpy as np\n    arr = np.array([[3, 6, 6], [4, 5, 1]])\n     mode: inexact match\n    np.ravel_multi_index(arr, (7, 6), mode=\"clap\")   should be \"clip\"\n     searchside: inexact match\n    np.searchsorted(arr[0], 4, side='random')   should be \"right\"\n\n(`gh-16056 <https://github.com/numpy/numpy/pull/16056>`__)\n\nDeprecation of `numpy.dual`\n---------------------------\nThe module `numpy.dual` is deprecated.  Instead of importing functions\nfrom `numpy.dual`, the functions should be imported directly from NumPy\nor SciPy.\n\n(`gh-16156 <https://github.com/numpy/numpy/pull/16156>`__)\n\n``outer`` and ``ufunc.outer`` deprecated for matrix\n---------------------------------------------------\n``np.matrix`` use with `~numpy.outer` or generic ufunc outer\ncalls such as ``numpy.add.outer``. Previously, matrix was\nconverted to an array here. This will not be done in the future\nrequiring a manual conversion to arrays.\n\n(`gh-16232 <https://github.com/numpy/numpy/pull/16232>`__)\n\nFurther Numeric Style types Deprecated\n--------------------------------------\n\nThe remaining numeric-style type codes ``Bytes0``, ``Str0``,\n``Uint32``, ``Uint64``, and ``Datetime64``\nhave been deprecated.  The lower-case variants should be used\ninstead.  For bytes and string ``\"S\"`` and ``\"U\"``\nare further alternatives.\n\n(`gh-16554 <https://github.com/numpy/numpy/pull/16554>`__)\n\nThe ``ndincr`` method of ``ndindex`` is deprecated\n--------------------------------------------------\nThe documentation has warned against using this function since NumPy 1.8.\nUse ``next(it)`` instead of ``it.ndincr()``.\n\n(`gh-17233 <https://github.com/numpy/numpy/pull/17233>`__)\n\nArrayLike objects which do not define ``__len__`` and ``__getitem__``\n---------------------------------------------------------------------\nObjects which define one of the protocols ``__array__``,\n``__array_interface__``, or ``__array_struct__`` but are not sequences\n(usually defined by having a ``__len__`` and ``__getitem__``) will behave\ndifferently during array-coercion in the future.\n\nWhen nested inside sequences, such as ``np.array([array_like])``, these\nwere handled as a single Python object rather than an array.\nIn the future they will behave identically to::\n\n    np.array([np.array(array_like)])\n\nThis change should only have an effect if ``np.array(array_like)`` is not 0-D.\nThe solution to this warning may depend on the object:\n\n* Some array-likes may expect the new behaviour, and users can ignore the\n  warning.  The object can choose to expose the sequence protocol to opt-in\n  to the new behaviour.\n* For example, ``shapely`` will allow conversion to an array-like using\n  ``line.coords`` rather than ``np.asarray(line)``. Users may work around\n  the warning, or use the new convention when it becomes available.\n\nUnfortunately, using the new behaviour can only be achieved by\ncalling ``np.array(array_like)``.\n\nIf you wish to ensure that the old behaviour remains unchanged, please create\nan object array and then fill it explicitly, for example::\n\n    arr = np.empty(3, dtype=object)\n    arr[:] = [array_like1, array_like2, array_like3]\n\nThis will ensure NumPy knows to not enter the array-like and use it as\na object instead.\n\n(`gh-17973 <https://github.com/numpy/numpy/pull/17973>`__)\n\n\nFuture Changes\n==============\n\nArrays cannot be using subarray dtypes\n--------------------------------------\nArray creation and casting using ``np.array(arr, dtype)``\nand ``arr.astype(dtype)`` will use different logic when ``dtype``\nis a subarray dtype such as ``np.dtype(\"(2)i,\")``.\n\nFor such a ``dtype`` the following behaviour is true::\n\n    res = np.array(arr, dtype)\n\n    res.dtype is not dtype\n    res.dtype is dtype.base\n    res.shape == arr.shape + dtype.shape\n\nBut ``res`` is filled using the logic::\n\n    res = np.empty(arr.shape + dtype.shape, dtype=dtype.base)\n    res[...] = arr\n\nwhich uses incorrect broadcasting (and often leads to an error).\nIn the future, this will instead cast each element individually,\nleading to the same result as::\n\n    res = np.array(arr, dtype=np.dtype([\"f\", dtype]))[\"f\"]\n\nWhich can normally be used to opt-in to the new behaviour.\n\nThis change does not affect ``np.array(list, dtype=\"(2)i,\")`` unless the\n``list`` itself includes at least one array.  In particular, the behaviour\nis unchanged for a list of tuples.\n\n(`gh-17596 <https://github.com/numpy/numpy/pull/17596>`__)\n\n\nExpired deprecations\n====================\n\n* The deprecation of numeric style type-codes ``np.dtype(\"Complex64\")``\n  (with upper case spelling), is expired.  ``\"Complex64\"`` corresponded to\n  ``\"complex128\"`` and ``\"Complex32\"`` corresponded to ``\"complex64\"``.\n* The deprecation of ``np.sctypeNA`` and ``np.typeNA`` is expired. Both\n  have been removed from the public API. Use ``np.typeDict`` instead.\n\n  (`gh-16554 <https://github.com/numpy/numpy/pull/16554>`__)\n\n* The 14-year deprecation of ``np.ctypeslib.ctypes_load_library`` is expired.\n  Use :func:`~numpy.ctypeslib.load_library` instead, which is identical.\n\n  (`gh-17116 <https://github.com/numpy/numpy/pull/17116>`__)\n\nFinancial functions removed\n---------------------------\nIn accordance with NEP 32, the financial functions are removed\nfrom NumPy 1.20. The functions that have been removed are ``fv``,\n``ipmt``, ``irr``, ``mirr``, ``nper``, ``npv``, ``pmt``, ``ppmt``,\n``pv``, and ``rate``.  These functions are available in the\n`numpy_financial <https://pypi.org/project/numpy-financial>`_\nlibrary.\n\n(`gh-17067 <https://github.com/numpy/numpy/pull/17067>`__)\n\n\nCompatibility notes\n===================\n\n``isinstance(dtype, np.dtype)`` and not ``type(dtype) is not np.dtype``\n-----------------------------------------------------------------------\nNumPy dtypes are not direct instances of ``np.dtype`` anymore.  Code that\nmay have used ``type(dtype) is np.dtype`` will always return ``False`` and\nmust be updated to use the correct version ``isinstance(dtype, np.dtype)``.\n\nThis change also affects the C-side macro ``PyArray_DescrCheck`` if compiled\nagainst a NumPy older than 1.16.6. If code uses this macro and wishes to\ncompile against an older version of NumPy, it must replace the macro\n(see also `C API changes`_ section).\n\n\nSame kind casting in concatenate with ``axis=None``\n---------------------------------------------------\nWhen `~numpy.concatenate` is called with ``axis=None``,\nthe flattened arrays were cast with ``unsafe``. Any other axis\nchoice uses \"same kind\". That different default\nhas been deprecated and \"same kind\" casting will be used\ninstead. The new ``casting`` keyword argument\ncan be used to retain the old behaviour.\n\n(`gh-16134 <https://github.com/numpy/numpy/pull/16134>`__)\n\nNumPy Scalars are cast when assigned to arrays\n----------------------------------------------\n\nWhen creating or assigning to arrays, in all relevant cases NumPy\nscalars will now be cast identically to NumPy arrays.  In particular\nthis changes the behaviour in some cases which previously raised an\nerror::\n\n    np.array([np.float64(np.nan)], dtype=np.int64)\n\nwill succeed and return an undefined result (usually the smallest possible\ninteger).  This also affects assignments::\n\n    arr[0] = np.float64(np.nan)\n\nAt this time, NumPy retains the behaviour for::\n\n    np.array(np.float64(np.nan), dtype=np.int64)\n\nThe above changes do not affect Python scalars::\n\n    np.array([float(\"NaN\")], dtype=np.int64)\n\nremains unaffected (``np.nan`` is a Python ``float``, not a NumPy one).\nUnlike signed integers, unsigned integers do not retain this special case,\nsince they always behaved more like casting.\nThe following code stops raising an error::\n\n    np.array([np.float64(np.nan)], dtype=np.uint64)\n\nTo avoid backward compatibility issues, at this time assignment from\n``datetime64`` scalar to strings of too short length remains supported.\nThis means that ``np.asarray(np.datetime64(\"2020-10-10\"), dtype=\"S5\")``\nsucceeds now, when it failed before.  In the long term this may be\ndeprecated or the unsafe cast may be allowed generally to make assignment\nof arrays and scalars behave consistently.\n\n\nArray coercion changes when Strings and other types are mixed\n-------------------------------------------------------------\n\nWhen strings and other types are mixed, such as::\n\n    np.array([\"string\", np.float64(3.)], dtype=\"S\")\n\nThe results will change, which may lead to string dtypes with longer strings\nin some cases.  In particularly, if ``dtype=\"S\"`` is not provided any numerical\nvalue will lead to a string results long enough to hold all possible numerical\nvalues. (e.g. \"S32\" for floats).  Note that you should always provide\n``dtype=\"S\"`` when converting non-strings to strings.\n\nIf ``dtype=\"S\"`` is provided the results will be largely identical to before,\nbut NumPy scalars (not a Python float like ``1.0``), will still enforce\na uniform string length::\n\n    np.array([np.float64(3.)], dtype=\"S\")   gives \"S32\"\n    np.array([3.0], dtype=\"S\")   gives \"S3\"\n\nPreviously the first version gave the same result as the second.\n\n\nArray coercion restructure\n--------------------------\n\nArray coercion has been restructured.  In general, this should not affect\nusers.  In extremely rare corner cases where array-likes are nested::\n\n    np.array([array_like1])\n\nThings will now be more consistent with::\n\n    np.array([np.array(array_like1)])\n\nThis can subtly change output for some badly defined array-likes.\nOne example for this are array-like objects which are not also sequences\nof matching shape.\nIn NumPy 1.20, a warning will be given when an array-like is not also a\nsequence (but behaviour remains identical, see deprecations).\nIf an array like is also a sequence (defines ``__getitem__`` and ``__len__``)\nNumPy will now only use the result given by ``__array__``,\n``__array_interface__``, or ``__array_struct__``. This will result in\ndifferences when the (nested) sequence describes a different shape.\n\n(`gh-16200 <https://github.com/numpy/numpy/pull/16200>`__)\n\nWriting to the result of `numpy.broadcast_arrays` will export readonly buffers\n------------------------------------------------------------------------------\n\nIn NumPy 1.17 `numpy.broadcast_arrays` started warning when the resulting array\nwas written to. This warning was skipped when the array was used through the\nbuffer interface (e.g. ``memoryview(arr)``). The same thing will now occur for the\ntwo protocols ``__array_interface__``, and ``__array_struct__`` returning read-only\nbuffers instead of giving a warning.\n\n(`gh-16350 <https://github.com/numpy/numpy/pull/16350>`__)\n\nNumeric-style type names have been removed from type dictionaries\n-----------------------------------------------------------------\n\nTo stay in sync with the deprecation for ``np.dtype(\"Complex64\")``\nand other numeric-style (capital case) types.  These were removed\nfrom ``np.sctypeDict`` and ``np.typeDict``.  You should use\nthe lower case versions instead.  Note that ``\"Complex64\"``\ncorresponds to ``\"complex128\"`` and ``\"Complex32\"`` corresponds\nto ``\"complex64\"``.  The numpy style (new) versions, denote the full\nsize and not the size of the real/imaginary part.\n\n(`gh-16554 <https://github.com/numpy/numpy/pull/16554>`__)\n\nThe ``operator.concat`` function now raises TypeError for array arguments\n-------------------------------------------------------------------------\nThe previous behavior was to fall back to addition and add the two arrays,\nwhich was thought to be unexpected behavior for a concatenation function.\n\n(`gh-16570 <https://github.com/numpy/numpy/pull/16570>`__)\n\n``nickname`` attribute removed from ABCPolyBase\n-----------------------------------------------\n\nAn abstract property ``nickname`` has been removed from  ``ABCPolyBase`` as it\nwas no longer used in the derived convenience classes.\nThis may affect users who have derived classes from ``ABCPolyBase`` and\noverridden the methods for representation and display, e.g. ``__str__``,\n``__repr__``, ``_repr_latex``, etc.\n\n(`gh-16589 <https://github.com/numpy/numpy/pull/16589>`__)\n\n``float->timedelta`` and ``uint64->timedelta`` promotion will raise a TypeError\n-------------------------------------------------------------------------------\nFloat and timedelta promotion consistently raises a TypeError.\n``np.promote_types(\"float32\", \"m8\")`` aligns with\n``np.promote_types(\"m8\", \"float32\")`` now and both raise a TypeError.\nPreviously, ``np.promote_types(\"float32\", \"m8\")`` returned ``\"m8\"`` which\nwas considered a bug.\n\nUint64 and timedelta promotion consistently raises a TypeError.\n``np.promote_types(\"uint64\", \"m8\")`` aligns with\n``np.promote_types(\"m8\", \"uint64\")`` now and both raise a TypeError.\nPreviously, ``np.promote_types(\"uint64\", \"m8\")`` returned ``\"m8\"`` which\nwas considered a bug.\n\n(`gh-16592 <https://github.com/numpy/numpy/pull/16592>`__)\n\n``numpy.genfromtxt`` now correctly unpacks structured arrays\n------------------------------------------------------------\nPreviously, `numpy.genfromtxt` failed to unpack if it was called with\n``unpack=True`` and a structured datatype was passed to the ``dtype`` argument\n(or ``dtype=None`` was passed and a structured datatype was inferred).\nFor example::\n\n    >>> data = StringIO(\"21 58.0\\n35 72.0\")\n    >>> np.genfromtxt(data, dtype=None, unpack=True)\n    array([(21, 58.), (35, 72.)], dtype=[('f0', '<i8'), ('f1', '<f8')])\n\nStructured arrays will now correctly unpack into a list of arrays,\none for each column::\n\n    >>> np.genfromtxt(data, dtype=None, unpack=True)\n    [array([21, 35]), array([58., 72.])]\n\n(`gh-16650 <https://github.com/numpy/numpy/pull/16650>`__)\n\n``mgrid``, ``r_``, etc. consistently return correct outputs for non-default precision input\n-------------------------------------------------------------------------------------------\nPreviously, ``np.mgrid[np.float32(0.1):np.float32(0.35):np.float32(0.1),]``\nand ``np.r_[0:10:np.complex64(3j)]`` failed to return meaningful output.\nThis bug potentially affects `~numpy.mgrid`, `~numpy.ogrid`, `~numpy.r_`,\nand `~numpy.c_` when an input with dtype other than the default\n``float64`` and ``complex128`` and equivalent Python types were used.\nThe methods have been fixed to handle varying precision correctly.\n\n(`gh-16815 <https://github.com/numpy/numpy/pull/16815>`__)\n\nBoolean array indices with mismatching shapes now properly give ``IndexError``\n------------------------------------------------------------------------------\n\nPreviously, if a boolean array index matched the size of the indexed array but\nnot the shape, it was incorrectly allowed in some cases. In other cases, it\ngave an error, but the error was incorrectly a ``ValueError`` with a message\nabout broadcasting instead of the correct ``IndexError``.\n\nFor example, the following used to incorrectly give ``ValueError: operands\ncould not be broadcast together with shapes (2,2) (1,4)``:\n\n.. code:: python\n\n   np.empty((2, 2))[np.array([[True, False, False, False]])]\n\nAnd the following used to incorrectly return ``array([], dtype=float64)``:\n\n.. code:: python\n\n   np.empty((2, 2))[np.array([[False, False, False, False]])]\n\nBoth now correctly give ``IndexError: boolean index did not match indexed\narray along dimension 0; dimension is 2 but corresponding boolean dimension is\n1``.\n\n(`gh-17010 <https://github.com/numpy/numpy/pull/17010>`__)\n\nCasting errors interrupt Iteration\n----------------------------------\nWhen iterating while casting values, an error may stop the iteration\nearlier than before. In any case, a failed casting operation always\nreturned undefined, partial results. Those may now be even more\nundefined and partial.\nFor users of the ``NpyIter`` C-API such cast errors will now\ncause the `iternext()` function to return 0 and thus abort\niteration.\nCurrently, there is no API to detect such an error directly.\nIt is necessary to check ``PyErr_Occurred()``, which\nmay be problematic in combination with ``NpyIter_Reset``.\nThese issues always existed, but new API could be added\nif required by users.\n\n(`gh-17029 <https://github.com/numpy/numpy/pull/17029>`__)\n\nf2py generated code may return unicode instead of byte strings\n--------------------------------------------------------------\nSome byte strings previously returned by f2py generated code may now be unicode\nstrings. This results from the ongoing Python2 -> Python3 cleanup.\n\n(`gh-17068 <https://github.com/numpy/numpy/pull/17068>`__)\n\nThe first element of the ``__array_interface__[\"data\"]`` tuple  must be an integer\n----------------------------------------------------------------------------------\nThis has been the documented interface for many years, but there was still\ncode that would accept a byte string representation of the pointer address.\nThat code has been removed, passing the address as a byte string will now\nraise an error.\n\n(`gh-17241 <https://github.com/numpy/numpy/pull/17241>`__)\n\npoly1d respects the dtype of all-zero argument\n----------------------------------------------\nPreviously, constructing an instance of ``poly1d`` with all-zero\ncoefficients would cast the coefficients to ``np.float64``.\nThis affected the output dtype of methods which construct\n``poly1d`` instances internally, such as ``np.polymul``.\n\n(`gh-17577 <https://github.com/numpy/numpy/pull/17577>`__)\n\nThe numpy.i file for swig is Python 3 only.\n-------------------------------------------\nUses of Python 2.7 C-API functions have been updated to Python 3 only. Users\nwho need the old version should take it from an older version of NumPy.\n\n(`gh-17580 <https://github.com/numpy/numpy/pull/17580>`__)\n\nVoid dtype discovery in ``np.array``\n------------------------------------\nIn calls using ``np.array(..., dtype=\"V\")``, ``arr.astype(\"V\")``,\nand similar a TypeError will now be correctly raised unless all\nelements have the identical void length. An example for this is::\n\n     np.array([b\"1\", b\"12\"], dtype=\"V\")\n\nWhich previously returned an array with dtype ``\"V2\"`` which\ncannot represent ``b\"1\"`` faithfully.\n\n(`gh-17706 <https://github.com/numpy/numpy/pull/17706>`__)\n\n\nC API changes\n=============\n\nThe ``PyArray_DescrCheck`` macro is modified\n--------------------------------------------\nThe ``PyArray_DescrCheck`` macro has been updated since NumPy 1.16.6 to be::\n\n    define PyArray_DescrCheck(op) PyObject_TypeCheck(op, &PyArrayDescr_Type)\n\nStarting with NumPy 1.20 code that is compiled against an earlier version\nwill be API incompatible with NumPy 1.20.\nThe fix is to either compile against 1.16.6 (if the NumPy 1.16 release is\nthe oldest release you wish to support), or manually inline the macro by\nreplacing it with the new definition::\n\n    PyObject_TypeCheck(op, &PyArrayDescr_Type)\n\nwhich is compatible with all NumPy versions.\n\n\nSize of ``np.ndarray`` and ``np.void_`` changed\n-----------------------------------------------\nThe size of the ``PyArrayObject`` and ``PyVoidScalarObject``\nstructures have changed.  The following header definition has been\nremoved::\n\n    define NPY_SIZEOF_PYARRAYOBJECT (sizeof(PyArrayObject_fields))\n\nsince the size must not be considered a compile time constant: it will\nchange for different runtime versions of NumPy.\n\nThe most likely relevant use are potential subclasses written in C which\nwill have to be recompiled and should be updated.  Please see the\ndocumentation for :c:type:`PyArrayObject` for more details and contact\nthe NumPy developers if you are affected by this change.\n\nNumPy will attempt to give a graceful error but a program expecting a\nfixed structure size may have undefined behaviour and likely crash.\n\n(`gh-16938 <https://github.com/numpy/numpy/pull/16938>`__)\n\n\nNew Features\n============\n\n``where`` keyword argument for ``numpy.all`` and ``numpy.any`` functions\n------------------------------------------------------------------------\nThe keyword argument ``where`` is added and allows to only consider specified\nelements or subaxes from an array in the Boolean evaluation of ``all`` and\n``any``. This new keyword is available to the functions ``all`` and ``any``\nboth via ``numpy`` directly or in the methods of ``numpy.ndarray``.\n\nAny broadcastable Boolean array or a scalar can be set as ``where``. It\ndefaults to ``True`` to evaluate the functions for all elements in an array if\n``where`` is not set by the user. Examples are given in the documentation of\nthe functions.\n\n\n``where`` keyword argument for ``numpy`` functions ``mean``, ``std``, ``var``\n-----------------------------------------------------------------------------\nThe keyword argument ``where`` is added and allows to limit the scope in the\ncalculation of ``mean``, ``std`` and ``var`` to only a subset of elements. It\nis available both via ``numpy`` directly or in the methods of\n``numpy.ndarray``.\n\nAny broadcastable Boolean array or a scalar can be set as ``where``. It\ndefaults to ``True`` to evaluate the functions for all elements in an array if\n``where`` is not set by the user. Examples are given in the documentation of\nthe functions.\n\n(`gh-15852 <https://github.com/numpy/numpy/pull/15852>`__)\n\n``norm=backward``, ``forward`` keyword options for ``numpy.fft`` functions\n--------------------------------------------------------------------------\nThe keyword argument option ``norm=backward`` is added as an alias for ``None``\nand acts as the default option; using it has the direct transforms unscaled\nand the inverse transforms scaled by ``1/n``.\n\nUsing the new keyword argument option ``norm=forward`` has the direct\ntransforms scaled by ``1/n`` and the inverse transforms unscaled (i.e. exactly\nopposite to the default option ``norm=backward``).\n\n(`gh-16476 <https://github.com/numpy/numpy/pull/16476>`__)\n\nNumPy is now typed\n------------------\nType annotations have been added for large parts of NumPy. There is\nalso a new `numpy.typing` module that contains useful types for\nend-users. The currently available types are\n\n- ``ArrayLike``: for objects that can be coerced to an array\n- ``DtypeLike``: for objects that can be coerced to a dtype\n\n(`gh-16515 <https://github.com/numpy/numpy/pull/16515>`__)\n\n``numpy.typing`` is accessible at runtime\n-----------------------------------------\nThe types in ``numpy.typing`` can now be imported at runtime. Code\nlike the following will now work:\n\n.. code:: python\n\n    from numpy.typing import ArrayLike\n    x: ArrayLike = [1, 2, 3, 4]\n\n(`gh-16558 <https://github.com/numpy/numpy/pull/16558>`__)\n\nNew ``__f2py_numpy_version__`` attribute for f2py generated modules.\n--------------------------------------------------------------------\nBecause f2py is released together with NumPy, ``__f2py_numpy_version__``\nprovides a way to track the version f2py used to generate the module.\n\n(`gh-16594 <https://github.com/numpy/numpy/pull/16594>`__)\n\n``mypy`` tests can be run via runtests.py\n-----------------------------------------\nCurrently running mypy with the NumPy stubs configured requires\neither:\n\n* Installing NumPy\n* Adding the source directory to MYPYPATH and linking to the ``mypy.ini``\n\nBoth options are somewhat inconvenient, so add a ``--mypy`` option to runtests\nthat handles setting things up for you. This will also be useful in the future\nfor any typing codegen since it will ensure the project is built before type\nchecking.\n\n(`gh-17123 <https://github.com/numpy/numpy/pull/17123>`__)\n\nNegation of user defined BLAS/LAPACK detection order\n----------------------------------------------------\n`~numpy.distutils` allows negation of libraries when determining BLAS/LAPACK\nlibraries.\nThis may be used to remove an item from the library resolution phase, i.e.\nto disallow NetLIB libraries one could do:\n\n.. code:: bash\n\n    NPY_BLAS_ORDER='^blas' NPY_LAPACK_ORDER='^lapack' python setup.py build\n\nThat will use any of the accelerated libraries instead.\n\n(`gh-17219 <https://github.com/numpy/numpy/pull/17219>`__)\n\nAllow passing optimizations arguments to asv build\n--------------------------------------------------\nIt is now possible to pass  ``-j``, ``--cpu-baseline``, ``--cpu-dispatch`` and\n``--disable-optimization`` flags to ASV build when the ``--bench-compare``\nargument is used.\n\n(`gh-17284 <https://github.com/numpy/numpy/pull/17284>`__)\n\nThe NVIDIA HPC SDK nvfortran compiler is now supported\n------------------------------------------------------\nSupport for the nvfortran compiler, a version of pgfortran, has been added.\n\n(`gh-17344 <https://github.com/numpy/numpy/pull/17344>`__)\n\n``dtype`` option for ``cov`` and ``corrcoef``\n---------------------------------------------\nThe ``dtype`` option is now available for `numpy.cov` and `numpy.corrcoef`.\nIt specifies which data-type the returned result should have.\nBy default the functions still return a `numpy.float64` result.\n\n(`gh-17456 <https://github.com/numpy/numpy/pull/17456>`__)\n\n\nImprovements\n============\n\nImproved string representation for polynomials (``__str__``)\n------------------------------------------------------------\n\nThe string representation (``__str__``) of all six polynomial types in\n`numpy.polynomial` has been updated to give the polynomial as a mathematical\nexpression instead of an array of coefficients. Two package-wide formats for\nthe polynomial expressions are available - one using Unicode characters for\nsuperscripts and subscripts, and another using only ASCII characters.\n\n(`gh-15666 <https://github.com/numpy/numpy/pull/15666>`__)\n\nRemove the Accelerate library as a candidate LAPACK library\n-----------------------------------------------------------\nApple no longer supports Accelerate. Remove it.\n\n(`gh-15759 <https://github.com/numpy/numpy/pull/15759>`__)\n\nObject arrays containing multi-line objects have a more readable ``repr``\n-------------------------------------------------------------------------\nIf elements of an object array have a ``repr`` containing new lines, then the\nwrapped lines will be aligned by column. Notably, this improves the ``repr`` of\nnested arrays::\n\n    >>> np.array([np.eye(2), np.eye(3)], dtype=object)\n    array([array([[1., 0.],\n                  [0., 1.]]),\n           array([[1., 0., 0.],\n                  [0., 1., 0.],\n                  [0., 0., 1.]])], dtype=object)\n\n(`gh-15997 <https://github.com/numpy/numpy/pull/15997>`__)\n\nConcatenate supports providing an output dtype\n----------------------------------------------\nSupport was added to `~numpy.concatenate` to provide\nan output ``dtype`` and ``casting`` using keyword\narguments. The ``dtype`` argument cannot be provided\nin conjunction with the ``out`` one.\n\n(`gh-16134 <https://github.com/numpy/numpy/pull/16134>`__)\n\nThread safe f2py callback functions\n-----------------------------------\n\nCallback functions in f2py are now thread safe.\n\n(`gh-16519 <https://github.com/numpy/numpy/pull/16519>`__)\n\n`numpy.core.records.fromfile` now supports file-like objects\n------------------------------------------------------------\n`numpy.rec.fromfile` can now use file-like objects, for instance\n:py:class:`io.BytesIO`\n\n(`gh-16675 <https://github.com/numpy/numpy/pull/16675>`__)\n\nRPATH support on AIX added to distutils\n---------------------------------------\nThis allows SciPy to be built on AIX.\n\n(`gh-16710 <https://github.com/numpy/numpy/pull/16710>`__)\n\nUse f90 compiler specified by the command line args\n---------------------------------------------------\n\nThe compiler command selection for Fortran Portland Group Compiler is changed\nin `numpy.distutils.fcompiler`.  This only affects the linking command.  This\nforces the use of the executable provided by the command line option (if\nprovided) instead of the pgfortran executable.  If no executable is provided to\nthe command line option it defaults to the pgf90 executable, wich is an alias\nfor pgfortran according to the PGI documentation.\n\n(`gh-16730 <https://github.com/numpy/numpy/pull/16730>`__)\n\nAdd NumPy declarations for Cython 3.0 and later\n-----------------------------------------------\n\nThe pxd declarations for Cython 3.0 were improved to avoid using deprecated\nNumPy C-API features.  Extension modules built with Cython 3.0+ that use NumPy\ncan now set the C macro ``NPY_NO_DEPRECATED_API=NPY_1_7_API_VERSION`` to avoid\nC compiler warnings about deprecated API usage.\n\n(`gh-16986 <https://github.com/numpy/numpy/pull/16986>`__)\n\nMake the window functions exactly symmetric\n-------------------------------------------\nMake sure the window functions provided by NumPy are symmetric. There were\npreviously small deviations from symmetry due to numerical precision that are\nnow avoided by better arrangement of the computation.\n\n(`gh-17195 <https://github.com/numpy/numpy/pull/17195>`__)\n\n\nPerformance improvements and changes\n====================================\n\nEnable multi-platform SIMD compiler optimizations\n-------------------------------------------------\n\nA series of improvements for NumPy infrastructure to pave the way to\n**NEP-38**, that can be summarized as follow:\n\n-  **New Build Arguments**\n\n   -  ``--cpu-baseline`` to specify the minimal set of required\n      optimizations, default value is ``min`` which provides the minimum\n      CPU features that can safely run on a wide range of users\n      platforms.\n\n   -  ``--cpu-dispatch`` to specify the dispatched set of additional\n      optimizations, default value is ``max -xop -fma4`` which enables\n      all CPU features, except for AMD legacy features.\n\n   -  ``--disable-optimization`` to explicitly disable the whole new\n      improvements, It also adds a new **C** compiler definition\n      called ``NPY_DISABLE_OPTIMIZATION`` which it can be used as\n      guard for any SIMD code.\n\n-  **Advanced CPU dispatcher**\n\n   A flexible cross-architecture CPU dispatcher built on the top of\n   Python/Numpy distutils, support all common compilers with a wide range of\n   CPU features.\n\n   The new dispatcher requires a special file extension ``*.dispatch.c`` to\n   mark the dispatch-able **C** sources. These sources have the ability to be\n   compiled multiple times so that each compilation process represents certain\n   CPU features and provides different definitions and flags that affect the\n   code paths.\n\n-  **New auto-generated C header ``core/src/common/_cpu_dispatch.h``**\n\n   This header is generated by the distutils module ``ccompiler_opt``, and\n   contains all the definitions and headers of instruction sets, that had been\n   configured through command arguments '--cpu-baseline' and '--cpu-dispatch'.\n\n-  **New C header ``core/src/common/npy_cpu_dispatch.h``**\n\n   This header contains all utilities that required for the whole CPU\n   dispatching process, it also can be considered as a bridge linking the new\n   infrastructure work with NumPy CPU runtime detection.\n\n-  **Add new attributes to NumPy umath module(Python level)**\n\n   - ``__cpu_baseline__`` a list contains the minimal set of required\n     optimizations that supported by the compiler and platform according to the\n     specified values to command argument '--cpu-baseline'.\n\n   - ``__cpu_dispatch__`` a list contains the dispatched set of additional\n     optimizations that supported by the compiler and platform according to the\n     specified values to command argument '--cpu-dispatch'.\n\n-  **Print the supported CPU features during the run of PytestTester**\n\n(`gh-13516 <https://github.com/numpy/numpy/pull/13516>`__)\n\n\nChanges\n=======\n\nChanged behavior of ``divmod(1., 0.)`` and related functions\n------------------------------------------------------------\nThe changes also assure that different compiler versions have the same behavior\nfor nan or inf usages in these operations. This was previously compiler\ndependent, we now force the invalid and divide by zero flags, making the\nresults the same across compilers. For example, gcc-5, gcc-8, or gcc-9 now\nresult in the same behavior. The changes are tabulated below:\n\n.. list-table:: Summary of New Behavior\n   :widths: auto\n   :header-rows: 1\n\n   * - Operator\n     - Old Warning\n     - New Warning\n     - Old Result\n     - New Result\n     - Works on MacOS\n   * - np.divmod(1.0, 0.0)\n     - Invalid\n     - Invalid and Dividebyzero\n     - nan, nan\n     - inf, nan\n     - Yes\n   * - np.fmod(1.0, 0.0)\n     - Invalid\n     - Invalid\n     - nan\n     - nan\n     - No? Yes\n   * - np.floor_divide(1.0, 0.0)\n     - Invalid\n     - Dividebyzero\n     - nan\n     - inf\n     - Yes\n   * - np.remainder(1.0, 0.0)\n     - Invalid\n     - Invalid\n     - nan\n     - nan\n     - Yes\n\n(`gh-16161 <https://github.com/numpy/numpy/pull/16161>`__)\n\n``np.linspace`` on integers now uses floor\n------------------------------------------\nWhen using a ``int`` dtype in `numpy.linspace`, previously float values would\nbe rounded towards zero. Now `numpy.floor` is used instead, which rounds toward\n``-inf``. This changes the results for negative values. For example, the\nfollowing would previously give::\n\n    >>> np.linspace(-3, 1, 8, dtype=int)\n    array([-3, -2, -1, -1,  0,  0,  0,  1])\n\nand now results in::\n\n    >>> np.linspace(-3, 1, 8, dtype=int)\n    array([-3, -3, -2, -2, -1, -1,  0,  1])\n\nThe former result can still be obtained with::\n\n    >>> np.linspace(-3, 1, 8).astype(int)\n    array([-3, -2, -1, -1,  0,  0,  0,  1])\n\n(`gh-16841 <https://github.com/numpy/numpy/pull/16841>`__)\n\n\nChecksums\n=========\n\nMD5\n---\n::\n\n    6f43f51475706d8346cee9604ed54e8a  numpy-1.20.0-cp37-cp37m-macosx_10_9_x86_64.whl\n    c77f563595ab4bab6185c795c573a26a  numpy-1.20.0-cp37-cp37m-manylinux1_i686.whl\n    e8f71fdb7e4e837ae79894b621e3ca08  numpy-1.20.0-cp37-cp37m-manylinux1_x86_64.whl\n    89c477a3eaf2e3379aa21bf80e2a2812  numpy-1.20.0-cp37-cp37m-manylinux2010_i686.whl\n    82211490e9375bdad57592139b49184d  numpy-1.20.0-cp37-cp37m-manylinux2010_x86_64.whl\n    b2d47be4aa123623b39f18723e0d70b7  numpy-1.20.0-cp37-cp37m-manylinux2014_aarch64.whl\n    e884b218dc2b20895f57fae00534e8ea  numpy-1.20.0-cp37-cp37m-win32.whl\n    ec8265d429e808d8f92ed46711d66bc7  numpy-1.20.0-cp37-cp37m-win_amd64.whl\n    791cc5086a755929a1140018067c4587  numpy-1.20.0-cp38-cp38-macosx_10_9_x86_64.whl\n    2ee146bad9aa521d0bdfd7e30e982a80  numpy-1.20.0-cp38-cp38-manylinux1_i686.whl\n    83d74204a26e9dd3cb93653818745d09  numpy-1.20.0-cp38-cp38-manylinux1_x86_64.whl\n    0b0a5e36d4b75a00603cec4db09c44d7  numpy-1.20.0-cp38-cp38-manylinux2010_i686.whl\n    c192aeac728a3abfbd16daef87b2a307  numpy-1.20.0-cp38-cp38-manylinux2010_x86_64.whl\n    2282da14106cb52bbf9c8c0b847c3480  numpy-1.20.0-cp38-cp38-manylinux2014_aarch64.whl\n    0e0e4bf53dd8ea4e232083e788419f30  numpy-1.20.0-cp38-cp38-win32.whl\n    93ebb884970cf7292778cb19e9f27596  numpy-1.20.0-cp38-cp38-win_amd64.whl\n    749cca75b33849a78e7238aeb09baded  numpy-1.20.0-cp39-cp39-macosx_10_9_x86_64.whl\n    e36e7e259bb38ccd2320f88a137115e0  numpy-1.20.0-cp39-cp39-manylinux2010_i686.whl\n    4979a98a2cf0a1b14a82630b717aa12b  numpy-1.20.0-cp39-cp39-manylinux2010_x86_64.whl\n    52a78d15f15959003047ccb6b66a0ee7  numpy-1.20.0-cp39-cp39-manylinux2014_aarch64.whl\n    796b273028c7724a855214ae9a83e4f8  numpy-1.20.0-cp39-cp39-win32.whl\n    663428d8bedc5785041800ce098368cd  numpy-1.20.0-cp39-cp39-win_amd64.whl\n    66ea4e7911de7fdce688c1b69f9c7c54  numpy-1.20.0-pp37-pypy37_pp73-manylinux2010_x86_64.whl\n    fc7c970084438911a50efaa8cddccebc  numpy-1.20.0.tar.gz\n    024eb99dba56c3021458caf86f2fea0a  numpy-1.20.0.zip\n\nSHA256\n------\n::\n\n    89bd70c9ad540febe6c28451ba225eb4e49d27f64728357f512c808002325dfa  numpy-1.20.0-cp37-cp37m-macosx_10_9_x86_64.whl\n    1264c66129f5ef63187649dd43f1ca59532e8c098723643336a85131c0dcce3f  numpy-1.20.0-cp37-cp37m-manylinux1_i686.whl\n    e9c5fd330d2fedf06051bafb996252de9b032fcb2ec03eefc9a543e56efa66d4  numpy-1.20.0-cp37-cp37m-manylinux1_x86_64.whl\n    db5e69d08756a2fa75a42b4e433880b6187768fe1bc73d21819def893e5128c6  numpy-1.20.0-cp37-cp37m-manylinux2010_i686.whl\n    1abc02e30e3efd81a4571e00f8e62bf42e343c76698e0a3e11d9c2b3ee0d77a7  numpy-1.20.0-cp37-cp37m-manylinux2010_x86_64.whl\n    5ae765dd29c71a555f8102281f6fb15a3f4dbd35f6e7daf36af9df6d9dd716a5  numpy-1.20.0-cp37-cp37m-manylinux2014_aarch64.whl\n    b51b9ef0624f4b01b846c981034c10d2e30db33f9f8be71e992f3900741f6f77  numpy-1.20.0-cp37-cp37m-win32.whl\n    afeee581b50df20ef07b736e62ca612858f1fcdba96651d26ab44e3d567a4e6e  numpy-1.20.0-cp37-cp37m-win_amd64.whl\n    2bf0e68c92ef077fe766e53f8937d8ac341bdbca68ec128ae049b7d5c34e3206  numpy-1.20.0-cp38-cp38-macosx_10_9_x86_64.whl\n    2445a96fbae23a4109c61be0f0af0f3bc273905dc5687a710850c1dfde0fc994  numpy-1.20.0-cp38-cp38-manylinux1_i686.whl\n    33edfc0eb229f86f539493917b34035054313a11afbed48404aaf9f86bf4b0f6  numpy-1.20.0-cp38-cp38-manylinux1_x86_64.whl\n    894aaee60043a98b03f0ad992c810f62e3a15f98a701e1c0f58a4f4a0df13429  numpy-1.20.0-cp38-cp38-manylinux2010_i686.whl\n    b66a6c15d793eda7cdad986e737775aa31b9306d588c14dd0277d2dda5546150  numpy-1.20.0-cp38-cp38-manylinux2010_x86_64.whl\n    eee454d3aa3955d0c0069a0f265fea47f1e1384c35a110a95efed358eb6e1562  numpy-1.20.0-cp38-cp38-manylinux2014_aarch64.whl\n    abdfa075e293d73638ece434708aa60b510dc6e70d805f57f481a0f550b25a9e  numpy-1.20.0-cp38-cp38-win32.whl\n    f1e9424e9aa3834ea27cc12f9c6ea8ace5da18ee60a720bb3a85b2f733f41782  numpy-1.20.0-cp38-cp38-win_amd64.whl\n    cb257bb0c0a3176c32782a63cfab2eace7eabfa2a3b2dfd85a13700617ccaf28  numpy-1.20.0-cp39-cp39-macosx_10_9_x86_64.whl\n    cf5d9dcbdbe523fa665c5309cce5f144648d94a7fddbf5a40f8e0d5c9f5b596d  numpy-1.20.0-cp39-cp39-manylinux2010_i686.whl\n    93c2abea7bb69f47029b84ceac30ab46dfcfdb99b671ad850a333ff794a765e4  numpy-1.20.0-cp39-cp39-manylinux2010_x86_64.whl\n    0d28a54afcf46f1f9ebd163e49ad6b49087f22986fefd01a23ca0c1cdda25ca6  numpy-1.20.0-cp39-cp39-manylinux2014_aarch64.whl\n    d1bc331e1706fd1809a1bc8a31205329e5b30cf5ba50461c624da267e99f6ae6  numpy-1.20.0-cp39-cp39-win32.whl\n    e3db646af9f6a145f0c57202f4b55d4a33f975e395e78fb7b394644c17c1a3a6  numpy-1.20.0-cp39-cp39-win_amd64.whl\n    4d592264d2a4f368afbb4288b5ceb646d4cbaf559c0249c096fbb0a149806b90  numpy-1.20.0-pp37-pypy37_pp73-manylinux2010_x86_64.whl\n    67b630745a71b541ff6517d6f3d62b00690dc8ba0684cad0d7b0ac55aec1de53  numpy-1.20.0.tar.gz\n    3d8233c03f116d068d5365fed4477f2947c7229582dad81e5953088989294cec  numpy-1.20.0.zip\n\n\n.. currentmodule:: numpy\n\n==========================\n", "1.20.2": "==========================\n\nNumPy 1,20.2 is a bugfix release containing several fixes merged to the main\nbranch after the NumPy 1.20.1 release.\n\n\nContributors\n============\n\nA total of 7 people contributed to this release.  People with a \"+\" by their\nnames contributed a patch for the first time.\n\n* Allan Haldane\n* Bas van Beek\n* Charles Harris\n* Christoph Gohlke\n* Mateusz Sok\u00f3\u0142 +\n* Michael Lamparski\n* Sebastian Berg\n\nPull requests merged\n====================\n\nA total of 20 pull requests were merged for this release.\n\n* `18382 <https://github.com/numpy/numpy/pull/18382>`__: MAINT: Update f2py from master.\n* `18459 <https://github.com/numpy/numpy/pull/18459>`__: BUG: ``diagflat`` could overflow on windows or 32-bit platforms\n* `18460 <https://github.com/numpy/numpy/pull/18460>`__: BUG: Fix refcount leak in f2py ``complex_double_from_pyobj``.\n* `18461 <https://github.com/numpy/numpy/pull/18461>`__: BUG: Fix tiny memory leaks when ``like=`` overrides are used\n* `18462 <https://github.com/numpy/numpy/pull/18462>`__: BUG: Remove temporary change of descr/flags in VOID functions\n* `18469 <https://github.com/numpy/numpy/pull/18469>`__: BUG: Segfault in nditer buffer dealloc for Object arrays\n* `18485 <https://github.com/numpy/numpy/pull/18485>`__: BUG: Remove suspicious type casting\n* `18486 <https://github.com/numpy/numpy/pull/18486>`__: BUG: remove nonsensical comparison of pointer < 0\n* `18487 <https://github.com/numpy/numpy/pull/18487>`__: BUG: verify pointer against NULL before using it\n* `18488 <https://github.com/numpy/numpy/pull/18488>`__: BUG: check if PyArray_malloc succeeded\n* `18546 <https://github.com/numpy/numpy/pull/18546>`__: BUG: incorrect error fallthrough in nditer\n* `18559 <https://github.com/numpy/numpy/pull/18559>`__: CI: Backport CI fixes from main.\n* `18599 <https://github.com/numpy/numpy/pull/18599>`__: MAINT: Add annotations for `dtype.__getitem__`, `__mul__` and...\n* `18611 <https://github.com/numpy/numpy/pull/18611>`__: BUG: NameError in numpy.distutils.fcompiler.compaq\n* `18612 <https://github.com/numpy/numpy/pull/18612>`__: BUG: Fixed ``where`` keyword for ``np.mean`` & ``np.var`` methods\n* `18617 <https://github.com/numpy/numpy/pull/18617>`__: CI: Update apt package list before Python install\n* `18636 <https://github.com/numpy/numpy/pull/18636>`__: MAINT: Ensure that re-exported sub-modules are properly annotated\n* `18638 <https://github.com/numpy/numpy/pull/18638>`__: BUG: Fix ma coercion list-of-ma-arrays if they do not cast to...\n* `18661 <https://github.com/numpy/numpy/pull/18661>`__: BUG: Fix small valgrind-found issues\n* `18671 <https://github.com/numpy/numpy/pull/18671>`__: BUG: Fix small issues found with pytest-leaks\n\nChecksums\n=========\n\nMD5\n---\n::\n\n    a95718df123e0726a7dac5043050b251  numpy-1.20.2-cp37-cp37m-macosx_10_9_x86_64.whl\n    4cacfe903c60827c0e44d0bed7e3a760  numpy-1.20.2-cp37-cp37m-manylinux1_i686.whl\n    2879728d4f815f07c7d133347deefe45  numpy-1.20.2-cp37-cp37m-manylinux1_x86_64.whl\n    97546a3cf4ddcc9fcc7eb41b9558f1de  numpy-1.20.2-cp37-cp37m-manylinux2010_i686.whl\n    65ffbc38abe1c1b92eb3bebf3484f679  numpy-1.20.2-cp37-cp37m-manylinux2010_x86_64.whl\n    5746efbd42db03518a51adbacbc70fa7  numpy-1.20.2-cp37-cp37m-manylinux2014_aarch64.whl\n    e9b8e30a5c62f003835b374dbc1c9031  numpy-1.20.2-cp37-cp37m-win32.whl\n    b2d0fa9383776ab68a1bbefc84331fc1  numpy-1.20.2-cp37-cp37m-win_amd64.whl\n    321aa118fbd40fe53a7c82557f3f2772  numpy-1.20.2-cp38-cp38-macosx_10_9_x86_64.whl\n    518013677b05371bbe7e1d6fa4ef61aa  numpy-1.20.2-cp38-cp38-manylinux1_i686.whl\n    58c61ea025646c391788f7bc7f681fa5  numpy-1.20.2-cp38-cp38-manylinux1_x86_64.whl\n    e8ce1857f017bffeed46b003a0385b11  numpy-1.20.2-cp38-cp38-manylinux2010_i686.whl\n    8ed52b7194b0953d0b04b88fbabea1ac  numpy-1.20.2-cp38-cp38-manylinux2010_x86_64.whl\n    0a9202dfd47fb02c8eab9f71f084633c  numpy-1.20.2-cp38-cp38-manylinux2014_aarch64.whl\n    8c70e309be1ae43d2938895b56ffbdb7  numpy-1.20.2-cp38-cp38-win32.whl\n    8aaa91a51b79556643ad93cb1d55b7d3  numpy-1.20.2-cp38-cp38-win_amd64.whl\n    b1b03999df657ccd4e65ff6abcf7e042  numpy-1.20.2-cp39-cp39-macosx_10_9_x86_64.whl\n    139fef5109539031e570aee9aa3090bf  numpy-1.20.2-cp39-cp39-manylinux2010_i686.whl\n    2c9463187e6a1a0245ed4a2db8e8e656  numpy-1.20.2-cp39-cp39-manylinux2010_x86_64.whl\n    b6cb08e8f56accedc4fdc29720ffb380  numpy-1.20.2-cp39-cp39-manylinux2014_aarch64.whl\n    a3024059b52e7688d3c98b82e2f2688e  numpy-1.20.2-cp39-cp39-win32.whl\n    abcd17ffd3b29014ff15e93a74c2c3d6  numpy-1.20.2-cp39-cp39-win_amd64.whl\n    67704047e60c2b280f7e9f42400cca91  numpy-1.20.2-pp37-pypy37_pp73-manylinux2010_x86_64.whl\n    6fe93791438f9c1f69c9352680151002  numpy-1.20.2.tar.gz\n    5e1b381630af4d18db0fedd56b6d8da2  numpy-1.20.2.zip\n\nSHA256\n------\n::\n\n    e9459f40244bb02b2f14f6af0cd0732791d72232bbb0dc4bab57ef88e75f6935  numpy-1.20.2-cp37-cp37m-macosx_10_9_x86_64.whl\n    a8e6859913ec8eeef3dbe9aed3bf475347642d1cdd6217c30f28dee8903528e6  numpy-1.20.2-cp37-cp37m-manylinux1_i686.whl\n    9cab23439eb1ebfed1aaec9cd42b7dc50fc96d5cd3147da348d9161f0501ada5  numpy-1.20.2-cp37-cp37m-manylinux1_x86_64.whl\n    9c0fab855ae790ca74b27e55240fe4f2a36a364a3f1ebcfd1fb5ac4088f1cec3  numpy-1.20.2-cp37-cp37m-manylinux2010_i686.whl\n    61d5b4cf73622e4d0c6b83408a16631b670fc045afd6540679aa35591a17fe6d  numpy-1.20.2-cp37-cp37m-manylinux2010_x86_64.whl\n    d15007f857d6995db15195217afdbddfcd203dfaa0ba6878a2f580eaf810ecd6  numpy-1.20.2-cp37-cp37m-manylinux2014_aarch64.whl\n    d76061ae5cab49b83a8cf3feacefc2053fac672728802ac137dd8c4123397677  numpy-1.20.2-cp37-cp37m-win32.whl\n    bad70051de2c50b1a6259a6df1daaafe8c480ca98132da98976d8591c412e737  numpy-1.20.2-cp37-cp37m-win_amd64.whl\n    719656636c48be22c23641859ff2419b27b6bdf844b36a2447cb39caceb00935  numpy-1.20.2-cp38-cp38-macosx_10_9_x86_64.whl\n    aa046527c04688af680217fffac61eec2350ef3f3d7320c07fd33f5c6e7b4d5f  numpy-1.20.2-cp38-cp38-manylinux1_i686.whl\n    2428b109306075d89d21135bdd6b785f132a1f5a3260c371cee1fae427e12727  numpy-1.20.2-cp38-cp38-manylinux1_x86_64.whl\n    e8e4fbbb7e7634f263c5b0150a629342cc19b47c5eba8d1cd4363ab3455ab576  numpy-1.20.2-cp38-cp38-manylinux2010_i686.whl\n    edb1f041a9146dcf02cd7df7187db46ab524b9af2515f392f337c7cbbf5b52cd  numpy-1.20.2-cp38-cp38-manylinux2010_x86_64.whl\n    c73a7975d77f15f7f68dacfb2bca3d3f479f158313642e8ea9058eea06637931  numpy-1.20.2-cp38-cp38-manylinux2014_aarch64.whl\n    6c915ee7dba1071554e70a3664a839fbc033e1d6528199d4621eeaaa5487ccd2  numpy-1.20.2-cp38-cp38-win32.whl\n    471c0571d0895c68da309dacee4e95a0811d0a9f9f532a48dc1bea5f3b7ad2b7  numpy-1.20.2-cp38-cp38-win_amd64.whl\n    4703b9e937df83f5b6b7447ca5912b5f5f297aba45f91dbbbc63ff9278c7aa98  numpy-1.20.2-cp39-cp39-macosx_10_9_x86_64.whl\n    abc81829c4039e7e4c30f7897938fa5d4916a09c2c7eb9b244b7a35ddc9656f4  numpy-1.20.2-cp39-cp39-manylinux2010_i686.whl\n    377751954da04d4a6950191b20539066b4e19e3b559d4695399c5e8e3e683bf6  numpy-1.20.2-cp39-cp39-manylinux2010_x86_64.whl\n    6e51e417d9ae2e7848314994e6fc3832c9d426abce9328cf7571eefceb43e6c9  numpy-1.20.2-cp39-cp39-manylinux2014_aarch64.whl\n    780ae5284cb770ade51d4b4a7dce4faa554eb1d88a56d0e8b9f35fca9b0270ff  numpy-1.20.2-cp39-cp39-win32.whl\n    924dc3f83de20437de95a73516f36e09918e9c9c18d5eac520062c49191025fb  numpy-1.20.2-cp39-cp39-win_amd64.whl\n    97ce8b8ace7d3b9288d88177e66ee75480fb79b9cf745e91ecfe65d91a856042  numpy-1.20.2-pp37-pypy37_pp73-manylinux2010_x86_64.whl\n    c049f410c78e76ffb0af830a8afbdf8baac09897b4152b97b1a3b8345ee338ff  numpy-1.20.2.tar.gz\n    878922bf5ad7550aa044aa9301d417e2d3ae50f0f577de92051d739ac6096cee  numpy-1.20.2.zip\n\n\n.. currentmodule:: numpy\n\n==========================\n", "1.23.4": "==========================\nNumPy 1.23.4 is a maintenance release that fixes bugs discovered after the\n1.23.3 release and keeps the build infrastructure current. The main\nimprovements are fixes for some annotation corner cases, a fix for a long time\n``nested_iters`` memory leak, and a fix of complex vector dot for very large\narrays. The Python versions supported for this release are 3.8-3.11.\n\nNote that the mypy version needs to be 0.981+ if you test using Python 3.10.7,\notherwise the typing tests will fail.\n\nContributors\n============\n\nA total of 8 people contributed to this release.  People with a \"+\" by their\nnames contributed a patch for the first time.\n\n* Bas van Beek\n* Charles Harris\n* Matthew Barber\n* Matti Picus\n* Ralf Gommers\n* Ross Barnowski\n* Sebastian Berg\n* Sicheng Zeng +\n\nPull requests merged\n====================\n\nA total of 13 pull requests were merged for this release.\n\n* `22368 <https://github.com/numpy/numpy/pull/22368>`__: BUG: Add ``__array_api_version__`` to ``numpy.array_api`` namespace\n* `22370 <https://github.com/numpy/numpy/pull/22370>`__: MAINT: update sde toolkit to 9.0, fix download link\n* `22382 <https://github.com/numpy/numpy/pull/22382>`__: BLD: use macos-11 image on azure, macos-1015 is deprecated\n* `22383 <https://github.com/numpy/numpy/pull/22383>`__: MAINT: random: remove ``get_info`` from \"extending with Cython\"...\n* `22384 <https://github.com/numpy/numpy/pull/22384>`__: BUG: Fix complex vector dot with more than NPY_CBLAS_CHUNK elements\n* `22387 <https://github.com/numpy/numpy/pull/22387>`__: REV: Loosen ``lookfor``'s import try/except again\n* `22388 <https://github.com/numpy/numpy/pull/22388>`__: TYP,ENH: Mark ``numpy.typing`` protocols as runtime checkable\n* `22389 <https://github.com/numpy/numpy/pull/22389>`__: TYP,MAINT: Change more overloads to play nice with pyright\n* `22390 <https://github.com/numpy/numpy/pull/22390>`__: TST,TYP: Bump mypy to 0.981\n* `22391 <https://github.com/numpy/numpy/pull/22391>`__: DOC: Update delimiter param description.\n* `22392 <https://github.com/numpy/numpy/pull/22392>`__: BUG: Memory leaks in numpy.nested_iters\n* `22413 <https://github.com/numpy/numpy/pull/22413>`__: REL: Prepare for the NumPy 1.23.4 release.\n* `22424 <https://github.com/numpy/numpy/pull/22424>`__: TST: Fix failing aarch64 wheel builds.\n\n\nChecksums\n=========\n\nMD5\n---\n::\n\n    90a3d95982490cfeeef22c0f7cbd874f  numpy-1.23.4-cp310-cp310-macosx_10_9_x86_64.whl\n    c3cae63394db6c82fd2cb5700fc5917d  numpy-1.23.4-cp310-cp310-macosx_11_0_arm64.whl\n    b3ff0878de205f56c38fd7dcab80081f  numpy-1.23.4-cp310-cp310-manylinux_2_17_aarch64.manylinux2014_aarch64.whl\n    e2b086ca2229209f2f996c2f9a38bf9c  numpy-1.23.4-cp310-cp310-manylinux_2_17_x86_64.manylinux2014_x86_64.whl\n    44cc8bb112ca737520cf986fff92dfb0  numpy-1.23.4-cp310-cp310-win32.whl\n    21c8e5fdfba2ff953e446189379cf0c9  numpy-1.23.4-cp310-cp310-win_amd64.whl\n    27445a9c85977cb8efa682a4b993347f  numpy-1.23.4-cp311-cp311-macosx_10_9_x86_64.whl\n    11ef4b7dfdaa37604cb881f3ca4459db  numpy-1.23.4-cp311-cp311-macosx_11_0_arm64.whl\n    b3c77344274f91514f728a454fd471fa  numpy-1.23.4-cp311-cp311-manylinux_2_17_aarch64.manylinux2014_aarch64.whl\n    43aef7f984cd63d95c11fb74dd59ef0b  numpy-1.23.4-cp311-cp311-manylinux_2_17_x86_64.manylinux2014_x86_64.whl\n    637fe21b585228c9670d6e002bf8047f  numpy-1.23.4-cp311-cp311-win32.whl\n    f529edf9b849d6e3b8cdb5120ae5b81a  numpy-1.23.4-cp311-cp311-win_amd64.whl\n    76c61ce36317a7e509663829c6844fd9  numpy-1.23.4-cp38-cp38-macosx_10_9_x86_64.whl\n    2133f6893eef41cd9331c7d0271044c4  numpy-1.23.4-cp38-cp38-macosx_11_0_arm64.whl\n    5ccb3aa6fb8cb9e20ec336e315d01dec  numpy-1.23.4-cp38-cp38-manylinux_2_17_aarch64.manylinux2014_aarch64.whl\n    da71f34a4df0b98e4d9e17906dd57b07  numpy-1.23.4-cp38-cp38-manylinux_2_17_x86_64.manylinux2014_x86_64.whl\n    a318978f51fb80a17c2381e39194e906  numpy-1.23.4-cp38-cp38-win32.whl\n    eac810d6bc43830bf151ea55cd0ded93  numpy-1.23.4-cp38-cp38-win_amd64.whl\n    4cf0a6007abe42564c7380dbf92a26ce  numpy-1.23.4-cp39-cp39-macosx_10_9_x86_64.whl\n    2e005bedf129ce8bafa6f550537f3740  numpy-1.23.4-cp39-cp39-macosx_11_0_arm64.whl\n    10aa210311fcd19a03f6c5495824a306  numpy-1.23.4-cp39-cp39-manylinux_2_17_aarch64.manylinux2014_aarch64.whl\n    6301298a67999657a0878b64eeed09f2  numpy-1.23.4-cp39-cp39-manylinux_2_17_x86_64.manylinux2014_x86_64.whl\n    76144e575a3c3863ea22e03cdf022d8a  numpy-1.23.4-cp39-cp39-win32.whl\n    8291dd66ef5451b4db2da55c21535757  numpy-1.23.4-cp39-cp39-win_amd64.whl\n    7cc095b18690071828b5b620d5ec40e7  numpy-1.23.4-pp38-pypy38_pp73-macosx_10_9_x86_64.whl\n    63742f15e8bfa215c893136bbfc6444f  numpy-1.23.4-pp38-pypy38_pp73-manylinux_2_17_x86_64.manylinux2014_x86_64.whl\n    4ed382e55abc09c89a34db047692f6a6  numpy-1.23.4-pp38-pypy38_pp73-win_amd64.whl\n    d9ffd2c189633486ec246e61d4b947a0  numpy-1.23.4.tar.gz\n\nSHA256\n------\n::\n\n    95d79ada05005f6f4f337d3bb9de8a7774f259341c70bc88047a1f7b96a4bcb2  numpy-1.23.4-cp310-cp310-macosx_10_9_x86_64.whl\n    926db372bc4ac1edf81cfb6c59e2a881606b409ddc0d0920b988174b2e2a767f  numpy-1.23.4-cp310-cp310-macosx_11_0_arm64.whl\n    c237129f0e732885c9a6076a537e974160482eab8f10db6292e92154d4c67d71  numpy-1.23.4-cp310-cp310-manylinux_2_17_aarch64.manylinux2014_aarch64.whl\n    a8365b942f9c1a7d0f0dc974747d99dd0a0cdfc5949a33119caf05cb314682d3  numpy-1.23.4-cp310-cp310-manylinux_2_17_x86_64.manylinux2014_x86_64.whl\n    2341f4ab6dba0834b685cce16dad5f9b6606ea8a00e6da154f5dbded70fdc4dd  numpy-1.23.4-cp310-cp310-win32.whl\n    d331afac87c92373826af83d2b2b435f57b17a5c74e6268b79355b970626e329  numpy-1.23.4-cp310-cp310-win_amd64.whl\n    488a66cb667359534bc70028d653ba1cf307bae88eab5929cd707c761ff037db  numpy-1.23.4-cp311-cp311-macosx_10_9_x86_64.whl\n    ce03305dd694c4873b9429274fd41fc7eb4e0e4dea07e0af97a933b079a5814f  numpy-1.23.4-cp311-cp311-macosx_11_0_arm64.whl\n    8981d9b5619569899666170c7c9748920f4a5005bf79c72c07d08c8a035757b0  numpy-1.23.4-cp311-cp311-manylinux_2_17_aarch64.manylinux2014_aarch64.whl\n    7a70a7d3ce4c0e9284e92285cba91a4a3f5214d87ee0e95928f3614a256a1488  numpy-1.23.4-cp311-cp311-manylinux_2_17_x86_64.manylinux2014_x86_64.whl\n    5e13030f8793e9ee42f9c7d5777465a560eb78fa7e11b1c053427f2ccab90c79  numpy-1.23.4-cp311-cp311-win32.whl\n    7607b598217745cc40f751da38ffd03512d33ec06f3523fb0b5f82e09f6f676d  numpy-1.23.4-cp311-cp311-win_amd64.whl\n    7ab46e4e7ec63c8a5e6dbf5c1b9e1c92ba23a7ebecc86c336cb7bf3bd2fb10e5  numpy-1.23.4-cp38-cp38-macosx_10_9_x86_64.whl\n    a8aae2fb3180940011b4862b2dd3756616841c53db9734b27bb93813cd79fce6  numpy-1.23.4-cp38-cp38-macosx_11_0_arm64.whl\n    8c053d7557a8f022ec823196d242464b6955a7e7e5015b719e76003f63f82d0f  numpy-1.23.4-cp38-cp38-manylinux_2_17_aarch64.manylinux2014_aarch64.whl\n    a0882323e0ca4245eb0a3d0a74f88ce581cc33aedcfa396e415e5bba7bf05f68  numpy-1.23.4-cp38-cp38-manylinux_2_17_x86_64.manylinux2014_x86_64.whl\n    dada341ebb79619fe00a291185bba370c9803b1e1d7051610e01ed809ef3a4ba  numpy-1.23.4-cp38-cp38-win32.whl\n    0fe563fc8ed9dc4474cbf70742673fc4391d70f4363f917599a7fa99f042d5a8  numpy-1.23.4-cp38-cp38-win_amd64.whl\n    c67b833dbccefe97cdd3f52798d430b9d3430396af7cdb2a0c32954c3ef73894  numpy-1.23.4-cp39-cp39-macosx_10_9_x86_64.whl\n    f76025acc8e2114bb664294a07ede0727aa75d63a06d2fae96bf29a81747e4a7  numpy-1.23.4-cp39-cp39-macosx_11_0_arm64.whl\n    12ac457b63ec8ded85d85c1e17d85efd3c2b0967ca39560b307a35a6703a4735  numpy-1.23.4-cp39-cp39-manylinux_2_17_aarch64.manylinux2014_aarch64.whl\n    95de7dc7dc47a312f6feddd3da2500826defdccbc41608d0031276a24181a2c0  numpy-1.23.4-cp39-cp39-manylinux_2_17_x86_64.manylinux2014_x86_64.whl\n    f2f390aa4da44454db40a1f0201401f9036e8d578a25f01a6e237cea238337ef  numpy-1.23.4-cp39-cp39-win32.whl\n    f260da502d7441a45695199b4e7fd8ca87db659ba1c78f2bbf31f934fe76ae0e  numpy-1.23.4-cp39-cp39-win_amd64.whl\n    61be02e3bf810b60ab74e81d6d0d36246dbfb644a462458bb53b595791251911  numpy-1.23.4-pp38-pypy38_pp73-macosx_10_9_x86_64.whl\n    296d17aed51161dbad3c67ed6d164e51fcd18dbcd5dd4f9d0a9c6055dce30810  numpy-1.23.4-pp38-pypy38_pp73-manylinux_2_17_x86_64.manylinux2014_x86_64.whl\n    4d52914c88b4930dafb6c48ba5115a96cbab40f45740239d9f4159c4ba779962  numpy-1.23.4-pp38-pypy38_pp73-win_amd64.whl\n    ed2cc92af0efad20198638c69bb0fc2870a58dabfba6eb722c933b48556c686c  numpy-1.23.4.tar.gz\n\n\n.. currentmodule:: numpy\n\n==========================\n", "1.26.3": "==========================\n\nNumPy 1.26.3 is a maintenance release that fixes bugs and regressions\ndiscovered after the 1.26.2 release. The most notable changes are the f2py bug\nfixes. The Python versions supported by this release are 3.9-3.12.\n\n\nCompatibility\n=============\n\n``f2py`` will no longer accept ambiguous ``-m`` and ``.pyf`` CLI combinations.\nWhen more than one ``.pyf`` file is passed, an error is raised. When both ``-m``\nand a ``.pyf`` is passed, a warning is emitted and the ``-m`` provided name is\nignored.\n\n\nImprovements\n============\n\n``f2py`` now handles ``common`` blocks which have ``kind`` specifications from\nmodules. This further expands the usability of intrinsics like\n``iso_fortran_env`` and ``iso_c_binding``.\n\n\nContributors\n============\n\nA total of 18 people contributed to this release.  People with a \"+\" by their\nnames contributed a patch for the first time.\n\n* DWesl\n* Illviljan\n* Alexander Grund\n* Andrea Bianchi +\n* Charles Harris\n* Daniel Vanzo\n* Johann Rohwer +\n* Matti Picus\n* Nathan Goldbaum\n* Peter Hawkins\n* Raghuveer Devulapalli\n* Ralf Gommers\n* Rohit Goswami\n* Sayed Adel\n* Sebastian Berg\n* Stefano Rivera +\n* Thomas A Caswell\n* matoro\n\n\nPull requests merged\n====================\nA total of 42 pull requests were merged for this release.\n\n* `25130 <https://github.com/numpy/numpy/pull/25130>`__: MAINT: prepare 1.26.x for further development\n* `25188 <https://github.com/numpy/numpy/pull/25188>`__: TYP: add None to ``__getitem__`` in ``numpy.array_api``\n* `25189 <https://github.com/numpy/numpy/pull/25189>`__: BLD,BUG: quadmath required where available [f2py]\n* `25190 <https://github.com/numpy/numpy/pull/25190>`__: BUG: alpha doesn't use REAL(10)\n* `25191 <https://github.com/numpy/numpy/pull/25191>`__: BUG: Fix FP overflow error in division when the divisor is scalar\n* `25192 <https://github.com/numpy/numpy/pull/25192>`__: MAINT: Pin scipy-openblas version.\n* `25201 <https://github.com/numpy/numpy/pull/25201>`__: BUG: Fix f2py to enable use of string optional inout argument\n* `25202 <https://github.com/numpy/numpy/pull/25202>`__: BUG: Fix -fsanitize=alignment issue in numpy/_core/src/multiarray/arraytypes.c.src\n* `25203 <https://github.com/numpy/numpy/pull/25203>`__: TST: Explicitly pass NumPy path to cython during tests (also...\n* `25204 <https://github.com/numpy/numpy/pull/25204>`__: BUG: fix issues with ``newaxis`` and ``linalg.solve`` in ``numpy.array_api``\n* `25205 <https://github.com/numpy/numpy/pull/25205>`__: BUG: Disallow shadowed modulenames\n* `25217 <https://github.com/numpy/numpy/pull/25217>`__: BUG: Handle common blocks with kind specifications from modules\n* `25218 <https://github.com/numpy/numpy/pull/25218>`__: BUG: Fix moving compiled executable to root with f2py -c on Windows\n* `25219 <https://github.com/numpy/numpy/pull/25219>`__: BUG: Fix single to half-precision conversion on PPC64/VSX3\n* `25227 <https://github.com/numpy/numpy/pull/25227>`__: TST: f2py: fix issue in test skip condition\n* `25240 <https://github.com/numpy/numpy/pull/25240>`__: Revert \"MAINT: Pin scipy-openblas version.\"\n* `25249 <https://github.com/numpy/numpy/pull/25249>`__: MAINT: do not use ``long`` type\n* `25377 <https://github.com/numpy/numpy/pull/25377>`__: TST: PyPy needs another gc.collect on latest versions\n* `25378 <https://github.com/numpy/numpy/pull/25378>`__: CI: Install Lapack runtime on Cygwin.\n* `25379 <https://github.com/numpy/numpy/pull/25379>`__: MAINT: Bump conda-incubator/setup-miniconda from 2.2.0 to 3.0.1\n* `25380 <https://github.com/numpy/numpy/pull/25380>`__: BLD: update vendored Meson for AIX shared library fix\n* `25419 <https://github.com/numpy/numpy/pull/25419>`__: MAINT: Init ``base`` in cpu_avx512_kn\n* `25420 <https://github.com/numpy/numpy/pull/25420>`__: BUG: Fix failing test_features on SapphireRapids\n* `25422 <https://github.com/numpy/numpy/pull/25422>`__: BUG: Fix non-contiguous memory load when ARM/Neon is enabled\n* `25428 <https://github.com/numpy/numpy/pull/25428>`__: MAINT,BUG: Never import distutils above 3.12 [f2py]\n* `25452 <https://github.com/numpy/numpy/pull/25452>`__: MAINT: make the import-time check for old Accelerate more specific\n* `25458 <https://github.com/numpy/numpy/pull/25458>`__: BUG: fix macOS version checks for Accelerate support\n* `25465 <https://github.com/numpy/numpy/pull/25465>`__: MAINT: Bump actions/setup-node and larsoner/circleci-artifacts-redirector-action\n* `25466 <https://github.com/numpy/numpy/pull/25466>`__: BUG: avoid seg fault from OOB access in RandomState.set_state()\n* `25467 <https://github.com/numpy/numpy/pull/25467>`__: BUG: Fix two errors related to not checking for failed allocations\n* `25468 <https://github.com/numpy/numpy/pull/25468>`__: BUG: Fix regression with ``f2py`` wrappers when modules and subroutines...\n* `25475 <https://github.com/numpy/numpy/pull/25475>`__: BUG: Fix build issues on SPR\n* `25478 <https://github.com/numpy/numpy/pull/25478>`__: BLD: fix uninitialized variable warnings from simd/neon/memory.h\n* `25480 <https://github.com/numpy/numpy/pull/25480>`__: BUG: Handle ``iso_c_type`` mappings more consistently\n* `25481 <https://github.com/numpy/numpy/pull/25481>`__: BUG: Fix module name bug in signature files [urgent] [f2py]\n* `25482 <https://github.com/numpy/numpy/pull/25482>`__: BUG: Handle .pyf.src and fix SciPy [urgent]\n* `25483 <https://github.com/numpy/numpy/pull/25483>`__: DOC: ``f2py`` rewrite with ``meson`` details\n* `25485 <https://github.com/numpy/numpy/pull/25485>`__: BUG: Add external library handling for meson [f2py]\n* `25486 <https://github.com/numpy/numpy/pull/25486>`__: MAINT: Run f2py's meson backend with the same python that ran...\n* `25489 <https://github.com/numpy/numpy/pull/25489>`__: MAINT: Update ``numpy/f2py/_backends`` from main.\n* `25490 <https://github.com/numpy/numpy/pull/25490>`__: MAINT: Easy updates of ``f2py/*.py`` from main.\n* `25491 <https://github.com/numpy/numpy/pull/25491>`__: MAINT: Update crackfortran.py and f2py2e.py from main\n\n\nChecksums\n=========\n\nMD5\n---\n::\n\n    7660db27715df261948e7f0f13634f16  numpy-1.26.3-cp310-cp310-macosx_10_9_x86_64.whl\n    98d5b98c822de4bed0cf1b0b8f367192  numpy-1.26.3-cp310-cp310-macosx_11_0_arm64.whl\n    b71cd0710cec5460292a97a02fa349cd  numpy-1.26.3-cp310-cp310-manylinux_2_17_aarch64.manylinux2014_aarch64.whl\n    0f98a05c92598f849b1be2595f4a52a8  numpy-1.26.3-cp310-cp310-manylinux_2_17_x86_64.manylinux2014_x86_64.whl\n    b866c6aea8070c0753b776d2b521e875  numpy-1.26.3-cp310-cp310-musllinux_1_1_aarch64.whl\n    cfdde5868e469fb27655ea73b0b9593b  numpy-1.26.3-cp310-cp310-musllinux_1_1_x86_64.whl\n    2655440d61671b5e32b049d30397c58f  numpy-1.26.3-cp310-cp310-win32.whl\n    7718a5d33344784ca7821f3bdd467550  numpy-1.26.3-cp310-cp310-win_amd64.whl\n    28e4b2ed9192c392f792d88b3c246d1c  numpy-1.26.3-cp311-cp311-macosx_10_9_x86_64.whl\n    fb1ae72749463e2c82f0127699728364  numpy-1.26.3-cp311-cp311-macosx_11_0_arm64.whl\n    304dec822b508a1d495917610e7562bf  numpy-1.26.3-cp311-cp311-manylinux_2_17_aarch64.manylinux2014_aarch64.whl\n    2cc0d8b073dfd55946a60ba8ed4369f6  numpy-1.26.3-cp311-cp311-manylinux_2_17_x86_64.manylinux2014_x86_64.whl\n    c99962375c599501820899c8ccab6960  numpy-1.26.3-cp311-cp311-musllinux_1_1_aarch64.whl\n    47ed42d067ce4863bbf1f40da61ba7d1  numpy-1.26.3-cp311-cp311-musllinux_1_1_x86_64.whl\n    3ab3757255feb54ca3793fb9db226586  numpy-1.26.3-cp311-cp311-win32.whl\n    c33f2a4518bae535645357a08a93be1a  numpy-1.26.3-cp311-cp311-win_amd64.whl\n    bea43600aaff3a4d9978611ccfa44198  numpy-1.26.3-cp312-cp312-macosx_10_9_x86_64.whl\n    c678d909ebe737fdabf215d8622ce2a3  numpy-1.26.3-cp312-cp312-macosx_11_0_arm64.whl\n    9f21f1875c92425cec1060564b3abb1c  numpy-1.26.3-cp312-cp312-manylinux_2_17_aarch64.manylinux2014_aarch64.whl\n    c44a1998965d45ec136078ee09d880f2  numpy-1.26.3-cp312-cp312-manylinux_2_17_x86_64.manylinux2014_x86_64.whl\n    9274f5c51fa4f3c8fac5efa3d78acd63  numpy-1.26.3-cp312-cp312-musllinux_1_1_aarch64.whl\n    07c9f8f86f45077febc46c87ebc0b644  numpy-1.26.3-cp312-cp312-musllinux_1_1_x86_64.whl\n    a4857b2f7b6a23bca41178bd344bb28a  numpy-1.26.3-cp312-cp312-win32.whl\n    495d9534961d7b10f16fec4515a3d72b  numpy-1.26.3-cp312-cp312-win_amd64.whl\n    6494f2d94fd1f184923a33e634692b5e  numpy-1.26.3-cp39-cp39-macosx_10_9_x86_64.whl\n    515a7314a0ff6aaba8d53a7a1aaa73ab  numpy-1.26.3-cp39-cp39-macosx_11_0_arm64.whl\n    c856adc6a6a78773c43e9c738d662ed5  numpy-1.26.3-cp39-cp39-manylinux_2_17_aarch64.manylinux2014_aarch64.whl\n    09848456158a01feff28f88c6106aef1  numpy-1.26.3-cp39-cp39-manylinux_2_17_x86_64.manylinux2014_x86_64.whl\n    adec00ea2bc98580a436f82e188c0e2f  numpy-1.26.3-cp39-cp39-musllinux_1_1_aarch64.whl\n    718bd35dd0431a6434bb30bf8d91d77d  numpy-1.26.3-cp39-cp39-musllinux_1_1_x86_64.whl\n    e813aa59cb807efb4a8fee52a6dd41ba  numpy-1.26.3-cp39-cp39-win32.whl\n    08e1b0973d0ae5976b38563eaec1253f  numpy-1.26.3-cp39-cp39-win_amd64.whl\n    e8887a14750161709636e9fb87df4f36  numpy-1.26.3-pp39-pypy39_pp73-macosx_10_9_x86_64.whl\n    0bdb19040525451553fb5758b65caf4c  numpy-1.26.3-pp39-pypy39_pp73-manylinux_2_17_x86_64.manylinux2014_x86_64.whl\n    b931c14d06cc37d85d63ed1ddd88e875  numpy-1.26.3-pp39-pypy39_pp73-win_amd64.whl\n    1c915dc6c36dd4c674d9379e9470ff8b  numpy-1.26.3.tar.gz\n\nSHA256\n------\n::\n\n    806dd64230dbbfaca8a27faa64e2f414bf1c6622ab78cc4264f7f5f028fee3bf  numpy-1.26.3-cp310-cp310-macosx_10_9_x86_64.whl\n    02f98011ba4ab17f46f80f7f8f1c291ee7d855fcef0a5a98db80767a468c85cd  numpy-1.26.3-cp310-cp310-macosx_11_0_arm64.whl\n    6d45b3ec2faed4baca41c76617fcdcfa4f684ff7a151ce6fc78ad3b6e85af0a6  numpy-1.26.3-cp310-cp310-manylinux_2_17_aarch64.manylinux2014_aarch64.whl\n    bdd2b45bf079d9ad90377048e2747a0c82351989a2165821f0c96831b4a2a54b  numpy-1.26.3-cp310-cp310-manylinux_2_17_x86_64.manylinux2014_x86_64.whl\n    211ddd1e94817ed2d175b60b6374120244a4dd2287f4ece45d49228b4d529178  numpy-1.26.3-cp310-cp310-musllinux_1_1_aarch64.whl\n    b1240f767f69d7c4c8a29adde2310b871153df9b26b5cb2b54a561ac85146485  numpy-1.26.3-cp310-cp310-musllinux_1_1_x86_64.whl\n    21a9484e75ad018974a2fdaa216524d64ed4212e418e0a551a2d83403b0531d3  numpy-1.26.3-cp310-cp310-win32.whl\n    9e1591f6ae98bcfac2a4bbf9221c0b92ab49762228f38287f6eeb5f3f55905ce  numpy-1.26.3-cp310-cp310-win_amd64.whl\n    b831295e5472954104ecb46cd98c08b98b49c69fdb7040483aff799a755a7374  numpy-1.26.3-cp311-cp311-macosx_10_9_x86_64.whl\n    9e87562b91f68dd8b1c39149d0323b42e0082db7ddb8e934ab4c292094d575d6  numpy-1.26.3-cp311-cp311-macosx_11_0_arm64.whl\n    8c66d6fec467e8c0f975818c1796d25c53521124b7cfb760114be0abad53a0a2  numpy-1.26.3-cp311-cp311-manylinux_2_17_aarch64.manylinux2014_aarch64.whl\n    f25e2811a9c932e43943a2615e65fc487a0b6b49218899e62e426e7f0a57eeda  numpy-1.26.3-cp311-cp311-manylinux_2_17_x86_64.manylinux2014_x86_64.whl\n    af36e0aa45e25c9f57bf684b1175e59ea05d9a7d3e8e87b7ae1a1da246f2767e  numpy-1.26.3-cp311-cp311-musllinux_1_1_aarch64.whl\n    51c7f1b344f302067b02e0f5b5d2daa9ed4a721cf49f070280ac202738ea7f00  numpy-1.26.3-cp311-cp311-musllinux_1_1_x86_64.whl\n    7ca4f24341df071877849eb2034948459ce3a07915c2734f1abb4018d9c49d7b  numpy-1.26.3-cp311-cp311-win32.whl\n    39763aee6dfdd4878032361b30b2b12593fb445ddb66bbac802e2113eb8a6ac4  numpy-1.26.3-cp311-cp311-win_amd64.whl\n    a7081fd19a6d573e1a05e600c82a1c421011db7935ed0d5c483e9dd96b99cf13  numpy-1.26.3-cp312-cp312-macosx_10_9_x86_64.whl\n    12c70ac274b32bc00c7f61b515126c9205323703abb99cd41836e8125ea0043e  numpy-1.26.3-cp312-cp312-macosx_11_0_arm64.whl\n    7f784e13e598e9594750b2ef6729bcd5a47f6cfe4a12cca13def35e06d8163e3  numpy-1.26.3-cp312-cp312-manylinux_2_17_aarch64.manylinux2014_aarch64.whl\n    5f24750ef94d56ce6e33e4019a8a4d68cfdb1ef661a52cdaee628a56d2437419  numpy-1.26.3-cp312-cp312-manylinux_2_17_x86_64.manylinux2014_x86_64.whl\n    77810ef29e0fb1d289d225cabb9ee6cf4d11978a00bb99f7f8ec2132a84e0166  numpy-1.26.3-cp312-cp312-musllinux_1_1_aarch64.whl\n    8ed07a90f5450d99dad60d3799f9c03c6566709bd53b497eb9ccad9a55867f36  numpy-1.26.3-cp312-cp312-musllinux_1_1_x86_64.whl\n    f73497e8c38295aaa4741bdfa4fda1a5aedda5473074369eca10626835445511  numpy-1.26.3-cp312-cp312-win32.whl\n    da4b0c6c699a0ad73c810736303f7fbae483bcb012e38d7eb06a5e3b432c981b  numpy-1.26.3-cp312-cp312-win_amd64.whl\n    1666f634cb3c80ccbd77ec97bc17337718f56d6658acf5d3b906ca03e90ce87f  numpy-1.26.3-cp39-cp39-macosx_10_9_x86_64.whl\n    18c3319a7d39b2c6a9e3bb75aab2304ab79a811ac0168a671a62e6346c29b03f  numpy-1.26.3-cp39-cp39-macosx_11_0_arm64.whl\n    0b7e807d6888da0db6e7e75838444d62495e2b588b99e90dd80c3459594e857b  numpy-1.26.3-cp39-cp39-manylinux_2_17_aarch64.manylinux2014_aarch64.whl\n    b4d362e17bcb0011738c2d83e0a65ea8ce627057b2fdda37678f4374a382a137  numpy-1.26.3-cp39-cp39-manylinux_2_17_x86_64.manylinux2014_x86_64.whl\n    b8c275f0ae90069496068c714387b4a0eba5d531aace269559ff2b43655edd58  numpy-1.26.3-cp39-cp39-musllinux_1_1_aarch64.whl\n    cc0743f0302b94f397a4a65a660d4cd24267439eb16493fb3caad2e4389bccbb  numpy-1.26.3-cp39-cp39-musllinux_1_1_x86_64.whl\n    9bc6d1a7f8cedd519c4b7b1156d98e051b726bf160715b769106661d567b3f03  numpy-1.26.3-cp39-cp39-win32.whl\n    867e3644e208c8922a3be26fc6bbf112a035f50f0a86497f98f228c50c607bb2  numpy-1.26.3-cp39-cp39-win_amd64.whl\n    3c67423b3703f8fbd90f5adaa37f85b5794d3366948efe9a5190a5f3a83fc34e  numpy-1.26.3-pp39-pypy39_pp73-macosx_10_9_x86_64.whl\n    46f47ee566d98849323f01b349d58f2557f02167ee301e5e28809a8c0e27a2d0  numpy-1.26.3-pp39-pypy39_pp73-manylinux_2_17_x86_64.manylinux2014_x86_64.whl\n    a8474703bffc65ca15853d5fd4d06b18138ae90c17c8d12169968e998e448bb5  numpy-1.26.3-pp39-pypy39_pp73-win_amd64.whl\n    697df43e2b6310ecc9d95f05d5ef20eacc09c7c4ecc9da3f235d39e71b7da1e4  numpy-1.26.3.tar.gz\n\n\n.. currentmodule:: numpy\n\n==========================\n", "1.21.0": "==========================\nThe NumPy 1.21.0 release highlights are\n\n* continued SIMD work covering more functions and platforms,\n* initial work on the new dtype infrastructure and casting,\n* universal2 wheels for Python 3.8 and Python 3.9 on Mac,\n* improved documentation,\n* improved annotations,\n* new ``PCG64DXSM`` bitgenerator for random numbers.\n\nIn addition there are the usual large number of bug fixes and other improvements.\n\nThe Python versions supported for this release are 3.7-3.9. Official support\nfor Python 3.10 will be added when it is released.\n\n.. warning::\n   There are unresolved problems compiling NumPy 1.20.0 with gcc-11.1.\n\n   * Optimization level `-O3` results in many incorrect warnings when\n     running the tests.\n   * On some hardware NumPY will hang in an infinite loop.\n\n\n\n\n\nNew functions\n=============\n\n.. currentmodule:: numpy.random\n\nAdd `PCG64DXSM` `BitGenerator`\n------------------------------\n\nUses of the ``PCG64`` ``BitGenerator`` in a massively-parallel context have been\nshown to have statistical weaknesses that were not apparent at the first\nrelease in numpy 1.17. Most users will never observe this weakness and are\nsafe to continue to use ``PCG64``. We have introduced a new ``PCG64DXSM``\n``BitGenerator`` that will eventually become the new default ``BitGenerator``\nimplementation used by ``default_rng`` in future releases. ``PCG64DXSM`` solves\nthe statistical weakness while preserving the performance and the features of\n``PCG64``.\n\nSee :ref:`upgrading-pcg64` for more details.\n\n.. currentmodule:: numpy\n\n(`gh-18906 <https://github.com/numpy/numpy/pull/18906>`__)\n\n\nExpired deprecations\n====================\n\n* The ``shape`` argument `~numpy.unravel_index` cannot be passed\n  as ``dims`` keyword argument anymore. (Was deprecated in NumPy 1.16.)\n\n  (`gh-17900 <https://github.com/numpy/numpy/pull/17900>`__)\n\n* The function ``PyUFunc_GenericFunction`` has been disabled.\n  It was deprecated in NumPy 1.19.  Users should call the ufunc\n  directly using the Python API.\n\n  (`gh-18697 <https://github.com/numpy/numpy/pull/18697>`__)\n\n* The function ``PyUFunc_SetUsesArraysAsData`` has been disabled.\n  It was deprecated in NumPy 1.19.\n\n  (`gh-18697 <https://github.com/numpy/numpy/pull/18697>`__)\n\n* The class ``PolyBase`` has been removed (deprecated in numpy 1.9.0). Please\n  use the abstract ``ABCPolyBase`` class instead.\n\n  (`gh-18963 <https://github.com/numpy/numpy/pull/18963>`__)\n\n* The unused ``PolyError`` and ``PolyDomainError`` exceptions are\n  removed.\n\n  (`gh-18963 <https://github.com/numpy/numpy/pull/18963>`__)\n\n\nDeprecations\n============\n\nThe ``.dtype`` attribute must return a ``dtype``\n------------------------------------------------\n\nA ``DeprecationWarning`` is now given if the ``.dtype`` attribute\nof an object passed into ``np.dtype`` or as a ``dtype=obj`` argument\nis not a dtype. NumPy will stop attempting to recursively coerce the\nresult of ``.dtype``.\n\n(`gh-13578 <https://github.com/numpy/numpy/pull/13578>`__)\n\nInexact matches for ``numpy.convolve`` and ``numpy.correlate`` are deprecated\n-----------------------------------------------------------------------------\n\n`~numpy.convolve` and `~numpy.correlate` now emit a warning when there are case\ninsensitive and/or inexact matches found for ``mode`` argument in the functions.\nPass full ``\"same\"``, ``\"valid\"``, ``\"full\"`` strings instead of\n``\"s\"``, ``\"v\"``, ``\"f\"`` for the ``mode`` argument.\n\n(`gh-17492 <https://github.com/numpy/numpy/pull/17492>`__)\n\n``np.typeDict`` has been formally deprecated\n--------------------------------------------\n``np.typeDict`` is a deprecated alias for ``np.sctypeDict`` and\nhas been so for over 14 years (6689502_).\nA deprecation warning will now be issued whenever getting ``np.typeDict``.\n\n.. _6689502: https://github.com/numpy/numpy/commit/668950285c407593a368336ff2e737c5da84af7d\n\n(`gh-17586 <https://github.com/numpy/numpy/pull/17586>`__)\n\nExceptions will be raised during array-like creation\n----------------------------------------------------\nWhen an object raised an exception during access of the special\nattributes ``__array__`` or ``__array_interface__``, this exception\nwas usually ignored.\nA warning is now given when the exception is anything but AttributeError.\nTo silence the warning, the type raising the exception has to be adapted\nto raise an ``AttributeError``.\n\n(`gh-19001 <https://github.com/numpy/numpy/pull/19001>`__)\n\nFour ``ndarray.ctypes`` methods have been deprecated\n----------------------------------------------------\nFour methods of the `ndarray.ctypes` object have been deprecated,\nas they are (undocumentated) implementation artifacts of their respective\nproperties.\n\nThe methods in question are:\n\n* ``_ctypes.get_data`` (use ``_ctypes.data`` instead)\n* ``_ctypes.get_shape`` (use ``_ctypes.shape`` instead)\n* ``_ctypes.get_strides`` (use ``_ctypes.strides`` instead)\n* ``_ctypes.get_as_parameter`` (use ``_ctypes._as_parameter_`` instead)\n\n(`gh-19031 <https://github.com/numpy/numpy/pull/19031>`__)\n\n\nExpired deprecations\n====================\n\n* The ``shape`` argument `numpy.unravel_index` cannot be passed\n  as ``dims`` keyword argument anymore. (Was deprecated in NumPy 1.16.)\n\n  (`gh-17900 <https://github.com/numpy/numpy/pull/17900>`__)\n\n* The function ``PyUFunc_GenericFunction`` has been disabled.\n  It was deprecated in NumPy 1.19.  Users should call the ufunc\n  directly using the Python API.\n\n  (`gh-18697 <https://github.com/numpy/numpy/pull/18697>`__)\n\n* The function ``PyUFunc_SetUsesArraysAsData`` has been disabled.\n  It was deprecated in NumPy 1.19.\n\n  (`gh-18697 <https://github.com/numpy/numpy/pull/18697>`__)\n\nRemove deprecated ``PolyBase`` and unused ``PolyError`` and ``PolyDomainError``\n-------------------------------------------------------------------------------\n\nThe class ``PolyBase`` has been removed (deprecated in numpy 1.9.0). Please use\nthe abstract ``ABCPolyBase`` class instead.\n\nFurthermore, the unused ``PolyError`` and ``PolyDomainError`` exceptions are\nremoved from the `numpy.polynomial`.\n\n(`gh-18963 <https://github.com/numpy/numpy/pull/18963>`__)\n\n\nCompatibility notes\n===================\n\nError type changes in universal functions\n-----------------------------------------\nThe universal functions may now raise different errors on invalid input in some\ncases.  The main changes should be that a ``RuntimeError`` was replaced with a\nmore fitting ``TypeError``.  When multiple errors were present in the same\ncall, NumPy may now raise a different one.\n\n(`gh-15271 <https://github.com/numpy/numpy/pull/15271>`__)\n\n``__array_ufunc__`` argument validation\n---------------------------------------\nNumPy will now partially validate arguments before calling ``__array_ufunc__``.\nPreviously, it was possible to pass on invalid arguments (such as a\nnon-existing keyword argument) when dispatch was known to occur.\n\n(`gh-15271 <https://github.com/numpy/numpy/pull/15271>`__)\n\n``__array_ufunc__`` and additional positional arguments\n-------------------------------------------------------\nPreviously, all positionally passed arguments were checked for\n``__array_ufunc__`` support.  In the case of ``reduce``, ``accumulate``, and\n``reduceat`` all arguments may be passed by position.  This means that when\nthey were passed by position, they could previously have been asked to handle\nthe ufunc call via ``__array_ufunc__``.  Since this depended on the way the\narguments were passed (by position or by keyword), NumPy will now only dispatch\non the input and output array.  For example, NumPy will never dispatch on the\n``where`` array in a reduction such as ``np.add.reduce``.\n\n(`gh-15271 <https://github.com/numpy/numpy/pull/15271>`__)\n\nValidate input values in ``Generator.uniform``\n----------------------------------------------\nChecked that ``high - low >= 0`` in ``np.random.Generator.uniform``. Raises\n``ValueError`` if ``low > high``. Previously out-of-order inputs were accepted\nand silently swapped, so that if ``low > high``, the value generated was\n``high + (low - high) * random()``.\n\n(`gh-17921 <https://github.com/numpy/numpy/pull/17921>`__)\n\n``/usr/include`` removed from default include paths\n---------------------------------------------------\nThe default include paths when building a package with ``numpy.distutils`` no\nlonger include ``/usr/include``. This path is normally added by the compiler,\nand hardcoding it can be problematic. In case this causes a problem, please\nopen an issue. A workaround is documented in PR 18658.\n\n(`gh-18658 <https://github.com/numpy/numpy/pull/18658>`__)\n\nChanges to comparisons with ``dtype=...``\n-----------------------------------------\nWhen the ``dtype=`` (or ``signature``) arguments to comparison\nufuncs (``equal``, ``less``, etc.) is used, this will denote\nthe desired output dtype in the future.\nThis means that:\n\n    np.equal(2, 3, dtype=object)\n\nwill give a ``FutureWarning`` that it will return an ``object``\narray in the future, which currently happens for:\n\n    np.equal(None, None, dtype=object)\n\ndue to the fact that ``np.array(None)`` is already an object\narray. (This also happens for some other dtypes.)\n\nSince comparisons normally only return boolean arrays, providing\nany other dtype will always raise an error in the future and\ngive a ``DeprecationWarning`` now.\n\n(`gh-18718 <https://github.com/numpy/numpy/pull/18718>`__)\n\nChanges to ``dtype`` and ``signature`` arguments in ufuncs\n----------------------------------------------------------\nThe universal function arguments ``dtype`` and ``signature``\nwhich are also valid for reduction such as ``np.add.reduce``\n(which is the implementation for ``np.sum``) will now issue\na warning when the ``dtype`` provided is not a \"basic\" dtype.\n\nNumPy almost always ignored metadata, byteorder or time units\non these inputs.  NumPy will now always ignore it and raise an\nerror if byteorder or time unit changed.\nThe following are the most important examples of changes which\nwill give the error.  In some cases previously the information\nstored was not ignored, in all of these an error is now raised::\n\n     Previously ignored the byte-order (affect if non-native)\n    np.add(3, 5, dtype=\">i32\")\n\n     The biggest impact is for timedelta or datetimes:\n    arr = np.arange(10, dtype=\"m8[s]\")\n     The examples always ignored the time unit \"ns\":\n    np.add(arr, arr, dtype=\"m8[ns]\")\n    np.maximum.reduce(arr, dtype=\"m8[ns]\")\n\n     The following previously did use \"ns\" (as opposed to `arr.dtype`)\n    np.add(3, 5, dtype=\"m8[ns]\")   Now return generic time units\n    np.maximum(arr, arr, dtype=\"m8[ns]\")   Now returns \"s\" (from `arr`)\n\nThe same applies for functions like ``np.sum`` which use these internally.\nThis change is necessary to achieve consistent handling within NumPy.\n\nIf you run into these, in most cases pass for example ``dtype=np.timedelta64``\nwhich clearly denotes a general ``timedelta64`` without any unit or byte-order\ndefined.  If you need to specify the output dtype precisely, you may do so\nby either casting the inputs or providing an output array using `out=`.\n\nNumPy may choose to allow providing an exact output ``dtype`` here in the\nfuture, which would be preceded by a ``FutureWarning``.\n\n(`gh-18718 <https://github.com/numpy/numpy/pull/18718>`__)\n\nUfunc ``signature=...`` and ``dtype=`` generalization and ``casting``\n---------------------------------------------------------------------\nThe behaviour for ``np.ufunc(1.0, 1.0, signature=...)`` or\n``np.ufunc(1.0, 1.0, dtype=...)`` can now yield different loops in 1.21\ncompared to 1.20 because of changes in promotion.\nWhen ``signature`` was previously used, the casting check on inputs\nwas relaxed, which could lead to downcasting inputs unsafely especially\nif combined with ``casting=\"unsafe\"``.\n\nCasting is now guaranteed to be safe.  If a signature is only\npartially provided, for example using ``signature=(\"float64\", None, None)``,\nthis could lead to no loop being found (an error).\nIn that case, it is necessary to provide the complete signature\nto enforce casting the inputs.\nIf ``dtype=\"float64\"`` is used or only outputs are set (e.g.\n``signature=(None, None, \"float64\")`` the is unchanged.\nWe expect that very few users are affected by this change.\n\nFurther, the meaning of ``dtype=\"float64\"`` has been slightly modified and\nnow strictly enforces only the correct output (and not input) DTypes.\nThis means it is now always equivalent to::\n\n    signature=(None, None, \"float64\")\n\n(If the ufunc has two inputs and one output).  Since this could lead\nto no loop being found in some cases, NumPy will normally also search\nfor the loop::\n\n    signature=(\"float64\", \"float64\", \"float64\")\n\nif the first search failed.\nIn the future, this behaviour may be customized to achieve the expected\nresults for more complex ufuncs.  (For some universal functions such as\n``np.ldexp`` inputs can have different DTypes.)\n\n(`gh-18880 <https://github.com/numpy/numpy/pull/18880>`__)\n\nDistutils forces strict floating point model on clang\n-----------------------------------------------------\nNumPy distutils will now always add the ``-ffp-exception-behavior=strict``\ncompiler flag when compiling with clang.  Clang defaults to a non-strict\nversion, which allows the compiler to generate code that does not set\nfloating point warnings/errors correctly.\n\n(`gh-19049 <https://github.com/numpy/numpy/pull/19049>`__)\n\n\nC API changes\n=============\n\nUse of ``ufunc->type_resolver`` and \"type tuple\"\n------------------------------------------------\nNumPy now normalizes the \"type tuple\" argument to the type resolver functions\nbefore calling it.  Note that in the use of this type resolver is legacy\nbehaviour and NumPy will not do so when possible.  Calling\n``ufunc->type_resolver`` or ``PyUFunc_DefaultTypeResolver`` is strongly\ndiscouraged and will now enforce a normalized type tuple if done.  Note that\nthis does not affect providing a type resolver, which is expected to keep\nworking in most circumstances.  If you have an unexpected use-case for calling\nthe type resolver, please inform the NumPy developers so that a solution can be\nfound.\n\n(`gh-18718 <https://github.com/numpy/numpy/pull/18718>`__)\n\n\nNew Features\n============\n\nAdded a mypy plugin for handling platform-specific ``numpy.number`` precisions\n------------------------------------------------------------------------------\nA mypy_ plugin is now available for automatically assigning the (platform-dependent)\nprecisions of certain `~numpy.number` subclasses, including the likes of\n`~numpy.int_`, `~numpy.intp` and `~numpy.longlong`. See the documentation on\n:ref:`scalar types <arrays.scalars.built-in>` for a comprehensive overview\nof the affected classes.\n\nNote that while usage of the plugin is completely optional, without it the\nprecision of above-mentioned classes will be inferred as `~typing.Any`.\n\nTo enable the plugin, one must add it to their mypy `configuration file`_:\n\n.. code-block:: ini\n\n    [mypy]\n    plugins = numpy.typing.mypy_plugin\n\n\n.. _mypy: http://mypy-lang.org/\n.. _configuration file: https://mypy.readthedocs.io/en/stable/config_file.html\n\n(`gh-17843 <https://github.com/numpy/numpy/pull/17843>`__)\n\nLet the mypy plugin manage extended-precision ``numpy.number`` subclasses\n-------------------------------------------------------------------------\nThe mypy_ plugin, introduced in `numpy/numpy17843`_, has been expanded:\nthe plugin now removes annotations for platform-specific extended-precision\ntypes that are not available to the platform in question.\nFor example, it will remove `~numpy.float128` when not available.\n\nWithout the plugin *all* extended-precision types will, as far as mypy is concerned,\nbe available on all platforms.\n\nTo enable the plugin, one must add it to their mypy `configuration file`_:\n\n.. code-block:: ini\n\n    [mypy]\n    plugins = numpy.typing.mypy_plugin\n\n\n.. _mypy: http://mypy-lang.org/\n.. _configuration file: https://mypy.readthedocs.io/en/stable/config_file.html\n.. _`numpy/numpy17843`: https://github.com/numpy/numpy/pull/17843\n\n(`gh-18322 <https://github.com/numpy/numpy/pull/18322>`__)\n\nNew ``min_digits`` argument for printing float values\n-----------------------------------------------------\nA new ``min_digits`` argument has been added to the dragon4 float printing\nfunctions `~numpy.format_float_positional` and `~numpy.format_float_scientific`\n. This kwd guarantees that at least the given number of digits will be printed\nwhen printing in unique=True mode, even if the extra digits are unnecessary to\nuniquely specify the value. It is the counterpart to the precision argument\nwhich sets the maximum number of digits to be printed. When unique=False in\nfixed precision mode, it has no effect and the precision argument fixes the\nnumber of digits.\n\n(`gh-18629 <https://github.com/numpy/numpy/pull/18629>`__)\n\nf2py now recognizes Fortran abstract interface blocks\n-----------------------------------------------------\n`~numpy.f2py` can now parse abstract interface blocks.\n\n(`gh-18695 <https://github.com/numpy/numpy/pull/18695>`__)\n\nBLAS and LAPACK configuration via environment variables\n-------------------------------------------------------\nAutodetection of installed BLAS and LAPACK libraries can be bypassed by using\nthe ``NPY_BLAS_LIBS`` and ``NPY_LAPACK_LIBS`` environment variables. Instead,\nthe link flags in these environment variables will be used directly, and the\nlanguage is assumed to be F77.  This is especially useful in automated builds\nwhere the BLAS and LAPACK that are installed are known exactly.  A use case is\nreplacing the actual implementation at runtime via stub library links.\n\nIf ``NPY_CBLAS_LIBS`` is set (optional in addition to ``NPY_BLAS_LIBS``), this\nwill be used as well, by defining ``HAVE_CBLAS`` and appending the environment\nvariable content to the link flags.\n\n(`gh-18737 <https://github.com/numpy/numpy/pull/18737>`__)\n\nA runtime-subcriptable alias has been added for ``ndarray``\n-----------------------------------------------------------\n``numpy.typing.NDArray`` has been added, a runtime-subscriptable alias for\n``np.ndarray[Any, np.dtype[~Scalar]]``. The new type alias can be used\nfor annotating arrays with a given dtype and unspecified shape. :sup:`1`\n\n:sup:`1` NumPy does not support the annotating of array shapes as of 1.21,\nthis is expected to change in the future though (see :pep:`646`).\n\nExamples\n~~~~~~~~\n\n.. code-block:: python\n\n    >>> import numpy as np\n    >>> import numpy.typing as npt\n\n    >>> print(npt.NDArray)\n    numpy.ndarray[typing.Any, numpy.dtype[~ScalarType]]\n\n    >>> print(npt.NDArray[np.float64])\n    numpy.ndarray[typing.Any, numpy.dtype[numpy.float64]]\n\n    >>> NDArrayInt = npt.NDArray[np.int_]\n    >>> a: NDArrayInt = np.arange(10)\n\n    >>> def func(a: npt.ArrayLike) -> npt.NDArray[Any]:\n    ...     return np.array(a)\n\n(`gh-18935 <https://github.com/numpy/numpy/pull/18935>`__)\n\n\nImprovements\n============\n\nArbitrary ``period`` option for ``numpy.unwrap``\n------------------------------------------------\nThe size of the interval over which phases are unwrapped is no longer restricted to ``2 * pi``.\nThis is especially useful for unwrapping degrees, but can also be used for other intervals.\n\n.. code:: python\n\n    >>> phase_deg = np.mod(np.linspace(0,720,19), 360) - 180\n    >>> phase_deg\n    array([-180., -140., -100.,  -60.,  -20.,   20.,   60.,  100.,  140.,\n           -180., -140., -100.,  -60.,  -20.,   20.,   60.,  100.,  140.,\n           -180.])\n\n    >>> unwrap(phase_deg, period=360)\n    array([-180., -140., -100.,  -60.,  -20.,   20.,   60.,  100.,  140.,\n            180.,  220.,  260.,  300.,  340.,  380.,  420.,  460.,  500.,\n            540.])\n\n(`gh-16987 <https://github.com/numpy/numpy/pull/16987>`__)\n\n``np.unique`` now returns single ``NaN``\n----------------------------------------\nWhen ``np.unique`` operated on an array with multiple ``NaN`` entries,\nits return included a ``NaN`` for each entry that was ``NaN`` in the original array.\nThis is now improved such that the returned array contains just one ``NaN`` as the\nlast element.\n\nAlso for complex arrays all ``NaN`` values are considered equivalent\n(no matter whether the ``NaN`` is in the real or imaginary part). As the\nrepresentant for the returned array the smallest one in the\nlexicographical order is chosen - see ``np.sort`` for how the lexicographical\norder is defined for complex arrays.\n\n(`gh-18070 <https://github.com/numpy/numpy/pull/18070>`__)\n\n``Generator.rayleigh`` and ``Generator.geometric`` performance improved\n-----------------------------------------------------------------------\nThe performance of Rayleigh and geometric random variate generation\nin ``Generator`` has improved. These are both transformation of exponential\nrandom variables and the slow log-based inverse cdf transformation has\nbeen replaced with the Ziggurat-based exponential variate generator.\n\nThis change breaks the stream of variates generated  when variates from\neither of these distributions are produced.\n\n(`gh-18666 <https://github.com/numpy/numpy/pull/18666>`__)\n\nPlaceholder annotations have been improved\n------------------------------------------\nAll placeholder annotations, that were previously annotated as ``typing.Any``,\nhave been improved. Where appropiate they have been replaced with explicit\nfunction definitions, classes or other miscellaneous objects.\n\n(`gh-18934 <https://github.com/numpy/numpy/pull/18934>`__)\n\n\nPerformance improvements\n========================\n\nImproved performance in integer division of NumPy arrays\n--------------------------------------------------------\nInteger division of NumPy arrays now uses\n`libdivide <https://libdivide.com/>`__ when the divisor is a constant. With the\nusage of libdivide and other minor optimizations, there is a large speedup.\nThe ``//`` operator and ``np.floor_divide`` makes use of the new changes.\n\n(`gh-17727 <https://github.com/numpy/numpy/pull/17727>`__)\n\nImprove performance of ``np.save`` and ``np.load`` for small arrays\n-------------------------------------------------------------------\n``np.save`` is now a lot faster for small arrays.\n\n``np.load`` is also faster for small arrays,\nbut only when serializing with a version >= ``(3, 0)``.\n\nBoth are done by removing checks that are only relevant for Python 2,\nwhile still maintaining compatibility with arrays\nwhich might have been created by Python 2.\n\n(`gh-18657 <https://github.com/numpy/numpy/pull/18657>`__)\n\n\nChanges\n=======\n\n`numpy.piecewise` output class now matches the input class\n----------------------------------------------------------\nWhen `~numpy.ndarray` subclasses are used on input to `~numpy.piecewise`,\nthey are passed on to the functions. The output will now be of the\nsame subclass as well.\n\n(`gh-18110 <https://github.com/numpy/numpy/pull/18110>`__)\n\nEnable Accelerate Framework\n----------------------------\nWith the release of macOS 11.3, several different issues that numpy was\nencountering when using Accelerate Framework's implementation of BLAS and\nLAPACK should be resolved.  This change enables the Accelerate Framework as an\noption on macOS.  If additional issues are found, please file a bug report\nagainst Accelerate using the developer feedback assistant tool\n(https://developer.apple.com/bug-reporting/). We intend to address issues\npromptly and plan to continue supporting and updating our BLAS and LAPACK\nlibraries.\n\n(`gh-18874 <https://github.com/numpy/numpy/pull/18874>`__)\n\nChecksums\n=========\n\nMD5\n---\n::\n\n    e4b31fd5cb97e50238b3dbb3487b2cb7  numpy-1.21.0-cp37-cp37m-macosx_10_9_x86_64.whl\n    111e09f3fddd8e14540cf56493dd786a  numpy-1.21.0-cp37-cp37m-manylinux_2_12_i686.manylinux2010_i686.whl\n    e2fc116043d1b91c627f3c8884151f33  numpy-1.21.0-cp37-cp37m-manylinux_2_12_x86_64.manylinux2010_x86_64.whl\n    82e267da77628b96cdf8832e475f6ef3  numpy-1.21.0-cp37-cp37m-manylinux_2_17_aarch64.manylinux2014_aarch64.whl\n    baa416fe77b840a19556f5d808eb3165  numpy-1.21.0-cp37-cp37m-manylinux_2_5_i686.manylinux1_i686.whl\n    aba24836f51bb0a855434c41de122e3d  numpy-1.21.0-cp37-cp37m-manylinux_2_5_x86_64.manylinux1_x86_64.whl\n    aa9f94fa6eabfa193902676825934196  numpy-1.21.0-cp37-cp37m-win32.whl\n    6d771c7670b95adb62627e383c883804  numpy-1.21.0-cp37-cp37m-win_amd64.whl\n    e6d77cae6054b738603415faf9cb4358  numpy-1.21.0-cp38-cp38-macosx_10_9_universal2.whl\n    9589cfe5a22f54956101b7131be5cabd  numpy-1.21.0-cp38-cp38-macosx_10_9_x86_64.whl\n    5faa22dffa53cfe7d1d40d48aa817670  numpy-1.21.0-cp38-cp38-macosx_11_0_arm64.whl\n    b81545a2924a201817d433c3bad0bc7d  numpy-1.21.0-cp38-cp38-manylinux_2_12_i686.manylinux2010_i686.whl\n    3e60589e3325a3583880bf6998cfaca6  numpy-1.21.0-cp38-cp38-manylinux_2_12_x86_64.manylinux2010_x86_64.whl\n    baf409eb08b7462899d45c42a7c1d854  numpy-1.21.0-cp38-cp38-manylinux_2_17_aarch64.manylinux2014_aarch64.whl\n    4f311de7973503dde6ad3915f158fd63  numpy-1.21.0-cp38-cp38-manylinux_2_5_i686.manylinux1_i686.whl\n    1a79926ad8d3dda573f5c2d8d06e0e38  numpy-1.21.0-cp38-cp38-manylinux_2_5_x86_64.manylinux1_x86_64.whl\n    0b39eb396a1d5983f6eb2075a867a1a6  numpy-1.21.0-cp38-cp38-win32.whl\n    5c8c3e94f5a55123b1a0d3a4df14b505  numpy-1.21.0-cp38-cp38-win_amd64.whl\n    c6e9fa30e82e3ca1551d2f048d4a1dc4  numpy-1.21.0-cp39-cp39-macosx_10_9_universal2.whl\n    96d7d3a438296bfc68b819b3624936a5  numpy-1.21.0-cp39-cp39-macosx_10_9_x86_64.whl\n    31cf2152b4151912be9d165633a7d8eb  numpy-1.21.0-cp39-cp39-macosx_11_0_arm64.whl\n    e49cd2db6ec712b8b1d516154b5a034a  numpy-1.21.0-cp39-cp39-manylinux_2_12_i686.manylinux2010_i686.whl\n    c10e13fef152ed1c64151c8b6f6d0799  numpy-1.21.0-cp39-cp39-manylinux_2_12_x86_64.manylinux2010_x86_64.whl\n    a627acdfcd302807cf8592d5bd958d35  numpy-1.21.0-cp39-cp39-manylinux_2_17_aarch64.manylinux2014_aarch64.whl\n    e2287cd16300b363d376b661646fded9  numpy-1.21.0-cp39-cp39-win32.whl\n    29d1bf596981d930bb1c95c944b4b3d8  numpy-1.21.0-cp39-cp39-win_amd64.whl\n    42d05fcbab6137a404be36f27fc254f0  numpy-1.21.0-pp37-pypy37_pp73-manylinux_2_12_x86_64.manylinux2010_x86_64.whl\n    003e34bd2cba06e7fe299a864964ea24  numpy-1.21.0.tar.gz\n    930ebfdffd10fed701a7823691f02983  numpy-1.21.0.zip\n\nSHA256\n------\n::\n\n    d5caa946a9f55511e76446e170bdad1d12d6b54e17a2afe7b189112ed4412bb8  numpy-1.21.0-cp37-cp37m-macosx_10_9_x86_64.whl\n    ac4fd578322842dbda8d968e3962e9f22e862b6ec6e3378e7415625915e2da4d  numpy-1.21.0-cp37-cp37m-manylinux_2_12_i686.manylinux2010_i686.whl\n    598fe100b2948465cf3ed64b1a326424b5e4be2670552066e17dfaa67246011d  numpy-1.21.0-cp37-cp37m-manylinux_2_12_x86_64.manylinux2010_x86_64.whl\n    7c55407f739f0bfcec67d0df49103f9333edc870061358ac8a8c9e37ea02fcd2  numpy-1.21.0-cp37-cp37m-manylinux_2_17_aarch64.manylinux2014_aarch64.whl\n    75579acbadbf74e3afd1153da6177f846212ea2a0cc77de53523ae02c9256513  numpy-1.21.0-cp37-cp37m-manylinux_2_5_i686.manylinux1_i686.whl\n    cc367c86eb87e5b7c9592935620f22d13b090c609f1b27e49600cd033b529f54  numpy-1.21.0-cp37-cp37m-manylinux_2_5_x86_64.manylinux1_x86_64.whl\n    d89b0dc7f005090e32bb4f9bf796e1dcca6b52243caf1803fdd2b748d8561f63  numpy-1.21.0-cp37-cp37m-win32.whl\n    eda2829af498946c59d8585a9fd74da3f810866e05f8df03a86f70079c7531dd  numpy-1.21.0-cp37-cp37m-win_amd64.whl\n    1a784e8ff7ea2a32e393cc53eb0003eca1597c7ca628227e34ce34eb11645a0e  numpy-1.21.0-cp38-cp38-macosx_10_9_universal2.whl\n    bba474a87496d96e61461f7306fba2ebba127bed7836212c360f144d1e72ac54  numpy-1.21.0-cp38-cp38-macosx_10_9_x86_64.whl\n    fd0a359c1c17f00cb37de2969984a74320970e0ceef4808c32e00773b06649d9  numpy-1.21.0-cp38-cp38-macosx_11_0_arm64.whl\n    e4d5a86a5257843a18fb1220c5f1c199532bc5d24e849ed4b0289fb59fbd4d8f  numpy-1.21.0-cp38-cp38-manylinux_2_12_i686.manylinux2010_i686.whl\n    620732f42259eb2c4642761bd324462a01cdd13dd111740ce3d344992dd8492f  numpy-1.21.0-cp38-cp38-manylinux_2_12_x86_64.manylinux2010_x86_64.whl\n    b9205711e5440954f861ceeea8f1b415d7dd15214add2e878b4d1cf2bcb1a914  numpy-1.21.0-cp38-cp38-manylinux_2_17_aarch64.manylinux2014_aarch64.whl\n    ad09f55cc95ed8d80d8ab2052f78cc21cb231764de73e229140d81ff49d8145e  numpy-1.21.0-cp38-cp38-manylinux_2_5_i686.manylinux1_i686.whl\n    a1f2fb2da242568af0271455b89aee0f71e4e032086ee2b4c5098945d0e11cf6  numpy-1.21.0-cp38-cp38-manylinux_2_5_x86_64.manylinux1_x86_64.whl\n    e58ddb53a7b4959932f5582ac455ff90dcb05fac3f8dcc8079498d43afbbde6c  numpy-1.21.0-cp38-cp38-win32.whl\n    d2910d0a075caed95de1a605df00ee03b599de5419d0b95d55342e9a33ad1fb3  numpy-1.21.0-cp38-cp38-win_amd64.whl\n    a290989cd671cd0605e9c91a70e6df660f73ae87484218e8285c6522d29f6e38  numpy-1.21.0-cp39-cp39-macosx_10_9_universal2.whl\n    3537b967b350ad17633b35c2f4b1a1bbd258c018910b518c30b48c8e41272717  numpy-1.21.0-cp39-cp39-macosx_10_9_x86_64.whl\n    ccc6c650f8700ce1e3a77668bb7c43e45c20ac06ae00d22bdf6760b38958c883  numpy-1.21.0-cp39-cp39-macosx_11_0_arm64.whl\n    709884863def34d72b183d074d8ba5cfe042bc3ff8898f1ffad0209161caaa99  numpy-1.21.0-cp39-cp39-manylinux_2_12_i686.manylinux2010_i686.whl\n    bebab3eaf0641bba26039fb0b2c5bf9b99407924b53b1ea86e03c32c64ef5aef  numpy-1.21.0-cp39-cp39-manylinux_2_12_x86_64.manylinux2010_x86_64.whl\n    cf680682ad0a3bef56dae200dbcbac2d57294a73e5b0f9864955e7dd7c2c2491  numpy-1.21.0-cp39-cp39-manylinux_2_17_aarch64.manylinux2014_aarch64.whl\n    d95d16204cd51ff1a1c8d5f9958ce90ae190be81d348b514f9be39f878b8044a  numpy-1.21.0-cp39-cp39-win32.whl\n    2ba579dde0563f47021dcd652253103d6fd66165b18011dce1a0609215b2791e  numpy-1.21.0-cp39-cp39-win_amd64.whl\n    3c40e6b860220ed862e8097b8f81c9af6d7405b723f4a7af24a267b46f90e461  numpy-1.21.0-pp37-pypy37_pp73-manylinux_2_12_x86_64.manylinux2010_x86_64.whl\n    b662c841b29848c04d9134f31dbaa7d4c8e673f45bb3a5f28d02f49c424d558a  numpy-1.21.0.tar.gz\n    e80fe25cba41c124d04c662f33f6364909b985f2eb5998aaa5ae4b9587242cce  numpy-1.21.0.zip\n\n\n.. currentmodule:: numpy\n\n==========================\n", "1.24.4": "==========================\nNumPy 1.24.4 is a maintenance release that fixes bugs and regressions discovered after the\n1.24.3 release. The Python versions supported by this release are 3.8-3.11.\n\nContributors\n============\n\nA total of 4 people contributed to this release.  People with a \"+\" by their\nnames contributed a patch for the first time.\n\n* Bas van Beek\n* Charles Harris\n* Sebastian Berg\n* Hongyang Peng +\n\nPull requests merged\n====================\n\nA total of 6 pull requests were merged for this release.\n\n* `23720 <https://github.com/numpy/numpy/pull/23720>`__: MAINT, BLD: Pin rtools to version 4.0 for Windows builds.\n* `23739 <https://github.com/numpy/numpy/pull/23739>`__: BUG: fix the method for checking local files for 1.24.x\n* `23760 <https://github.com/numpy/numpy/pull/23760>`__: MAINT: Copy rtools installation from install-rtools.\n* `23761 <https://github.com/numpy/numpy/pull/23761>`__: BUG: Fix masked array ravel order for A (and somewhat K)\n* `23890 <https://github.com/numpy/numpy/pull/23890>`__: TYP,DOC: Annotate and document the ``metadata`` parameter of...\n* `23994 <https://github.com/numpy/numpy/pull/23994>`__: MAINT: Update rtools installation\n\n\nChecksums\n=========\n\nMD5\n---\n::\n\n    25049e3aee79dde29e7a498d3ad13379  numpy-1.24.4-cp310-cp310-macosx_10_9_x86_64.whl\n    579b5c357c918feaef4af03af8afb721  numpy-1.24.4-cp310-cp310-macosx_11_0_arm64.whl\n    c873a14fa4f0210884db9c05e2904286  numpy-1.24.4-cp310-cp310-manylinux_2_17_aarch64.manylinux2014_aarch64.whl\n    110a13ac016286059f0658b52b3646c0  numpy-1.24.4-cp310-cp310-manylinux_2_17_x86_64.manylinux2014_x86_64.whl\n    fa67218966c0aef4094867cad7703648  numpy-1.24.4-cp310-cp310-win32.whl\n    6ee768803d8ebac43ee0a04e628a69f9  numpy-1.24.4-cp310-cp310-win_amd64.whl\n    0c918c16b58cb7f6773ea7d76e0bdaff  numpy-1.24.4-cp311-cp311-macosx_10_9_x86_64.whl\n    20506ae8003faf097c6b3a8915b4140e  numpy-1.24.4-cp311-cp311-macosx_11_0_arm64.whl\n    902df9d5963e89d88a1939d94207857f  numpy-1.24.4-cp311-cp311-manylinux_2_17_aarch64.manylinux2014_aarch64.whl\n    2543611d802c141c8276e4868b4d9619  numpy-1.24.4-cp311-cp311-manylinux_2_17_x86_64.manylinux2014_x86_64.whl\n    37b23a4e4e148d61dd3a515ac5dbf7ec  numpy-1.24.4-cp311-cp311-win32.whl\n    25e9f6bee2b65ff2a87588e717f15165  numpy-1.24.4-cp311-cp311-win_amd64.whl\n    f39a0cc3655a482af7d300bcaff5978e  numpy-1.24.4-cp38-cp38-macosx_10_9_x86_64.whl\n    9ed27941388fdb392e8969169f3fc600  numpy-1.24.4-cp38-cp38-macosx_11_0_arm64.whl\n    dee3f0c7482f1dc8bd1cd27b9b028a2c  numpy-1.24.4-cp38-cp38-manylinux_2_17_aarch64.manylinux2014_aarch64.whl\n    2cc0967af29df3caef9fb3520f14e071  numpy-1.24.4-cp38-cp38-manylinux_2_17_x86_64.manylinux2014_x86_64.whl\n    8572a3a0973fa78355bcb5f737745b47  numpy-1.24.4-cp38-cp38-win32.whl\n    771c63f2ef0d31466bbb12362a532265  numpy-1.24.4-cp38-cp38-win_amd64.whl\n    5713d9dc3dff287fb72121fe1960c48d  numpy-1.24.4-cp39-cp39-macosx_10_9_x86_64.whl\n    4e6718e3b655219a2a733b4fa242ca32  numpy-1.24.4-cp39-cp39-macosx_11_0_arm64.whl\n    31487f9a52ef81f8f88ec7fce8738dad  numpy-1.24.4-cp39-cp39-manylinux_2_17_aarch64.manylinux2014_aarch64.whl\n    ea597b30187e55eb16ee31631e66f60d  numpy-1.24.4-cp39-cp39-manylinux_2_17_x86_64.manylinux2014_x86_64.whl\n    98adbf30c67154056474001c125f6188  numpy-1.24.4-cp39-cp39-win32.whl\n    49c444b0e572ef45f1d92c106a36004e  numpy-1.24.4-cp39-cp39-win_amd64.whl\n    cdddfdeac437b0f20b4e366f00b5c42e  numpy-1.24.4-pp38-pypy38_pp73-macosx_10_9_x86_64.whl\n    3778338c15628caa3abd61e6f7bd46ec  numpy-1.24.4-pp38-pypy38_pp73-manylinux_2_17_x86_64.manylinux2014_x86_64.whl\n    e16bd49d5295dc1b01ed50d76229fb54  numpy-1.24.4-pp38-pypy38_pp73-win_amd64.whl\n    3f3995540a17854a29dc79f8eeecd832  numpy-1.24.4.tar.gz\n\nSHA256\n------\n::\n\n    c0bfb52d2169d58c1cdb8cc1f16989101639b34c7d3ce60ed70b19c63eba0b64  numpy-1.24.4-cp310-cp310-macosx_10_9_x86_64.whl\n    ed094d4f0c177b1b8e7aa9cba7d6ceed51c0e569a5318ac0ca9a090680a6a1b1  numpy-1.24.4-cp310-cp310-macosx_11_0_arm64.whl\n    79fc682a374c4a8ed08b331bef9c5f582585d1048fa6d80bc6c35bc384eee9b4  numpy-1.24.4-cp310-cp310-manylinux_2_17_aarch64.manylinux2014_aarch64.whl\n    7ffe43c74893dbf38c2b0a1f5428760a1a9c98285553c89e12d70a96a7f3a4d6  numpy-1.24.4-cp310-cp310-manylinux_2_17_x86_64.manylinux2014_x86_64.whl\n    4c21decb6ea94057331e111a5bed9a79d335658c27ce2adb580fb4d54f2ad9bc  numpy-1.24.4-cp310-cp310-win32.whl\n    b4bea75e47d9586d31e892a7401f76e909712a0fd510f58f5337bea9572c571e  numpy-1.24.4-cp310-cp310-win_amd64.whl\n    f136bab9c2cfd8da131132c2cf6cc27331dd6fae65f95f69dcd4ae3c3639c810  numpy-1.24.4-cp311-cp311-macosx_10_9_x86_64.whl\n    e2926dac25b313635e4d6cf4dc4e51c8c0ebfed60b801c799ffc4c32bf3d1254  numpy-1.24.4-cp311-cp311-macosx_11_0_arm64.whl\n    222e40d0e2548690405b0b3c7b21d1169117391c2e82c378467ef9ab4c8f0da7  numpy-1.24.4-cp311-cp311-manylinux_2_17_aarch64.manylinux2014_aarch64.whl\n    7215847ce88a85ce39baf9e89070cb860c98fdddacbaa6c0da3ffb31b3350bd5  numpy-1.24.4-cp311-cp311-manylinux_2_17_x86_64.manylinux2014_x86_64.whl\n    4979217d7de511a8d57f4b4b5b2b965f707768440c17cb70fbf254c4b225238d  numpy-1.24.4-cp311-cp311-win32.whl\n    b7b1fc9864d7d39e28f41d089bfd6353cb5f27ecd9905348c24187a768c79694  numpy-1.24.4-cp311-cp311-win_amd64.whl\n    1452241c290f3e2a312c137a9999cdbf63f78864d63c79039bda65ee86943f61  numpy-1.24.4-cp38-cp38-macosx_10_9_x86_64.whl\n    04640dab83f7c6c85abf9cd729c5b65f1ebd0ccf9de90b270cd61935eef0197f  numpy-1.24.4-cp38-cp38-macosx_11_0_arm64.whl\n    a5425b114831d1e77e4b5d812b69d11d962e104095a5b9c3b641a218abcc050e  numpy-1.24.4-cp38-cp38-manylinux_2_17_aarch64.manylinux2014_aarch64.whl\n    dd80e219fd4c71fc3699fc1dadac5dcf4fd882bfc6f7ec53d30fa197b8ee22dc  numpy-1.24.4-cp38-cp38-manylinux_2_17_x86_64.manylinux2014_x86_64.whl\n    4602244f345453db537be5314d3983dbf5834a9701b7723ec28923e2889e0bb2  numpy-1.24.4-cp38-cp38-win32.whl\n    692f2e0f55794943c5bfff12b3f56f99af76f902fc47487bdfe97856de51a706  numpy-1.24.4-cp38-cp38-win_amd64.whl\n    2541312fbf09977f3b3ad449c4e5f4bb55d0dbf79226d7724211acc905049400  numpy-1.24.4-cp39-cp39-macosx_10_9_x86_64.whl\n    9667575fb6d13c95f1b36aca12c5ee3356bf001b714fc354eb5465ce1609e62f  numpy-1.24.4-cp39-cp39-macosx_11_0_arm64.whl\n    f3a86ed21e4f87050382c7bc96571755193c4c1392490744ac73d660e8f564a9  numpy-1.24.4-cp39-cp39-manylinux_2_17_aarch64.manylinux2014_aarch64.whl\n    d11efb4dbecbdf22508d55e48d9c8384db795e1b7b51ea735289ff96613ff74d  numpy-1.24.4-cp39-cp39-manylinux_2_17_x86_64.manylinux2014_x86_64.whl\n    6620c0acd41dbcb368610bb2f4d83145674040025e5536954782467100aa8835  numpy-1.24.4-cp39-cp39-win32.whl\n    befe2bf740fd8373cf56149a5c23a0f601e82869598d41f8e188a0e9869926f8  numpy-1.24.4-cp39-cp39-win_amd64.whl\n    31f13e25b4e304632a4619d0e0777662c2ffea99fcae2029556b17d8ff958aef  numpy-1.24.4-pp38-pypy38_pp73-macosx_10_9_x86_64.whl\n    95f7ac6540e95bc440ad77f56e520da5bf877f87dca58bd095288dce8940532a  numpy-1.24.4-pp38-pypy38_pp73-manylinux_2_17_x86_64.manylinux2014_x86_64.whl\n    e98f220aa76ca2a977fe435f5b04d7b3470c0a2e6312907b37ba6068f26787f2  numpy-1.24.4-pp38-pypy38_pp73-win_amd64.whl\n    80f5e3a4e498641401868df4208b74581206afbee7cf7b8329daae82676d9463  numpy-1.24.4.tar.gz\n\n\n.. currentmodule:: numpy\n\n========================\nNumPy 1.24 Release Notes\n========================\nThe NumPy 1.24.0 release continues the ongoing work to improve the handling and\npromotion of dtypes, increase the execution speed, and clarify the\ndocumentation.  There are also a large number of new and expired deprecations\ndue to changes in promotion and cleanups. This might be called a deprecation\nrelease. Highlights are\n\n* Many new deprecations, check them out.\n* Many expired deprecations,\n* New F2PY features and fixes.\n* New \"dtype\" and \"casting\" keywords for stacking functions.\n\nSee below for the details,\n\nThis release supports Python versions 3.8-3.11.\n\n\nDeprecations\n============\n\nDeprecate fastCopyAndTranspose and PyArray_CopyAndTranspose\n-----------------------------------------------------------\nThe ``numpy.fastCopyAndTranspose`` function has been deprecated. Use the\ncorresponding copy and transpose methods directly::\n\n    arr.T.copy()\n\nThe underlying C function ``PyArray_CopyAndTranspose`` has also been deprecated\nfrom the NumPy C-API.\n\n(`gh-22313 <https://github.com/numpy/numpy/pull/22313>`__)\n\nConversion of out-of-bound Python integers\n------------------------------------------\nAttempting a conversion from a Python integer to a NumPy value will now always\ncheck whether the result can be represented by NumPy.  This means the following\nexamples will fail in the future and give a ``DeprecationWarning`` now::\n\n    np.uint8(-1)\n    np.array([3000], dtype=np.int8)\n\nMany of these did succeed before.  Such code was mainly useful for unsigned\nintegers with negative values such as ``np.uint8(-1)`` giving\n``np.iinfo(np.uint8).max``.\n\nNote that conversion between NumPy integers is unaffected, so that\n``np.array(-1).astype(np.uint8)`` continues to work and use C integer overflow\nlogic.  For negative values, it will also work to view the array:\n``np.array(-1, dtype=np.int8).view(np.uint8)``.\nIn some cases, using ``np.iinfo(np.uint8).max`` or ``val % 2**8`` may also\nwork well.\n\nIn rare cases input data may mix both negative values and very large unsigned\nvalues (i.e. ``-1`` and ``2**63``).  There it is unfortunately necessary\nto use ``%`` on the Python value or use signed or unsigned conversion\ndepending on whether negative values are expected.\n\n(`gh-22385 <https://github.com/numpy/numpy/pull/22385>`__)\n\nDeprecate ``msort``\n-------------------\nThe ``numpy.msort`` function is deprecated. Use ``np.sort(a, axis=0)`` instead.\n\n(`gh-22456 <https://github.com/numpy/numpy/pull/22456>`__)\n\n``np.str0`` and similar are now deprecated\n------------------------------------------\nThe scalar type aliases ending in a 0 bit size: ``np.object0``, ``np.str0``,\n``np.bytes0``, ``np.void0``, ``np.int0``, ``np.uint0`` as well as ``np.bool8``\nare now deprecated and will eventually be removed.\n\n(`gh-22607 <https://github.com/numpy/numpy/pull/22607>`__)\n\n\nExpired deprecations\n====================\n\n* The ``normed`` keyword argument has been removed from\n  `np.histogram`, `np.histogram2d`, and `np.histogramdd`.\n  Use ``density`` instead.  If ``normed`` was passed by\n  position, ``density`` is now used.\n\n  (`gh-21645 <https://github.com/numpy/numpy/pull/21645>`__)\n\n* Ragged array creation will now always raise a ``ValueError`` unless\n  ``dtype=object`` is passed.  This includes very deeply nested sequences.\n\n  (`gh-22004 <https://github.com/numpy/numpy/pull/22004>`__)\n\n* Support for Visual Studio 2015 and earlier has been removed.\n\n* Support for the Windows Interix POSIX interop layer has been removed.\n\n  (`gh-22139 <https://github.com/numpy/numpy/pull/22139>`__)\n\n* Support for Cygwin < 3.3 has been removed.\n\n  (`gh-22159 <https://github.com/numpy/numpy/pull/22159>`__)\n\n* The mini() method of ``np.ma.MaskedArray`` has been removed. Use either\n  ``np.ma.MaskedArray.min()`` or ``np.ma.minimum.reduce()``.\n\n* The single-argument form of ``np.ma.minimum`` and ``np.ma.maximum`` has been\n  removed. Use ``np.ma.minimum.reduce()`` or ``np.ma.maximum.reduce()``\n  instead.\n\n  (`gh-22228 <https://github.com/numpy/numpy/pull/22228>`__)\n\n* Passing dtype instances other than the canonical (mainly native byte-order)\n  ones to ``dtype=`` or ``signature=`` in ufuncs will now raise a\n  ``TypeError``.  We recommend passing the strings ``\"int8\"`` or scalar types\n  ``np.int8`` since the byte-order, datetime/timedelta unit, etc. are never\n  enforced.  (Initially deprecated in NumPy 1.21.)\n\n  (`gh-22540 <https://github.com/numpy/numpy/pull/22540>`__)\n\n* The ``dtype=`` argument to comparison ufuncs is now applied correctly.  That\n  means that only ``bool`` and ``object`` are valid values and ``dtype=object``\n  is enforced.\n\n  (`gh-22541 <https://github.com/numpy/numpy/pull/22541>`__)\n\n* The deprecation for the aliases ``np.object``, ``np.bool``, ``np.float``,\n  ``np.complex``, ``np.str``, and ``np.int`` is expired (introduces NumPy\n  1.20).  Some of these will now give a FutureWarning in addition to raising an\n  error since they will be mapped to the NumPy scalars in the future.\n\n  (`gh-22607 <https://github.com/numpy/numpy/pull/22607>`__)\n\n\nCompatibility notes\n===================\n\n``array.fill(scalar)`` may behave slightly different\n----------------------------------------------------\n``numpy.ndarray.fill`` may in some cases behave slightly different now due to\nthe fact that the logic is aligned with item assignment::\n\n    arr = np.array([1])   with any dtype/value\n    arr.fill(scalar)\n     is now identical to:\n    arr[0] = scalar\n\nPreviously casting may have produced slightly different answers when using\nvalues that could not be represented in the target ``dtype`` or when the target\nhad ``object`` dtype.\n\n(`gh-20924 <https://github.com/numpy/numpy/pull/20924>`__)\n\nSubarray to object cast now copies\n----------------------------------\nCasting a dtype that includes a subarray to an object will now ensure a copy of\nthe subarray.  Previously an unsafe view was returned::\n\n    arr = np.ones(3, dtype=[(\"f\", \"i\", 3)])\n    subarray_fields = arr.astype(object)[0]\n    subarray = subarray_fields[0]   \"f\" field\n\n    np.may_share_memory(subarray, arr)\n\nIs now always false.  While previously it was true for the specific cast.\n\n(`gh-21925 <https://github.com/numpy/numpy/pull/21925>`__)\n\nReturned arrays respect uniqueness of dtype kwarg objects\n---------------------------------------------------------\nWhen the ``dtype`` keyword argument is used with :py:func:`np.array()` or\n:py:func:`asarray()`, the dtype of the returned array now always exactly\nmatches the dtype provided by the caller.\n\nIn some cases this change means that a *view* rather than the input array is\nreturned.  The following is an example for this on 64bit Linux where ``long``\nand ``longlong`` are the same precision but different ``dtypes``::\n\n    >>> arr = np.array([1, 2, 3], dtype=\"long\")\n    >>> new_dtype = np.dtype(\"longlong\")\n    >>> new = np.asarray(arr, dtype=new_dtype)\n    >>> new.dtype is new_dtype\n    True\n    >>> new is arr\n    False\n\nBefore the change, the ``dtype`` did not match because ``new is arr`` was\n``True``.\n\n(`gh-21995 <https://github.com/numpy/numpy/pull/21995>`__)\n\nDLPack export raises ``BufferError``\n------------------------------------\nWhen an array buffer cannot be exported via DLPack a ``BufferError`` is now\nalways raised where previously ``TypeError`` or ``RuntimeError`` was raised.\nThis allows falling back to the buffer protocol or ``__array_interface__`` when\nDLPack was tried first.\n\n(`gh-22542 <https://github.com/numpy/numpy/pull/22542>`__)\n\nNumPy builds are no longer tested on GCC-6\n------------------------------------------\nUbuntu 18.04 is deprecated for GitHub actions and GCC-6 is not available on\nUbuntu 20.04, so builds using that compiler are no longer tested. We still test\nbuilds using GCC-7 and GCC-8.\n\n(`gh-22598 <https://github.com/numpy/numpy/pull/22598>`__)\n\n\nNew Features\n============\n\nNew attribute ``symbol`` added to polynomial classes\n----------------------------------------------------\nThe polynomial classes in the ``numpy.polynomial`` package have a new\n``symbol`` attribute which is used to represent the indeterminate of the\npolynomial.  This can be used to change the value of the variable when\nprinting::\n\n    >>> P_y = np.polynomial.Polynomial([1, 0, -1], symbol=\"y\")\n    >>> print(P_y)\n    1.0 + 0.0\u00b7y\u00b9 - 1.0\u00b7y\u00b2\n\nNote that the polynomial classes only support 1D polynomials, so operations\nthat involve polynomials with different symbols are disallowed when the result\nwould be multivariate::\n\n    >>> P = np.polynomial.Polynomial([1, -1])   default symbol is \"x\"\n    >>> P_z = np.polynomial.Polynomial([1, 1], symbol=\"z\")\n    >>> P * P_z\n    Traceback (most recent call last)\n       ...\n    ValueError: Polynomial symbols differ\n\nThe symbol can be any valid Python identifier. The default is ``symbol=x``,\nconsistent with existing behavior.\n\n(`gh-16154 <https://github.com/numpy/numpy/pull/16154>`__)\n\nF2PY support for Fortran ``character`` strings\n----------------------------------------------\nF2PY now supports wrapping Fortran functions with:\n\n* character (e.g. ``character x``)\n* character array (e.g. ``character, dimension(n) :: x``)\n* character string (e.g. ``character(len=10) x``)\n* and character string array (e.g. ``character(len=10), dimension(n, m) :: x``)\n\narguments, including passing Python unicode strings as Fortran character string\narguments.\n\n(`gh-19388 <https://github.com/numpy/numpy/pull/19388>`__)\n\nNew function ``np.show_runtime``\n--------------------------------\nA new function ``numpy.show_runtime`` has been added to display the runtime\ninformation of the machine in addition to ``numpy.show_config`` which displays\nthe build-related information.\n\n(`gh-21468 <https://github.com/numpy/numpy/pull/21468>`__)\n\n``strict`` option for ``testing.assert_array_equal``\n----------------------------------------------------\nThe ``strict`` option is now available for ``testing.assert_array_equal``.\nSetting ``strict=True`` will disable the broadcasting behaviour for scalars and\nensure that input arrays have the same data type.\n\n(`gh-21595 <https://github.com/numpy/numpy/pull/21595>`__)\n\nNew parameter ``equal_nan`` added to ``np.unique``\n--------------------------------------------------\n``np.unique`` was changed in 1.21 to treat all ``NaN`` values as equal and\nreturn a single ``NaN``. Setting ``equal_nan=False`` will restore pre-1.21\nbehavior to treat ``NaNs`` as unique. Defaults to ``True``.\n\n(`gh-21623 <https://github.com/numpy/numpy/pull/21623>`__)\n\n``casting`` and ``dtype`` keyword arguments for ``numpy.stack``\n---------------------------------------------------------------\nThe ``casting`` and ``dtype`` keyword arguments are now available for\n``numpy.stack``.  To use them, write ``np.stack(..., dtype=None,\ncasting='same_kind')``.\n\n``casting`` and ``dtype`` keyword arguments for ``numpy.vstack``\n----------------------------------------------------------------\nThe ``casting`` and ``dtype`` keyword arguments are now available for\n``numpy.vstack``.  To use them, write ``np.vstack(..., dtype=None,\ncasting='same_kind')``.\n\n``casting`` and ``dtype`` keyword arguments for ``numpy.hstack``\n----------------------------------------------------------------\nThe ``casting`` and ``dtype`` keyword arguments are now available for\n``numpy.hstack``.  To use them, write ``np.hstack(..., dtype=None,\ncasting='same_kind')``.\n\n(`gh-21627 <https://github.com/numpy/numpy/pull/21627>`__)\n\nThe bit generator underlying the singleton RandomState can be changed\n---------------------------------------------------------------------\nThe singleton ``RandomState`` instance exposed in the ``numpy.random`` module\nis initialized at startup with the ``MT19937`` bit generator. The new function\n``set_bit_generator`` allows the default bit generator to be replaced with a\nuser-provided bit generator. This function has been introduced to provide a\nmethod allowing seamless integration of a high-quality, modern bit generator in\nnew code with existing code that makes use of the singleton-provided random\nvariate generating functions. The companion function ``get_bit_generator``\nreturns the current bit generator being used by the singleton ``RandomState``.\nThis is provided to simplify restoring the original source of randomness if\nrequired.\n\nThe preferred method to generate reproducible random numbers is to use a modern\nbit generator in an instance of ``Generator``. The function ``default_rng``\nsimplifies instantiation::\n\n   >>> rg = np.random.default_rng(3728973198)\n   >>> rg.random()\n\nThe same bit generator can then be shared with the singleton instance so that\ncalling functions in the ``random`` module will use the same bit generator::\n\n   >>> orig_bit_gen = np.random.get_bit_generator()\n   >>> np.random.set_bit_generator(rg.bit_generator)\n   >>> np.random.normal()\n\nThe swap is permanent (until reversed) and so any call to functions in the\n``random`` module will use the new bit generator. The original can be restored\nif required for code to run correctly::\n\n   >>> np.random.set_bit_generator(orig_bit_gen)\n\n(`gh-21976 <https://github.com/numpy/numpy/pull/21976>`__)\n\n``np.void`` now has a ``dtype`` argument\n----------------------------------------\nNumPy now allows constructing structured void scalars directly by\npassing the ``dtype`` argument to ``np.void``.\n\n(`gh-22316 <https://github.com/numpy/numpy/pull/22316>`__)\n\n\nImprovements\n============\n\nF2PY Improvements\n-----------------\n* The generated extension modules don't use the deprecated NumPy-C API anymore\n* Improved ``f2py`` generated exception messages\n* Numerous bug and ``flake8`` warning fixes\n* various CPP macros that one can use within C-expressions of signature files\n  are prefixed with ``f2py_``. For example, one should use ``f2py_len(x)``\n  instead of ``len(x)``\n* A new construct ``character(f2py_len=...)`` is introduced to support\n  returning assumed length character strings (e.g. ``character(len=*)``) from\n  wrapper functions\n\nA hook to support rewriting ``f2py`` internal data structures after reading all\nits input files is introduced. This is required, for instance, for BC of SciPy\nsupport where character arguments are treated as character strings arguments in\n``C`` expressions.\n\n(`gh-19388 <https://github.com/numpy/numpy/pull/19388>`__)\n\nIBM zSystems Vector Extension Facility (SIMD)\n---------------------------------------------\nAdded support for SIMD extensions of zSystem (z13, z14, z15), through the\nuniversal intrinsics interface. This support leads to performance improvements\nfor all SIMD kernels implemented using the universal intrinsics, including the\nfollowing operations: rint, floor, trunc, ceil, sqrt, absolute, square,\nreciprocal, tanh, sin, cos, equal, not_equal, greater, greater_equal, less,\nless_equal, maximum, minimum, fmax, fmin, argmax, argmin, add, subtract,\nmultiply, divide.\n\n(`gh-20913 <https://github.com/numpy/numpy/pull/20913>`__)\n\nNumPy now gives floating point errors in casts\n----------------------------------------------\nIn most cases, NumPy previously did not give floating point warnings or errors\nwhen these happened during casts.  For examples, casts like::\n\n    np.array([2e300]).astype(np.float32)   overflow for float32\n    np.array([np.inf]).astype(np.int64)\n\nShould now generally give floating point warnings.  These warnings should warn\nthat floating point overflow occurred.  For errors when converting floating\npoint values to integers users should expect invalid value warnings.\n\nUsers can modify the behavior of these warnings using ``np.errstate``.\n\nNote that for float to int casts, the exact warnings that are given may\nbe platform dependent.  For example::\n\n    arr = np.full(100, value=1000, dtype=np.float64)\n    arr.astype(np.int8)\n\nMay give a result equivalent to (the intermediate cast means no warning is\ngiven)::\n\n    arr.astype(np.int64).astype(np.int8)\n\nMay return an undefined result, with a warning set::\n\n    RuntimeWarning: invalid value encountered in cast\n\nThe precise behavior is subject to the C99 standard and its implementation in\nboth software and hardware.\n\n(`gh-21437 <https://github.com/numpy/numpy/pull/21437>`__)\n\nF2PY supports the value attribute\n---------------------------------\nThe Fortran standard requires that variables declared with the ``value``\nattribute must be passed by value instead of reference. F2PY now supports this\nuse pattern correctly. So ``integer, intent(in), value :: x`` in Fortran codes\nwill have correct wrappers generated.\n\n(`gh-21807 <https://github.com/numpy/numpy/pull/21807>`__)\n\nAdded pickle support for third-party BitGenerators\n--------------------------------------------------\nThe pickle format for bit generators was extended to allow each bit generator\nto supply its own constructor when during pickling. Previous  versions of NumPy\nonly supported unpickling ``Generator`` instances created with one of the core\nset of bit generators supplied with NumPy. Attempting to unpickle a\n``Generator`` that used a third-party bit generators would fail since the\nconstructor used during the unpickling was only aware of the bit generators\nincluded in NumPy.\n\n(`gh-22014 <https://github.com/numpy/numpy/pull/22014>`__)\n\narange() now explicitly fails with dtype=str\n---------------------------------------------\nPreviously, the ``np.arange(n, dtype=str)`` function worked for ``n=1`` and\n``n=2``, but would raise a non-specific exception message for other values of\n``n``. Now, it raises a `TypeError` informing that ``arange`` does not support\nstring dtypes::\n\n    >>> np.arange(2, dtype=str)\n    Traceback (most recent call last)\n       ...\n    TypeError: arange() not supported for inputs with DType <class 'numpy.dtype[str_]'>.\n\n(`gh-22055 <https://github.com/numpy/numpy/pull/22055>`__)\n\n``numpy.typing`` protocols are now runtime checkable\n----------------------------------------------------\nThe protocols used in ``numpy.typing.ArrayLike`` and ``numpy.typing.DTypeLike``\nare now properly marked as runtime checkable, making them easier to use for\nruntime type checkers.\n\n(`gh-22357 <https://github.com/numpy/numpy/pull/22357>`__)\n\n\nPerformance improvements and changes\n====================================\n\nFaster version of ``np.isin`` and ``np.in1d`` for integer arrays\n----------------------------------------------------------------\n``np.in1d`` (used by ``np.isin``) can now switch to a faster algorithm (up to\n>10x faster) when it is passed two integer arrays.  This is often automatically\nused, but you can use ``kind=\"sort\"`` or ``kind=\"table\"`` to force the old or\nnew method, respectively.\n\n(`gh-12065 <https://github.com/numpy/numpy/pull/12065>`__)\n\nFaster comparison operators\n----------------------------\nThe comparison functions (``numpy.equal``, ``numpy.not_equal``, ``numpy.less``,\n``numpy.less_equal``, ``numpy.greater`` and ``numpy.greater_equal``) are now\nmuch faster as they are now vectorized with universal intrinsics. For a CPU\nwith SIMD extension AVX512BW, the performance gain is up to 2.57x, 1.65x and\n19.15x for integer, float and boolean data types, respectively (with N=50000).\n\n(`gh-21483 <https://github.com/numpy/numpy/pull/21483>`__)\n\n\nChanges\n=======\n\nBetter reporting of integer division overflow\n---------------------------------------------\nInteger division overflow of scalars and arrays used to provide a\n``RuntimeWarning`` and the return value was undefined leading to crashes at\nrare occasions::\n\n    >>> np.array([np.iinfo(np.int32).min]*10, dtype=np.int32) // np.int32(-1)\n    <stdin>:1: RuntimeWarning: divide by zero encountered in floor_divide\n    array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0], dtype=int32)\n\nInteger division overflow now returns the input dtype's minimum value and raise\nthe following ``RuntimeWarning``::\n\n    >>> np.array([np.iinfo(np.int32).min]*10, dtype=np.int32) // np.int32(-1)\n    <stdin>:1: RuntimeWarning: overflow encountered in floor_divide\n    array([-2147483648, -2147483648, -2147483648, -2147483648, -2147483648,\n           -2147483648, -2147483648, -2147483648, -2147483648, -2147483648],\n          dtype=int32)\n\n(`gh-21506 <https://github.com/numpy/numpy/pull/21506>`__)\n\n``masked_invalid`` now modifies the mask in-place\n-------------------------------------------------\nWhen used with ``copy=False``, ``numpy.ma.masked_invalid`` now modifies the\ninput masked array in-place.  This makes it behave identically to\n``masked_where`` and better matches the documentation.\n\n(`gh-22046 <https://github.com/numpy/numpy/pull/22046>`__)\n\n``nditer``/``NpyIter`` allows all allocating all operands\n---------------------------------------------------------\nThe NumPy iterator available through ``np.nditer`` in Python and as ``NpyIter``\nin C now supports allocating all arrays.  The iterator shape defaults to ``()``\nin this case.  The operands dtype must be provided, since a \"common dtype\"\ncannot be inferred from the other inputs.\n\n(`gh-22457 <https://github.com/numpy/numpy/pull/22457>`__)\n\nChecksums\n=========\n\nMD5\n---\n::\n\n    d60311246bd71b177258ce06e2a4ec57  numpy-1.24.0-cp310-cp310-macosx_10_9_x86_64.whl\n    02022b335938af55cb83bbaebdbff8e1  numpy-1.24.0-cp310-cp310-macosx_11_0_arm64.whl\n    02b35d6612369fcc614c6223aaec0119  numpy-1.24.0-cp310-cp310-manylinux_2_17_aarch64.manylinux2014_aarch64.whl\n    7b8ad389a9619db3e1f8243fc0cfe63d  numpy-1.24.0-cp310-cp310-manylinux_2_17_x86_64.manylinux2014_x86_64.whl\n    6ff4acbb7b1258ccbd528c151eb0fe84  numpy-1.24.0-cp310-cp310-win32.whl\n    d194c96601222db97b0af54fce1cfb1d  numpy-1.24.0-cp310-cp310-win_amd64.whl\n    5fe4eb551a9312e37492da9f5bfb8545  numpy-1.24.0-cp311-cp311-macosx_10_9_x86_64.whl\n    a8e836a768f73e9f509b11c3873c7e09  numpy-1.24.0-cp311-cp311-macosx_11_0_arm64.whl\n    10404d6d1a5a9624f85018f61110b2be  numpy-1.24.0-cp311-cp311-manylinux_2_17_aarch64.manylinux2014_aarch64.whl\n    cfdb0cb844f1db9be2cde998be54d65f  numpy-1.24.0-cp311-cp311-manylinux_2_17_x86_64.manylinux2014_x86_64.whl\n    73bc66ad3ae8656ba18d64db98feb5e1  numpy-1.24.0-cp311-cp311-win32.whl\n    4bbc30a53009c48d364d4dc2c612af95  numpy-1.24.0-cp311-cp311-win_amd64.whl\n    94ce5f6a09605a9675a0d464b1ec6597  numpy-1.24.0-cp38-cp38-macosx_10_9_x86_64.whl\n    e5e42b69a209eda7e6895dda39ea8610  numpy-1.24.0-cp38-cp38-macosx_11_0_arm64.whl\n    36eb6143d1e2aac3c618275edf636983  numpy-1.24.0-cp38-cp38-manylinux_2_17_aarch64.manylinux2014_aarch64.whl\n    712c3718e8b53ff04c626cc4c78492aa  numpy-1.24.0-cp38-cp38-manylinux_2_17_x86_64.manylinux2014_x86_64.whl\n    0a1a48a8e458bd4ce581169484c17e4f  numpy-1.24.0-cp38-cp38-win32.whl\n    c8ab7e4b919548663568a5b5a8b5eab4  numpy-1.24.0-cp38-cp38-win_amd64.whl\n    1783a5d769566111d93c474c79892c01  numpy-1.24.0-cp39-cp39-macosx_10_9_x86_64.whl\n    c9e77130674372c73f8209d58396624d  numpy-1.24.0-cp39-cp39-macosx_11_0_arm64.whl\n    14c0f2f52f20f13a81bba7df27f30145  numpy-1.24.0-cp39-cp39-manylinux_2_17_aarch64.manylinux2014_aarch64.whl\n    c106393b46fa0302dbac49b14a4dfed4  numpy-1.24.0-cp39-cp39-manylinux_2_17_x86_64.manylinux2014_x86_64.whl\n    c83e6d6946f32820f166c3f1ff010ab6  numpy-1.24.0-cp39-cp39-win32.whl\n    acd5a4737d1094d5f40afa584dbd6d79  numpy-1.24.0-cp39-cp39-win_amd64.whl\n    26e32f942c9fd62f64fd9bf6df95b5b1  numpy-1.24.0-pp38-pypy38_pp73-macosx_10_9_x86_64.whl\n    4f027df0cc313ca626b106849999de13  numpy-1.24.0-pp38-pypy38_pp73-manylinux_2_17_x86_64.manylinux2014_x86_64.whl\n    ac58db9a90d0bec95bc7850b9e462f34  numpy-1.24.0-pp38-pypy38_pp73-win_amd64.whl\n    1ca41c84ad9a116402a025d21e35bc64  numpy-1.24.0.tar.gz\n\nSHA256\n------\n::\n\n    6e73a1f4f5b74a42abb55bc2b3d869f1b38cbc8776da5f8b66bf110284f7a437  numpy-1.24.0-cp310-cp310-macosx_10_9_x86_64.whl\n    9387c7d6d50e8f8c31e7bfc034241e9c6f4b3eb5db8d118d6487047b922f82af  numpy-1.24.0-cp310-cp310-macosx_11_0_arm64.whl\n    7ad6a024a32ee61d18f5b402cd02e9c0e22c0fb9dc23751991b3a16d209d972e  numpy-1.24.0-cp310-cp310-manylinux_2_17_aarch64.manylinux2014_aarch64.whl\n    73cf2c5b5a07450f20a0c8e04d9955491970177dce8df8d6903bf253e53268e0  numpy-1.24.0-cp310-cp310-manylinux_2_17_x86_64.manylinux2014_x86_64.whl\n    cec79ff3984b2d1d103183fc4a3361f5b55bbb66cb395cbf5a920a4bb1fd588d  numpy-1.24.0-cp310-cp310-win32.whl\n    4f5e78b8b710cd7cd1a8145994cfffc6ddd5911669a437777d8cedfce6c83a98  numpy-1.24.0-cp310-cp310-win_amd64.whl\n    4445f472b246cad6514cc09fbb5ecb7aab09ca2acc3c16f29f8dca6c468af501  numpy-1.24.0-cp311-cp311-macosx_10_9_x86_64.whl\n    ec3e5e8172a0a6a4f3c2e7423d4a8434c41349141b04744b11a90e017a95bad5  numpy-1.24.0-cp311-cp311-macosx_11_0_arm64.whl\n    f9168790149f917ad8e3cf5047b353fefef753bd50b07c547da0bdf30bc15d91  numpy-1.24.0-cp311-cp311-manylinux_2_17_aarch64.manylinux2014_aarch64.whl\n    ada6c1e9608ceadaf7020e1deea508b73ace85560a16f51bef26aecb93626a72  numpy-1.24.0-cp311-cp311-manylinux_2_17_x86_64.manylinux2014_x86_64.whl\n    f3c4a9a9f92734a4728ddbd331e0124eabbc968a0359a506e8e74a9b0d2d419b  numpy-1.24.0-cp311-cp311-win32.whl\n    90075ef2c6ac6397d0035bcd8b298b26e481a7035f7a3f382c047eb9c3414db0  numpy-1.24.0-cp311-cp311-win_amd64.whl\n    0885d9a7666cafe5f9876c57bfee34226e2b2847bfb94c9505e18d81011e5401  numpy-1.24.0-cp38-cp38-macosx_10_9_x86_64.whl\n    e63d2157f9fc98cc178870db83b0e0c85acdadd598b134b00ebec9e0db57a01f  numpy-1.24.0-cp38-cp38-macosx_11_0_arm64.whl\n    cf8960f72997e56781eb1c2ea256a70124f92a543b384f89e5fb3503a308b1d3  numpy-1.24.0-cp38-cp38-manylinux_2_17_aarch64.manylinux2014_aarch64.whl\n    2f8e0df2ecc1928ef7256f18e309c9d6229b08b5be859163f5caa59c93d53646  numpy-1.24.0-cp38-cp38-manylinux_2_17_x86_64.manylinux2014_x86_64.whl\n    fe44e925c68fb5e8db1334bf30ac1a1b6b963b932a19cf41d2e899cf02f36aab  numpy-1.24.0-cp38-cp38-win32.whl\n    d7f223554aba7280e6057727333ed357b71b7da7422d02ff5e91b857888c25d1  numpy-1.24.0-cp38-cp38-win_amd64.whl\n    ab11f6a7602cf8ea4c093e091938207de3068c5693a0520168ecf4395750f7ea  numpy-1.24.0-cp39-cp39-macosx_10_9_x86_64.whl\n    12bba5561d8118981f2f1ff069ecae200c05d7b6c78a5cdac0911f74bc71cbd1  numpy-1.24.0-cp39-cp39-macosx_11_0_arm64.whl\n    9af91f794d2d3007d91d749ebc955302889261db514eb24caef30e03e8ec1e41  numpy-1.24.0-cp39-cp39-manylinux_2_17_aarch64.manylinux2014_aarch64.whl\n    8b1ddfac6a82d4f3c8e99436c90b9c2c68c0bb14658d1684cdd00f05fab241f5  numpy-1.24.0-cp39-cp39-manylinux_2_17_x86_64.manylinux2014_x86_64.whl\n    ac4fe68f1a5a18136acebd4eff91aab8bed00d1ef2fdb34b5d9192297ffbbdfc  numpy-1.24.0-cp39-cp39-win32.whl\n    667b5b1f6a352419e340f6475ef9930348ae5cb7fca15f2cc3afcb530823715e  numpy-1.24.0-cp39-cp39-win_amd64.whl\n    4d01f7832fa319a36fd75ba10ea4027c9338ede875792f7bf617f4b45056fc3a  numpy-1.24.0-pp38-pypy38_pp73-macosx_10_9_x86_64.whl\n    dbb0490f0a880700a6cc4d000384baf19c1f4df59fff158d9482d4dbbca2b239  numpy-1.24.0-pp38-pypy38_pp73-manylinux_2_17_x86_64.manylinux2014_x86_64.whl\n    0104d8adaa3a4cc60c2777cab5196593bf8a7f416eda133be1f3803dd0838886  numpy-1.24.0-pp38-pypy38_pp73-win_amd64.whl\n    c4ab7c9711fe6b235e86487ca74c1b092a6dd59a3cb45b63241ea0a148501853  numpy-1.24.0.tar.gz\n\n\n.. currentmodule:: numpy\n\n==========================\n", "1.19.4": "==========================\n\nNumPy 1.19.4 is a quick release to revert the OpenBLAS library version.  It was\nhoped that the 0.3.12 OpenBLAS version used in 1.19.3 would work around the\nMicrosoft fmod bug, but problems in some docker environments turned up. Instead,\n1.19.4 will use the older library and run a sanity check on import, raising an\nerror if the problem is detected. Microsoft is aware of the problem and has\npromised a fix, users should upgrade when it becomes available.\n\nThis release supports Python 3.6-3.9\n\nContributors\n============\n\nA total of 1 people contributed to this release.  People with a \"+\" by their\nnames contributed a patch for the first time.\n\n* Charles Harris\n\nPull requests merged\n====================\n\nA total of 2 pull requests were merged for this release.\n\n* `17679 <https://github.com/numpy/numpy/pull/17679>`__: MAINT: Add check for Windows 10 version 2004 bug.\n* `17680 <https://github.com/numpy/numpy/pull/17680>`__: REV: Revert OpenBLAS to 1.19.2 version for 1.19.4\n\nChecksums\n=========\n\nMD5\n---\n::\n\n    09b6f7f17ca61f0f3b943d4107ea6a6c  numpy-1.19.4-cp36-cp36m-macosx_10_9_x86_64.whl\n    bfb801672e0d9916407352f7158b5584  numpy-1.19.4-cp36-cp36m-manylinux1_i686.whl\n    2469be359c8c383509eaded8e758488a  numpy-1.19.4-cp36-cp36m-manylinux1_x86_64.whl\n    4af398903b0957ad3a40ec17631879ed  numpy-1.19.4-cp36-cp36m-manylinux2010_i686.whl\n    bb3f911ba616d36a2daff5b8e1402b1b  numpy-1.19.4-cp36-cp36m-manylinux2010_x86_64.whl\n    3b754c1135f7aa3e6a7c1f46af6a84c9  numpy-1.19.4-cp36-cp36m-manylinux2014_aarch64.whl\n    9db8749b90405780614f126c77eef3bb  numpy-1.19.4-cp36-cp36m-win32.whl\n    25bc59391b8b4f06eb28e74e97afc488  numpy-1.19.4-cp36-cp36m-win_amd64.whl\n    355d7f49b9e442f9e73580e64c8bf2c2  numpy-1.19.4-cp37-cp37m-macosx_10_9_x86_64.whl\n    3c1ce8ca6f6f11ea9d49859b2ffb70cf  numpy-1.19.4-cp37-cp37m-manylinux1_i686.whl\n    5524143ee95cc7e3400dbbff709de7cd  numpy-1.19.4-cp37-cp37m-manylinux1_x86_64.whl\n    c40206040b8ddb62309cbef1cdf0fa82  numpy-1.19.4-cp37-cp37m-manylinux2010_i686.whl\n    552839ea3bc2dfc98611254f8188feb8  numpy-1.19.4-cp37-cp37m-manylinux2010_x86_64.whl\n    2e5c50e57cff5085ffb32185591e49ed  numpy-1.19.4-cp37-cp37m-manylinux2014_aarch64.whl\n    ce6c1cd93d5fc56d0de608b84cc14a7e  numpy-1.19.4-cp37-cp37m-win32.whl\n    a73acaea97da74db366372b3d70219a7  numpy-1.19.4-cp37-cp37m-win_amd64.whl\n    2f52c91231b2b3c54535dee98a5ad0a3  numpy-1.19.4-cp38-cp38-macosx_10_9_x86_64.whl\n    e619d04f2ac42a9feb0efcc1d9901d94  numpy-1.19.4-cp38-cp38-manylinux1_i686.whl\n    01c2f102e73b2569cf3ebe5eab112c4e  numpy-1.19.4-cp38-cp38-manylinux1_x86_64.whl\n    6a66109907b356ddd67f1e282e1879e6  numpy-1.19.4-cp38-cp38-manylinux2010_i686.whl\n    79354b01e11789bb5d12c9edc754297b  numpy-1.19.4-cp38-cp38-manylinux2010_x86_64.whl\n    4f1b335dfe5c7fcf5c8c89983cef9f0b  numpy-1.19.4-cp38-cp38-manylinux2014_aarch64.whl\n    949a5f9e9a75b9cbb3c74e4bf4eb0683  numpy-1.19.4-cp38-cp38-win32.whl\n    27eb1b83f3cac67fb26c7fe9a25b0635  numpy-1.19.4-cp38-cp38-win_amd64.whl\n    ae1e4a06e721e83b530860835c708690  numpy-1.19.4-cp39-cp39-macosx_10_9_x86_64.whl\n    d263c7d04c46d5ecca3b32ad11925bad  numpy-1.19.4-cp39-cp39-manylinux1_i686.whl\n    132e95910d76b045caf1883146ec34a6  numpy-1.19.4-cp39-cp39-manylinux1_x86_64.whl\n    4d4e5f147fe6fdedbdde4df9eaf2a4b1  numpy-1.19.4-cp39-cp39-manylinux2010_i686.whl\n    5ac2071e995ff4fc066741b1edcc159c  numpy-1.19.4-cp39-cp39-manylinux2010_x86_64.whl\n    5d678c6cc45ee3ee976e8b3b2ebe9c13  numpy-1.19.4-cp39-cp39-manylinux2014_aarch64.whl\n    7bc02e21133a1b82994c81c7521156a8  numpy-1.19.4-cp39-cp39-win32.whl\n    55c735347e8fb2ce3674243b38b3cee3  numpy-1.19.4-cp39-cp39-win_amd64.whl\n    673234a8dc2d3d3912c24c64aef6263e  numpy-1.19.4-pp36-pypy36_pp73-manylinux2010_x86_64.whl\n    a25e91ea62ffd37ccf8e0d917484962c  numpy-1.19.4.tar.gz\n    d40f6fcf611ab40eed4ff90606e05307  numpy-1.19.4.zip\n\nSHA256\n------\n::\n\n    e9b30d4bd69498fc0c3fe9db5f62fffbb06b8eb9321f92cc970f2969be5e3949  numpy-1.19.4-cp36-cp36m-macosx_10_9_x86_64.whl\n    fedbd128668ead37f33917820b704784aff695e0019309ad446a6d0b065b57e4  numpy-1.19.4-cp36-cp36m-manylinux1_i686.whl\n    8ece138c3a16db8c1ad38f52eb32be6086cc72f403150a79336eb2045723a1ad  numpy-1.19.4-cp36-cp36m-manylinux1_x86_64.whl\n    64324f64f90a9e4ef732be0928be853eee378fd6a01be21a0a8469c4f2682c83  numpy-1.19.4-cp36-cp36m-manylinux2010_i686.whl\n    ad6f2ff5b1989a4899bf89800a671d71b1612e5ff40866d1f4d8bcf48d4e5764  numpy-1.19.4-cp36-cp36m-manylinux2010_x86_64.whl\n    d6c7bb82883680e168b55b49c70af29b84b84abb161cbac2800e8fcb6f2109b6  numpy-1.19.4-cp36-cp36m-manylinux2014_aarch64.whl\n    13d166f77d6dc02c0a73c1101dd87fdf01339febec1030bd810dcd53fff3b0f1  numpy-1.19.4-cp36-cp36m-win32.whl\n    448ebb1b3bf64c0267d6b09a7cba26b5ae61b6d2dbabff7c91b660c7eccf2bdb  numpy-1.19.4-cp36-cp36m-win_amd64.whl\n    27d3f3b9e3406579a8af3a9f262f5339005dd25e0ecf3cf1559ff8a49ed5cbf2  numpy-1.19.4-cp37-cp37m-macosx_10_9_x86_64.whl\n    16c1b388cc31a9baa06d91a19366fb99ddbe1c7b205293ed072211ee5bac1ed2  numpy-1.19.4-cp37-cp37m-manylinux1_i686.whl\n    e5b6ed0f0b42317050c88022349d994fe72bfe35f5908617512cd8c8ef9da2a9  numpy-1.19.4-cp37-cp37m-manylinux1_x86_64.whl\n    18bed2bcb39e3f758296584337966e68d2d5ba6aab7e038688ad53c8f889f757  numpy-1.19.4-cp37-cp37m-manylinux2010_i686.whl\n    fe45becb4c2f72a0907c1d0246ea6449fe7a9e2293bb0e11c4e9a32bb0930a15  numpy-1.19.4-cp37-cp37m-manylinux2010_x86_64.whl\n    6d7593a705d662be5bfe24111af14763016765f43cb6923ed86223f965f52387  numpy-1.19.4-cp37-cp37m-manylinux2014_aarch64.whl\n    6ae6c680f3ebf1cf7ad1d7748868b39d9f900836df774c453c11c5440bc15b36  numpy-1.19.4-cp37-cp37m-win32.whl\n    9eeb7d1d04b117ac0d38719915ae169aa6b61fca227b0b7d198d43728f0c879c  numpy-1.19.4-cp37-cp37m-win_amd64.whl\n    cb1017eec5257e9ac6209ac172058c430e834d5d2bc21961dceeb79d111e5909  numpy-1.19.4-cp38-cp38-macosx_10_9_x86_64.whl\n    edb01671b3caae1ca00881686003d16c2209e07b7ef8b7639f1867852b948f7c  numpy-1.19.4-cp38-cp38-manylinux1_i686.whl\n    f29454410db6ef8126c83bd3c968d143304633d45dc57b51252afbd79d700893  numpy-1.19.4-cp38-cp38-manylinux1_x86_64.whl\n    ec149b90019852266fec2341ce1db513b843e496d5a8e8cdb5ced1923a92faab  numpy-1.19.4-cp38-cp38-manylinux2010_i686.whl\n    1aeef46a13e51931c0b1cf8ae1168b4a55ecd282e6688fdb0a948cc5a1d5afb9  numpy-1.19.4-cp38-cp38-manylinux2010_x86_64.whl\n    08308c38e44cc926bdfce99498b21eec1f848d24c302519e64203a8da99a97db  numpy-1.19.4-cp38-cp38-manylinux2014_aarch64.whl\n    5734bdc0342aba9dfc6f04920988140fb41234db42381cf7ccba64169f9fe7ac  numpy-1.19.4-cp38-cp38-win32.whl\n    09c12096d843b90eafd01ea1b3307e78ddd47a55855ad402b157b6c4862197ce  numpy-1.19.4-cp38-cp38-win_amd64.whl\n    e452dc66e08a4ce642a961f134814258a082832c78c90351b75c41ad16f79f63  numpy-1.19.4-cp39-cp39-macosx_10_9_x86_64.whl\n    a5d897c14513590a85774180be713f692df6fa8ecf6483e561a6d47309566f37  numpy-1.19.4-cp39-cp39-manylinux1_i686.whl\n    a09f98011236a419ee3f49cedc9ef27d7a1651df07810ae430a6b06576e0b414  numpy-1.19.4-cp39-cp39-manylinux1_x86_64.whl\n    50e86c076611212ca62e5a59f518edafe0c0730f7d9195fec718da1a5c2bb1fc  numpy-1.19.4-cp39-cp39-manylinux2010_i686.whl\n    f0d3929fe88ee1c155129ecd82f981b8856c5d97bcb0d5f23e9b4242e79d1de3  numpy-1.19.4-cp39-cp39-manylinux2010_x86_64.whl\n    c42c4b73121caf0ed6cd795512c9c09c52a7287b04d105d112068c1736d7c753  numpy-1.19.4-cp39-cp39-manylinux2014_aarch64.whl\n    8cac8790a6b1ddf88640a9267ee67b1aee7a57dfa2d2dd33999d080bc8ee3a0f  numpy-1.19.4-cp39-cp39-win32.whl\n    4377e10b874e653fe96985c05feed2225c912e328c8a26541f7fc600fb9c637b  numpy-1.19.4-cp39-cp39-win_amd64.whl\n    2a2740aa9733d2e5b2dfb33639d98a64c3b0f24765fed86b0fd2aec07f6a0a08  numpy-1.19.4-pp36-pypy36_pp73-manylinux2010_x86_64.whl\n    fe836a685d6838dbb3f603caef01183ea98e88febf4ce956a2ea484a75378413  numpy-1.19.4.tar.gz\n    141ec3a3300ab89c7f2b0775289954d193cc8edb621ea05f99db9cb181530512  numpy-1.19.4.zip\n\n\n-----BEGIN PGP SIGNED MESSAGE-----\nHash: SHA1\n\n==========================\n", "1.16.2": "==========================\n\nNumPy 1.16.2 is a quick release fixing several problems encountered on Windows.\nThe Python versions supported are 2.7 and 3.5-3.7. The Windows problems\naddressed are:\n\n- - DLL load problems for NumPy wheels on Windows,\n- - distutils command line parsing on Windows.\n\nThere is also a regression fix correcting signed zeros produced by divmod, see\nbelow for details.\n\nDownstream developers building this release should use Cython >= 0.29.2 and, if\nusing OpenBLAS, OpenBLAS > v0.3.4.\n\nIf you are installing using pip, you may encounter a problem with older\ninstalled versions of NumPy that pip did not delete becoming mixed with the\ncurrent version, resulting in an ``ImportError``. That problem is particularly\ncommon on Debian derived distributions due to a modified pip.  The fix is to\nmake sure all previous NumPy versions installed by pip have been removed. See\n`12736 <https://github.com/numpy/numpy/issues/12736>`__ for discussion of the\nissue.\n\n\nCompatibility notes\n===================\n\nSigned zero when using divmod\n- -----------------------------\nStarting in version 1.12.0, numpy incorrectly returned a negatively signed zero\nwhen using the ``divmod`` and ``floor_divide`` functions when the result was\nzero. For example::\n\n   >>> np.zeros(10)//1\n   array([-0., -0., -0., -0., -0., -0., -0., -0., -0., -0.])\n\nWith this release, the result is correctly returned as a positively signed\nzero::\n\n   >>> np.zeros(10)//1\n   array([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n\n\nContributors\n============\n\nA total of 5 people contributed to this release.  People with a \"+\" by their\nnames contributed a patch for the first time.\n\n* Charles Harris\n* Eric Wieser\n* Matti Picus\n* Tyler Reddy\n* Tony LaTorre +\n\n\nPull requests merged\n====================\n\nA total of 7 pull requests were merged for this release.\n\n* `12909 <https://github.com/numpy/numpy/pull/12909>`__: TST: fix vmImage dispatch in Azure\n* `12923 <https://github.com/numpy/numpy/pull/12923>`__: MAINT: remove complicated test of multiarray import failure mode\n* `13020 <https://github.com/numpy/numpy/pull/13020>`__: BUG: fix signed zero behavior in npy_divmod\n* `13026 <https://github.com/numpy/numpy/pull/13026>`__: MAINT: Add functions to parse shell-strings in the platform-native...\n* `13028 <https://github.com/numpy/numpy/pull/13028>`__: BUG: Fix regression in parsing of F90 and F77 environment variables\n* `13038 <https://github.com/numpy/numpy/pull/13038>`__: BUG: parse shell escaping in extra_compile_args and extra_link_args\n* `13041 <https://github.com/numpy/numpy/pull/13041>`__: BLD: Windows absolute path DLL loading\n\nChecksums\n=========\n\nMD5\n- ---\n\n    a166c7e850f9375552f9950ba95f3a8a  numpy-1.16.2-cp27-cp27m-macosx_10_6_intel.macosx_10_9_intel.macosx_10_9_x86_64.macosx_10_10_intel.macosx_10_10_x86_64.whl\n    cfc866763a75e7cb247c189e141e4506  numpy-1.16.2-cp27-cp27m-manylinux1_i686.whl\n    0756e1901d81033143ad55583118598e  numpy-1.16.2-cp27-cp27m-manylinux1_x86_64.whl\n    1242a10df37701abe8c8afc59809e1ac  numpy-1.16.2-cp27-cp27m-win32.whl\n    60da6aed692fc96c97efde2daca52d6f  numpy-1.16.2-cp27-cp27m-win_amd64.whl\n    62b92da3423dd59230c9369a43299506  numpy-1.16.2-cp27-cp27mu-manylinux1_i686.whl\n    5125ec60d3895d89e5d6d71d9e21b349  numpy-1.16.2-cp27-cp27mu-manylinux1_x86_64.whl\n    15bbe3a9ac6024ac631ed420c04fde47  numpy-1.16.2-cp35-cp35m-macosx_10_6_intel.macosx_10_9_intel.macosx_10_9_x86_64.macosx_10_10_intel.macosx_10_10_x86_64.whl\n    ca025ce06f5bc7b81627bc5bf523d589  numpy-1.16.2-cp35-cp35m-manylinux1_i686.whl\n    ca9953287417064b44a47a6ec92c797c  numpy-1.16.2-cp35-cp35m-manylinux1_x86_64.whl\n    f8fa8bda14131b2714c42b775dfde349  numpy-1.16.2-cp35-cp35m-win32.whl\n    ce7abc3bb59c549ffe3b56984a291eaa  numpy-1.16.2-cp35-cp35m-win_amd64.whl\n    4f26f55f35c58b4228cb3f60cb98f32d  numpy-1.16.2-cp36-cp36m-macosx_10_6_intel.macosx_10_9_intel.macosx_10_9_x86_64.macosx_10_10_intel.macosx_10_10_x86_64.whl\n    ac1e770a95ff3f8a47f74e64bd034768  numpy-1.16.2-cp36-cp36m-manylinux1_i686.whl\n    990a95c5f6bb34ed5588c996890bf9c7  numpy-1.16.2-cp36-cp36m-manylinux1_x86_64.whl\n    79bbaffa096bbbaf42c029bf85df5ac2  numpy-1.16.2-cp36-cp36m-win32.whl\n    83ddd33ccf7a434895ade64199424a07  numpy-1.16.2-cp36-cp36m-win_amd64.whl\n    ee8c8d67fa75a2c4a733fc491590419a  numpy-1.16.2-cp37-cp37m-macosx_10_6_intel.macosx_10_9_intel.macosx_10_9_x86_64.macosx_10_10_intel.macosx_10_10_x86_64.whl\n    4fce2fe91abe1e8b09232c5aaafa484a  numpy-1.16.2-cp37-cp37m-manylinux1_i686.whl\n    9cac844e1fc29972e63cb80512379805  numpy-1.16.2-cp37-cp37m-manylinux1_x86_64.whl\n    38d9fccdc6ae4420c9ee5303f1298974  numpy-1.16.2-cp37-cp37m-win32.whl\n    a1dcfcbe4993d77357bb2213aacf9e82  numpy-1.16.2-cp37-cp37m-win_amd64.whl\n    4fc754be7ec3e0f80b042d907e99f4ad  numpy-1.16.2.tar.gz\n    ec99ec2763a6be3817675f92b8847d3c  numpy-1.16.2.zip\n\nSHA256\n- ------\n\n    972ea92f9c1b54cc1c1a3d8508e326c0114aaf0f34996772a30f3f52b73b942f  numpy-1.16.2-cp27-cp27m-macosx_10_6_intel.macosx_10_9_intel.macosx_10_9_x86_64.macosx_10_10_intel.macosx_10_10_x86_64.whl\n    1980f8d84548d74921685f68096911585fee393975f53797614b34d4f409b6da  numpy-1.16.2-cp27-cp27m-manylinux1_i686.whl\n    560ceaa24f971ab37dede7ba030fc5d8fa173305d94365f814d9523ffd5d5916  numpy-1.16.2-cp27-cp27m-manylinux1_x86_64.whl\n    62be044cd58da2a947b7e7b2252a10b42920df9520fc3d39f5c4c70d5460b8ba  numpy-1.16.2-cp27-cp27m-win32.whl\n    adab43bf657488300d3aeeb8030d7f024fcc86e3a9b8848741ea2ea903e56610  numpy-1.16.2-cp27-cp27m-win_amd64.whl\n    9f1d4865436f794accdabadc57a8395bd3faa755449b4f65b88b7df65ae05f89  numpy-1.16.2-cp27-cp27mu-manylinux1_i686.whl\n    fb3c83554f39f48f3fa3123b9c24aecf681b1c289f9334f8215c1d3c8e2f6e5b  numpy-1.16.2-cp27-cp27mu-manylinux1_x86_64.whl\n    6f65e37b5a331df950ef6ff03bd4136b3c0bbcf44d4b8e99135d68a537711b5a  numpy-1.16.2-cp35-cp35m-macosx_10_6_intel.macosx_10_9_intel.macosx_10_9_x86_64.macosx_10_10_intel.macosx_10_10_x86_64.whl\n    d3b3ed87061d2314ff3659bb73896e622252da52558f2380f12c421fbdee3d89  numpy-1.16.2-cp35-cp35m-manylinux1_i686.whl\n    893f4d75255f25a7b8516feb5766c6b63c54780323b9bd4bc51cdd7efc943c73  numpy-1.16.2-cp35-cp35m-manylinux1_x86_64.whl\n    3a0bd1edf64f6a911427b608a894111f9fcdb25284f724016f34a84c9a3a6ea9  numpy-1.16.2-cp35-cp35m-win32.whl\n    2b0b118ff547fecabc247a2668f48f48b3b1f7d63676ebc5be7352a5fd9e85a5  numpy-1.16.2-cp35-cp35m-win_amd64.whl\n    bd2834d496ba9b1bdda3a6cf3de4dc0d4a0e7be306335940402ec95132ad063d  numpy-1.16.2-cp36-cp36m-macosx_10_6_intel.macosx_10_9_intel.macosx_10_9_x86_64.macosx_10_10_intel.macosx_10_10_x86_64.whl\n    3f25f6c7b0d000017e5ac55977a3999b0b1a74491eacb3c1aa716f0e01f6dcd1  numpy-1.16.2-cp36-cp36m-manylinux1_i686.whl\n    23cc40313036cffd5d1873ef3ce2e949bdee0646c5d6f375bf7ee4f368db2511  numpy-1.16.2-cp36-cp36m-manylinux1_x86_64.whl\n    22752cd809272671b273bb86df0f505f505a12368a3a5fc0aa811c7ece4dfd5c  numpy-1.16.2-cp36-cp36m-win32.whl\n    d20c0360940f30003a23c0adae2fe50a0a04f3e48dc05c298493b51fd6280197  numpy-1.16.2-cp36-cp36m-win_amd64.whl\n    80a41edf64a3626e729a62df7dd278474fc1726836552b67a8c6396fd7e86760  numpy-1.16.2-cp37-cp37m-macosx_10_6_intel.macosx_10_9_intel.macosx_10_9_x86_64.macosx_10_10_intel.macosx_10_10_x86_64.whl\n    7a78cc4ddb253a55971115f8320a7ce28fd23a065fc33166d601f51760eecfa9  numpy-1.16.2-cp37-cp37m-manylinux1_i686.whl\n    9f4cd7832b35e736b739be03b55875706c8c3e5fe334a06210f1a61e5c2c8ca5  numpy-1.16.2-cp37-cp37m-manylinux1_x86_64.whl\n    dc235bf29a406dfda5790d01b998a1c01d7d37f449128c0b1b7d1c89a84fae8b  numpy-1.16.2-cp37-cp37m-win32.whl\n    4061c79ac2230594a7419151028e808239450e676c39e58302ad296232e3c2e8  numpy-1.16.2-cp37-cp37m-win_amd64.whl\n    8088221e6e27da8d5907729f0bfe798f526836f22cc59ae83a0f867e67416a3e  numpy-1.16.2.tar.gz\n    6c692e3879dde0b67a9dc78f9bfb6f61c666b4562fd8619632d7043fb5b691b0  numpy-1.16.2.zip\n-----BEGIN PGP SIGNATURE-----\n\niQEcBAEBAgAGBQJcdYzbAAoJEGefIoN3xSR7HHQH/2D7Zvd3AV4qj5TPQwjLLyDy\neT89jZeKax4MMWgLxpkLQ0b9o31+EEkbph6Wyi/xsjqE4SwRzc1qVUv1Ki6qKjX8\ntfRk2brxLxQyaW753hWxDaBlcmDdHkubZF/sU9byKvz+b5AFz41lZxdJL7skI4sX\nAsUMfabbn2qQwy30tGK8zJxazWWDuWF9bqGGl5IiyfHZQ5Y3N5t4oDawZ0Bn7GE7\n4BKAIi8GnEWeoSnDOGQa6r3dusS9ykR23ETzbsxarvxgkh4YMaY8/5wb/Ammxo0Q\nOPYBLPkS9u+fPDpC5obVWtLWs2xCvg45t5mY95BMM695O1jmVJVDK9ZD5Jo2oxI=\n=i/Re\n-----END PGP SIGNATURE-----\n\n\n.. currentmodule:: numpy\n\n==========================\n", "1.20.1": "==========================\n\nNumPy 1,20.1 is a rapid bugfix release fixing several bugs and regressions\nreported after the 1.20.0 release.\n\n\nHighlights\n==========\n\n- The distutils bug that caused problems with downstream projects is fixed.\n- The ``random.shuffle`` regression is fixed.\n\n\nContributors\n============\n\nA total of 8 people contributed to this release.  People with a \"+\" by their\nnames contributed a patch for the first time.\n\n* Bas van Beek\n* Charles Harris\n* Nicholas McKibben +\n* Pearu Peterson\n* Ralf Gommers\n* Sebastian Berg\n* Tyler Reddy\n* Aerysv +\n\n\nPull requests merged\n====================\n\nA total of 15 pull requests were merged for this release.\n\n* `18306 <https://github.com/numpy/numpy/pull/18306>`__: MAINT: Add missing placeholder annotations\n* `18310 <https://github.com/numpy/numpy/pull/18310>`__: BUG: Fix typo in ``numpy.__init__.py``\n* `18326 <https://github.com/numpy/numpy/pull/18326>`__: BUG: don't mutate list of fake libraries while iterating over...\n* `18327 <https://github.com/numpy/numpy/pull/18327>`__: MAINT: gracefully shuffle memoryviews\n* `18328 <https://github.com/numpy/numpy/pull/18328>`__: BUG: Use C linkage for random distributions\n* `18336 <https://github.com/numpy/numpy/pull/18336>`__: CI: fix when GitHub Actions builds trigger, and allow ci skips\n* `18337 <https://github.com/numpy/numpy/pull/18337>`__: BUG: Allow unmodified use of isclose, allclose, etc. with timedelta\n* `18345 <https://github.com/numpy/numpy/pull/18345>`__: BUG: Allow pickling all relevant DType types/classes\n* `18351 <https://github.com/numpy/numpy/pull/18351>`__: BUG: Fix missing signed_char dependency. Closes #18335.\n* `18352 <https://github.com/numpy/numpy/pull/18352>`__: DOC: Change license date 2020 -> 2021\n* `18353 <https://github.com/numpy/numpy/pull/18353>`__: CI: CircleCI seems to occasionally time out, increase the limit\n* `18354 <https://github.com/numpy/numpy/pull/18354>`__: BUG: Fix f2py bugs when wrapping F90 subroutines.\n* `18356 <https://github.com/numpy/numpy/pull/18356>`__: MAINT: crackfortran regex simplify\n* `18357 <https://github.com/numpy/numpy/pull/18357>`__: BUG: threads.h existence test requires GLIBC > 2.12.\n* `18359 <https://github.com/numpy/numpy/pull/18359>`__: REL: Prepare for the NumPy 1.20.1 release.\n\nChecksums\n=========\n\nMD5\n---\n::\n\n    c4748f4f8f703c5e96027407eca02b08  numpy-1.20.1-cp37-cp37m-macosx_10_9_x86_64.whl\n    f0bf3a78d6b3a169e5a7fb2637f7fd87  numpy-1.20.1-cp37-cp37m-manylinux1_i686.whl\n    493c17647c05ca5043bcbab1ac266a74  numpy-1.20.1-cp37-cp37m-manylinux1_x86_64.whl\n    55ec954fc598c72b2bbf57bfa8b2a701  numpy-1.20.1-cp37-cp37m-manylinux2010_i686.whl\n    8cee88f9683d208686081522609a8726  numpy-1.20.1-cp37-cp37m-manylinux2010_x86_64.whl\n    26399d3ededc53b354de78f977a6197e  numpy-1.20.1-cp37-cp37m-manylinux2014_aarch64.whl\n    81051f1e7a79eea8a5aaf5718114ce3a  numpy-1.20.1-cp37-cp37m-win32.whl\n    899488c55824f02a7a6f0451fc86f63f  numpy-1.20.1-cp37-cp37m-win_amd64.whl\n    17f4dae5a0d143b46345a9cf1a8c8dec  numpy-1.20.1-cp38-cp38-macosx_10_9_x86_64.whl\n    f254e98e92b3054c567b6220b37b81d3  numpy-1.20.1-cp38-cp38-manylinux1_i686.whl\n    483f43a62c7e32ae991990786da90de1  numpy-1.20.1-cp38-cp38-manylinux1_x86_64.whl\n    bf578b783e36d3feb3344973306a9f96  numpy-1.20.1-cp38-cp38-manylinux2010_i686.whl\n    f5d6c77c898537017e64ee30b243fdca  numpy-1.20.1-cp38-cp38-manylinux2010_x86_64.whl\n    5cf541a0d5af3d5812d2970a427075fb  numpy-1.20.1-cp38-cp38-manylinux2014_aarch64.whl\n    178315c579c0a70285b8ee502eb498af  numpy-1.20.1-cp38-cp38-win32.whl\n    5164a32e7a00a2b285302b563eb58afe  numpy-1.20.1-cp38-cp38-win_amd64.whl\n    c123dd10788ea9ff788d735cbee444c5  numpy-1.20.1-cp39-cp39-macosx_10_9_x86_64.whl\n    72282fefe58650c6e7cc41f5b37b8662  numpy-1.20.1-cp39-cp39-manylinux2010_i686.whl\n    234d57c1a7b1f8b99c054a7a71a51cbe  numpy-1.20.1-cp39-cp39-manylinux2010_x86_64.whl\n    352243d4285970e45d825024ca566d47  numpy-1.20.1-cp39-cp39-manylinux2014_aarch64.whl\n    a78c863323e0f56210c2e1acaad1bc22  numpy-1.20.1-cp39-cp39-win32.whl\n    86f9d3f358e7d7896e713bce99f17fdd  numpy-1.20.1-cp39-cp39-win_amd64.whl\n    ed2c81132119fb3c7f73c6a2de306058  numpy-1.20.1-pp37-pypy37_pp73-manylinux2010_x86_64.whl\n    60a5e2517be19394a7df24f6d4add3f2  numpy-1.20.1.tar.gz\n    30ea1c7868e73eeff2c86ac465311220  numpy-1.20.1.zip\n\nSHA256\n------\n::\n\n    ae61f02b84a0211abb56462a3b6cd1e7ec39d466d3160eb4e1da8bf6717cdbeb  numpy-1.20.1-cp37-cp37m-macosx_10_9_x86_64.whl\n    65410c7f4398a0047eea5cca9b74009ea61178efd78d1be9847fac1d6716ec1e  numpy-1.20.1-cp37-cp37m-manylinux1_i686.whl\n    2d7e27442599104ee08f4faed56bb87c55f8b10a5494ac2ead5c98a4b289e61f  numpy-1.20.1-cp37-cp37m-manylinux1_x86_64.whl\n    4ed8e96dc146e12c1c5cdd6fb9fd0757f2ba66048bf94c5126b7efebd12d0090  numpy-1.20.1-cp37-cp37m-manylinux2010_i686.whl\n    ecb5b74c702358cdc21268ff4c37f7466357871f53a30e6f84c686952bef16a9  numpy-1.20.1-cp37-cp37m-manylinux2010_x86_64.whl\n    b9410c0b6fed4a22554f072a86c361e417f0258838957b78bd063bde2c7f841f  numpy-1.20.1-cp37-cp37m-manylinux2014_aarch64.whl\n    3d3087e24e354c18fb35c454026af3ed8997cfd4997765266897c68d724e4845  numpy-1.20.1-cp37-cp37m-win32.whl\n    89f937b13b8dd17b0099c7c2e22066883c86ca1575a975f754babc8fbf8d69a9  numpy-1.20.1-cp37-cp37m-win_amd64.whl\n    a1d7995d1023335e67fb070b2fae6f5968f5be3802b15ad6d79d81ecaa014fe0  numpy-1.20.1-cp38-cp38-macosx_10_9_x86_64.whl\n    60759ab15c94dd0e1ed88241fd4fa3312db4e91d2c8f5a2d4cf3863fad83d65b  numpy-1.20.1-cp38-cp38-manylinux1_i686.whl\n    125a0e10ddd99a874fd357bfa1b636cd58deb78ba4a30b5ddb09f645c3512e04  numpy-1.20.1-cp38-cp38-manylinux1_x86_64.whl\n    c26287dfc888cf1e65181f39ea75e11f42ffc4f4529e5bd19add57ad458996e2  numpy-1.20.1-cp38-cp38-manylinux2010_i686.whl\n    7199109fa46277be503393be9250b983f325880766f847885607d9b13848f257  numpy-1.20.1-cp38-cp38-manylinux2010_x86_64.whl\n    72251e43ac426ff98ea802a931922c79b8d7596480300eb9f1b1e45e0543571e  numpy-1.20.1-cp38-cp38-manylinux2014_aarch64.whl\n    c91ec9569facd4757ade0888371eced2ecf49e7982ce5634cc2cf4e7331a4b14  numpy-1.20.1-cp38-cp38-win32.whl\n    13adf545732bb23a796914fe5f891a12bd74cf3d2986eed7b7eba2941eea1590  numpy-1.20.1-cp38-cp38-win_amd64.whl\n    104f5e90b143dbf298361a99ac1af4cf59131218a045ebf4ee5990b83cff5fab  numpy-1.20.1-cp39-cp39-macosx_10_9_x86_64.whl\n    89e5336f2bec0c726ac7e7cdae181b325a9c0ee24e604704ed830d241c5e47ff  numpy-1.20.1-cp39-cp39-manylinux2010_i686.whl\n    032be656d89bbf786d743fee11d01ef318b0781281241997558fa7950028dd29  numpy-1.20.1-cp39-cp39-manylinux2010_x86_64.whl\n    66b467adfcf628f66ea4ac6430ded0614f5cc06ba530d09571ea404789064adc  numpy-1.20.1-cp39-cp39-manylinux2014_aarch64.whl\n    12e4ba5c6420917571f1a5becc9338abbde71dd811ce40b37ba62dec7b39af6d  numpy-1.20.1-cp39-cp39-win32.whl\n    9c94cab5054bad82a70b2e77741271790304651d584e2cdfe2041488e753863b  numpy-1.20.1-cp39-cp39-win_amd64.whl\n    9eb551d122fadca7774b97db8a112b77231dcccda8e91a5bc99e79890797175e  numpy-1.20.1-pp37-pypy37_pp73-manylinux2010_x86_64.whl\n    9bf51d69ebb4ca9239e55bedc2185fe2c0ec222da0adee7ece4125414676846d  numpy-1.20.1.tar.gz\n    3bc63486a870294683980d76ec1e3efc786295ae00128f9ea38e2c6e74d5a60a  numpy-1.20.1.zip\n\n\n.. currentmodule:: numpy\n\n=========================\n", "1.16.6": "==========================\n\nThe NumPy 1.16.6 release fixes bugs reported against the 1.16.5 release, and\nalso backports several enhancements from master that seem appropriate for a\nrelease series that is the last to support Python 2.7. The wheels on PyPI are\nlinked with OpenBLAS v0.3.7, which should fix errors on Skylake series\ncpus.\n\nDownstream developers building this release should use Cython >= 0.29.2 and, if\nusing OpenBLAS, OpenBLAS >= v0.3.7. The supported Python versions are 2.7 and\n3.5-3.7.\n\nHighlights\n==========\n\n- The ``np.testing.utils`` functions have been updated from 1.19.0-dev0.\n  This improves the function documentation and error messages as well\n  extending the ``assert_array_compare`` function to additional types.\n\n\nNew functions\n=============\n\nAllow matmul (`` operator) to work with object arrays.\n-------------------------------------------------------\nThis is an enhancement that was added in NumPy 1.17 and seems reasonable to\ninclude in the LTS 1.16 release series.\n\n\nCompatibility notes\n===================\n\nFix regression in matmul (`` operator) for boolean types\n---------------------------------------------------------\nBooleans were being treated as integers rather than booleans,\nwhich was a regression from previous behavior.\n\n\nImprovements\n============\n\nArray comparison assertions include maximum differences\n-------------------------------------------------------\nError messages from array comparison tests such as ``testing.assert_allclose``\nnow include \"max absolute difference\" and \"max relative difference,\" in\naddition to the previous \"mismatch\" percentage.  This information makes it\neasier to update absolute and relative error tolerances.\n\nContributors\n============\n\nA total of 10 people contributed to this release.\n\n* CakeWithSteak\n* Charles Harris\n* Chris Burr\n* Eric Wieser\n* Fernando Saravia\n* Lars Grueter\n* Matti Picus\n* Maxwell Aladago\n* Qiming Sun\n* Warren Weckesser\n\nPull requests merged\n====================\n\nA total of 14 pull requests were merged for this release.\n\n* `14211 <https://github.com/numpy/numpy/pull/14211>`__: BUG: Fix uint-overflow if padding with linear_ramp and negative...\n* `14275 <https://github.com/numpy/numpy/pull/14275>`__: BUG: fixing to allow unpickling of PY3 pickles from PY2\n* `14340 <https://github.com/numpy/numpy/pull/14340>`__: BUG: Fix misuse of .names and .fields in various places (backport...\n* `14423 <https://github.com/numpy/numpy/pull/14423>`__: BUG: test, fix regression in converting to ctypes.\n* `14434 <https://github.com/numpy/numpy/pull/14434>`__: BUG: Fixed maximum relative error reporting in assert_allclose\n* `14509 <https://github.com/numpy/numpy/pull/14509>`__: BUG: Fix regression in boolean matmul.\n* `14686 <https://github.com/numpy/numpy/pull/14686>`__: BUG: properly define PyArray_DescrCheck\n* `14853 <https://github.com/numpy/numpy/pull/14853>`__: BLD: add 'apt update' to shippable\n* `14854 <https://github.com/numpy/numpy/pull/14854>`__: BUG: Fix _ctypes class circular reference. (#13808)\n* `14856 <https://github.com/numpy/numpy/pull/14856>`__: BUG: Fix `np.einsum` errors on Power9 Linux and z/Linux\n* `14863 <https://github.com/numpy/numpy/pull/14863>`__: BLD: Prevent -flto from optimising long double representation...\n* `14864 <https://github.com/numpy/numpy/pull/14864>`__: BUG: lib: Fix histogram problem with signed integer arrays.\n* `15172 <https://github.com/numpy/numpy/pull/15172>`__: ENH: Backport improvements to testing functions.\n* `15191 <https://github.com/numpy/numpy/pull/15191>`__: REL: Prepare for 1.16.6 release.\n\nChecksums\n=========\n\nMD5\n---\n::\n\n    4e224331023d95e98074d629b79cd4af  numpy-1.16.6-cp27-cp27m-macosx_10_9_x86_64.whl\n    d3a48c10422909a5610b42380ed8ddc6  numpy-1.16.6-cp27-cp27m-manylinux1_i686.whl\n    6896018676021f6cff25abb30d9da143  numpy-1.16.6-cp27-cp27m-manylinux1_x86_64.whl\n    c961575405015b018a497e8f90db5e38  numpy-1.16.6-cp27-cp27m-win32.whl\n    8fa39acea08658ca355005c07e15f06f  numpy-1.16.6-cp27-cp27m-win_amd64.whl\n    8802bee0140fd50aecddab0141d0eb82  numpy-1.16.6-cp27-cp27mu-manylinux1_i686.whl\n    2f9761f243249d33867f86c10c549dfa  numpy-1.16.6-cp27-cp27mu-manylinux1_x86_64.whl\n    171a699d84b6ec8ac699627d606890e0  numpy-1.16.6-cp35-cp35m-macosx_10_9_intel.whl\n    7185860b022aa72cd9abb112b2d2b6cf  numpy-1.16.6-cp35-cp35m-manylinux1_i686.whl\n    33f35e1b39f572ca98e697b7054fffd1  numpy-1.16.6-cp35-cp35m-manylinux1_x86_64.whl\n    2ec010ba75c0ac5602e1dbf7fe01ddbf  numpy-1.16.6-cp35-cp35m-win32.whl\n    88c6c5e1f531e32f65f9f9437045f6f5  numpy-1.16.6-cp35-cp35m-win_amd64.whl\n    751f8ea2353e73bb3440f241ebad6c5d  numpy-1.16.6-cp36-cp36m-macosx_10_9_x86_64.whl\n    819af6ec8c90e8209471ecbc6fc47b95  numpy-1.16.6-cp36-cp36m-manylinux1_i686.whl\n    56ab65e9d3bac5f502507d198634e675  numpy-1.16.6-cp36-cp36m-manylinux1_x86_64.whl\n    88d4ed4565d31a1978f4bf013f4ffd2e  numpy-1.16.6-cp36-cp36m-win32.whl\n    167ac7f60d82bd32feb60e675a2c3b01  numpy-1.16.6-cp36-cp36m-win_amd64.whl\n    2e47bb698842b7289bb34951edf3be3d  numpy-1.16.6-cp37-cp37m-macosx_10_9_x86_64.whl\n    169eb83d7f0a566207048cc282720ff8  numpy-1.16.6-cp37-cp37m-manylinux1_i686.whl\n    454ac4d3e09931bfb58cc01b679f4f5f  numpy-1.16.6-cp37-cp37m-manylinux1_x86_64.whl\n    192593ce2df33b60eab445b31285ad96  numpy-1.16.6-cp37-cp37m-win32.whl\n    de3b92f1133613e1bd96d788ba9d4307  numpy-1.16.6-cp37-cp37m-win_amd64.whl\n    5e958c603605f3168b7b29f421f64cdd  numpy-1.16.6.tar.gz\n    3dc21c84a295fe77eadf8f872685a7de  numpy-1.16.6.zip\n\nSHA256\n------\n::\n\n    08bf4f66f190822f4642e036accde8da810b87fffc0b9409e7a00d9e54760099  numpy-1.16.6-cp27-cp27m-macosx_10_9_x86_64.whl\n    d759ca1b76ac6f6b6159fb74984126035feb1dee9f68b4b961889b6dc090f33a  numpy-1.16.6-cp27-cp27m-manylinux1_i686.whl\n    d3c5377c6122de876e695937ef41ffee5d2831154c5e4856481b93406cdfeecb  numpy-1.16.6-cp27-cp27m-manylinux1_x86_64.whl\n    345b1748e6b0d4773a518868c783b16fdc33a22683bdb863484cd29fe8d206e6  numpy-1.16.6-cp27-cp27m-win32.whl\n    7a5a1f49a643aa1ab3e0579da0a48b8a48ea4369eb63c5065459d0a37f430237  numpy-1.16.6-cp27-cp27m-win_amd64.whl\n    817eed5a6ec2fc9c1a0ee3fbf9a441c66b6766383580513ccbdf3121acc0b4fb  numpy-1.16.6-cp27-cp27mu-manylinux1_i686.whl\n    1680c8d5086a88d293dfd1a10b6429a09140cacee878034fa2308472ec835db4  numpy-1.16.6-cp27-cp27mu-manylinux1_x86_64.whl\n    a4383edb1b8caa989c3541a37ef204916322c503b8eeacc7ee8f4ba24cac97b8  numpy-1.16.6-cp35-cp35m-macosx_10_9_intel.whl\n    9bb690692f3101583b0b99f3be362742e4f8ebe6c7934fa36cd8ca2b567a0bcc  numpy-1.16.6-cp35-cp35m-manylinux1_i686.whl\n    b9e334568ca1bf56598eddfac6db6a75bcf1c91aa90d598648f21e45207daeae  numpy-1.16.6-cp35-cp35m-manylinux1_x86_64.whl\n    55cae40d2024c56e7b79fb070106cb4289dcc6b55c62dba1d89a6944448c6a53  numpy-1.16.6-cp35-cp35m-win32.whl\n    a1ffc9c770ccc2be9284310a3726c918b26ca19b34c0079e7a41aba950ab175f  numpy-1.16.6-cp35-cp35m-win_amd64.whl\n    3f423b06bf67cd1dbf72e13e9b53a9ca71972e5abf712ee6cb5d8cbb178fff02  numpy-1.16.6-cp36-cp36m-macosx_10_9_x86_64.whl\n    34e6bb44e3d9a663f903b8c297ede865b4dff039aa43cc9a0b249e02c27f1396  numpy-1.16.6-cp36-cp36m-manylinux1_i686.whl\n    60c56922c9d759d664078fbef94132377ef1498ab27dd3d0cc7a21b346e68c06  numpy-1.16.6-cp36-cp36m-manylinux1_x86_64.whl\n    23cad5e5858dfb73c0e5bce03fe78e5e5908c22263156c58d4afdbb240683c6c  numpy-1.16.6-cp36-cp36m-win32.whl\n    77399828d96cca386bfba453025c34f22569909d90332b961d3d4341cdb46a84  numpy-1.16.6-cp36-cp36m-win_amd64.whl\n    97ddfa7688295d460ee48a4d76337e9fdd2506d9d1d0eee7f0348b42b430da4c  numpy-1.16.6-cp37-cp37m-macosx_10_9_x86_64.whl\n    390f6e14a8d73591f086680464aa101a9be9187d0c633f48c98b429b31b712c2  numpy-1.16.6-cp37-cp37m-manylinux1_i686.whl\n    a1772dc227e3e415eeaa646d25690dc854bddc3d626e454c7c27acba060cb900  numpy-1.16.6-cp37-cp37m-manylinux1_x86_64.whl\n    c9fb4fcfcdcaccfe2c4e1f9e0133ed59df5df2aa3655f3d391887e892b0a784c  numpy-1.16.6-cp37-cp37m-win32.whl\n    6b1853364775edb85ceb0f7f8214d9e993d4d1d9bd3310eae80529ea14ba2ba6  numpy-1.16.6-cp37-cp37m-win_amd64.whl\n    61562ddac78765969959500b0da9c6f9ba7d77eeb12ec3927afae5303df08777  numpy-1.16.6.tar.gz\n    e5cf3fdf13401885e8eea8170624ec96225e2174eb0c611c6f26dd33b489e3ff  numpy-1.16.6.zip\n\n\n.. currentmodule:: numpy\n\n==========================\n", "1.21.2": "==========================\n\nThe NumPy 1.21.2 is maintenance release that fixes bugs discovered after\n1.21.1. It also provides 64 bit manylinux Python 3.10.0rc1 wheels for\ndownstream testing. Note that Python 3.10 is not yet final. There is also\npreliminary support for Windows on ARM64 builds, but there is no OpenBLAS for\nthat platform and no wheels are available.\n\nThe Python versions supported for this release are 3.7-3.9. The 1.21.x series\nis compatible with Python 3.10.0rc1 and Python 3.10 will be officially\nsupported after it is released. The previous problems with gcc-11.1 have been\nfixed by gcc-11.2, check your version if you are using gcc-11.\n\n\nContributors\n============\n\nA total of 10 people contributed to this release.  People with a \"+\" by their\nnames contributed a patch for the first time.\n\n* Bas van Beek\n* Carl Johnsen +\n* Charles Harris\n* Gwyn Ciesla +\n* Matthieu Dartiailh\n* Matti Picus\n* Niyas Sait +\n* Ralf Gommers\n* Sayed Adel\n* Sebastian Berg\n\n\nPull requests merged\n====================\n\nA total of 18 pull requests were merged for this release.\n\n* `19497 <https://github.com/numpy/numpy/pull/19497>`__: MAINT: set Python version for 1.21.x to ``<3.11``\n* `19533 <https://github.com/numpy/numpy/pull/19533>`__: BUG: Fix an issue wherein importing ``numpy.typing`` could raise\n* `19646 <https://github.com/numpy/numpy/pull/19646>`__: MAINT: Update Cython version for Python 3.10.\n* `19648 <https://github.com/numpy/numpy/pull/19648>`__: TST: Bump the python 3.10 test version from beta4 to rc1\n* `19651 <https://github.com/numpy/numpy/pull/19651>`__: TST: avoid distutils.sysconfig in runtests.py\n* `19652 <https://github.com/numpy/numpy/pull/19652>`__: MAINT: add missing dunder method to nditer type hints\n* `19656 <https://github.com/numpy/numpy/pull/19656>`__: BLD, SIMD: Fix testing extra checks when ``-Werror`` isn't applicable...\n* `19657 <https://github.com/numpy/numpy/pull/19657>`__: BUG: Remove logical object ufuncs with bool output\n* `19658 <https://github.com/numpy/numpy/pull/19658>`__: MAINT: Include .coveragerc in source distributions to support...\n* `19659 <https://github.com/numpy/numpy/pull/19659>`__: BUG: Fix bad write in masked iterator output copy paths\n* `19660 <https://github.com/numpy/numpy/pull/19660>`__: ENH: Add support for windows on arm targets\n* `19661 <https://github.com/numpy/numpy/pull/19661>`__: BUG: add base to templated arguments for platlib\n* `19662 <https://github.com/numpy/numpy/pull/19662>`__: BUG,DEP: Non-default UFunc signature/dtype usage should be deprecated\n* `19666 <https://github.com/numpy/numpy/pull/19666>`__: MAINT: Add Python 3.10 to supported versions.\n* `19668 <https://github.com/numpy/numpy/pull/19668>`__: TST,BUG: Sanitize path-separators when running ``runtest.py``\n* `19671 <https://github.com/numpy/numpy/pull/19671>`__: BLD: load extra flags when checking for libflame\n* `19676 <https://github.com/numpy/numpy/pull/19676>`__: BLD: update circleCI docker image\n* `19677 <https://github.com/numpy/numpy/pull/19677>`__: REL: Prepare for 1.21.2 release.\n\nChecksums\n=========\n\nMD5\n---\n::\n\n    c4d72c5f8aff59b5e48face558441e9f  numpy-1.21.2-cp310-cp310-manylinux_2_17_aarch64.manylinux2014_aarch64.whl\n    eb09d0bfc0bc39ce3e323182ae779fcb  numpy-1.21.2-cp310-cp310-manylinux_2_17_x86_64.manylinux2014_x86_64.whl\n    e0bb19ea8cc13a5152085aa42d850077  numpy-1.21.2-cp37-cp37m-macosx_10_9_x86_64.whl\n    af7d21992179dfa3669a2a238b94a980  numpy-1.21.2-cp37-cp37m-manylinux_2_12_i686.manylinux2010_i686.whl\n    9acbaf0074af75d66ca8676b16cec03a  numpy-1.21.2-cp37-cp37m-manylinux_2_12_x86_64.manylinux2010_x86_64.whl\n    86b755c7ece248e5586a6a58259aa432  numpy-1.21.2-cp37-cp37m-manylinux_2_17_aarch64.manylinux2014_aarch64.whl\n    b45fbbb0ffabcabcc6dc4cf957713d45  numpy-1.21.2-cp37-cp37m-manylinux_2_5_i686.manylinux1_i686.whl\n    6f23a3050b1482f9708d36928348d75d  numpy-1.21.2-cp37-cp37m-manylinux_2_5_x86_64.manylinux1_x86_64.whl\n    ee45e263e6700b745c43511297385fe1  numpy-1.21.2-cp37-cp37m-win32.whl\n    6f587dc9ee9ec8700e77df4f3f987911  numpy-1.21.2-cp37-cp37m-win_amd64.whl\n    e500c1eae3903b7498886721b835d086  numpy-1.21.2-cp38-cp38-macosx_10_9_universal2.whl\n    ddef2b45ff5526e6314205108f2e3524  numpy-1.21.2-cp38-cp38-macosx_10_9_x86_64.whl\n    66b5a212ee2fe747cfc19f13dbfc2d15  numpy-1.21.2-cp38-cp38-macosx_11_0_arm64.whl\n    3ebfe9bcd744c57d3d189394fbbf04de  numpy-1.21.2-cp38-cp38-manylinux_2_12_i686.manylinux2010_i686.whl\n    155a35f990b2e673cb7b361c83fa2313  numpy-1.21.2-cp38-cp38-manylinux_2_12_x86_64.manylinux2010_x86_64.whl\n    89e2268d8607b6b363337fafde9fe6c9  numpy-1.21.2-cp38-cp38-manylinux_2_17_aarch64.manylinux2014_aarch64.whl\n    e13968b5f61a3b2f33d4053da8ceaaf1  numpy-1.21.2-cp38-cp38-manylinux_2_5_i686.manylinux1_i686.whl\n    5bede1a84624d538d97513006f97fc06  numpy-1.21.2-cp38-cp38-manylinux_2_5_x86_64.manylinux1_x86_64.whl\n    351b5115ee56f1b598bfa9b479a2492c  numpy-1.21.2-cp38-cp38-win32.whl\n    8a36334d9d183b1ef3e4d3d23b7d0cb8  numpy-1.21.2-cp38-cp38-win_amd64.whl\n    b6aee8cf57f84da10b38566bde93056c  numpy-1.21.2-cp39-cp39-macosx_10_9_universal2.whl\n    20beaff42d793cb148621e0230d1b650  numpy-1.21.2-cp39-cp39-macosx_10_9_x86_64.whl\n    6e348361f3b8b75267dc27f3a6530944  numpy-1.21.2-cp39-cp39-macosx_11_0_arm64.whl\n    809bcd25dc485f31e2c13903d6ac748e  numpy-1.21.2-cp39-cp39-manylinux_2_12_i686.manylinux2010_i686.whl\n    ff4256d8940c6bdce48364af37f99072  numpy-1.21.2-cp39-cp39-manylinux_2_12_x86_64.manylinux2010_x86_64.whl\n    b8b19e6667e39feef9f7f2e030945199  numpy-1.21.2-cp39-cp39-manylinux_2_17_aarch64.manylinux2014_aarch64.whl\n    eedae53f1929779387476e7842dc5cb3  numpy-1.21.2-cp39-cp39-win32.whl\n    704f66b7ede6778283c33eea7a5b8b95  numpy-1.21.2-cp39-cp39-win_amd64.whl\n    8c5d2a0172f6f6861833a355b1bc57b0  numpy-1.21.2-pp37-pypy37_pp73-manylinux_2_12_x86_64.manylinux2010_x86_64.whl\n    55c11984b0a0ae28baa118052983f355  numpy-1.21.2.tar.gz\n    5638d5dae3ca387be562912312db842e  numpy-1.21.2.zip\n\nSHA256\n------\n::\n\n    52a664323273c08f3b473548bf87c8145b7513afd63e4ebba8496ecd3853df13  numpy-1.21.2-cp310-cp310-manylinux_2_17_aarch64.manylinux2014_aarch64.whl\n    51a7b9db0a2941434cd930dacaafe0fc9da8f3d6157f9d12f761bbde93f46218  numpy-1.21.2-cp310-cp310-manylinux_2_17_x86_64.manylinux2014_x86_64.whl\n    9f2dc79c093f6c5113718d3d90c283f11463d77daa4e83aeeac088ec6a0bda52  numpy-1.21.2-cp37-cp37m-macosx_10_9_x86_64.whl\n    a55e4d81c4260386f71d22294795c87609164e22b28ba0d435850fbdf82fc0c5  numpy-1.21.2-cp37-cp37m-manylinux_2_12_i686.manylinux2010_i686.whl\n    426a00b68b0d21f2deb2ace3c6d677e611ad5a612d2c76494e24a562a930c254  numpy-1.21.2-cp37-cp37m-manylinux_2_12_x86_64.manylinux2010_x86_64.whl\n    298156f4d3d46815eaf0fcf0a03f9625fc7631692bd1ad851517ab93c3168fc6  numpy-1.21.2-cp37-cp37m-manylinux_2_17_aarch64.manylinux2014_aarch64.whl\n    09858463db6dd9f78b2a1a05c93f3b33d4f65975771e90d2cf7aadb7c2f66edf  numpy-1.21.2-cp37-cp37m-manylinux_2_5_i686.manylinux1_i686.whl\n    805459ad8baaf815883d0d6f86e45b3b0b67d823a8f3fa39b1ed9c45eaf5edf1  numpy-1.21.2-cp37-cp37m-manylinux_2_5_x86_64.manylinux1_x86_64.whl\n    f545c082eeb09ae678dd451a1b1dbf17babd8a0d7adea02897a76e639afca310  numpy-1.21.2-cp37-cp37m-win32.whl\n    b160b9a99ecc6559d9e6d461b95c8eec21461b332f80267ad2c10394b9503496  numpy-1.21.2-cp37-cp37m-win_amd64.whl\n    a5109345f5ce7ddb3840f5970de71c34a0ff7fceb133c9441283bb8250f532a3  numpy-1.21.2-cp38-cp38-macosx_10_9_universal2.whl\n    209666ce9d4a817e8a4597cd475b71b4878a85fa4b8db41d79fdb4fdee01dde2  numpy-1.21.2-cp38-cp38-macosx_10_9_x86_64.whl\n    c01b59b33c7c3ba90744f2c695be571a3bd40ab2ba7f3d169ffa6db3cfba614f  numpy-1.21.2-cp38-cp38-macosx_11_0_arm64.whl\n    e42029e184008a5fd3d819323345e25e2337b0ac7f5c135b7623308530209d57  numpy-1.21.2-cp38-cp38-manylinux_2_12_i686.manylinux2010_i686.whl\n    7fdc7689daf3b845934d67cb221ba8d250fdca20ac0334fea32f7091b93f00d3  numpy-1.21.2-cp38-cp38-manylinux_2_12_x86_64.manylinux2010_x86_64.whl\n    550564024dc5ceee9421a86fc0fb378aa9d222d4d0f858f6669eff7410c89bef  numpy-1.21.2-cp38-cp38-manylinux_2_17_aarch64.manylinux2014_aarch64.whl\n    bf75d5825ef47aa51d669b03ce635ecb84d69311e05eccea083f31c7570c9931  numpy-1.21.2-cp38-cp38-manylinux_2_5_i686.manylinux1_i686.whl\n    a9da45b748caad72ea4a4ed57e9cd382089f33c5ec330a804eb420a496fa760f  numpy-1.21.2-cp38-cp38-manylinux_2_5_x86_64.manylinux1_x86_64.whl\n    e167b9805de54367dcb2043519382be541117503ce99e3291cc9b41ca0a83557  numpy-1.21.2-cp38-cp38-win32.whl\n    466e682264b14982012887e90346d33435c984b7fead7b85e634903795c8fdb0  numpy-1.21.2-cp38-cp38-win_amd64.whl\n    dd0e3651d210068d13e18503d75aaa45656eef51ef0b261f891788589db2cc38  numpy-1.21.2-cp39-cp39-macosx_10_9_universal2.whl\n    92a0ab128b07799dd5b9077a9af075a63467d03ebac6f8a93e6440abfea4120d  numpy-1.21.2-cp39-cp39-macosx_10_9_x86_64.whl\n    fde50062d67d805bc96f1a9ecc0d37bfc2a8f02b937d2c50824d186aa91f2419  numpy-1.21.2-cp39-cp39-macosx_11_0_arm64.whl\n    640c1ccfd56724f2955c237b6ccce2e5b8607c3bc1cc51d3933b8c48d1da3723  numpy-1.21.2-cp39-cp39-manylinux_2_12_i686.manylinux2010_i686.whl\n    5de64950137f3a50b76ce93556db392e8f1f954c2d8207f78a92d1f79aa9f737  numpy-1.21.2-cp39-cp39-manylinux_2_12_x86_64.manylinux2010_x86_64.whl\n    b342064e647d099ca765f19672696ad50c953cac95b566af1492fd142283580f  numpy-1.21.2-cp39-cp39-manylinux_2_17_aarch64.manylinux2014_aarch64.whl\n    30fc68307c0155d2a75ad19844224be0f2c6f06572d958db4e2053f816b859ad  numpy-1.21.2-cp39-cp39-win32.whl\n    b5e8590b9245803c849e09bae070a8e1ff444f45e3f0bed558dd722119eea724  numpy-1.21.2-cp39-cp39-win_amd64.whl\n    d96a6a7d74af56feb11e9a443150216578ea07b7450f7c05df40eec90af7f4a7  numpy-1.21.2-pp37-pypy37_pp73-manylinux_2_12_x86_64.manylinux2010_x86_64.whl\n    76af194fbc117934ec5bbe2ff15177adbd05aeed23f18ee209ed88edcd777e05  numpy-1.21.2.tar.gz\n    423216d8afc5923b15df86037c6053bf030d15cc9e3224206ef868c2d63dd6dc  numpy-1.21.2.zip\n\n\n.. currentmodule:: numpy\n\n==========================\n", "1.26.1": "==========================\n\nNumPy 1.26.1 is a maintenance release that fixes bugs and regressions\ndiscovered after the 1.26.0 release. In addition, it adds new functionality for\ndetecting BLAS and LAPACK when building from source. Highlights are:\n\n- Improved detection of BLAS and LAPACK libraries for meson builds\n- Pickle compatibility with the upcoming NumPy 2.0.\n\nThe 1.26.release series is the last planned minor release series before NumPy\n2.0. The Python versions supported by this release are 3.9-3.12.\n\n\nBuild system changes\n====================\n\nImproved BLAS/LAPACK detection and control\n------------------------------------------\n\nAuto-detection for a number of BLAS and LAPACK is now implemented for Meson.\nBy default, the build system will try to detect MKL, Accelerate (on macOS\n>=13.3), OpenBLAS, FlexiBLAS, BLIS and reference BLAS/LAPACK. Support for MKL\nwas significantly improved, and support for FlexiBLAS was added.\n\nNew command-line flags are available to further control the selection of the\nBLAS and LAPACK libraries to build against.\n\nTo select a specific library, use the config-settings interface via ``pip`` or\n``pypa/build``. E.g., to select ``libblas``/``liblapack``, use::\n\n    $ pip install numpy -Csetup-args=-Dblas=blas -Csetup-args=-Dlapack=lapack\n    $  OR\n    $ python -m build . -Csetup-args=-Dblas=blas -Csetup-args=-Dlapack=lapack\n\nThis works not only for the libraries named above, but for any library that\nMeson is able to detect with the given name through ``pkg-config`` or CMake.\n\nBesides ``-Dblas`` and ``-Dlapack``, a number of other new flags are available\nto control BLAS/LAPACK selection and behavior:\n\n- ``-Dblas-order`` and ``-Dlapack-order``: a list of library names to search\n  for in order, overriding the default search order.\n- ``-Duse-ilp64``: if set to ``true``, use ILP64 (64-bit integer) BLAS and\n  LAPACK. Note that with this release, ILP64 support has been extended to\n  include MKL and FlexiBLAS. OpenBLAS and Accelerate were supported in previous\n  releases.\n- ``-Dallow-noblas``: if set to ``true``, allow NumPy to build with its\n  internal (very slow) fallback routines instead of linking against an external\n  BLAS/LAPACK library. *The default for this flag may be changed to ``true``\n  in a future 1.26.x release, however for 1.26.1 we'd prefer to keep it as\n  ``false`` because if failures to detect an installed library are happening,\n  we'd like a bug report for that, so we can quickly assess whether the new\n  auto-detection machinery needs further improvements.*\n- ``-Dmkl-threading``: to select the threading layer for MKL. There are four\n  options: ``seq``, ``iomp``, ``gomp`` and ``tbb``. The default is ``auto``,\n  which selects from those four as appropriate given the version of MKL\n  selected.\n- ``-Dblas-symbol-suffix``: manually select the symbol suffix to use for the\n  library - should only be needed for linking against libraries built in a\n  non-standard way.\n\n\nNew features\n============\n\n``numpy._core`` submodule stubs\n-------------------------------\n\n``numpy._core`` submodule stubs were added to provide compatibility with\npickled arrays created using NumPy 2.0 when running Numpy 1.26.\n\n\nContributors\n============\n\nA total of 13 people contributed to this release.  People with a \"+\" by their\nnames contributed a patch for the first time.\n\n* Andrew Nelson\n* Anton Prosekin +\n* Charles Harris\n* Chongyun Lee +\n* Ivan A. Melnikov +\n* Jake Lishman +\n* Mahder Gebremedhin +\n* Mateusz Sok\u00f3\u0142\n* Matti Picus\n* Munira Alduraibi +\n* Ralf Gommers\n* Rohit Goswami\n* Sayed Adel\n\n\nPull requests merged\n====================\n\nA total of 20 pull requests were merged for this release.\n\n* `24742 <https://github.com/numpy/numpy/pull/24742>`__: MAINT: Update cibuildwheel version\n* `24748 <https://github.com/numpy/numpy/pull/24748>`__: MAINT: fix version string in wheels built with setup.py\n* `24771 <https://github.com/numpy/numpy/pull/24771>`__: BLD, BUG: Fix build failure for host flags e.g. ``-march=native``...\n* `24773 <https://github.com/numpy/numpy/pull/24773>`__: DOC: Updated the f2py docs to remove a note on -fimplicit-none\n* `24776 <https://github.com/numpy/numpy/pull/24776>`__: BUG: Fix SIMD f32 trunc test on s390x when baseline is none\n* `24785 <https://github.com/numpy/numpy/pull/24785>`__: BLD: add libquadmath to licences and other tweaks (#24753)\n* `24786 <https://github.com/numpy/numpy/pull/24786>`__: MAINT: Activate ``use-compute-credits`` for Cirrus.\n* `24803 <https://github.com/numpy/numpy/pull/24803>`__: BLD: updated vendored-meson/meson for mips64 fix\n* `24804 <https://github.com/numpy/numpy/pull/24804>`__: MAINT: fix licence path win\n* `24813 <https://github.com/numpy/numpy/pull/24813>`__: BUG: Fix order of Windows OS detection macros.\n* `24831 <https://github.com/numpy/numpy/pull/24831>`__: BUG, SIMD: use scalar cmul on bad Apple clang x86_64 (#24828)\n* `24840 <https://github.com/numpy/numpy/pull/24840>`__: BUG: Fix DATA statements for f2py\n* `24870 <https://github.com/numpy/numpy/pull/24870>`__: API: Add ``NumpyUnpickler`` for backporting\n* `24872 <https://github.com/numpy/numpy/pull/24872>`__: MAINT: Xfail test failing on PyPy.\n* `24879 <https://github.com/numpy/numpy/pull/24879>`__: BLD: fix math func feature checks, fix FreeBSD build, add CI...\n* `24899 <https://github.com/numpy/numpy/pull/24899>`__: ENH: meson: implement BLAS/LAPACK auto-detection and many CI...\n* `24902 <https://github.com/numpy/numpy/pull/24902>`__: DOC: add a 1.26.1 release notes section for BLAS/LAPACK build...\n* `24906 <https://github.com/numpy/numpy/pull/24906>`__: MAINT: Backport ``numpy._core`` stubs. Remove ``NumpyUnpickler``\n* `24911 <https://github.com/numpy/numpy/pull/24911>`__: MAINT: Bump pypa/cibuildwheel from 2.16.1 to 2.16.2\n* `24912 <https://github.com/numpy/numpy/pull/24912>`__: BUG: loongarch doesn't use REAL(10)\n\n\nChecksums\n=========\n\nMD5\n---\n::\n\n    bda38de1a047dd9fdddae16c0d9fb358  numpy-1.26.1-cp310-cp310-macosx_10_9_x86_64.whl\n    196d2e39047da64ab28e177760c95461  numpy-1.26.1-cp310-cp310-macosx_11_0_arm64.whl\n    9d25010a7bf50e624d2fed742790afbd  numpy-1.26.1-cp310-cp310-manylinux_2_17_aarch64.manylinux2014_aarch64.whl\n    9b22fa3d030807f0708007d9c0659f65  numpy-1.26.1-cp310-cp310-manylinux_2_17_x86_64.manylinux2014_x86_64.whl\n    eea626b8b930acb4b32302a9e95714f5  numpy-1.26.1-cp310-cp310-musllinux_1_1_x86_64.whl\n    3c40ef068f50d2ac2913c5b9fa1233fa  numpy-1.26.1-cp310-cp310-win32.whl\n    315c251d2f284af25761a37ce6dd4d10  numpy-1.26.1-cp310-cp310-win_amd64.whl\n    ebdd5046937df50e9f54a6d38c5775dd  numpy-1.26.1-cp311-cp311-macosx_10_9_x86_64.whl\n    682f9beebe8547f205d6cdc8ff96a984  numpy-1.26.1-cp311-cp311-macosx_11_0_arm64.whl\n    e86da9b6040ea88b3835c4d8f8578658  numpy-1.26.1-cp311-cp311-manylinux_2_17_aarch64.manylinux2014_aarch64.whl\n    ebcb6cf7f64454215e29d8a89829c8e1  numpy-1.26.1-cp311-cp311-manylinux_2_17_x86_64.manylinux2014_x86_64.whl\n    a8c89e13dc9a63712104e2fb06fb63a6  numpy-1.26.1-cp311-cp311-musllinux_1_1_x86_64.whl\n    339795930404988dbc664ff4cc72b399  numpy-1.26.1-cp311-cp311-win32.whl\n    4ef5e1bdd7726c19615843f5ac72e618  numpy-1.26.1-cp311-cp311-win_amd64.whl\n    3aad6bc72db50e9cc88aa5813e8f35bd  numpy-1.26.1-cp312-cp312-macosx_10_9_x86_64.whl\n    fd62f65ae7798dbda9a3f7af7aa5c8db  numpy-1.26.1-cp312-cp312-macosx_11_0_arm64.whl\n    104d939e080f1baf0a56aed1de0e79e3  numpy-1.26.1-cp312-cp312-manylinux_2_17_aarch64.manylinux2014_aarch64.whl\n    c44b56c96097f910bbec1420abcf3db5  numpy-1.26.1-cp312-cp312-manylinux_2_17_x86_64.manylinux2014_x86_64.whl\n    1dce230368ae5fc47dd0fe8de8ff771d  numpy-1.26.1-cp312-cp312-musllinux_1_1_x86_64.whl\n    d93338e7d60e1d294ca326450e99806b  numpy-1.26.1-cp312-cp312-win32.whl\n    a1832f46521335c1ee4c56dbf12e600b  numpy-1.26.1-cp312-cp312-win_amd64.whl\n    946fbb0b6caca9258985495532d3f9ab  numpy-1.26.1-cp39-cp39-macosx_10_9_x86_64.whl\n    78c2ab13d395d67d90bcd6583a6f61a8  numpy-1.26.1-cp39-cp39-macosx_11_0_arm64.whl\n    0a9d80d8b646abf4ffe51fff3e075d10  numpy-1.26.1-cp39-cp39-manylinux_2_17_aarch64.manylinux2014_aarch64.whl\n    0229ba8145d4f58500873b540a55d60e  numpy-1.26.1-cp39-cp39-manylinux_2_17_x86_64.manylinux2014_x86_64.whl\n    9179fc57c03260374c86e18867c24463  numpy-1.26.1-cp39-cp39-musllinux_1_1_x86_64.whl\n    246a3103fdbe5d891d7a8aee28875a26  numpy-1.26.1-cp39-cp39-win32.whl\n    4589dcb7f754fade6ea3946416bee638  numpy-1.26.1-cp39-cp39-win_amd64.whl\n    3af340d5487a6c045f00fe5eb889957c  numpy-1.26.1-pp39-pypy39_pp73-macosx_10_9_x86_64.whl\n    28aece4f1ceb92ec463aa353d4a91c8b  numpy-1.26.1-pp39-pypy39_pp73-manylinux_2_17_x86_64.manylinux2014_x86_64.whl\n    bbd0461a1e31017b05509e9971b3478e  numpy-1.26.1-pp39-pypy39_pp73-win_amd64.whl\n    2d770f4c281d405b690c4bcb3dbe99e2  numpy-1.26.1.tar.gz\n\nSHA256\n------\n::\n\n    82e871307a6331b5f09efda3c22e03c095d957f04bf6bc1804f30048d0e5e7af  numpy-1.26.1-cp310-cp310-macosx_10_9_x86_64.whl\n    cdd9ec98f0063d93baeb01aad472a1a0840dee302842a2746a7a8e92968f9575  numpy-1.26.1-cp310-cp310-macosx_11_0_arm64.whl\n    d78f269e0c4fd365fc2992c00353e4530d274ba68f15e968d8bc3c69ce5f5244  numpy-1.26.1-cp310-cp310-manylinux_2_17_aarch64.manylinux2014_aarch64.whl\n    8ab9163ca8aeb7fd32fe93866490654d2f7dda4e61bc6297bf72ce07fdc02f67  numpy-1.26.1-cp310-cp310-manylinux_2_17_x86_64.manylinux2014_x86_64.whl\n    78ca54b2f9daffa5f323f34cdf21e1d9779a54073f0018a3094ab907938331a2  numpy-1.26.1-cp310-cp310-musllinux_1_1_x86_64.whl\n    d1cfc92db6af1fd37a7bb58e55c8383b4aa1ba23d012bdbba26b4bcca45ac297  numpy-1.26.1-cp310-cp310-win32.whl\n    d2984cb6caaf05294b8466966627e80bf6c7afd273279077679cb010acb0e5ab  numpy-1.26.1-cp310-cp310-win_amd64.whl\n    cd7837b2b734ca72959a1caf3309457a318c934abef7a43a14bb984e574bbb9a  numpy-1.26.1-cp311-cp311-macosx_10_9_x86_64.whl\n    1c59c046c31a43310ad0199d6299e59f57a289e22f0f36951ced1c9eac3665b9  numpy-1.26.1-cp311-cp311-macosx_11_0_arm64.whl\n    d58e8c51a7cf43090d124d5073bc29ab2755822181fcad978b12e144e5e5a4b3  numpy-1.26.1-cp311-cp311-manylinux_2_17_aarch64.manylinux2014_aarch64.whl\n    6081aed64714a18c72b168a9276095ef9155dd7888b9e74b5987808f0dd0a974  numpy-1.26.1-cp311-cp311-manylinux_2_17_x86_64.manylinux2014_x86_64.whl\n    97e5d6a9f0702c2863aaabf19f0d1b6c2628fbe476438ce0b5ce06e83085064c  numpy-1.26.1-cp311-cp311-musllinux_1_1_x86_64.whl\n    b9d45d1dbb9de84894cc50efece5b09939752a2d75aab3a8b0cef6f3a35ecd6b  numpy-1.26.1-cp311-cp311-win32.whl\n    3649d566e2fc067597125428db15d60eb42a4e0897fc48d28cb75dc2e0454e53  numpy-1.26.1-cp311-cp311-win_amd64.whl\n    1d1bd82d539607951cac963388534da3b7ea0e18b149a53cf883d8f699178c0f  numpy-1.26.1-cp312-cp312-macosx_10_9_x86_64.whl\n    afd5ced4e5a96dac6725daeb5242a35494243f2239244fad10a90ce58b071d24  numpy-1.26.1-cp312-cp312-macosx_11_0_arm64.whl\n    a03fb25610ef560a6201ff06df4f8105292ba56e7cdd196ea350d123fc32e24e  numpy-1.26.1-cp312-cp312-manylinux_2_17_aarch64.manylinux2014_aarch64.whl\n    dcfaf015b79d1f9f9c9fd0731a907407dc3e45769262d657d754c3a028586124  numpy-1.26.1-cp312-cp312-manylinux_2_17_x86_64.manylinux2014_x86_64.whl\n    e509cbc488c735b43b5ffea175235cec24bbc57b227ef1acc691725beb230d1c  numpy-1.26.1-cp312-cp312-musllinux_1_1_x86_64.whl\n    af22f3d8e228d84d1c0c44c1fbdeb80f97a15a0abe4f080960393a00db733b66  numpy-1.26.1-cp312-cp312-win32.whl\n    9f42284ebf91bdf32fafac29d29d4c07e5e9d1af862ea73686581773ef9e73a7  numpy-1.26.1-cp312-cp312-win_amd64.whl\n    bb894accfd16b867d8643fc2ba6c8617c78ba2828051e9a69511644ce86ce83e  numpy-1.26.1-cp39-cp39-macosx_10_9_x86_64.whl\n    e44ccb93f30c75dfc0c3aa3ce38f33486a75ec9abadabd4e59f114994a9c4617  numpy-1.26.1-cp39-cp39-macosx_11_0_arm64.whl\n    9696aa2e35cc41e398a6d42d147cf326f8f9d81befcb399bc1ed7ffea339b64e  numpy-1.26.1-cp39-cp39-manylinux_2_17_aarch64.manylinux2014_aarch64.whl\n    a5b411040beead47a228bde3b2241100454a6abde9df139ed087bd73fc0a4908  numpy-1.26.1-cp39-cp39-manylinux_2_17_x86_64.manylinux2014_x86_64.whl\n    1e11668d6f756ca5ef534b5be8653d16c5352cbb210a5c2a79ff288e937010d5  numpy-1.26.1-cp39-cp39-musllinux_1_1_x86_64.whl\n    d1d2c6b7dd618c41e202c59c1413ef9b2c8e8a15f5039e344af64195459e3104  numpy-1.26.1-cp39-cp39-win32.whl\n    59227c981d43425ca5e5c01094d59eb14e8772ce6975d4b2fc1e106a833d5ae2  numpy-1.26.1-cp39-cp39-win_amd64.whl\n    06934e1a22c54636a059215d6da99e23286424f316fddd979f5071093b648668  numpy-1.26.1-pp39-pypy39_pp73-macosx_10_9_x86_64.whl\n    76ff661a867d9272cd2a99eed002470f46dbe0943a5ffd140f49be84f68ffc42  numpy-1.26.1-pp39-pypy39_pp73-manylinux_2_17_x86_64.manylinux2014_x86_64.whl\n    6965888d65d2848e8768824ca8288db0a81263c1efccec881cb35a0d805fcd2f  numpy-1.26.1-pp39-pypy39_pp73-win_amd64.whl\n    c8c6c72d4a9f831f328efb1312642a1cafafaa88981d9ab76368d50d07d93cbe  numpy-1.26.1.tar.gz\n\n\n.. currentmodule:: numpy\n\n==========================\n", "1.19.2": "==========================\n\nNumPy 1.19.2 fixes several bugs, prepares for the upcoming Cython 3.x release.\nand pins setuptools to keep distutils working while upstream modifications are\nongoing. The aarch64 wheels are built with the latest manylinux2014 release\nthat fixes the problem of differing page sizes used by different linux distros.\n\nThis release supports Python 3.6-3.8. Cython >= 0.29.21 needs to be used when\nbuilding with Python 3.9 for testing purposes.\n\nThere is a known problem with Windows 10 version=2004 and OpenBLAS svd that we\nare trying to debug. If you are running that Windows version you should use a\nNumPy version that links to the MKL library, earlier Windows versions are fine.\n\nImprovements\n============\n\nAdd NumPy declarations for Cython 3.0 and later\n-----------------------------------------------\nThe pxd declarations for Cython 3.0 were improved to avoid using deprecated\nNumPy C-API features.  Extension modules built with Cython 3.0+ that use NumPy\ncan now set the C macro ``NPY_NO_DEPRECATED_API=NPY_1_7_API_VERSION`` to avoid\nC compiler warnings about deprecated API usage.\n\nContributors\n============\n\nA total of 8 people contributed to this release.  People with a \"+\" by their\nnames contributed a patch for the first time.\n\n* Charles Harris\n* Matti Picus\n* Pauli Virtanen\n* Philippe Ombredanne +\n* Sebastian Berg\n* Stefan Behnel +\n* Stephan Loyd +\n* Zac Hatfield-Dodds\n\nPull requests merged\n====================\n\nA total of 9 pull requests were merged for this release.\n\n* `16959 <https://github.com/numpy/numpy/pull/16959>`__: TST: Change aarch64 to arm64 in travis.yml.\n* `16998 <https://github.com/numpy/numpy/pull/16998>`__: MAINT: Configure hypothesis in ``np.test()`` for determinism,...\n* `17000 <https://github.com/numpy/numpy/pull/17000>`__: BLD: pin setuptools < 49.2.0\n* `17015 <https://github.com/numpy/numpy/pull/17015>`__: ENH: Add NumPy declarations to be used by Cython 3.0+\n* `17125 <https://github.com/numpy/numpy/pull/17125>`__: BUG: Remove non-threadsafe sigint handling from fft calculation\n* `17243 <https://github.com/numpy/numpy/pull/17243>`__: BUG: core: fix ilp64 blas dot/vdot/... for strides > int32 max\n* `17244 <https://github.com/numpy/numpy/pull/17244>`__: DOC: Use SPDX license expressions with correct license\n* `17245 <https://github.com/numpy/numpy/pull/17245>`__: DOC: Fix the link to the quick-start in the old API functions\n* `17272 <https://github.com/numpy/numpy/pull/17272>`__: BUG: fix pickling of arrays larger than 2GiB\n\nChecksums\n=========\n\nMD5\n---\n::\n\n    b74295cbb5b1c98f46f26e13c0fca0ea  numpy-1.19.2-cp36-cp36m-macosx_10_9_x86_64.whl\n    3e307eca6c448bbe30e4c1dc99824642  numpy-1.19.2-cp36-cp36m-manylinux1_i686.whl\n    bfe6c2053a7a792097df912d1175ef7e  numpy-1.19.2-cp36-cp36m-manylinux1_x86_64.whl\n    3b61953b421460abc7d2ecb4df4060bc  numpy-1.19.2-cp36-cp36m-manylinux2010_i686.whl\n    7c442b7c5af62bd5be669bf6c360e114  numpy-1.19.2-cp36-cp36m-manylinux2010_x86_64.whl\n    f6eaf46804f0d66c123fa7ff728b178e  numpy-1.19.2-cp36-cp36m-manylinux2014_aarch64.whl\n    30bbe0bcd774ab483c7494d1cf827199  numpy-1.19.2-cp36-cp36m-win32.whl\n    cf54372ccde7de333d7b69cd16abfa70  numpy-1.19.2-cp36-cp36m-win_amd64.whl\n    285d0fc2986bf4a050523d98f47f2175  numpy-1.19.2-cp37-cp37m-macosx_10_9_x86_64.whl\n    a0901b44347ba39154058a26a9fc8e77  numpy-1.19.2-cp37-cp37m-manylinux1_i686.whl\n    21bfe38bdb317ad4af4959279dd90fde  numpy-1.19.2-cp37-cp37m-manylinux1_x86_64.whl\n    ec32c124ace9c08399e88b8eca6d7475  numpy-1.19.2-cp37-cp37m-manylinux2010_i686.whl\n    0d5cae15043a8172a1b8a478b7c98119  numpy-1.19.2-cp37-cp37m-manylinux2010_x86_64.whl\n    c7e9905e721dc31a666f59e30e37aa0d  numpy-1.19.2-cp37-cp37m-manylinux2014_aarch64.whl\n    ad32d083e641f2cf1a50fe821f3673a7  numpy-1.19.2-cp37-cp37m-win32.whl\n    a243b3e844507e424e828430010612c1  numpy-1.19.2-cp37-cp37m-win_amd64.whl\n    8f4d5df29d4fbf21bf8c4c976595214f  numpy-1.19.2-cp38-cp38-macosx_10_9_x86_64.whl\n    7b003b2fd18125f3956eb3a182ab0d7f  numpy-1.19.2-cp38-cp38-manylinux1_i686.whl\n    e7b8242ee7a79778c6df64772fde5885  numpy-1.19.2-cp38-cp38-manylinux1_x86_64.whl\n    e89e05d24b6f898005e03ba3f01c0641  numpy-1.19.2-cp38-cp38-manylinux2010_i686.whl\n    4cffe85a99bfe08d47d7f1f655142be4  numpy-1.19.2-cp38-cp38-manylinux2010_x86_64.whl\n    39e363f10f0a9af0a8506699118d3aaf  numpy-1.19.2-cp38-cp38-manylinux2014_aarch64.whl\n    13ccd230fefdd56a1679fd72fd0d8a55  numpy-1.19.2-cp38-cp38-win32.whl\n    a3d85f244058882b90140468b86f2e2e  numpy-1.19.2-cp38-cp38-win_amd64.whl\n    ef4cf0675f801a4bf339348fc1843f50  numpy-1.19.2-pp36-pypy36_pp73-manylinux2010_x86_64.whl\n    471156268abd8686e39e811003726ab1  numpy-1.19.2.tar.gz\n    2d011c5422596d742784ba5c2204bc5d  numpy-1.19.2.zip\n\nSHA256\n------\n::\n\n    b594f76771bc7fc8a044c5ba303427ee67c17a09b36e1fa32bde82f5c419d17a  numpy-1.19.2-cp36-cp36m-macosx_10_9_x86_64.whl\n    e6ddbdc5113628f15de7e4911c02aed74a4ccff531842c583e5032f6e5a179bd  numpy-1.19.2-cp36-cp36m-manylinux1_i686.whl\n    3733640466733441295b0d6d3dcbf8e1ffa7e897d4d82903169529fd3386919a  numpy-1.19.2-cp36-cp36m-manylinux1_x86_64.whl\n    4339741994c775396e1a274dba3609c69ab0f16056c1077f18979bec2a2c2e6e  numpy-1.19.2-cp36-cp36m-manylinux2010_i686.whl\n    7c6646314291d8f5ea900a7ea9c4261f834b5b62159ba2abe3836f4fa6705526  numpy-1.19.2-cp36-cp36m-manylinux2010_x86_64.whl\n    7118f0a9f2f617f921ec7d278d981244ba83c85eea197be7c5a4f84af80a9c3c  numpy-1.19.2-cp36-cp36m-manylinux2014_aarch64.whl\n    9a3001248b9231ed73894c773142658bab914645261275f675d86c290c37f66d  numpy-1.19.2-cp36-cp36m-win32.whl\n    967c92435f0b3ba37a4257c48b8715b76741410467e2bdb1097e8391fccfae15  numpy-1.19.2-cp36-cp36m-win_amd64.whl\n    d526fa58ae4aead839161535d59ea9565863bb0b0bdb3cc63214613fb16aced4  numpy-1.19.2-cp37-cp37m-macosx_10_9_x86_64.whl\n    eb25c381d168daf351147713f49c626030dcff7a393d5caa62515d415a6071d8  numpy-1.19.2-cp37-cp37m-manylinux1_i686.whl\n    62139af94728d22350a571b7c82795b9d59be77fc162414ada6c8b6a10ef5d02  numpy-1.19.2-cp37-cp37m-manylinux1_x86_64.whl\n    0c66da1d202c52051625e55a249da35b31f65a81cb56e4c69af0dfb8fb0125bf  numpy-1.19.2-cp37-cp37m-manylinux2010_i686.whl\n    2117536e968abb7357d34d754e3733b0d7113d4c9f1d921f21a3d96dec5ff716  numpy-1.19.2-cp37-cp37m-manylinux2010_x86_64.whl\n    54045b198aebf41bf6bf4088012777c1d11703bf74461d70cd350c0af2182e45  numpy-1.19.2-cp37-cp37m-manylinux2014_aarch64.whl\n    aba1d5daf1144b956bc87ffb87966791f5e9f3e1f6fab3d7f581db1f5b598f7a  numpy-1.19.2-cp37-cp37m-win32.whl\n    addaa551b298052c16885fc70408d3848d4e2e7352de4e7a1e13e691abc734c1  numpy-1.19.2-cp37-cp37m-win_amd64.whl\n    58d66a6b3b55178a1f8a5fe98df26ace76260a70de694d99577ddeab7eaa9a9d  numpy-1.19.2-cp38-cp38-macosx_10_9_x86_64.whl\n    59f3d687faea7a4f7f93bd9665e5b102f32f3fa28514f15b126f099b7997203d  numpy-1.19.2-cp38-cp38-manylinux1_i686.whl\n    cebd4f4e64cfe87f2039e4725781f6326a61f095bc77b3716502bed812b385a9  numpy-1.19.2-cp38-cp38-manylinux1_x86_64.whl\n    c35a01777f81e7333bcf276b605f39c872e28295441c265cd0c860f4b40148c1  numpy-1.19.2-cp38-cp38-manylinux2010_i686.whl\n    d7ac33585e1f09e7345aa902c281bd777fdb792432d27fca857f39b70e5dd31c  numpy-1.19.2-cp38-cp38-manylinux2010_x86_64.whl\n    04c7d4ebc5ff93d9822075ddb1751ff392a4375e5885299445fcebf877f179d5  numpy-1.19.2-cp38-cp38-manylinux2014_aarch64.whl\n    51ee93e1fac3fe08ef54ff1c7f329db64d8a9c5557e6c8e908be9497ac76374b  numpy-1.19.2-cp38-cp38-win32.whl\n    1669ec8e42f169ff715a904c9b2105b6640f3f2a4c4c2cb4920ae8b2785dac65  numpy-1.19.2-cp38-cp38-win_amd64.whl\n    0bfd85053d1e9f60234f28f63d4a5147ada7f432943c113a11afcf3e65d9d4c8  numpy-1.19.2-pp36-pypy36_pp73-manylinux2010_x86_64.whl\n    74d0cf50aa28af81874aca3e67560945afd783b2a006913577d6cddc35a824a6  numpy-1.19.2.tar.gz\n    0d310730e1e793527065ad7dde736197b705d0e4c9999775f212b03c44a8484c  numpy-1.19.2.zip\n\n\n.. currentmodule:: numpy\n\n==========================\n", "1.25.1": "==========================\nNumPy 1.25.1 is a maintenance release that fixes bugs and regressions discovered after the\n1.25.0 release. The Python versions supported by this release are 3.9-3.11.\n\nContributors\n============\n\nA total of 10 people contributed to this release.  People with a \"+\" by their\nnames contributed a patch for the first time.\n\n* Andrew Nelson\n* Charles Harris\n* Developer-Ecosystem-Engineering\n* Hood Chatham\n* Nathan Goldbaum\n* Rohit Goswami\n* Sebastian Berg\n* Tim Paine +\n* dependabot[bot]\n* matoro +\n\nPull requests merged\n====================\n\nA total of 14 pull requests were merged for this release.\n\n* `23968 <https://github.com/numpy/numpy/pull/23968>`__: MAINT: prepare 1.25.x for further development\n* `24036 <https://github.com/numpy/numpy/pull/24036>`__: BLD: Port long double identification to C for meson\n* `24037 <https://github.com/numpy/numpy/pull/24037>`__: BUG: Fix reduction ``return NULL`` to be ``goto fail``\n* `24038 <https://github.com/numpy/numpy/pull/24038>`__: BUG: Avoid undefined behavior in array.astype()\n* `24039 <https://github.com/numpy/numpy/pull/24039>`__: BUG: Ensure ``__array_ufunc__`` works without any kwargs passed\n* `24117 <https://github.com/numpy/numpy/pull/24117>`__: MAINT: Pin urllib3 to avoid anaconda-client bug.\n* `24118 <https://github.com/numpy/numpy/pull/24118>`__: TST: Pin pydantic<2 in Pyodide workflow\n* `24119 <https://github.com/numpy/numpy/pull/24119>`__: MAINT: Bump pypa/cibuildwheel from 2.13.0 to 2.13.1\n* `24120 <https://github.com/numpy/numpy/pull/24120>`__: MAINT: Bump actions/checkout from 3.5.2 to 3.5.3\n* `24122 <https://github.com/numpy/numpy/pull/24122>`__: BUG: Multiply or Divides using SIMD without a full vector can...\n* `24127 <https://github.com/numpy/numpy/pull/24127>`__: MAINT: testing for IS_MUSL closes #24074\n* `24128 <https://github.com/numpy/numpy/pull/24128>`__: BUG: Only replace dtype temporarily if dimensions changed\n* `24129 <https://github.com/numpy/numpy/pull/24129>`__: MAINT: Bump actions/setup-node from 3.6.0 to 3.7.0\n* `24134 <https://github.com/numpy/numpy/pull/24134>`__: BUG: Fix private procedures in f2py modules\n\nChecksums\n=========\n\nMD5\n---\n::\n\n    d09d98643db31e892fad11b8c2b7af22  numpy-1.25.1-cp310-cp310-macosx_10_9_x86_64.whl\n    d5b8d3b0424e2af41018f35a087c4500  numpy-1.25.1-cp310-cp310-macosx_11_0_arm64.whl\n    1007893b1a8bfd97d445a63d29d33642  numpy-1.25.1-cp310-cp310-manylinux_2_17_aarch64.manylinux2014_aarch64.whl\n    6a62d7a6cee310b41dc872aa7f3d7e8b  numpy-1.25.1-cp310-cp310-manylinux_2_17_x86_64.manylinux2014_x86_64.whl\n    e81f6264aecfa2269c5d29d10c362cbc  numpy-1.25.1-cp310-cp310-musllinux_1_1_x86_64.whl\n    ab8ecd125ca86eac0b3ada67ab66dad6  numpy-1.25.1-cp310-cp310-win32.whl\n    5466bebeaafcc3d6e1b98858d77ff945  numpy-1.25.1-cp310-cp310-win_amd64.whl\n    f31b059256ae09b7b83df63f52d8371e  numpy-1.25.1-cp311-cp311-macosx_10_9_x86_64.whl\n    099f74d654888869704469c321af845d  numpy-1.25.1-cp311-cp311-macosx_11_0_arm64.whl\n    20d04dccd2bfca5cfd88780d1dc9a3f8  numpy-1.25.1-cp311-cp311-manylinux_2_17_aarch64.manylinux2014_aarch64.whl\n    61dfd7c00638e83a7af59b86615ee9d2  numpy-1.25.1-cp311-cp311-manylinux_2_17_x86_64.manylinux2014_x86_64.whl\n    4eb459c3d9479c4da2fdf20e4c4085d0  numpy-1.25.1-cp311-cp311-musllinux_1_1_x86_64.whl\n    5e84e797866c68ba65fa89a4bf4ba8ce  numpy-1.25.1-cp311-cp311-win32.whl\n    87bb1633b2e8029dbfa1e59f7ab22625  numpy-1.25.1-cp311-cp311-win_amd64.whl\n    3fcf2eb5970d848a26abdff1b10228e7  numpy-1.25.1-cp39-cp39-macosx_10_9_x86_64.whl\n    d71e1cbe18fe05944219e5a5be1796bf  numpy-1.25.1-cp39-cp39-macosx_11_0_arm64.whl\n    5b457e10834c991bca84aae7eaa49f34  numpy-1.25.1-cp39-cp39-manylinux_2_17_aarch64.manylinux2014_aarch64.whl\n    5cbb4c2f2892fafdf6f34fcb37c9e743  numpy-1.25.1-cp39-cp39-manylinux_2_17_x86_64.manylinux2014_x86_64.whl\n    7d9d1ae23cf5420652088bfe8e048d89  numpy-1.25.1-cp39-cp39-musllinux_1_1_x86_64.whl\n    7e5bed491b85f0d7c718d6809f9b3ed2  numpy-1.25.1-cp39-cp39-win32.whl\n    838e97b751bebadf47e2196b2c88ffa2  numpy-1.25.1-cp39-cp39-win_amd64.whl\n    9ba95d8d6004d9659d7728fe93f67be9  numpy-1.25.1-pp39-pypy39_pp73-macosx_10_9_x86_64.whl\n    fbccb20254a2dc85bdec549a03b8eb56  numpy-1.25.1-pp39-pypy39_pp73-manylinux_2_17_x86_64.manylinux2014_x86_64.whl\n    95e36689e6dd078caf11e7e2a2d5f5f1  numpy-1.25.1-pp39-pypy39_pp73-win_amd64.whl\n    768d0ebf15e2242f4c7ca7565bb5dd3e  numpy-1.25.1.tar.gz\n\nSHA256\n------\n::\n\n    77d339465dff3eb33c701430bcb9c325b60354698340229e1dff97745e6b3efa  numpy-1.25.1-cp310-cp310-macosx_10_9_x86_64.whl\n    d736b75c3f2cb96843a5c7f8d8ccc414768d34b0a75f466c05f3a739b406f10b  numpy-1.25.1-cp310-cp310-macosx_11_0_arm64.whl\n    4a90725800caeaa160732d6b31f3f843ebd45d6b5f3eec9e8cc287e30f2805bf  numpy-1.25.1-cp310-cp310-manylinux_2_17_aarch64.manylinux2014_aarch64.whl\n    6c6c9261d21e617c6dc5eacba35cb68ec36bb72adcff0dee63f8fbc899362588  numpy-1.25.1-cp310-cp310-manylinux_2_17_x86_64.manylinux2014_x86_64.whl\n    0def91f8af6ec4bb94c370e38c575855bf1d0be8a8fbfba42ef9c073faf2cf19  numpy-1.25.1-cp310-cp310-musllinux_1_1_x86_64.whl\n    fd67b306320dcadea700a8f79b9e671e607f8696e98ec255915c0c6d6b818503  numpy-1.25.1-cp310-cp310-win32.whl\n    c1516db588987450b85595586605742879e50dcce923e8973f79529651545b57  numpy-1.25.1-cp310-cp310-win_amd64.whl\n    6b82655dd8efeea69dbf85d00fca40013d7f503212bc5259056244961268b66e  numpy-1.25.1-cp311-cp311-macosx_10_9_x86_64.whl\n    e8f6049c4878cb16960fbbfb22105e49d13d752d4d8371b55110941fb3b17800  numpy-1.25.1-cp311-cp311-macosx_11_0_arm64.whl\n    41a56b70e8139884eccb2f733c2f7378af06c82304959e174f8e7370af112e09  numpy-1.25.1-cp311-cp311-manylinux_2_17_aarch64.manylinux2014_aarch64.whl\n    d5154b1a25ec796b1aee12ac1b22f414f94752c5f94832f14d8d6c9ac40bcca6  numpy-1.25.1-cp311-cp311-manylinux_2_17_x86_64.manylinux2014_x86_64.whl\n    38eb6548bb91c421261b4805dc44def9ca1a6eef6444ce35ad1669c0f1a3fc5d  numpy-1.25.1-cp311-cp311-musllinux_1_1_x86_64.whl\n    791f409064d0a69dd20579345d852c59822c6aa087f23b07b1b4e28ff5880fcb  numpy-1.25.1-cp311-cp311-win32.whl\n    c40571fe966393b212689aa17e32ed905924120737194b5d5c1b20b9ed0fb171  numpy-1.25.1-cp311-cp311-win_amd64.whl\n    3d7abcdd85aea3e6cdddb59af2350c7ab1ed764397f8eec97a038ad244d2d105  numpy-1.25.1-cp39-cp39-macosx_10_9_x86_64.whl\n    1a180429394f81c7933634ae49b37b472d343cccb5bb0c4a575ac8bbc433722f  numpy-1.25.1-cp39-cp39-macosx_11_0_arm64.whl\n    d412c1697c3853c6fc3cb9751b4915859c7afe6a277c2bf00acf287d56c4e625  numpy-1.25.1-cp39-cp39-manylinux_2_17_aarch64.manylinux2014_aarch64.whl\n    20e1266411120a4f16fad8efa8e0454d21d00b8c7cee5b5ccad7565d95eb42dd  numpy-1.25.1-cp39-cp39-manylinux_2_17_x86_64.manylinux2014_x86_64.whl\n    f76aebc3358ade9eacf9bc2bb8ae589863a4f911611694103af05346637df1b7  numpy-1.25.1-cp39-cp39-musllinux_1_1_x86_64.whl\n    247d3ffdd7775bdf191f848be8d49100495114c82c2bd134e8d5d075fb386a1c  numpy-1.25.1-cp39-cp39-win32.whl\n    1d5d3c68e443c90b38fdf8ef40e60e2538a27548b39b12b73132456847f4b631  numpy-1.25.1-cp39-cp39-win_amd64.whl\n    35a9527c977b924042170a0887de727cd84ff179e478481404c5dc66b4170009  numpy-1.25.1-pp39-pypy39_pp73-macosx_10_9_x86_64.whl\n    0d3fe3dd0506a28493d82dc3cf254be8cd0d26f4008a417385cbf1ae95b54004  numpy-1.25.1-pp39-pypy39_pp73-manylinux_2_17_x86_64.manylinux2014_x86_64.whl\n    012097b5b0d00a11070e8f2e261128c44157a8689f7dedcf35576e525893f4fe  numpy-1.25.1-pp39-pypy39_pp73-win_amd64.whl\n    9a3a9f3a61480cc086117b426a8bd86869c213fc4072e606f01c4e4b66eb92bf  numpy-1.25.1.tar.gz\n\n\n.. currentmodule:: numpy\n\n==========================\n", "1.25.0": "==========================\n\nThe NumPy 1.25.0 release continues the ongoing work to improve the handling and\npromotion of dtypes, increase the execution speed, and clarify the\ndocumentation. There has also been work to prepare for the future NumPy 2.0.0\nrelease, resulting in a large number of new and expired deprecation.\nHighlights are:\n\n- Support for MUSL, there are now MUSL wheels.\n- Support the Fujitsu C/C++ compiler.\n- Object arrays are now supported in einsum\n- Support for inplace matrix multiplication (``=``).\n\nWe will be releasing a NumPy 1.26 when Python 3.12 comes out. That is needed\nbecause distutils has been dropped by Python 3.12 and we will be switching to using\nmeson for future builds. The next mainline release will be NumPy 2.0.0. We plan\nthat the 2.0 series will still support downstream projects built against earlier\nversions of NumPy.\n\nThe Python versions supported in this release are 3.9-3.11.\n\n\nDeprecations\n============\n\n* ``np.core.MachAr`` is deprecated.  It is private API.  In names\n  defined in ``np.core`` should generally be considered private.\n\n  (`gh-22638 <https://github.com/numpy/numpy/pull/22638>`__)\n\n* ``np.finfo(None)`` is deprecated.\n\n  (`gh-23011 <https://github.com/numpy/numpy/pull/23011>`__)\n\n* ``np.round_`` is deprecated. Use `np.round` instead.\n\n  (`gh-23302 <https://github.com/numpy/numpy/pull/23302>`__)\n\n* ``np.product`` is deprecated. Use `np.prod` instead.\n\n  (`gh-23314 <https://github.com/numpy/numpy/pull/23314>`__)\n\n* ``np.cumproduct`` is deprecated. Use `np.cumprod` instead.\n\n  (`gh-23314 <https://github.com/numpy/numpy/pull/23314>`__)\n\n* ``np.sometrue`` is deprecated. Use `np.any` instead.\n\n  (`gh-23314 <https://github.com/numpy/numpy/pull/23314>`__)\n\n* ``np.alltrue`` is deprecated. Use `np.all` instead.\n\n  (`gh-23314 <https://github.com/numpy/numpy/pull/23314>`__)\n\n* Only ndim-0 arrays are treated as scalars.  NumPy used to treat all arrays of\n  size 1 (e.g., ``np.array([3.14])``) as scalars.  In the future, this will be\n  limited to arrays of ndim 0 (e.g., ``np.array(3.14)``).  The following\n  expressions will report a deprecation warning:\n\n  .. code-block:: python\n\n      a = np.array([3.14])\n      float(a)   better: a[0] to get the numpy.float or a.item()\n\n      b = np.array([[3.14]])\n      c = numpy.random.rand(10)\n      c[0] = b   better: c[0] = b[0, 0]\n\n  (`gh-10615 <https://github.com/numpy/numpy/pull/10615>`__)\n\n* ``np.find_common_type`` is deprecated.\n  `numpy.find_common_type` is now deprecated and its use should be replaced\n  with either `numpy.result_type` or `numpy.promote_types`.\n  Most users leave the second ``scalar_types`` argument to ``find_common_type``\n  as ``[]`` in which case ``np.result_type`` and ``np.promote_types`` are both\n  faster and more robust.\n  When not using ``scalar_types`` the main difference is that the replacement\n  intentionally converts non-native byte-order to native byte order.\n  Further, ``find_common_type`` returns ``object`` dtype rather than failing\n  promotion.  This leads to differences when the inputs are not all numeric.\n  Importantly, this also happens for e.g. timedelta/datetime for which NumPy\n  promotion rules are currently sometimes surprising.\n\n  When the ``scalar_types`` argument is not ``[]`` things are more complicated.\n  In most cases, using ``np.result_type`` and passing the Python values\n  ``0``, ``0.0``, or ``0j`` has the same result as using ``int``, ``float``,\n  or ``complex`` in `scalar_types`.\n\n  When ``scalar_types`` is constructed, ``np.result_type`` is the\n  correct replacement and it may be passed scalar values like ``np.float32(0.0)``.\n  Passing values other than 0, may lead to value-inspecting behavior\n  (which ``np.find_common_type`` never used and NEP 50 may change in the future).\n  The main possible change in behavior in this case, is when the array types\n  are signed integers and scalar types are unsigned.\n\n  If you are unsure about how to replace a use of ``scalar_types`` or when\n  non-numeric dtypes are likely, please do not hesitate to open a NumPy issue\n  to ask for help.\n\n  (`gh-22539 <https://github.com/numpy/numpy/pull/22539>`__)\n\n\nExpired deprecations\n====================\n\n* ``np.core.machar`` and ``np.finfo.machar`` have been removed.\n\n  (`gh-22638 <https://github.com/numpy/numpy/pull/22638>`__)\n\n* ``+arr`` will now raise an error when the dtype is not\n  numeric (and positive is undefined).\n\n  (`gh-22998 <https://github.com/numpy/numpy/pull/22998>`__)\n\n* A sequence must now be passed into the stacking family of functions\n  (``stack``, ``vstack``, ``hstack``, ``dstack`` and ``column_stack``).\n\n  (`gh-23019 <https://github.com/numpy/numpy/pull/23019>`__)\n\n* ``np.clip`` now defaults to same-kind casting. Falling back to\n  unsafe casting was deprecated in NumPy 1.17.\n\n  (`gh-23403 <https://github.com/numpy/numpy/pull/23403>`__)\n\n* ``np.clip`` will now propagate ``np.nan`` values passed as ``min`` or ``max``.\n  Previously, a scalar NaN was usually ignored.  This was deprecated in NumPy 1.17.\n\n  (`gh-23403 <https://github.com/numpy/numpy/pull/23403>`__)\n\n* The ``np.dual`` submodule has been removed.\n\n  (`gh-23480 <https://github.com/numpy/numpy/pull/23480>`__)\n\n* NumPy now always ignores sequence behavior for an array-like (defining\n  one of the array protocols).  (Deprecation started NumPy 1.20)\n\n  (`gh-23660 <https://github.com/numpy/numpy/pull/23660>`__)\n\n* The niche ``FutureWarning`` when casting to a subarray dtype in ``astype``\n  or the array creation functions such as ``asarray`` is now finalized.\n  The behavior is now always the same as if the subarray dtype was\n  wrapped into a single field (which was the workaround, previously).\n  (FutureWarning since NumPy 1.20)\n\n  (`gh-23666 <https://github.com/numpy/numpy/pull/23666>`__)\n\n* ``==`` and ``!=`` warnings have been finalized.  The ``==`` and ``!=``\n  operators on arrays now always:\n\n  * raise errors that occur during comparisons such as when the arrays\n    have incompatible shapes (``np.array([1, 2]) == np.array([1, 2, 3])``).\n  * return an array of all ``True`` or all ``False`` when values are\n    fundamentally not comparable (e.g. have different dtypes).  An example\n    is ``np.array([\"a\"]) == np.array([1])``.\n\n    This mimics the Python behavior of returning ``False`` and ``True``\n    when comparing incompatible types like ``\"a\" == 1`` and ``\"a\" != 1``.\n    For a long time these gave ``DeprecationWarning`` or ``FutureWarning``.\n\n  (`gh-22707 <https://github.com/numpy/numpy/pull/22707>`__)\n\n* Nose support has been removed. NumPy switched to using pytest in 2018 and nose\n  has been unmaintained for many years. We have kept NumPy's nose support to\n  avoid breaking downstream projects who might have been using it and not yet\n  switched to pytest or some other testing framework. With the arrival of\n  Python 3.12, unpatched nose will raise an error. It is time to move on.\n\n  *Decorators removed*:\n\n  - raises\n  - slow\n  - setastest\n  - skipif\n  - knownfailif\n  - deprecated\n  - parametrize\n  - _needs_refcount\n\n  These are not to be confused with pytest versions with similar names, e.g.,\n  pytest.mark.slow, pytest.mark.skipif, pytest.mark.parametrize.\n\n  *Functions removed*:\n\n  - Tester\n  - import_nose\n  - run_module_suite\n\n  (`gh-23041 <https://github.com/numpy/numpy/pull/23041>`__)\n\n* The ``numpy.testing.utils`` shim has been removed.  Importing from the\n  ``numpy.testing.utils`` shim has been deprecated since 2019, the shim has now\n  been removed. All imports should be made directly from ``numpy.testing``.\n\n  (`gh-23060 <https://github.com/numpy/numpy/pull/23060>`__)\n\n* The environment variable to disable dispatching has been removed.\n  Support for the ``NUMPY_EXPERIMENTAL_ARRAY_FUNCTION`` environment variable has\n  been removed. This variable disabled dispatching with ``__array_function__``.\n\n  (`gh-23376 <https://github.com/numpy/numpy/pull/23376>`__)\n\n* Support for ``y=`` as an alias of ``out=`` has been removed.\n  The ``fix``, ``isposinf`` and ``isneginf`` functions allowed using ``y=`` as a\n  (deprecated) alias for ``out=``. This is no longer supported.\n\n  (`gh-23376 <https://github.com/numpy/numpy/pull/23376>`__)\n\n\nCompatibility notes\n===================\n\n* The ``busday_count`` method now correctly handles cases where the ``begindates`` is later in time\n  than the ``enddates``. Previously, the ``enddates`` was included, even though the documentation states\n  it is always excluded.\n\n  (`gh-23229 <https://github.com/numpy/numpy/pull/23229>`__)\n\n* When comparing datetimes and timedelta using ``np.equal`` or ``np.not_equal``\n  numpy previously allowed the comparison with ``casting=\"unsafe\"``.\n  This operation now fails. Forcing the output dtype using the ``dtype``\n  kwarg can make the operation succeed, but we do not recommend it.\n\n  (`gh-22707 <https://github.com/numpy/numpy/pull/22707>`__)\n\n* When loading data from a file handle using ``np.load``,\n  if the handle is at the end of file, as can happen when reading\n  multiple arrays by calling ``np.load`` repeatedly, numpy previously\n  raised ``ValueError`` if ``allow_pickle=False``, and ``OSError`` if\n  ``allow_pickle=True``. Now it raises ``EOFError`` instead, in both cases.\n\n  (`gh-23105 <https://github.com/numpy/numpy/pull/23105>`__)\n\n``np.pad`` with ``mode=wrap`` pads with strict multiples of original data\n-------------------------------------------------------------------------\nCode based on earlier version of ``pad`` that uses  ``mode=\"wrap\"`` will return\ndifferent results when the padding size is larger than initial array.\n\n``np.pad`` with ``mode=wrap`` now always fills the space with\nstrict multiples of original data even if the padding size is larger than the\ninitial array.\n\n(`gh-22575 <https://github.com/numpy/numpy/pull/22575>`__)\n\nCython ``long_t`` and ``ulong_t`` removed\n-----------------------------------------\n``long_t`` and ``ulong_t`` were aliases for ``longlong_t`` and ``ulonglong_t``\nand confusing (a remainder from of Python 2).  This change may lead to the errors::\n\n     'long_t' is not a type identifier\n     'ulong_t' is not a type identifier\n\nWe recommend use of bit-sized types such as ``cnp.int64_t`` or the use of\n``cnp.intp_t`` which is 32 bits on 32 bit systems and 64 bits on 64 bit\nsystems (this is most compatible with indexing).\nIf C ``long`` is desired, use plain ``long`` or ``npy_long``.\n``cnp.int_t`` is also ``long`` (NumPy's default integer).  However, ``long``\nis 32 bit on 64 bit windows and we may wish to adjust this even in NumPy.\n(Please do not hesitate to contact NumPy developers if you are curious about this.)\n\n(`gh-22637 <https://github.com/numpy/numpy/pull/22637>`__)\n\nChanged error message and type for bad ``axes`` argument to ``ufunc``\n---------------------------------------------------------------------\nThe error message and type when a wrong ``axes`` value is passed to\n``ufunc(..., axes=[...])``` has changed. The message is now more indicative of\nthe problem, and if the value is mismatched an ``AxisError`` will be raised.\nA ``TypeError`` will still be raised for invalid input types.\n\n(`gh-22675 <https://github.com/numpy/numpy/pull/22675>`__)\n\nArray-likes that define ``__array_ufunc__`` can now override ufuncs if used as ``where``\n----------------------------------------------------------------------------------------\nIf the ``where`` keyword argument of a :class:`numpy.ufunc` is a subclass of\n:class:`numpy.ndarray` or is a duck type that defines\n:func:`numpy.class.__array_ufunc__` it can override the behavior of the ufunc\nusing the same mechanism as the input and output arguments.\nNote that for this to work properly, the ``where.__array_ufunc__``\nimplementation will have to unwrap the ``where`` argument to pass it into the\ndefault implementation of the ``ufunc`` or, for :class:`numpy.ndarray`\nsubclasses before using ``super().__array_ufunc__``.\n\n(`gh-23240 <https://github.com/numpy/numpy/pull/23240>`__)\n\nCompiling against the NumPy C API is now backwards compatible by default\n------------------------------------------------------------------------\nNumPy now defaults to exposing a backwards compatible subset of the C-API.\nThis makes the use of ``oldest-supported-numpy`` unnecessary.\nLibraries can override the default minimal version to be compatible with\nusing::\n\n    define NPY_TARGET_VERSION NPY_1_22_API_VERSION\n\nbefore including NumPy or by passing the equivalent ``-D`` option to the\ncompiler.\nThe NumPy 1.25 default is ``NPY_1_19_API_VERSION``.  Because the NumPy 1.19\nC API was identical to the NumPy 1.16 one resulting programs will be compatible\nwith NumPy 1.16 (from a C-API perspective).\nThis default will be increased in future non-bugfix releases.\nYou can still compile against an older NumPy version and run on a newer one.\n\nFor more details please see :ref:`for-downstream-package-authors`.\n\n(`gh-23528 <https://github.com/numpy/numpy/pull/23528>`__)\n\n\nNew Features\n============\n\n``np.einsum`` now accepts arrays with ``object`` dtype\n------------------------------------------------------\nThe code path will call python operators on object dtype arrays, much\nlike ``np.dot`` and ``np.matmul``.\n\n(`gh-18053 <https://github.com/numpy/numpy/pull/18053>`__)\n\nAdd support for inplace matrix multiplication\n---------------------------------------------\nIt is now possible to perform inplace matrix multiplication\nvia the ``=`` operator.\n\n.. code-block:: python\n\n    >>> import numpy as np\n\n    >>> a = np.arange(6).reshape(3, 2)\n    >>> print(a)\n    [[0 1]\n     [2 3]\n     [4 5]]\n\n    >>> b = np.ones((2, 2), dtype=int)\n    >>> a = b\n    >>> print(a)\n    [[1 1]\n     [5 5]\n     [9 9]]\n\n(`gh-21120 <https://github.com/numpy/numpy/pull/21120>`__)\n\nAdded ``NPY_ENABLE_CPU_FEATURES`` environment variable\n------------------------------------------------------\nUsers may now choose to enable only a subset of the built CPU features at\nruntime by specifying the `NPY_ENABLE_CPU_FEATURES` environment variable.\nNote that these specified features must be outside the baseline, since those\nare always assumed. Errors will be raised if attempting to enable a feature\nthat is either not supported by your CPU, or that NumPy was not built with.\n\n(`gh-22137 <https://github.com/numpy/numpy/pull/22137>`__)\n\nNumPy now has an ``np.exceptions`` namespace\n--------------------------------------------\nNumPy now has a dedicated namespace making most exceptions\nand warnings available.  All of these remain available in the\nmain namespace, although some may be moved slowly in the future.\nThe main reason for this is to increase discoverability and add\nfuture exceptions.\n\n(`gh-22644 <https://github.com/numpy/numpy/pull/22644>`__)\n\n``np.linalg`` functions return NamedTuples\n------------------------------------------\n``np.linalg`` functions that return tuples now return namedtuples. These\nfunctions are ``eig()``, ``eigh()``, ``qr()``, ``slogdet()``, and ``svd()``.\nThe return type is unchanged in instances where these functions return\nnon-tuples with certain keyword arguments (like ``svd(compute_uv=False)``).\n\n(`gh-22786 <https://github.com/numpy/numpy/pull/22786>`__)\n\nString functions in ``np.char`` are compatible with NEP 42 custom dtypes\n------------------------------------------------------------------------\nCustom dtypes that represent unicode strings or byte strings can now be\npassed to the string functions in ``np.char``.\n\n(`gh-22863 <https://github.com/numpy/numpy/pull/22863>`__)\n\nString dtype instances can be created from the string abstract dtype classes\n----------------------------------------------------------------------------\nIt is now possible to create a string dtype instance with a size without\nusing the string name of the dtype. For example, ``type(np.dtype('U'))(8)``\nwill create a dtype that is equivalent to ``np.dtype('U8')``. This feature\nis most useful when writing generic code dealing with string dtype\nclasses.\n\n(`gh-22963 <https://github.com/numpy/numpy/pull/22963>`__)\n\nFujitsu C/C++ compiler is now supported\n---------------------------------------\nSupport for Fujitsu compiler has been added.\nTo build with Fujitsu compiler, run:\n\n    python setup.py build -c fujitsu\n\n\nSSL2 is now supported\n---------------------\nSupport for SSL2 has been added. SSL2 is a library that provides OpenBLAS\ncompatible GEMM functions.  To enable SSL2, it need to edit site.cfg and build\nwith Fujitsu compiler.  See site.cfg.example.\n\n(`gh-22982 <https://github.com/numpy/numpy/pull/22982>`__)\n\n\nImprovements\n============\n\n``NDArrayOperatorsMixin`` specifies that it has no ``__slots__``\n----------------------------------------------------------------\nThe ``NDArrayOperatorsMixin`` class now specifies that it contains no\n``__slots__``, ensuring that subclasses can now make use of this feature in\nPython.\n\n(`gh-23113 <https://github.com/numpy/numpy/pull/23113>`__)\n\nFix power of complex zero\n-------------------------\n``np.power`` now returns a different result for ``0^{non-zero}``\nfor complex numbers.  Note that the value is only defined when\nthe real part of the exponent is larger than zero.\nPreviously, NaN was returned unless the imaginary part was strictly\nzero.  The return value is either ``0+0j`` or ``0-0j``.\n\n(`gh-18535 <https://github.com/numpy/numpy/pull/18535>`__)\n\nNew ``DTypePromotionError``\n---------------------------\nNumPy now has a new ``DTypePromotionError`` which is used when two\ndtypes cannot be promoted to a common one, for example::\n\n    np.result_type(\"M8[s]\", np.complex128)\n\nraises this new exception.\n\n(`gh-22707 <https://github.com/numpy/numpy/pull/22707>`__)\n\n`np.show_config` uses information from Meson\n--------------------------------------------\nBuild and system information now contains information from Meson.\n`np.show_config` now has a new optional parameter ``mode`` to help\ncustomize the output.\n\n(`gh-22769 <https://github.com/numpy/numpy/pull/22769>`__)\n\nFix ``np.ma.diff`` not preserving the mask when called with arguments prepend/append.\n-------------------------------------------------------------------------------------\nCalling ``np.ma.diff`` with arguments prepend and/or append now returns a\n``MaskedArray`` with the input mask preserved.\n\nPreviously, a ``MaskedArray`` without the mask was returned.\n\n(`gh-22776 <https://github.com/numpy/numpy/pull/22776>`__)\n\nCorrected error handling for NumPy C-API in Cython\n--------------------------------------------------\nMany NumPy C functions defined for use in Cython were lacking the\ncorrect error indicator like ``except -1`` or ``except *``.\nThese have now been added.\n\n(`gh-22997 <https://github.com/numpy/numpy/pull/22997>`__)\n\nAbility to directly spawn random number generators\n--------------------------------------------------\n`numpy.random.Generator.spawn` now allows to directly spawn new\nindependent child generators via the `numpy.random.SeedSequence.spawn`\nmechanism.\n`numpy.random.BitGenerator.spawn` does the same for the underlying\nbit generator.\n\nAdditionally, `numpy.random.BitGenerator.seed_seq` now gives direct\naccess to the seed sequence used for initializing the bit generator.\nThis allows for example::\n\n    seed = 0x2e09b90939db40c400f8f22dae617151\n    rng = np.random.default_rng(seed)\n    child_rng1, child_rng2 = rng.spawn(2)\n\n     safely use rng, child_rng1, and child_rng2\n\nPreviously, this was hard to do without passing the ``SeedSequence``\nexplicitly.  Please see `numpy.random.SeedSequence` for more information.\n\n(`gh-23195 <https://github.com/numpy/numpy/pull/23195>`__)\n\n``numpy.logspace`` now supports a non-scalar ``base`` argument\n--------------------------------------------------------------\nThe ``base`` argument of ``numpy.logspace`` can now be array-like if it is\nbroadcastable against the ``start`` and ``stop`` arguments.\n\n(`gh-23275 <https://github.com/numpy/numpy/pull/23275>`__)\n\n``np.ma.dot()`` now supports for non-2d arrays\n----------------------------------------------\nPreviously ``np.ma.dot()`` only worked if ``a`` and ``b`` were both 2d.\nNow it works for non-2d arrays as well as ``np.dot()``.\n\n(`gh-23322 <https://github.com/numpy/numpy/pull/23322>`__)\n\nExplicitly show keys of .npz file in repr\n-----------------------------------------\n``NpzFile`` shows keys of loaded .npz file when printed.\n\n.. code-block:: python\n\n   >>> npzfile = np.load('arr.npz')\n   >>> npzfile\n   NpzFile 'arr.npz' with keys arr_0, arr_1, arr_2, arr_3, arr_4...\n\n(`gh-23357 <https://github.com/numpy/numpy/pull/23357>`__)\n\nNumPy now exposes DType classes in ``np.dtypes``\n------------------------------------------------\nThe new ``numpy.dtypes`` module now exposes DType classes and\nwill contain future dtype related functionality.\nMost users should have no need to use these classes directly.\n\n(`gh-23358 <https://github.com/numpy/numpy/pull/23358>`__)\n\nDrop dtype metadata before saving in .npy or .npz files\n-------------------------------------------------------\nCurrently, a ``*.npy`` file containing a table with a dtype with\nmetadata cannot be read back.\nNow, `np.save` and `np.savez` drop metadata before saving.\n\n(`gh-23371 <https://github.com/numpy/numpy/pull/23371>`__)\n\n``numpy.lib.recfunctions.structured_to_unstructured`` returns views in more cases\n---------------------------------------------------------------------------------\n``structured_to_unstructured`` now returns a view, if the stride between the\nfields is constant. Prior, padding between the fields or a reversed field\nwould lead to a copy.\nThis change only applies to ``ndarray``, ``memmap`` and ``recarray``. For all\nother array subclasses, the behavior remains unchanged.\n\n(`gh-23652 <https://github.com/numpy/numpy/pull/23652>`__)\n\nSigned and unsigned integers always compare correctly\n-----------------------------------------------------\nWhen ``uint64`` and ``int64`` are mixed in NumPy, NumPy typically\npromotes both to ``float64``.  This behavior may be argued about\nbut is confusing for comparisons ``==``, ``<=``, since the results\nreturned can be incorrect but the conversion is hidden since the\nresult is a boolean.\nNumPy will now return the correct results for these by avoiding\nthe cast to float.\n\n(`gh-23713 <https://github.com/numpy/numpy/pull/23713>`__)\n\n\nPerformance improvements and changes\n====================================\n\nFaster ``np.argsort`` on AVX-512 enabled processors\n---------------------------------------------------\n32-bit and 64-bit quicksort algorithm for np.argsort gain up to 6x speed up on\nprocessors that support AVX-512 instruction set.\n\nThanks to `Intel corporation <https://open.intel.com/>`_ for sponsoring this\nwork.\n\n(`gh-23707 <https://github.com/numpy/numpy/pull/23707>`__)\n\nFaster ``np.sort`` on AVX-512 enabled processors\n------------------------------------------------\nQuicksort for 16-bit and 64-bit dtypes gain up to 15x and 9x speed up on\nprocessors that support AVX-512 instruction set.\n\nThanks to `Intel corporation <https://open.intel.com/>`_ for sponsoring this\nwork.\n\n(`gh-22315 <https://github.com/numpy/numpy/pull/22315>`__)\n\n``__array_function__`` machinery is now much faster\n---------------------------------------------------\nThe overhead of the majority of functions in NumPy is now smaller\nespecially when keyword arguments are used.  This change significantly\nspeeds up many simple function calls.\n\n(`gh-23020 <https://github.com/numpy/numpy/pull/23020>`__)\n\n``ufunc.at`` can be much faster\n-------------------------------\nGeneric ``ufunc.at`` can be up to 9x faster. The conditions for this speedup:\n\n- operands are aligned\n- no casting\n\nIf ufuncs with appropriate indexed loops on 1d arguments with the above\nconditions, ``ufunc.at`` can be up to 60x faster (an additional 7x speedup).\nAppropriate indexed loops have been added to ``add``, ``subtract``,\n``multiply``, ``floor_divide``, ``maximum``, ``minimum``, ``fmax``, and\n``fmin``.\n\nThe internal logic is similar to the logic used for regular ufuncs, which also\nhave fast paths.\n\nThanks to the `D. E. Shaw group <https://deshaw.com/>`_ for sponsoring this\nwork.\n\n(`gh-23136 <https://github.com/numpy/numpy/pull/23136>`__)\n\nFaster membership test on ``NpzFile``\n-------------------------------------\nMembership test on ``NpzFile`` will no longer\ndecompress the archive if it is successful.\n\n(`gh-23661 <https://github.com/numpy/numpy/pull/23661>`__)\n\n\nChanges\n=======\n\n``np.r_[]`` and ``np.c_[]`` with certain scalar values\n------------------------------------------------------\nIn rare cases, using mainly ``np.r_`` with scalars can lead to different\nresults.  The main potential changes are highlighted by the following::\n\n    >>> np.r_[np.arange(5, dtype=np.uint8), -1].dtype\n    int16   rather than the default integer (int64 or int32)\n    >>> np.r_[np.arange(5, dtype=np.int8), 255]\n    array([  0,   1,   2,   3,   4, 255], dtype=int16)\n\nWhere the second example returned::\n\n    array([ 0,  1,  2,  3,  4, -1], dtype=int8)\n\nThe first one is due to a signed integer scalar with an unsigned integer\narray, while the second is due to ``255`` not fitting into ``int8`` and\nNumPy currently inspecting values to make this work.\n(Note that the second example is expected to change in the future due to\n:ref:`NEP 50 <NEP50>`; it will then raise an error.)\n\n(`gh-22539 <https://github.com/numpy/numpy/pull/22539>`__)\n\nMost NumPy functions are wrapped into a C-callable\n--------------------------------------------------\nTo speed up the ``__array_function__`` dispatching, most NumPy functions\nare now wrapped into C-callables and are not proper Python functions or\nC methods.\nThey still look and feel the same as before (like a Python function), and this\nshould only improve performance and user experience (cleaner tracebacks).\nHowever, please inform the NumPy developers if this change confuses your\nprogram for some reason.\n\n(`gh-23020 <https://github.com/numpy/numpy/pull/23020>`__)\n\nC++ standard library usage\n--------------------------\nNumPy builds now depend on the C++ standard library, because\nthe ``numpy.core._multiarray_umath`` extension is linked with\nthe C++ linker.\n\n(`gh-23601 <https://github.com/numpy/numpy/pull/23601>`__)\n\nChecksums\n=========\n\nMD5\n---\n::\n\n    4657f046d9d9d62e4baeae9b2cc1b4ea  numpy-1.25.0-cp310-cp310-macosx_10_9_x86_64.whl\n    f57f98fee3da2d98f752f755a880a508  numpy-1.25.0-cp310-cp310-macosx_11_0_arm64.whl\n    72b0ad52f96a41a7a82f511cb35c7ef1  numpy-1.25.0-cp310-cp310-manylinux_2_17_aarch64.manylinux2014_aarch64.whl\n    a61227341b8903fa66ab0e0fdaa15430  numpy-1.25.0-cp310-cp310-manylinux_2_17_x86_64.manylinux2014_x86_64.whl\n    bfccabfbd866c59545ce11ecdac60701  numpy-1.25.0-cp310-cp310-musllinux_1_1_x86_64.whl\n    22402904f194376b8d2de01481f04b03  numpy-1.25.0-cp310-cp310-win32.whl\n    e983b193f7d63568eac85d8bda8be62e  numpy-1.25.0-cp310-cp310-win_amd64.whl\n    5f6477db172f59a4fd7f591e1007e632  numpy-1.25.0-cp311-cp311-macosx_10_9_x86_64.whl\n    6a85cca47af69e3d45b4efab9490af4d  numpy-1.25.0-cp311-cp311-macosx_11_0_arm64.whl\n    ad1c0b4b406c9a2f1b42792502bc456b  numpy-1.25.0-cp311-cp311-manylinux_2_17_aarch64.manylinux2014_aarch64.whl\n    39e241f265611a9c1e89499054ead1c9  numpy-1.25.0-cp311-cp311-manylinux_2_17_x86_64.manylinux2014_x86_64.whl\n    e36b37acf1acfbc185face67c67bfe09  numpy-1.25.0-cp311-cp311-musllinux_1_1_x86_64.whl\n    67862d7849b4f0f943760142f1628aed  numpy-1.25.0-cp311-cp311-win32.whl\n    6e8ed7865792246cac2213bad404f4da  numpy-1.25.0-cp311-cp311-win_amd64.whl\n    25e843425697364f50dd7288ff9d2ce1  numpy-1.25.0-cp39-cp39-macosx_10_9_x86_64.whl\n    58641e53bcb1e13dfed1f5af1aff94bc  numpy-1.25.0-cp39-cp39-macosx_11_0_arm64.whl\n    ce15327793c39beecee8401356bc6c9b  numpy-1.25.0-cp39-cp39-manylinux_2_17_aarch64.manylinux2014_aarch64.whl\n    34b734a2c7698d59954c29fe7c0536f3  numpy-1.25.0-cp39-cp39-manylinux_2_17_x86_64.manylinux2014_x86_64.whl\n    6652d9df23c84e54466b10f4a2a290be  numpy-1.25.0-cp39-cp39-musllinux_1_1_x86_64.whl\n    c228105e3c4c8887823d99e35eea9d2b  numpy-1.25.0-cp39-cp39-win32.whl\n    1322210ae6a874293d13c4bb3abf24ee  numpy-1.25.0-cp39-cp39-win_amd64.whl\n    dc36096628e65077c2a44c493606c668  numpy-1.25.0-pp39-pypy39_pp73-macosx_10_9_x86_64.whl\n    942b4276f8d563efb111921d5995834c  numpy-1.25.0-pp39-pypy39_pp73-manylinux_2_17_x86_64.manylinux2014_x86_64.whl\n    0fa0734a8ff952dd643e7b9826168099  numpy-1.25.0-pp39-pypy39_pp73-win_amd64.whl\n    b236497153bc19b4a560ac485e4c2754  numpy-1.25.0.tar.gz\n\nSHA256\n------\n::\n\n    8aa130c3042052d656751df5e81f6d61edff3e289b5994edcf77f54118a8d9f4  numpy-1.25.0-cp310-cp310-macosx_10_9_x86_64.whl\n    9e3f2b96e3b63c978bc29daaa3700c028fe3f049ea3031b58aa33fe2a5809d24  numpy-1.25.0-cp310-cp310-macosx_11_0_arm64.whl\n    d6b267f349a99d3908b56645eebf340cb58f01bd1e773b4eea1a905b3f0e4208  numpy-1.25.0-cp310-cp310-manylinux_2_17_aarch64.manylinux2014_aarch64.whl\n    4aedd08f15d3045a4e9c648f1e04daca2ab1044256959f1f95aafeeb3d794c16  numpy-1.25.0-cp310-cp310-manylinux_2_17_x86_64.manylinux2014_x86_64.whl\n    6d183b5c58513f74225c376643234c369468e02947b47942eacbb23c1671f25d  numpy-1.25.0-cp310-cp310-musllinux_1_1_x86_64.whl\n    d76a84998c51b8b68b40448ddd02bd1081bb33abcdc28beee6cd284fe11036c6  numpy-1.25.0-cp310-cp310-win32.whl\n    c0dc071017bc00abb7d7201bac06fa80333c6314477b3d10b52b58fa6a6e38f6  numpy-1.25.0-cp310-cp310-win_amd64.whl\n    4c69fe5f05eea336b7a740e114dec995e2f927003c30702d896892403df6dbf0  numpy-1.25.0-cp311-cp311-macosx_10_9_x86_64.whl\n    9c7211d7920b97aeca7b3773a6783492b5b93baba39e7c36054f6e749fc7490c  numpy-1.25.0-cp311-cp311-macosx_11_0_arm64.whl\n    ecc68f11404930e9c7ecfc937aa423e1e50158317bf67ca91736a9864eae0232  numpy-1.25.0-cp311-cp311-manylinux_2_17_aarch64.manylinux2014_aarch64.whl\n    e559c6afbca484072a98a51b6fa466aae785cfe89b69e8b856c3191bc8872a82  numpy-1.25.0-cp311-cp311-manylinux_2_17_x86_64.manylinux2014_x86_64.whl\n    6c284907e37f5e04d2412950960894b143a648dea3f79290757eb878b91acbd1  numpy-1.25.0-cp311-cp311-musllinux_1_1_x86_64.whl\n    95367ccd88c07af21b379be1725b5322362bb83679d36691f124a16357390153  numpy-1.25.0-cp311-cp311-win32.whl\n    b76aa836a952059d70a2788a2d98cb2a533ccd46222558b6970348939e55fc24  numpy-1.25.0-cp311-cp311-win_amd64.whl\n    b792164e539d99d93e4e5e09ae10f8cbe5466de7d759fc155e075237e0c274e4  numpy-1.25.0-cp39-cp39-macosx_10_9_x86_64.whl\n    7cd981ccc0afe49b9883f14761bb57c964df71124dcd155b0cba2b591f0d64b9  numpy-1.25.0-cp39-cp39-macosx_11_0_arm64.whl\n    5aa48bebfb41f93043a796128854b84407d4df730d3fb6e5dc36402f5cd594c0  numpy-1.25.0-cp39-cp39-manylinux_2_17_aarch64.manylinux2014_aarch64.whl\n    5177310ac2e63d6603f659fadc1e7bab33dd5a8db4e0596df34214eeab0fee3b  numpy-1.25.0-cp39-cp39-manylinux_2_17_x86_64.manylinux2014_x86_64.whl\n    0ac6edfb35d2a99aaf102b509c8e9319c499ebd4978df4971b94419a116d0790  numpy-1.25.0-cp39-cp39-musllinux_1_1_x86_64.whl\n    7412125b4f18aeddca2ecd7219ea2d2708f697943e6f624be41aa5f8a9852cc4  numpy-1.25.0-cp39-cp39-win32.whl\n    26815c6c8498dc49d81faa76d61078c4f9f0859ce7817919021b9eba72b425e3  numpy-1.25.0-cp39-cp39-win_amd64.whl\n    5b1b90860bf7d8a8c313b372d4f27343a54f415b20fb69dd601b7efe1029c91e  numpy-1.25.0-pp39-pypy39_pp73-macosx_10_9_x86_64.whl\n    85cdae87d8c136fd4da4dad1e48064d700f63e923d5af6c8c782ac0df8044542  numpy-1.25.0-pp39-pypy39_pp73-manylinux_2_17_x86_64.manylinux2014_x86_64.whl\n    cc3fda2b36482891db1060f00f881c77f9423eead4c3579629940a3e12095fe8  numpy-1.25.0-pp39-pypy39_pp73-win_amd64.whl\n    f1accae9a28dc3cda46a91de86acf69de0d1b5f4edd44a9b0c3ceb8036dfff19  numpy-1.25.0.tar.gz\n\n\n.. currentmodule:: numpy\n\n==========================\n", "1.22.0": "==========================\nNumPy 1.22.0 is a big release featuring the work of 153 contributers spread\nover 609 pull requests. There have been many improvements, highlights are:\n\n* Annotations of the main namespace are essentially complete. Upstream is a\n  moving target, so there will likely be further improvements, but the major\n  work is done. This is probably the most user visible enhancement in this\n  release.\n* A preliminary version of the proposed Array-API is provided. This is a step\n  in creating a standard collection of functions that can be used across\n  applications such as CuPy and JAX.\n* NumPy now has a DLPack backend. DLPack provides a common interchange format\n  for array (tensor) data.\n* New methods for ``quantile``, ``percentile``, and related functions. The new\n  methods provide a complete set of the methods commonly found in the\n  literature.\n* A new configurable allocator for use by downstream projects.\n* The universal functions have been refactored to implement most of\n  :ref:`NEP 43 <NEP43>`.  This also unlocks the ability to experiment with the\n  future DType API.\n\nThese are in addition to the ongoing work to provide SIMD support for commonly\nused functions, improvements to F2PY, and better documentation.\n\nThe Python versions supported in this release are 3.8-3.10, Python 3.7 has been\ndropped. Note that 32 bit wheels are only provided for Python 3.8 and 3.9 on\nWindows, all other wheels are 64 bits on account of Ubuntu, Fedora, and other\nLinux distributions dropping 32 bit support. All 64 bit wheels are also linked\nwith 64 bit integer OpenBLAS, which should fix the occasional problems\nencountered by folks using truly huge arrays.\n\n\nExpired deprecations\n====================\n\nDeprecated numeric style dtype strings have been removed\n--------------------------------------------------------\nUsing the strings ``\"Bytes0\"``, ``\"Datetime64\"``, ``\"Str0\"``, ``\"Uint32\"``,\nand ``\"Uint64\"`` as a dtype will now raise a ``TypeError``.\n\n(`gh-19539 <https://github.com/numpy/numpy/pull/19539>`__)\n\nExpired deprecations for ``loads``, ``ndfromtxt``, and ``mafromtxt`` in npyio\n-----------------------------------------------------------------------------\n``numpy.loads`` was deprecated in v1.15, with the recommendation that users use\n``pickle.loads`` instead.  ``ndfromtxt`` and ``mafromtxt`` were both deprecated\nin v1.17 - users should use ``numpy.genfromtxt`` instead with the appropriate\nvalue for the ``usemask`` parameter.\n\n(`gh-19615 <https://github.com/numpy/numpy/pull/19615>`__)\n\n\nDeprecations\n============\n\nUse delimiter rather than delimitor as kwarg in mrecords\n--------------------------------------------------------\nThe misspelled keyword argument ``delimitor`` of\n``numpy.ma.mrecords.fromtextfile()`` has been changed to ``delimiter``, using\nit will emit a deprecation warning.\n\n(`gh-19921 <https://github.com/numpy/numpy/pull/19921>`__)\n\nPassing boolean ``kth`` values to (arg-)partition has been deprecated\n---------------------------------------------------------------------\n``numpy.partition`` and ``numpy.argpartition`` would previously accept boolean\nvalues for the ``kth`` parameter, which would subsequently be converted into\nintegers. This behavior has now been deprecated.\n\n(`gh-20000 <https://github.com/numpy/numpy/pull/20000>`__)\n\nThe ``np.MachAr`` class has been deprecated\n-------------------------------------------\nThe ``numpy.MachAr`` class and ``finfo.machar <numpy.finfo>`` attribute have\nbeen deprecated. Users are encouraged to access the property if interest\ndirectly from the corresponding ``numpy.finfo`` attribute.\n\n(`gh-20201 <https://github.com/numpy/numpy/pull/20201>`__)\n\n\nCompatibility notes\n===================\n\nDistutils forces strict floating point model on clang\n-----------------------------------------------------\nNumPy now sets the ``-ftrapping-math`` option on clang to enforce correct\nfloating point error handling for universal functions.  Clang defaults to\nnon-IEEE and C99 conform behaviour otherwise.  This change (using the\nequivalent but newer ``-ffp-exception-behavior=strict``) was attempted in NumPy\n1.21, but was effectively never used.\n\n(`gh-19479 <https://github.com/numpy/numpy/pull/19479>`__)\n\nRemoved floor division support for complex types\n------------------------------------------------\nFloor division of complex types will now result in a ``TypeError``\n\n.. code-block:: python\n\n    >>> a = np.arange(10) + 1j* np.arange(10)\n    >>> a // 1\n    TypeError: ufunc 'floor_divide' not supported for the input types...\n\n(`gh-19135 <https://github.com/numpy/numpy/pull/19135>`__)\n\n``numpy.vectorize`` functions now produce the same output class as the base function\n------------------------------------------------------------------------------------\nWhen a function that respects ``numpy.ndarray`` subclasses is vectorized using\n``numpy.vectorize``, the vectorized function will now be subclass-safe also for\ncases that a signature is given (i.e., when creating a ``gufunc``): the output\nclass will be the same as that returned by the first call to the underlying\nfunction.\n\n(`gh-19356 <https://github.com/numpy/numpy/pull/19356>`__)\n\nPython 3.7 is no longer supported\n---------------------------------\nPython support has been dropped. This is rather strict, there are changes that\nrequire Python >= 3.8.\n\n(`gh-19665 <https://github.com/numpy/numpy/pull/19665>`__)\n\nstr/repr of complex dtypes now include space after punctuation\n--------------------------------------------------------------\nThe repr of ``np.dtype({\"names\": [\"a\"], \"formats\": [int], \"offsets\": [2]})`` is\nnow ``dtype({'names': ['a'], 'formats': ['<i8'], 'offsets': [2], 'itemsize':\n10})``, whereas spaces where previously omitted after colons and between\nfields.\n\nThe old behavior can be restored via ``np.set_printoptions(legacy=\"1.21\")``.\n\n(`gh-19687 <https://github.com/numpy/numpy/pull/19687>`__)\n\nCorrected ``advance`` in ``PCG64DSXM`` and ``PCG64``\n----------------------------------------------------\nFixed a bug in the ``advance`` method of ``PCG64DSXM`` and ``PCG64``. The bug\nonly affects results when the step was larger than :math:`2^{64}` on platforms\nthat do not support 128-bit integers(e.g., Windows and 32-bit Linux).\n\n(`gh-20049 <https://github.com/numpy/numpy/pull/20049>`__)\n\nChange in generation of random 32 bit floating point variates\n-------------------------------------------------------------\nThere was bug in the generation of 32 bit floating point values from the\nuniform distribution that would result in the least significant bit of the\nrandom variate always being 0.  This has been fixed.\n\nThis change affects the variates produced by the ``random.Generator`` methods\n``random``, ``standard_normal``, ``standard_exponential``, and\n``standard_gamma``, but only when the dtype is specified as ``numpy.float32``.\n\n(`gh-20314 <https://github.com/numpy/numpy/pull/20314>`__)\n\n\nC API changes\n=============\n\nMasked inner-loops cannot be customized anymore\n-----------------------------------------------\nThe masked inner-loop selector is now never used.  A warning will be given in\nthe unlikely event that it was customized.\n\nWe do not expect that any code uses this.  If you do use it, you must unset the\nselector on newer NumPy version.  Please also contact the NumPy developers, we\ndo anticipate providing a new, more specific, mechanism.\n\nThe customization was part of a never-implemented feature to allow for faster\nmasked operations.\n\n(`gh-19259 <https://github.com/numpy/numpy/pull/19259>`__)\n\nExperimental exposure of future DType and UFunc API\n---------------------------------------------------\nThe new header ``experimental_public_dtype_api.h`` allows to experiment with\nfuture API for improved universal function and especially user DType support.\nAt this time it is advisable to experiment using the development version\nof NumPy since some changes are expected and new features will be unlocked.\n\n(`gh-19919 <https://github.com/numpy/numpy/pull/19919>`__)\n\n\nNew Features\n============\n\nNEP 49 configurable allocators\n------------------------------\nAs detailed in `NEP 49`_, the function used for allocation of the data segment\nof a ndarray can be changed. The policy can be set globally or in a context.\nFor more information see the NEP and the :ref:`data_memory` reference docs.\nAlso add a ``NUMPY_WARN_IF_NO_MEM_POLICY`` override to warn on dangerous use\nof transfering ownership by setting ``NPY_ARRAY_OWNDATA``.\n\n.. _`NEP 49`: https://numpy.org/neps/nep-0049.html\n\n(`gh-17582 <https://github.com/numpy/numpy/pull/17582>`__)\n\nImplementation of the NEP 47 (adopting the array API standard)\n--------------------------------------------------------------\nAn initial implementation of `NEP 47`_ (adoption the array API standard) has\nbeen added as ``numpy.array_api``. The implementation is experimental and will\nissue a UserWarning on import, as the `array API standard\n<https://data-apis.org/array-api/latest/index.html>`_ is still in draft state.\n``numpy.array_api`` is a conforming implementation of the array API standard,\nwhich is also minimal, meaning that only those functions and behaviors that are\nrequired by the standard are implemented (see the NEP for more info).\nLibraries wishing to make use of the array API standard are encouraged to use\n``numpy.array_api`` to check that they are only using functionality that is\nguaranteed to be present in standard conforming implementations.\n\n.. _`NEP 47`: https://numpy.org/neps/nep-0047-array-api-standard.html\n\n(`gh-18585 <https://github.com/numpy/numpy/pull/18585>`__)\n\nGenerate C/C++ API reference documentation from comments blocks is now possible\n-------------------------------------------------------------------------------\nThis feature depends on Doxygen_ in the generation process and on Breathe_ to\nintegrate it with Sphinx.\n\n.. _`Doxygen`: https://www.doxygen.nl/index.html\n.. _`Breathe`: https://breathe.readthedocs.io/en/latest/\n\n(`gh-18884 <https://github.com/numpy/numpy/pull/18884>`__)\n\nAssign the platform-specific ``c_intp`` precision via a mypy plugin\n-------------------------------------------------------------------\nThe mypy_ plugin, introduced in `numpy/numpy17843`_, has again been expanded:\nthe plugin now is now responsible for setting the platform-specific precision\nof ``numpy.ctypeslib.c_intp``, the latter being used as data type for various\n``numpy.ndarray.ctypes`` attributes.\n\nWithout the plugin, aforementioned type will default to ``ctypes.c_int64``.\n\nTo enable the plugin, one must add it to their mypy `configuration file`_:\n\n.. code-block:: ini\n\n    [mypy]\n    plugins = numpy.typing.mypy_plugin\n\n\n.. _mypy: http://mypy-lang.org/\n.. _configuration file: https://mypy.readthedocs.io/en/stable/config_file.html\n.. _`numpy/numpy17843`: https://github.com/numpy/numpy/pull/17843\n\n(`gh-19062 <https://github.com/numpy/numpy/pull/19062>`__)\n\nAdd NEP 47-compatible dlpack support\n------------------------------------\nAdd a ``ndarray.__dlpack__()`` method which returns a ``dlpack`` C structure\nwrapped in a ``PyCapsule``. Also add a ``np._from_dlpack(obj)`` function, where\n``obj`` supports ``__dlpack__()``, and returns an ``ndarray``.\n\n(`gh-19083 <https://github.com/numpy/numpy/pull/19083>`__)\n\n``keepdims`` optional argument added to ``numpy.argmin``, ``numpy.argmax``\n--------------------------------------------------------------------------\n``keepdims`` argument is added to ``numpy.argmin``, ``numpy.argmax``.  If set\nto ``True``, the axes which are reduced are left in the result as dimensions\nwith size one.  The resulting array has the same number of dimensions and will\nbroadcast with the input array.\n\n(`gh-19211 <https://github.com/numpy/numpy/pull/19211>`__)\n\n``bit_count`` to compute the number of 1-bits in an integer\n-----------------------------------------------------------\nComputes the number of 1-bits in the absolute value of the input.\nThis works on all the numpy integer types. Analogous to the builtin\n``int.bit_count`` or ``popcount`` in C++.\n\n.. code-block:: python\n\n    >>> np.uint32(1023).bit_count()\n    10\n    >>> np.int32(-127).bit_count()\n    7\n\n(`gh-19355 <https://github.com/numpy/numpy/pull/19355>`__)\n\nThe ``ndim`` and ``axis`` attributes have been added to ``numpy.AxisError``\n---------------------------------------------------------------------------\nThe ``ndim`` and ``axis`` parameters are now also stored as attributes\nwithin each ``numpy.AxisError`` instance.\n\n(`gh-19459 <https://github.com/numpy/numpy/pull/19459>`__)\n\nPreliminary support for ``windows/arm64`` target\n------------------------------------------------\n``numpy`` added support for windows/arm64 target. Please note ``OpenBLAS``\nsupport is not yet available for windows/arm64 target.\n\n(`gh-19513 <https://github.com/numpy/numpy/pull/19513>`__)\n\nAdded support for LoongArch\n---------------------------\nLoongArch is a new instruction set, numpy compilation failure on LoongArch\narchitecture, so add the commit.\n\n(`gh-19527 <https://github.com/numpy/numpy/pull/19527>`__)\n\nA ``.clang-format`` file has been added\n---------------------------------------\nClang-format is a C/C++ code formatter, together with the added\n``.clang-format`` file, it produces code close enough to the NumPy\nC_STYLE_GUIDE for general use. Clang-format version 12+ is required due to the\nuse of several new features, it is available in Fedora 34 and Ubuntu Focal\namong other distributions.\n\n(`gh-19754 <https://github.com/numpy/numpy/pull/19754>`__)\n\n``is_integer`` is now available to ``numpy.floating`` and ``numpy.integer``\n---------------------------------------------------------------------------\nBased on its counterpart in Python ``float`` and ``int``, the numpy floating\npoint and integer types now support ``float.is_integer``. Returns ``True`` if\nthe number is finite with integral value, and ``False`` otherwise.\n\n.. code-block:: python\n\n    >>> np.float32(-2.0).is_integer()\n    True\n    >>> np.float64(3.2).is_integer()\n    False\n    >>> np.int32(-2).is_integer()\n    True\n\n(`gh-19803 <https://github.com/numpy/numpy/pull/19803>`__)\n\nSymbolic parser for Fortran dimension specifications\n----------------------------------------------------\nA new symbolic parser has been added to f2py in order to correctly parse\ndimension specifications. The parser is the basis for future improvements and\nprovides compatibility with Draft Fortran 202x.\n\n(`gh-19805 <https://github.com/numpy/numpy/pull/19805>`__)\n\n``ndarray``, ``dtype`` and ``number`` are now runtime-subscriptable\n-------------------------------------------------------------------\nMimicking :pep:`585`, the ``numpy.ndarray``, ``numpy.dtype`` and\n``numpy.number`` classes are now subscriptable for python 3.9 and later.\nConsequently, expressions that were previously only allowed in .pyi stub files\nor with the help of ``from __future__ import annotations`` are now also legal\nduring runtime.\n\n.. code-block:: python\n\n    >>> import numpy as np\n    >>> from typing import Any\n\n    >>> np.ndarray[Any, np.dtype[np.float64]]\n    numpy.ndarray[typing.Any, numpy.dtype[numpy.float64]]\n\n(`gh-19879 <https://github.com/numpy/numpy/pull/19879>`__)\n\n\nImprovements\n============\n\n``ctypeslib.load_library`` can now take any path-like object\n------------------------------------------------------------\nAll parameters in the can now take any :term:`python:path-like object`.\nThis includes the likes of strings, bytes and objects implementing the\n:meth:`__fspath__<os.PathLike.__fspath__>` protocol.\n\n(`gh-17530 <https://github.com/numpy/numpy/pull/17530>`__)\n\nAdd ``smallest_normal`` and ``smallest_subnormal`` attributes to ``finfo``\n--------------------------------------------------------------------------\nThe attributes ``smallest_normal`` and ``smallest_subnormal`` are available as\nan extension of ``finfo`` class for any floating-point data type. To use these\nnew attributes, write ``np.finfo(np.float64).smallest_normal`` or\n``np.finfo(np.float64).smallest_subnormal``.\n\n(`gh-18536 <https://github.com/numpy/numpy/pull/18536>`__)\n\n``numpy.linalg.qr`` accepts stacked matrices as inputs\n------------------------------------------------------\n``numpy.linalg.qr`` is able to produce results for stacked matrices as inputs.\nMoreover, the implementation of QR decomposition has been shifted to C from\nPython.\n\n(`gh-19151 <https://github.com/numpy/numpy/pull/19151>`__)\n\n``numpy.fromregex`` now accepts ``os.PathLike`` implementations\n---------------------------------------------------------------\n``numpy.fromregex`` now accepts objects implementing the ``__fspath__<os.PathLike>``\nprotocol, *e.g.* ``pathlib.Path``.\n\n(`gh-19680 <https://github.com/numpy/numpy/pull/19680>`__)\n\nAdd new methods for ``quantile`` and ``percentile``\n---------------------------------------------------\n``quantile`` and ``percentile`` now have have a ``method=`` keyword argument\nsupporting 13 different methods.  This replaces the ``interpolation=`` keyword\nargument.\n\nThe methods are now aligned with nine methods which can be found in scientific\nliterature and the R language.  The remaining methods are the previous\ndiscontinuous variations of the default \"linear\" one.\n\nPlease see the documentation of ``numpy.percentile`` for more information.\n\n(`gh-19857 <https://github.com/numpy/numpy/pull/19857>`__)\n\nMissing parameters have been added to the ``nan<x>`` functions\n--------------------------------------------------------------\nA number of the ``nan<x>`` functions previously lacked parameters that were\npresent in their ``<x>``-based counterpart, *e.g.* the ``where`` parameter was\npresent in ``numpy.mean`` but absent from ``numpy.nanmean``.\n\nThe following parameters have now been added to the ``nan<x>`` functions:\n\n* nanmin: ``initial`` & ``where``\n* nanmax: ``initial`` & ``where``\n* nanargmin: ``keepdims`` & ``out``\n* nanargmax: ``keepdims`` & ``out``\n* nansum: ``initial`` & ``where``\n* nanprod: ``initial`` & ``where``\n* nanmean: ``where``\n* nanvar: ``where``\n* nanstd: ``where``\n\n(`gh-20027 <https://github.com/numpy/numpy/pull/20027>`__)\n\nAnnotating the main Numpy namespace\n-----------------------------------\nStarting from the 1.20 release, PEP 484 type annotations have been included for\nparts of the NumPy library; annotating the remaining functions being a work in\nprogress. With the release of 1.22 this process has been completed for the main\nNumPy namespace, which is now fully annotated.\n\nBesides the main namespace, a limited number of sub-packages contain\nannotations as well. This includes, among others, ``numpy.testing``,\n``numpy.linalg`` and ``numpy.random`` (available since 1.21).\n\n(`gh-20217 <https://github.com/numpy/numpy/pull/20217>`__)\n\nVectorize umath module using AVX-512\n-------------------------------------\nBy leveraging Intel Short Vector Math Library (SVML), 18 umath functions\n(``exp2``, ``log2``, ``log10``, ``expm1``, ``log1p``, ``cbrt``, ``sin``,\n``cos``, ``tan``, ``arcsin``, ``arccos``, ``arctan``, ``sinh``, ``cosh``,\n``tanh``, ``arcsinh``, ``arccosh``, ``arctanh``) are vectorized using AVX-512\ninstruction set for both single and double precision implementations.  This\nchange is currently enabled only for Linux users and on processors with AVX-512\ninstruction set.  It provides an average speed up of 32x and 14x for single and\ndouble precision functions respectively.\n\n(`gh-19478 <https://github.com/numpy/numpy/pull/19478>`__)\n\nOpenBLAS v0.3.17\n----------------\nUpdate the OpenBLAS used in testing and in wheels to v0.3.17\n\n(`gh-19462 <https://github.com/numpy/numpy/pull/19462>`__)\n\n\nChecksums\n=========\n\nMD5\n---\n::\n\n    66757b963ad5835038b9a2a9df852c84  numpy-1.22.0-cp310-cp310-macosx_10_9_universal2.whl\n    86b7f3a94c09dbd6869614c4d7f9ba5e  numpy-1.22.0-cp310-cp310-macosx_10_9_x86_64.whl\n    5184db17d8e5e6ecdc53e2f0a6964c35  numpy-1.22.0-cp310-cp310-macosx_11_0_arm64.whl\n    6643e9a076cce736cfbe15face4db9db  numpy-1.22.0-cp310-cp310-manylinux_2_17_aarch64.manylinux2014_aarch64.whl\n    6efef45bf63594703c094b2ad729e648  numpy-1.22.0-cp310-cp310-manylinux_2_17_x86_64.manylinux2014_x86_64.whl\n    7a1a21bb0958a3eb920deeef9e745935  numpy-1.22.0-cp310-cp310-win_amd64.whl\n    45241fb5f31ea46e2b6f1321a63c8e1c  numpy-1.22.0-cp38-cp38-macosx_10_9_universal2.whl\n    472f24a5d35116634fcc57e9bda899bc  numpy-1.22.0-cp38-cp38-macosx_10_9_x86_64.whl\n    6c15cf7847b20101ae281ade6121b79e  numpy-1.22.0-cp38-cp38-macosx_11_0_arm64.whl\n    313f0fd99a899a7465511c1418e1031f  numpy-1.22.0-cp38-cp38-manylinux_2_17_aarch64.manylinux2014_aarch64.whl\n    9ae6ecde0cbeadd2a9d7b8ae54285863  numpy-1.22.0-cp38-cp38-manylinux_2_17_x86_64.manylinux2014_x86_64.whl\n    0f31a7b9e128b0cdafecf98cf1301fc0  numpy-1.22.0-cp38-cp38-win32.whl\n    f4b45579cf532ea632b890b1df387081  numpy-1.22.0-cp38-cp38-win_amd64.whl\n    2cb27112b11c16f700e6019f5fd36408  numpy-1.22.0-cp39-cp39-macosx_10_9_universal2.whl\n    4554a5797a4cb787b5169a8f5482fb95  numpy-1.22.0-cp39-cp39-macosx_10_9_x86_64.whl\n    3780decd94837da6f0816f2feaace9c2  numpy-1.22.0-cp39-cp39-macosx_11_0_arm64.whl\n    6e519dd5205510dfebcadc6f7fdf9738  numpy-1.22.0-cp39-cp39-manylinux_2_17_aarch64.manylinux2014_aarch64.whl\n    89d455bf290f459a70c57620f02d5b69  numpy-1.22.0-cp39-cp39-manylinux_2_17_x86_64.manylinux2014_x86_64.whl\n    6425f8d7dc779a54b8074e198cea43c9  numpy-1.22.0-cp39-cp39-win32.whl\n    1b5c670328146975b21b54fa5ef8ec4c  numpy-1.22.0-cp39-cp39-win_amd64.whl\n    05d842127ca85cca12fed3a26b0f5177  numpy-1.22.0-pp38-pypy38_pp73-manylinux_2_17_x86_64.manylinux2014_x86_64.whl\n    ab751b8d4195f91ae61a402184d16d18  numpy-1.22.0.tar.gz\n    252de134862a27bd66705d29622edbfe  numpy-1.22.0.zip\n\nSHA256\n------\n::\n\n    3d22662b4b10112c545c91a0741f2436f8ca979ab3d69d03d19322aa970f9695  numpy-1.22.0-cp310-cp310-macosx_10_9_universal2.whl\n    11a1f3816ea82eed4178102c56281782690ab5993251fdfd75039aad4d20385f  numpy-1.22.0-cp310-cp310-macosx_10_9_x86_64.whl\n    5dc65644f75a4c2970f21394ad8bea1a844104f0fe01f278631be1c7eae27226  numpy-1.22.0-cp310-cp310-macosx_11_0_arm64.whl\n    42c16cec1c8cf2728f1d539bd55aaa9d6bb48a7de2f41eb944697293ef65a559  numpy-1.22.0-cp310-cp310-manylinux_2_17_aarch64.manylinux2014_aarch64.whl\n    a97e82c39d9856fe7d4f9b86d8a1e66eff99cf3a8b7ba48202f659703d27c46f  numpy-1.22.0-cp310-cp310-manylinux_2_17_x86_64.manylinux2014_x86_64.whl\n    e41e8951749c4b5c9a2dc5fdbc1a4eec6ab2a140fdae9b460b0f557eed870f4d  numpy-1.22.0-cp310-cp310-win_amd64.whl\n    bece0a4a49e60e472a6d1f70ac6cdea00f9ab80ff01132f96bd970cdd8a9e5a9  numpy-1.22.0-cp38-cp38-macosx_10_9_universal2.whl\n    818b9be7900e8dc23e013a92779135623476f44a0de58b40c32a15368c01d471  numpy-1.22.0-cp38-cp38-macosx_10_9_x86_64.whl\n    47ee7a839f5885bc0c63a74aabb91f6f40d7d7b639253768c4199b37aede7982  numpy-1.22.0-cp38-cp38-macosx_11_0_arm64.whl\n    a024181d7aef0004d76fb3bce2a4c9f2e67a609a9e2a6ff2571d30e9976aa383  numpy-1.22.0-cp38-cp38-manylinux_2_17_aarch64.manylinux2014_aarch64.whl\n    f71d57cc8645f14816ae249407d309be250ad8de93ef61d9709b45a0ddf4050c  numpy-1.22.0-cp38-cp38-manylinux_2_17_x86_64.manylinux2014_x86_64.whl\n    283d9de87c0133ef98f93dfc09fad3fb382f2a15580de75c02b5bb36a5a159a5  numpy-1.22.0-cp38-cp38-win32.whl\n    2762331de395739c91f1abb88041f94a080cb1143aeec791b3b223976228af3f  numpy-1.22.0-cp38-cp38-win_amd64.whl\n    76ba7c40e80f9dc815c5e896330700fd6e20814e69da9c1267d65a4d051080f1  numpy-1.22.0-cp39-cp39-macosx_10_9_universal2.whl\n    0cfe07133fd00b27edee5e6385e333e9eeb010607e8a46e1cd673f05f8596595  numpy-1.22.0-cp39-cp39-macosx_10_9_x86_64.whl\n    6ed0d073a9c54ac40c41a9c2d53fcc3d4d4ed607670b9e7b0de1ba13b4cbfe6f  numpy-1.22.0-cp39-cp39-macosx_11_0_arm64.whl\n    41388e32e40b41dd56eb37fcaa7488b2b47b0adf77c66154d6b89622c110dfe9  numpy-1.22.0-cp39-cp39-manylinux_2_17_aarch64.manylinux2014_aarch64.whl\n    b55b953a1bdb465f4dc181758570d321db4ac23005f90ffd2b434cc6609a63dd  numpy-1.22.0-cp39-cp39-manylinux_2_17_x86_64.manylinux2014_x86_64.whl\n    5a311ee4d983c487a0ab546708edbdd759393a3dc9cd30305170149fedd23c88  numpy-1.22.0-cp39-cp39-win32.whl\n    a97a954a8c2f046d3817c2bce16e3c7e9a9c2afffaf0400f5c16df5172a67c9c  numpy-1.22.0-cp39-cp39-win_amd64.whl\n    bb02929b0d6bfab4c48a79bd805bd7419114606947ec8284476167415171f55b  numpy-1.22.0-pp38-pypy38_pp73-manylinux_2_17_x86_64.manylinux2014_x86_64.whl\n    f2be14ba396780a6f662b8ba1a24466c9cf18a6a386174f614668e58387a13d7  numpy-1.22.0.tar.gz\n    a955e4128ac36797aaffd49ab44ec74a71c11d6938df83b1285492d277db5397  numpy-1.22.0.zip\n\n\n.. currentmodule:: numpy\n\n==========================\n", "1.19.3": "==========================\n\nNumPy 1.19.3 is a small maintenace release with two major improvements:\n\n- Python 3.9 binary wheels on all supported platforms.\n- OpenBLAS fixes for Windows 10 version 2004 fmod bug.\n\nThis release supports Python 3.6-3.9 and is linked with OpenBLAS 3.7 to avoid\nsome of the fmod problems on Windows 10 version 2004. Microsoft is aware of the\nproblem and users should upgrade when the fix becomes available, the fix here\nis limited in scope.\n\nContributors\n============\n\nA total of 8 people contributed to this release.  People with a \"+\" by their\nnames contributed a patch for the first time.\n\n* Charles Harris\n* Chris Brown +\n* Daniel Vanzo +\n* E. Madison Bray +\n* Hugo van Kemenade +\n* Ralf Gommers\n* Sebastian Berg\n* danbeibei +\n\nPull requests merged\n====================\n\nA total of 10 pull requests were merged for this release.\n\n* `17298 <https://github.com/numpy/numpy/pull/17298>`__: BLD: set upper versions for build dependencies\n* `17336 <https://github.com/numpy/numpy/pull/17336>`__: BUG: Set deprecated fields to null in PyArray_InitArrFuncs\n* `17446 <https://github.com/numpy/numpy/pull/17446>`__: ENH: Warn on unsupported Python 3.10+\n* `17450 <https://github.com/numpy/numpy/pull/17450>`__: MAINT: Update test_requirements.txt.\n* `17522 <https://github.com/numpy/numpy/pull/17522>`__: ENH: Support for the NVIDIA HPC SDK nvfortran compiler\n* `17568 <https://github.com/numpy/numpy/pull/17568>`__: BUG: Cygwin Workaround for #14787 on affected platforms\n* `17647 <https://github.com/numpy/numpy/pull/17647>`__: BUG: Fix memory leak of buffer-info cache due to relaxed strides\n* `17652 <https://github.com/numpy/numpy/pull/17652>`__: MAINT: Backport openblas_support from master.\n* `17653 <https://github.com/numpy/numpy/pull/17653>`__: TST: Add Python 3.9 to the CI testing on Windows, Mac.\n* `17660 <https://github.com/numpy/numpy/pull/17660>`__: TST: Simplify source path names in test_extending.\n\nChecksums\n=========\n\nMD5\n---\n::\n\n    e5c6c782b2f112c32dcc38242521ec83  numpy-1.19.3-cp36-cp36m-macosx_10_9_x86_64.whl\n    02323e4a20e14e6f7cded1c55f6a0afe  numpy-1.19.3-cp36-cp36m-manylinux1_i686.whl\n    95f19f0b6c60a755a8454f22eb15f4d6  numpy-1.19.3-cp36-cp36m-manylinux1_x86_64.whl\n    e66cf5ea007a9b567be2b1a901b3d2e0  numpy-1.19.3-cp36-cp36m-manylinux2010_i686.whl\n    8c7d422f147392bd31f9e5bfc41a170e  numpy-1.19.3-cp36-cp36m-manylinux2010_x86_64.whl\n    da02c95dcf0acf7688aebaba7ba2750d  numpy-1.19.3-cp36-cp36m-manylinux2014_aarch64.whl\n    96e6ec05aca18516c8a5961c17a0cac6  numpy-1.19.3-cp36-cp36m-win32.whl\n    5aa36a829a7ce0a89e6fea502d4fa9ea  numpy-1.19.3-cp36-cp36m-win_amd64.whl\n    9143b46601bc0457dd42795a71ccd2f1  numpy-1.19.3-cp37-cp37m-macosx_10_9_x86_64.whl\n    ebe09a5e206db0de65154ef75377f963  numpy-1.19.3-cp37-cp37m-manylinux1_i686.whl\n    96008f5c61368d4cd967ecd474525df6  numpy-1.19.3-cp37-cp37m-manylinux1_x86_64.whl\n    e61aaf0c971b667c5fed8b5de3773c6d  numpy-1.19.3-cp37-cp37m-manylinux2010_i686.whl\n    74a9f9dab6f00bcf56096eaa910c48b9  numpy-1.19.3-cp37-cp37m-manylinux2010_x86_64.whl\n    18d911f7f462ee98333de9579adde331  numpy-1.19.3-cp37-cp37m-manylinux2014_aarch64.whl\n    f29846178b82bd4e8db1685a6e911336  numpy-1.19.3-cp37-cp37m-win32.whl\n    d372be03d9e57e5e0e1372bf39391241  numpy-1.19.3-cp37-cp37m-win_amd64.whl\n    c64b6538e07bca9d84287eebb3f3a01b  numpy-1.19.3-cp38-cp38-macosx_10_9_x86_64.whl\n    8ac57941de395be58376611b211ea571  numpy-1.19.3-cp38-cp38-manylinux1_i686.whl\n    81cc1993ac8da61fea677a7eb49989e8  numpy-1.19.3-cp38-cp38-manylinux1_x86_64.whl\n    9b2b05db89068d1f3f32a231f3953355  numpy-1.19.3-cp38-cp38-manylinux2010_i686.whl\n    d26cfa5ad6f4aa6beb42246efc45f565  numpy-1.19.3-cp38-cp38-manylinux2010_x86_64.whl\n    969a13b40fceb950021e297d5427f329  numpy-1.19.3-cp38-cp38-manylinux2014_aarch64.whl\n    f978618640860e72b91c522f4e4085af  numpy-1.19.3-cp38-cp38-win32.whl\n    af140a06f216c4100dc93c4135003d10  numpy-1.19.3-cp38-cp38-win_amd64.whl\n    fda3cdf138516040cad3de66496cf670  numpy-1.19.3-cp39-cp39-macosx_10_9_x86_64.whl\n    f683469f18abc8c84aa831d9e78f4eb6  numpy-1.19.3-cp39-cp39-manylinux1_i686.whl\n    26414c3db751ca4735f744b239bf9703  numpy-1.19.3-cp39-cp39-manylinux1_x86_64.whl\n    3164ede05e3a5d28dd8bd66aee56928c  numpy-1.19.3-cp39-cp39-manylinux2010_i686.whl\n    fc0b0c73c5508247d21beb42cf3fff66  numpy-1.19.3-cp39-cp39-manylinux2010_x86_64.whl\n    75097b6e154469c63c50c8f7eaf52a89  numpy-1.19.3-cp39-cp39-manylinux2014_aarch64.whl\n    cd4363bde576c997bf737f420a85683a  numpy-1.19.3-cp39-cp39-win32.whl\n    54fa685b3d30585763f59a7b2be7279b  numpy-1.19.3-cp39-cp39-win_amd64.whl\n    ed5bd59a064fe5b95699c222dc7a4638  numpy-1.19.3-pp36-pypy36_pp73-manylinux2010_x86_64.whl\n    b2d13ca1b8ff89a9289174a86b835165  numpy-1.19.3.tar.gz\n    7f014f9964987b59083c8dc4d158d45a  numpy-1.19.3.zip\n\nSHA256\n------\n::\n\n    942d2cdcb362739908c26ce8dd88db6e139d3fa829dd7452dd9ff02cba6b58b2  numpy-1.19.3-cp36-cp36m-macosx_10_9_x86_64.whl\n    efd656893171bbf1331beca4ec9f2e74358fc732a2084f664fd149cc4b3441d2  numpy-1.19.3-cp36-cp36m-manylinux1_i686.whl\n    1a307bdd3dd444b1d0daa356b5f4c7de2e24d63bdc33ea13ff718b8ec4c6a268  numpy-1.19.3-cp36-cp36m-manylinux1_x86_64.whl\n    9d08d84bb4128abb9fbd9f073e5c69f70e5dab991a9c42e5b4081ea5b01b5db0  numpy-1.19.3-cp36-cp36m-manylinux2010_i686.whl\n    7197ee0a25629ed782c7bd01871ee40702ffeef35bc48004bc2fdcc71e29ba9d  numpy-1.19.3-cp36-cp36m-manylinux2010_x86_64.whl\n    8edc4d687a74d0a5f8b9b26532e860f4f85f56c400b3a98899fc44acb5e27add  numpy-1.19.3-cp36-cp36m-manylinux2014_aarch64.whl\n    522053b731e11329dd52d258ddf7de5288cae7418b55e4b7d32f0b7e31787e9d  numpy-1.19.3-cp36-cp36m-win32.whl\n    eefc13863bf01583a85e8c1121a901cc7cb8f059b960c4eba30901e2e6aba95f  numpy-1.19.3-cp36-cp36m-win_amd64.whl\n    6ff88bcf1872b79002569c63fe26cd2cda614e573c553c4d5b814fb5eb3d2822  numpy-1.19.3-cp37-cp37m-macosx_10_9_x86_64.whl\n    e080087148fd70469aade2abfeadee194357defd759f9b59b349c6192aba994c  numpy-1.19.3-cp37-cp37m-manylinux1_i686.whl\n    50f68ebc439821b826823a8da6caa79cd080dee2a6d5ab9f1163465a060495ed  numpy-1.19.3-cp37-cp37m-manylinux1_x86_64.whl\n    b9074d062d30c2779d8af587924f178a539edde5285d961d2dfbecbac9c4c931  numpy-1.19.3-cp37-cp37m-manylinux2010_i686.whl\n    463792a249a81b9eb2b63676347f996d3f0082c2666fd0604f4180d2e5445996  numpy-1.19.3-cp37-cp37m-manylinux2010_x86_64.whl\n    ea6171d2d8d648dee717457d0f75db49ad8c2f13100680e284d7becf3dc311a6  numpy-1.19.3-cp37-cp37m-manylinux2014_aarch64.whl\n    0ee77786eebbfa37f2141fd106b549d37c89207a0d01d8852fde1c82e9bfc0e7  numpy-1.19.3-cp37-cp37m-win32.whl\n    271139653e8b7a046d11a78c0d33bafbddd5c443a5b9119618d0652a4eb3a09f  numpy-1.19.3-cp37-cp37m-win_amd64.whl\n    e983cbabe10a8989333684c98fdc5dd2f28b236216981e0c26ed359aaa676772  numpy-1.19.3-cp38-cp38-macosx_10_9_x86_64.whl\n    d78294f1c20f366cde8a75167f822538a7252b6e8b9d6dbfb3bdab34e7c1929e  numpy-1.19.3-cp38-cp38-manylinux1_i686.whl\n    199bebc296bd8a5fc31c16f256ac873dd4d5b4928dfd50e6c4995570fc71a8f3  numpy-1.19.3-cp38-cp38-manylinux1_x86_64.whl\n    dffed17848e8b968d8d3692604e61881aa6ef1f8074c99e81647ac84f6038535  numpy-1.19.3-cp38-cp38-manylinux2010_i686.whl\n    5ea4401ada0d3988c263df85feb33818dc995abc85b8125f6ccb762009e7bc68  numpy-1.19.3-cp38-cp38-manylinux2010_x86_64.whl\n    604d2e5a31482a3ad2c88206efd43d6fcf666ada1f3188fd779b4917e49b7a98  numpy-1.19.3-cp38-cp38-manylinux2014_aarch64.whl\n    a2daea1cba83210c620e359de2861316f49cc7aea8e9a6979d6cb2ddab6dda8c  numpy-1.19.3-cp38-cp38-win32.whl\n    dfdc8b53aa9838b9d44ed785431ca47aa3efaa51d0d5dd9c412ab5247151a7c4  numpy-1.19.3-cp38-cp38-win_amd64.whl\n    9f7f56b5e85b08774939622b7d45a5d00ff511466522c44fc0756ac7692c00f2  numpy-1.19.3-cp39-cp39-macosx_10_9_x86_64.whl\n    8802d23e4895e0c65e418abe67cdf518aa5cbb976d97f42fd591f921d6dffad0  numpy-1.19.3-cp39-cp39-manylinux1_i686.whl\n    c4aa79993f5d856765819a3651117520e41ac3f89c3fc1cb6dee11aa562df6da  numpy-1.19.3-cp39-cp39-manylinux1_x86_64.whl\n    51e8d2ae7c7e985c7bebf218e56f72fa93c900ad0c8a7d9fbbbf362f45710f69  numpy-1.19.3-cp39-cp39-manylinux2010_i686.whl\n    50d3513469acf5b2c0406e822d3f314d7ac5788c2b438c24e5dd54d5a81ef522  numpy-1.19.3-cp39-cp39-manylinux2010_x86_64.whl\n    741d95eb2b505bb7a99fbf4be05fa69f466e240c2b4f2d3ddead4f1b5f82a5a5  numpy-1.19.3-cp39-cp39-manylinux2014_aarch64.whl\n    1ea7e859f16e72ab81ef20aae69216cfea870676347510da9244805ff9670170  numpy-1.19.3-cp39-cp39-win32.whl\n    83af653bb92d1e248ccf5fdb05ccc934c14b936bcfe9b917dc180d3f00250ac6  numpy-1.19.3-cp39-cp39-win_amd64.whl\n    9a0669787ba8c9d3bb5de5d9429208882fb47764aa79123af25c5edc4f5966b9  numpy-1.19.3-pp36-pypy36_pp73-manylinux2010_x86_64.whl\n    9179d259a9bc53ed7b153d31fc3156d1ca560d61079f53191cf177c3efc4a498  numpy-1.19.3.tar.gz\n    35bf5316af8dc7c7db1ad45bec603e5fb28671beb98ebd1d65e8059efcfd3b72  numpy-1.19.3.zip\n\n\n.. currentmodule:: numpy\n\n==========================\n"}